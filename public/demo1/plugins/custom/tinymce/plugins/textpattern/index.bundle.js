/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/textpattern/index.js":
/*!***********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/textpattern/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Exports the \"textpattern\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/textpattern')\n//   ES2015:\n//     import 'tinymce/plugins/textpattern'\n__webpack_require__(/*! ./plugin.js */ \"./resources/assets/core/plugins/custom/tinymce/plugins/textpattern/plugin.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL3RleHRwYXR0ZXJuL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQSxtQkFBTyxDQUFDLGlHQUFELENBQVAiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL3RleHRwYXR0ZXJuL2luZGV4LmpzP2FmNjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRXhwb3J0cyB0aGUgXCJ0ZXh0cGF0dGVyblwiIHBsdWdpbiBmb3IgdXNhZ2Ugd2l0aCBtb2R1bGUgbG9hZGVyc1xyXG4vLyBVc2FnZTpcclxuLy8gICBDb21tb25KUzpcclxuLy8gICAgIHJlcXVpcmUoJ3RpbnltY2UvcGx1Z2lucy90ZXh0cGF0dGVybicpXHJcbi8vICAgRVMyMDE1OlxyXG4vLyAgICAgaW1wb3J0ICd0aW55bWNlL3BsdWdpbnMvdGV4dHBhdHRlcm4nXHJcbnJlcXVpcmUoJy4vcGx1Z2luLmpzJyk7Il0sIm5hbWVzIjpbInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/textpattern/index.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/textpattern/plugin.js":
/*!************************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/textpattern/plugin.js ***!
  \************************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var Cell = function Cell(initial) {\n    var value = initial;\n\n    var get = function get() {\n      return value;\n    };\n\n    var set = function set(v) {\n      value = v;\n    };\n\n    return {\n      get: get,\n      set: set\n    };\n  };\n\n  var global$5 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) {\n          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n      }\n\n      return t;\n    };\n\n    return _assign.apply(this, arguments);\n  };\n\n  function __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n        if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n        ar[i] = from[i];\n      }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n  }\n\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n\n  var isType = function isType(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n\n  var isString = isType('string');\n  var isObject = isType('object');\n  var isArray = isType('array');\n\n  var noop = function noop() {};\n\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  var die = function die(msg) {\n    return function () {\n      throw new Error(msg);\n    };\n  };\n\n  var never = constant(false);\n  var always = constant(true);\n\n  var none = function none() {\n    return NONE;\n  };\n\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n\n  var some = function some(a) {\n    var constant_a = constant(a);\n\n    var self = function self() {\n      return me;\n    };\n\n    var bind = function bind(f) {\n      return f(a);\n    };\n\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n  var nativeSlice = Array.prototype.slice;\n  var nativeIndexOf = Array.prototype.indexOf;\n\n  var rawIndexOf = function rawIndexOf(ts, t) {\n    return nativeIndexOf.call(ts, t);\n  };\n\n  var contains = function contains(xs, x) {\n    return rawIndexOf(xs, x) > -1;\n  };\n\n  var map = function map(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n\n    return r;\n  };\n\n  var each = function each(xs, f) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n\n  var eachr = function eachr(xs, f) {\n    for (var i = xs.length - 1; i >= 0; i--) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n\n  var filter = function filter(xs, pred) {\n    var r = [];\n\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n\n      if (pred(x, i)) {\n        r.push(x);\n      }\n    }\n\n    return r;\n  };\n\n  var foldr = function foldr(xs, f, acc) {\n    eachr(xs, function (x, i) {\n      acc = f(acc, x, i);\n    });\n    return acc;\n  };\n\n  var foldl = function foldl(xs, f, acc) {\n    each(xs, function (x, i) {\n      acc = f(acc, x, i);\n    });\n    return acc;\n  };\n\n  var findUntil = function findUntil(xs, pred, until) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n\n      if (pred(x, i)) {\n        return Optional.some(x);\n      } else if (until(x, i)) {\n        break;\n      }\n    }\n\n    return Optional.none();\n  };\n\n  var find = function find(xs, pred) {\n    return findUntil(xs, pred, never);\n  };\n\n  var forall = function forall(xs, pred) {\n    for (var i = 0, len = xs.length; i < len; ++i) {\n      var x = xs[i];\n\n      if (pred(x, i) !== true) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var sort = function sort(xs, comparator) {\n    var copy = nativeSlice.call(xs, 0);\n    copy.sort(comparator);\n    return copy;\n  };\n\n  var get$1 = function get$1(xs, i) {\n    return i >= 0 && i < xs.length ? Optional.some(xs[i]) : Optional.none();\n  };\n\n  var head = function head(xs) {\n    return get$1(xs, 0);\n  };\n\n  var keys = Object.keys;\n  var hasOwnProperty = Object.hasOwnProperty;\n\n  var has = function has(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  var generate$1 = function generate$1(cases) {\n    if (!isArray(cases)) {\n      throw new Error('cases must be an array');\n    }\n\n    if (cases.length === 0) {\n      throw new Error('there must be at least one case');\n    }\n\n    var constructors = [];\n    var adt = {};\n    each(cases, function (acase, count) {\n      var keys$1 = keys(acase);\n\n      if (keys$1.length !== 1) {\n        throw new Error('one and only one name per case');\n      }\n\n      var key = keys$1[0];\n      var value = acase[key];\n\n      if (adt[key] !== undefined) {\n        throw new Error('duplicate key detected:' + key);\n      } else if (key === 'cata') {\n        throw new Error('cannot have a case named cata (sorry)');\n      } else if (!isArray(value)) {\n        throw new Error('case arguments must be an array');\n      }\n\n      constructors.push(key);\n\n      adt[key] = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var argLength = args.length;\n\n        if (argLength !== value.length) {\n          throw new Error('Wrong number of arguments to case ' + key + '. Expected ' + value.length + ' (' + value + '), got ' + argLength);\n        }\n\n        var match = function match(branches) {\n          var branchKeys = keys(branches);\n\n          if (constructors.length !== branchKeys.length) {\n            throw new Error('Wrong number of arguments to match. Expected: ' + constructors.join(',') + '\\nActual: ' + branchKeys.join(','));\n          }\n\n          var allReqd = forall(constructors, function (reqKey) {\n            return contains(branchKeys, reqKey);\n          });\n\n          if (!allReqd) {\n            throw new Error('Not all branches were specified when using match. Specified: ' + branchKeys.join(', ') + '\\nRequired: ' + constructors.join(', '));\n          }\n\n          return branches[key].apply(null, args);\n        };\n\n        return {\n          fold: function fold() {\n            var foldArgs = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              foldArgs[_i] = arguments[_i];\n            }\n\n            if (foldArgs.length !== cases.length) {\n              throw new Error('Wrong number of arguments to fold. Expected ' + cases.length + ', got ' + foldArgs.length);\n            }\n\n            var target = foldArgs[count];\n            return target.apply(null, args);\n          },\n          match: match,\n          log: function log(label) {\n            console.log(label, {\n              constructors: constructors,\n              constructor: key,\n              params: args\n            });\n          }\n        };\n      };\n    });\n    return adt;\n  };\n\n  var Adt = {\n    generate: generate$1\n  };\n  Adt.generate([{\n    bothErrors: ['error1', 'error2']\n  }, {\n    firstError: ['error1', 'value2']\n  }, {\n    secondError: ['value1', 'error2']\n  }, {\n    bothValues: ['value1', 'value2']\n  }]);\n\n  var partition = function partition(results) {\n    var errors = [];\n    var values = [];\n    each(results, function (result) {\n      result.fold(function (err) {\n        errors.push(err);\n      }, function (value) {\n        values.push(value);\n      });\n    });\n    return {\n      errors: errors,\n      values: values\n    };\n  };\n\n  var value = function value(o) {\n    var or = function or(_opt) {\n      return value(o);\n    };\n\n    var orThunk = function orThunk(_f) {\n      return value(o);\n    };\n\n    var map = function map(f) {\n      return value(f(o));\n    };\n\n    var mapError = function mapError(_f) {\n      return value(o);\n    };\n\n    var each = function each(f) {\n      f(o);\n    };\n\n    var bind = function bind(f) {\n      return f(o);\n    };\n\n    var fold = function fold(_, onValue) {\n      return onValue(o);\n    };\n\n    var exists = function exists(f) {\n      return f(o);\n    };\n\n    var forall = function forall(f) {\n      return f(o);\n    };\n\n    var toOptional = function toOptional() {\n      return Optional.some(o);\n    };\n\n    return {\n      isValue: always,\n      isError: never,\n      getOr: constant(o),\n      getOrThunk: constant(o),\n      getOrDie: constant(o),\n      or: or,\n      orThunk: orThunk,\n      fold: fold,\n      map: map,\n      mapError: mapError,\n      each: each,\n      bind: bind,\n      exists: exists,\n      forall: forall,\n      toOptional: toOptional\n    };\n  };\n\n  var error$1 = function error$1(message) {\n    var getOrThunk = function getOrThunk(f) {\n      return f();\n    };\n\n    var getOrDie = function getOrDie() {\n      return die(String(message))();\n    };\n\n    var or = identity;\n\n    var orThunk = function orThunk(f) {\n      return f();\n    };\n\n    var map = function map(_f) {\n      return error$1(message);\n    };\n\n    var mapError = function mapError(f) {\n      return error$1(f(message));\n    };\n\n    var bind = function bind(_f) {\n      return error$1(message);\n    };\n\n    var fold = function fold(onError, _) {\n      return onError(message);\n    };\n\n    return {\n      isValue: never,\n      isError: always,\n      getOr: identity,\n      getOrThunk: getOrThunk,\n      getOrDie: getOrDie,\n      or: or,\n      orThunk: orThunk,\n      fold: fold,\n      map: map,\n      mapError: mapError,\n      each: noop,\n      bind: bind,\n      exists: never,\n      forall: always,\n      toOptional: Optional.none\n    };\n  };\n\n  var fromOption = function fromOption(opt, err) {\n    return opt.fold(function () {\n      return error$1(err);\n    }, value);\n  };\n\n  var Result = {\n    value: value,\n    error: error$1,\n    fromOption: fromOption\n  };\n\n  var isInlinePattern = function isInlinePattern(pattern) {\n    return pattern.type === 'inline-command' || pattern.type === 'inline-format';\n  };\n\n  var isBlockPattern = function isBlockPattern(pattern) {\n    return pattern.type === 'block-command' || pattern.type === 'block-format';\n  };\n\n  var sortPatterns = function sortPatterns(patterns) {\n    return sort(patterns, function (a, b) {\n      if (a.start.length === b.start.length) {\n        return 0;\n      }\n\n      return a.start.length > b.start.length ? -1 : 1;\n    });\n  };\n\n  var normalizePattern = function normalizePattern(pattern) {\n    var err = function err(message) {\n      return Result.error({\n        message: message,\n        pattern: pattern\n      });\n    };\n\n    var formatOrCmd = function formatOrCmd(name, onFormat, onCommand) {\n      if (pattern.format !== undefined) {\n        var formats = void 0;\n\n        if (isArray(pattern.format)) {\n          if (!forall(pattern.format, isString)) {\n            return err(name + ' pattern has non-string items in the `format` array');\n          }\n\n          formats = pattern.format;\n        } else if (isString(pattern.format)) {\n          formats = [pattern.format];\n        } else {\n          return err(name + ' pattern has non-string `format` parameter');\n        }\n\n        return Result.value(onFormat(formats));\n      } else if (pattern.cmd !== undefined) {\n        if (!isString(pattern.cmd)) {\n          return err(name + ' pattern has non-string `cmd` parameter');\n        }\n\n        return Result.value(onCommand(pattern.cmd, pattern.value));\n      } else {\n        return err(name + ' pattern is missing both `format` and `cmd` parameters');\n      }\n    };\n\n    if (!isObject(pattern)) {\n      return err('Raw pattern is not an object');\n    }\n\n    if (!isString(pattern.start)) {\n      return err('Raw pattern is missing `start` parameter');\n    }\n\n    if (pattern.end !== undefined) {\n      if (!isString(pattern.end)) {\n        return err('Inline pattern has non-string `end` parameter');\n      }\n\n      if (pattern.start.length === 0 && pattern.end.length === 0) {\n        return err('Inline pattern has empty `start` and `end` parameters');\n      }\n\n      var start_1 = pattern.start;\n      var end_1 = pattern.end;\n\n      if (end_1.length === 0) {\n        end_1 = start_1;\n        start_1 = '';\n      }\n\n      return formatOrCmd('Inline', function (format) {\n        return {\n          type: 'inline-format',\n          start: start_1,\n          end: end_1,\n          format: format\n        };\n      }, function (cmd, value) {\n        return {\n          type: 'inline-command',\n          start: start_1,\n          end: end_1,\n          cmd: cmd,\n          value: value\n        };\n      });\n    } else if (pattern.replacement !== undefined) {\n      if (!isString(pattern.replacement)) {\n        return err('Replacement pattern has non-string `replacement` parameter');\n      }\n\n      if (pattern.start.length === 0) {\n        return err('Replacement pattern has empty `start` parameter');\n      }\n\n      return Result.value({\n        type: 'inline-command',\n        start: '',\n        end: pattern.start,\n        cmd: 'mceInsertContent',\n        value: pattern.replacement\n      });\n    } else {\n      if (pattern.start.length === 0) {\n        return err('Block pattern has empty `start` parameter');\n      }\n\n      return formatOrCmd('Block', function (formats) {\n        return {\n          type: 'block-format',\n          start: pattern.start,\n          format: formats[0]\n        };\n      }, function (command, commandValue) {\n        return {\n          type: 'block-command',\n          start: pattern.start,\n          cmd: command,\n          value: commandValue\n        };\n      });\n    }\n  };\n\n  var denormalizePattern = function denormalizePattern(pattern) {\n    if (pattern.type === 'block-command') {\n      return {\n        start: pattern.start,\n        cmd: pattern.cmd,\n        value: pattern.value\n      };\n    } else if (pattern.type === 'block-format') {\n      return {\n        start: pattern.start,\n        format: pattern.format\n      };\n    } else if (pattern.type === 'inline-command') {\n      if (pattern.cmd === 'mceInsertContent' && pattern.start === '') {\n        return {\n          start: pattern.end,\n          replacement: pattern.value\n        };\n      } else {\n        return {\n          start: pattern.start,\n          end: pattern.end,\n          cmd: pattern.cmd,\n          value: pattern.value\n        };\n      }\n    } else if (pattern.type === 'inline-format') {\n      return {\n        start: pattern.start,\n        end: pattern.end,\n        format: pattern.format.length === 1 ? pattern.format[0] : pattern.format\n      };\n    }\n  };\n\n  var createPatternSet = function createPatternSet(patterns) {\n    return {\n      inlinePatterns: filter(patterns, isInlinePattern),\n      blockPatterns: sortPatterns(filter(patterns, isBlockPattern))\n    };\n  };\n\n  var get = function get(patternsState) {\n    var setPatterns = function setPatterns(newPatterns) {\n      var normalized = partition(map(newPatterns, normalizePattern));\n\n      if (normalized.errors.length > 0) {\n        var firstError = normalized.errors[0];\n        throw new Error(firstError.message + ':\\n' + JSON.stringify(firstError.pattern, null, 2));\n      }\n\n      patternsState.set(createPatternSet(normalized.values));\n    };\n\n    var getPatterns = function getPatterns() {\n      return __spreadArray(__spreadArray([], map(patternsState.get().inlinePatterns, denormalizePattern), true), map(patternsState.get().blockPatterns, denormalizePattern), true);\n    };\n\n    return {\n      setPatterns: setPatterns,\n      getPatterns: getPatterns\n    };\n  };\n\n  var Global = typeof window !== 'undefined' ? window : Function('return this;')();\n\n  var error = function error() {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var console = Global.console;\n\n    if (console) {\n      if (console.error) {\n        console.error.apply(console, args);\n      } else {\n        console.log.apply(console, args);\n      }\n    }\n  };\n\n  var defaultPatterns = [{\n    start: '*',\n    end: '*',\n    format: 'italic'\n  }, {\n    start: '**',\n    end: '**',\n    format: 'bold'\n  }, {\n    start: '#',\n    format: 'h1'\n  }, {\n    start: '##',\n    format: 'h2'\n  }, {\n    start: '###',\n    format: 'h3'\n  }, {\n    start: '####',\n    format: 'h4'\n  }, {\n    start: '#####',\n    format: 'h5'\n  }, {\n    start: '######',\n    format: 'h6'\n  }, {\n    start: '1. ',\n    cmd: 'InsertOrderedList'\n  }, {\n    start: '* ',\n    cmd: 'InsertUnorderedList'\n  }, {\n    start: '- ',\n    cmd: 'InsertUnorderedList'\n  }];\n\n  var getPatternSet = function getPatternSet(editor) {\n    var patterns = editor.getParam('textpattern_patterns', defaultPatterns, 'array');\n\n    if (!isArray(patterns)) {\n      error('The setting textpattern_patterns should be an array');\n      return {\n        inlinePatterns: [],\n        blockPatterns: []\n      };\n    }\n\n    var normalized = partition(map(patterns, normalizePattern));\n    each(normalized.errors, function (err) {\n      return error(err.message, err.pattern);\n    });\n    return createPatternSet(normalized.values);\n  };\n\n  var getForcedRootBlock = function getForcedRootBlock(editor) {\n    var block = editor.getParam('forced_root_block', 'p');\n\n    if (block === false) {\n      return '';\n    } else if (block === true) {\n      return 'p';\n    } else {\n      return block;\n    }\n  };\n\n  var global$4 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n  var global$3 = tinymce.util.Tools.resolve('tinymce.util.VK');\n  var zeroWidth = \"\\uFEFF\";\n  var nbsp = '\\xA0';\n  var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n  var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n  var global = tinymce.util.Tools.resolve('tinymce.dom.TextSeeker');\n\n  var point = function point(container, offset) {\n    return {\n      container: container,\n      offset: offset\n    };\n  };\n\n  var isText = function isText(node) {\n    return node.nodeType === Node.TEXT_NODE;\n  };\n\n  var cleanEmptyNodes = function cleanEmptyNodes(dom, node, isRoot) {\n    if (node && dom.isEmpty(node) && !isRoot(node)) {\n      var parent_1 = node.parentNode;\n      dom.remove(node);\n      cleanEmptyNodes(dom, parent_1, isRoot);\n    }\n  };\n\n  var deleteRng = function deleteRng(dom, rng, isRoot, clean) {\n    if (clean === void 0) {\n      clean = true;\n    }\n\n    var startParent = rng.startContainer.parentNode;\n    var endParent = rng.endContainer.parentNode;\n    rng.deleteContents();\n\n    if (clean && !isRoot(rng.startContainer)) {\n      if (isText(rng.startContainer) && rng.startContainer.data.length === 0) {\n        dom.remove(rng.startContainer);\n      }\n\n      if (isText(rng.endContainer) && rng.endContainer.data.length === 0) {\n        dom.remove(rng.endContainer);\n      }\n\n      cleanEmptyNodes(dom, startParent, isRoot);\n\n      if (startParent !== endParent) {\n        cleanEmptyNodes(dom, endParent, isRoot);\n      }\n    }\n  };\n\n  var isBlockFormatName = function isBlockFormatName(name, formatter) {\n    var formatSet = formatter.get(name);\n    return isArray(formatSet) && head(formatSet).exists(function (format) {\n      return has(format, 'block');\n    });\n  };\n\n  var isReplacementPattern = function isReplacementPattern(pattern) {\n    return pattern.start.length === 0;\n  };\n\n  var getParentBlock = function getParentBlock(editor, rng) {\n    var parentBlockOpt = Optional.from(editor.dom.getParent(rng.startContainer, editor.dom.isBlock));\n\n    if (getForcedRootBlock(editor) === '') {\n      return parentBlockOpt.orThunk(function () {\n        return Optional.some(editor.getBody());\n      });\n    } else {\n      return parentBlockOpt;\n    }\n  };\n\n  var DOM = global$1.DOM;\n\n  var alwaysNext = function alwaysNext(startNode) {\n    return function (node) {\n      return startNode === node ? -1 : 0;\n    };\n  };\n\n  var isBoundary = function isBoundary(dom) {\n    return function (node) {\n      return dom.isBlock(node) || contains(['BR', 'IMG', 'HR', 'INPUT'], node.nodeName) || dom.getContentEditable(node) === 'false';\n    };\n  };\n\n  var textBefore = function textBefore(node, offset, rootNode) {\n    if (isText(node) && offset >= 0) {\n      return Optional.some(point(node, offset));\n    } else {\n      var textSeeker = global(DOM);\n      return Optional.from(textSeeker.backwards(node, offset, alwaysNext(node), rootNode)).map(function (prev) {\n        return point(prev.container, prev.container.data.length);\n      });\n    }\n  };\n\n  var textAfter = function textAfter(node, offset, rootNode) {\n    if (isText(node) && offset >= node.length) {\n      return Optional.some(point(node, offset));\n    } else {\n      var textSeeker = global(DOM);\n      return Optional.from(textSeeker.forwards(node, offset, alwaysNext(node), rootNode)).map(function (prev) {\n        return point(prev.container, 0);\n      });\n    }\n  };\n\n  var scanLeft = function scanLeft(node, offset, rootNode) {\n    if (!isText(node)) {\n      return Optional.none();\n    }\n\n    var text = node.textContent;\n\n    if (offset >= 0 && offset <= text.length) {\n      return Optional.some(point(node, offset));\n    } else {\n      var textSeeker = global(DOM);\n      return Optional.from(textSeeker.backwards(node, offset, alwaysNext(node), rootNode)).bind(function (prev) {\n        var prevText = prev.container.data;\n        return scanLeft(prev.container, offset + prevText.length, rootNode);\n      });\n    }\n  };\n\n  var scanRight = function scanRight(node, offset, rootNode) {\n    if (!isText(node)) {\n      return Optional.none();\n    }\n\n    var text = node.textContent;\n\n    if (offset <= text.length) {\n      return Optional.some(point(node, offset));\n    } else {\n      var textSeeker = global(DOM);\n      return Optional.from(textSeeker.forwards(node, offset, alwaysNext(node), rootNode)).bind(function (next) {\n        return scanRight(next.container, offset - text.length, rootNode);\n      });\n    }\n  };\n\n  var repeatLeft = function repeatLeft(dom, node, offset, process, rootNode) {\n    var search = global(dom, isBoundary(dom));\n    return Optional.from(search.backwards(node, offset, process, rootNode));\n  };\n\n  var generatePath = function generatePath(root, node, offset) {\n    if (isText(node) && (offset < 0 || offset > node.data.length)) {\n      return [];\n    }\n\n    var p = [offset];\n    var current = node;\n\n    while (current !== root && current.parentNode) {\n      var parent_1 = current.parentNode;\n\n      for (var i = 0; i < parent_1.childNodes.length; i++) {\n        if (parent_1.childNodes[i] === current) {\n          p.push(i);\n          break;\n        }\n      }\n\n      current = parent_1;\n    }\n\n    return current === root ? p.reverse() : [];\n  };\n\n  var generatePathRange = function generatePathRange(root, startNode, startOffset, endNode, endOffset) {\n    var start = generatePath(root, startNode, startOffset);\n    var end = generatePath(root, endNode, endOffset);\n    return {\n      start: start,\n      end: end\n    };\n  };\n\n  var resolvePath = function resolvePath(root, path) {\n    var nodePath = path.slice();\n    var offset = nodePath.pop();\n    var resolvedNode = foldl(nodePath, function (optNode, index) {\n      return optNode.bind(function (node) {\n        return Optional.from(node.childNodes[index]);\n      });\n    }, Optional.some(root));\n    return resolvedNode.bind(function (node) {\n      if (isText(node) && (offset < 0 || offset > node.data.length)) {\n        return Optional.none();\n      } else {\n        return Optional.some({\n          node: node,\n          offset: offset\n        });\n      }\n    });\n  };\n\n  var resolvePathRange = function resolvePathRange(root, range) {\n    return resolvePath(root, range.start).bind(function (_a) {\n      var startNode = _a.node,\n          startOffset = _a.offset;\n      return resolvePath(root, range.end).map(function (_a) {\n        var endNode = _a.node,\n            endOffset = _a.offset;\n        var rng = document.createRange();\n        rng.setStart(startNode, startOffset);\n        rng.setEnd(endNode, endOffset);\n        return rng;\n      });\n    });\n  };\n\n  var generatePathRangeFromRange = function generatePathRangeFromRange(root, range) {\n    return generatePathRange(root, range.startContainer, range.startOffset, range.endContainer, range.endOffset);\n  };\n\n  var stripPattern = function stripPattern(dom, block, pattern) {\n    var firstTextNode = textAfter(block, 0, block);\n    firstTextNode.each(function (spot) {\n      var node = spot.container;\n      scanRight(node, pattern.start.length, block).each(function (end) {\n        var rng = dom.createRng();\n        rng.setStart(node, 0);\n        rng.setEnd(end.container, end.offset);\n        deleteRng(dom, rng, function (e) {\n          return e === block;\n        });\n      });\n    });\n  };\n\n  var applyPattern$1 = function applyPattern$1(editor, match) {\n    var dom = editor.dom;\n    var pattern = match.pattern;\n    var rng = resolvePathRange(dom.getRoot(), match.range).getOrDie('Unable to resolve path range');\n    getParentBlock(editor, rng).each(function (block) {\n      if (pattern.type === 'block-format') {\n        if (isBlockFormatName(pattern.format, editor.formatter)) {\n          editor.undoManager.transact(function () {\n            stripPattern(editor.dom, block, pattern);\n            editor.formatter.apply(pattern.format);\n          });\n        }\n      } else if (pattern.type === 'block-command') {\n        editor.undoManager.transact(function () {\n          stripPattern(editor.dom, block, pattern);\n          editor.execCommand(pattern.cmd, false, pattern.value);\n        });\n      }\n    });\n    return true;\n  };\n\n  var findPattern$1 = function findPattern$1(patterns, text) {\n    var nuText = text.replace(nbsp, ' ');\n    return find(patterns, function (pattern) {\n      return text.indexOf(pattern.start) === 0 || nuText.indexOf(pattern.start) === 0;\n    });\n  };\n\n  var findPatterns$1 = function findPatterns$1(editor, patterns) {\n    var dom = editor.dom;\n    var rng = editor.selection.getRng();\n    return getParentBlock(editor, rng).filter(function (block) {\n      var forcedRootBlock = getForcedRootBlock(editor);\n      var matchesForcedRootBlock = forcedRootBlock === '' && dom.is(block, 'body') || dom.is(block, forcedRootBlock);\n      return block !== null && matchesForcedRootBlock;\n    }).bind(function (block) {\n      var blockText = block.textContent;\n      var matchedPattern = findPattern$1(patterns, blockText);\n      return matchedPattern.map(function (pattern) {\n        if (global$2.trim(blockText).length === pattern.start.length) {\n          return [];\n        }\n\n        return [{\n          pattern: pattern,\n          range: generatePathRange(dom.getRoot(), block, 0, block, 0)\n        }];\n      });\n    }).getOr([]);\n  };\n\n  var applyMatches$1 = function applyMatches$1(editor, matches) {\n    if (matches.length === 0) {\n      return;\n    }\n\n    var bookmark = editor.selection.getBookmark();\n    each(matches, function (match) {\n      return applyPattern$1(editor, match);\n    });\n    editor.selection.moveToBookmark(bookmark);\n  };\n\n  var unique = 0;\n\n  var generate = function generate(prefix) {\n    var date = new Date();\n    var time = date.getTime();\n    var random = Math.floor(Math.random() * 1000000000);\n    unique++;\n    return prefix + '_' + random + unique + String(time);\n  };\n\n  var checkRange = function checkRange(str, substr, start) {\n    return substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n  };\n\n  var endsWith = function endsWith(str, suffix) {\n    return checkRange(str, suffix, str.length - suffix.length);\n  };\n\n  var newMarker = function newMarker(dom, id) {\n    return dom.create('span', {\n      'data-mce-type': 'bookmark',\n      id: id\n    });\n  };\n\n  var rangeFromMarker = function rangeFromMarker(dom, marker) {\n    var rng = dom.createRng();\n    rng.setStartAfter(marker.start);\n    rng.setEndBefore(marker.end);\n    return rng;\n  };\n\n  var createMarker = function createMarker(dom, markerPrefix, pathRange) {\n    var rng = resolvePathRange(dom.getRoot(), pathRange).getOrDie('Unable to resolve path range');\n    var startNode = rng.startContainer;\n    var endNode = rng.endContainer;\n    var textEnd = rng.endOffset === 0 ? endNode : endNode.splitText(rng.endOffset);\n    var textStart = rng.startOffset === 0 ? startNode : startNode.splitText(rng.startOffset);\n    return {\n      prefix: markerPrefix,\n      end: textEnd.parentNode.insertBefore(newMarker(dom, markerPrefix + '-end'), textEnd),\n      start: textStart.parentNode.insertBefore(newMarker(dom, markerPrefix + '-start'), textStart)\n    };\n  };\n\n  var removeMarker = function removeMarker(dom, marker, isRoot) {\n    cleanEmptyNodes(dom, dom.get(marker.prefix + '-end'), isRoot);\n    cleanEmptyNodes(dom, dom.get(marker.prefix + '-start'), isRoot);\n  };\n\n  var matchesPattern = function matchesPattern(dom, block, patternContent) {\n    return function (element, offset) {\n      var text = element.data;\n      var searchText = text.substring(0, offset);\n      var startEndIndex = searchText.lastIndexOf(patternContent.charAt(patternContent.length - 1));\n      var startIndex = searchText.lastIndexOf(patternContent);\n\n      if (startIndex !== -1) {\n        return startIndex + patternContent.length;\n      } else if (startEndIndex !== -1) {\n        return startEndIndex + 1;\n      } else {\n        return -1;\n      }\n    };\n  };\n\n  var findPatternStartFromSpot = function findPatternStartFromSpot(dom, pattern, block, spot) {\n    var startPattern = pattern.start;\n    var startSpot = repeatLeft(dom, spot.container, spot.offset, matchesPattern(dom, block, startPattern), block);\n    return startSpot.bind(function (spot) {\n      if (spot.offset >= startPattern.length) {\n        var rng = dom.createRng();\n        rng.setStart(spot.container, spot.offset - startPattern.length);\n        rng.setEnd(spot.container, spot.offset);\n        return Optional.some(rng);\n      } else {\n        var offset = spot.offset - startPattern.length;\n        return scanLeft(spot.container, offset, block).map(function (nextSpot) {\n          var rng = dom.createRng();\n          rng.setStart(nextSpot.container, nextSpot.offset);\n          rng.setEnd(spot.container, spot.offset);\n          return rng;\n        }).filter(function (rng) {\n          return rng.toString() === startPattern;\n        }).orThunk(function () {\n          return findPatternStartFromSpot(dom, pattern, block, point(spot.container, 0));\n        });\n      }\n    });\n  };\n\n  var findPatternStart = function findPatternStart(dom, pattern, node, offset, block, requireGap) {\n    if (requireGap === void 0) {\n      requireGap = false;\n    }\n\n    if (pattern.start.length === 0 && !requireGap) {\n      var rng = dom.createRng();\n      rng.setStart(node, offset);\n      rng.setEnd(node, offset);\n      return Optional.some(rng);\n    }\n\n    return textBefore(node, offset, block).bind(function (spot) {\n      var start = findPatternStartFromSpot(dom, pattern, block, spot);\n      return start.bind(function (startRange) {\n        if (requireGap) {\n          if (startRange.endContainer === spot.container && startRange.endOffset === spot.offset) {\n            return Optional.none();\n          } else if (spot.offset === 0 && startRange.endContainer.textContent.length === startRange.endOffset) {\n            return Optional.none();\n          }\n        }\n\n        return Optional.some(startRange);\n      });\n    });\n  };\n\n  var findPattern = function findPattern(editor, block, details) {\n    var dom = editor.dom;\n    var root = dom.getRoot();\n    var pattern = details.pattern;\n    var endNode = details.position.container;\n    var endOffset = details.position.offset;\n    return scanLeft(endNode, endOffset - details.pattern.end.length, block).bind(function (spot) {\n      var endPathRng = generatePathRange(root, spot.container, spot.offset, endNode, endOffset);\n\n      if (isReplacementPattern(pattern)) {\n        return Optional.some({\n          matches: [{\n            pattern: pattern,\n            startRng: endPathRng,\n            endRng: endPathRng\n          }],\n          position: spot\n        });\n      } else {\n        var resultsOpt = findPatternsRec(editor, details.remainingPatterns, spot.container, spot.offset, block);\n        var results_1 = resultsOpt.getOr({\n          matches: [],\n          position: spot\n        });\n        var pos = results_1.position;\n        var start = findPatternStart(dom, pattern, pos.container, pos.offset, block, resultsOpt.isNone());\n        return start.map(function (startRng) {\n          var startPathRng = generatePathRangeFromRange(root, startRng);\n          return {\n            matches: results_1.matches.concat([{\n              pattern: pattern,\n              startRng: startPathRng,\n              endRng: endPathRng\n            }]),\n            position: point(startRng.startContainer, startRng.startOffset)\n          };\n        });\n      }\n    });\n  };\n\n  var findPatternsRec = function findPatternsRec(editor, patterns, node, offset, block) {\n    var dom = editor.dom;\n    return textBefore(node, offset, dom.getRoot()).bind(function (endSpot) {\n      var rng = dom.createRng();\n      rng.setStart(block, 0);\n      rng.setEnd(node, offset);\n      var text = rng.toString();\n\n      for (var i = 0; i < patterns.length; i++) {\n        var pattern = patterns[i];\n\n        if (!endsWith(text, pattern.end)) {\n          continue;\n        }\n\n        var patternsWithoutCurrent = patterns.slice();\n        patternsWithoutCurrent.splice(i, 1);\n        var result = findPattern(editor, block, {\n          pattern: pattern,\n          remainingPatterns: patternsWithoutCurrent,\n          position: endSpot\n        });\n\n        if (result.isSome()) {\n          return result;\n        }\n      }\n\n      return Optional.none();\n    });\n  };\n\n  var applyPattern = function applyPattern(editor, pattern, patternRange) {\n    editor.selection.setRng(patternRange);\n\n    if (pattern.type === 'inline-format') {\n      each(pattern.format, function (format) {\n        editor.formatter.apply(format);\n      });\n    } else {\n      editor.execCommand(pattern.cmd, false, pattern.value);\n    }\n  };\n\n  var applyReplacementPattern = function applyReplacementPattern(editor, pattern, marker, isRoot) {\n    var markerRange = rangeFromMarker(editor.dom, marker);\n    deleteRng(editor.dom, markerRange, isRoot);\n    applyPattern(editor, pattern, markerRange);\n  };\n\n  var applyPatternWithContent = function applyPatternWithContent(editor, pattern, startMarker, endMarker, isRoot) {\n    var dom = editor.dom;\n    var markerEndRange = rangeFromMarker(dom, endMarker);\n    var markerStartRange = rangeFromMarker(dom, startMarker);\n    deleteRng(dom, markerStartRange, isRoot);\n    deleteRng(dom, markerEndRange, isRoot);\n    var patternMarker = {\n      prefix: startMarker.prefix,\n      start: startMarker.end,\n      end: endMarker.start\n    };\n    var patternRange = rangeFromMarker(dom, patternMarker);\n    applyPattern(editor, pattern, patternRange);\n  };\n\n  var addMarkers = function addMarkers(dom, matches) {\n    var markerPrefix = generate('mce_textpattern');\n    var matchesWithEnds = foldr(matches, function (acc, match) {\n      var endMarker = createMarker(dom, markerPrefix + ('_end' + acc.length), match.endRng);\n      return acc.concat([_assign(_assign({}, match), {\n        endMarker: endMarker\n      })]);\n    }, []);\n    return foldr(matchesWithEnds, function (acc, match) {\n      var idx = matchesWithEnds.length - acc.length - 1;\n      var startMarker = isReplacementPattern(match.pattern) ? match.endMarker : createMarker(dom, markerPrefix + ('_start' + idx), match.startRng);\n      return acc.concat([_assign(_assign({}, match), {\n        startMarker: startMarker\n      })]);\n    }, []);\n  };\n\n  var findPatterns = function findPatterns(editor, patterns, space) {\n    var rng = editor.selection.getRng();\n\n    if (rng.collapsed === false) {\n      return [];\n    }\n\n    return getParentBlock(editor, rng).bind(function (block) {\n      var offset = rng.startOffset - (space ? 1 : 0);\n      return findPatternsRec(editor, patterns, rng.startContainer, offset, block);\n    }).fold(function () {\n      return [];\n    }, function (result) {\n      return result.matches;\n    });\n  };\n\n  var applyMatches = function applyMatches(editor, matches) {\n    if (matches.length === 0) {\n      return;\n    }\n\n    var dom = editor.dom;\n    var bookmark = editor.selection.getBookmark();\n    var matchesWithMarkers = addMarkers(dom, matches);\n    each(matchesWithMarkers, function (match) {\n      var block = dom.getParent(match.startMarker.start, dom.isBlock);\n\n      var isRoot = function isRoot(node) {\n        return node === block;\n      };\n\n      if (isReplacementPattern(match.pattern)) {\n        applyReplacementPattern(editor, match.pattern, match.endMarker, isRoot);\n      } else {\n        applyPatternWithContent(editor, match.pattern, match.startMarker, match.endMarker, isRoot);\n      }\n\n      removeMarker(dom, match.endMarker, isRoot);\n      removeMarker(dom, match.startMarker, isRoot);\n    });\n    editor.selection.moveToBookmark(bookmark);\n  };\n\n  var handleEnter = function handleEnter(editor, patternSet) {\n    if (!editor.selection.isCollapsed()) {\n      return false;\n    }\n\n    var inlineMatches = findPatterns(editor, patternSet.inlinePatterns, false);\n    var blockMatches = findPatterns$1(editor, patternSet.blockPatterns);\n\n    if (blockMatches.length > 0 || inlineMatches.length > 0) {\n      editor.undoManager.add();\n      editor.undoManager.extra(function () {\n        editor.execCommand('mceInsertNewLine');\n      }, function () {\n        editor.insertContent(zeroWidth);\n        applyMatches(editor, inlineMatches);\n        applyMatches$1(editor, blockMatches);\n        var range = editor.selection.getRng();\n        var spot = textBefore(range.startContainer, range.startOffset, editor.dom.getRoot());\n        editor.execCommand('mceInsertNewLine');\n        spot.each(function (s) {\n          var node = s.container;\n\n          if (node.data.charAt(s.offset - 1) === zeroWidth) {\n            node.deleteData(s.offset - 1, 1);\n            cleanEmptyNodes(editor.dom, node.parentNode, function (e) {\n              return e === editor.dom.getRoot();\n            });\n          }\n        });\n      });\n      return true;\n    }\n\n    return false;\n  };\n\n  var handleInlineKey = function handleInlineKey(editor, patternSet) {\n    var inlineMatches = findPatterns(editor, patternSet.inlinePatterns, true);\n\n    if (inlineMatches.length > 0) {\n      editor.undoManager.transact(function () {\n        applyMatches(editor, inlineMatches);\n      });\n    }\n  };\n\n  var checkKeyEvent = function checkKeyEvent(codes, event, predicate) {\n    for (var i = 0; i < codes.length; i++) {\n      if (predicate(codes[i], event)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var checkKeyCode = function checkKeyCode(codes, event) {\n    return checkKeyEvent(codes, event, function (code, event) {\n      return code === event.keyCode && global$3.modifierPressed(event) === false;\n    });\n  };\n\n  var checkCharCode = function checkCharCode(chars, event) {\n    return checkKeyEvent(chars, event, function (chr, event) {\n      return chr.charCodeAt(0) === event.charCode;\n    });\n  };\n\n  var setup = function setup(editor, patternsState) {\n    var charCodes = [',', '.', ';', ':', '!', '?'];\n    var keyCodes = [32];\n    editor.on('keydown', function (e) {\n      if (e.keyCode === 13 && !global$3.modifierPressed(e)) {\n        if (handleEnter(editor, patternsState.get())) {\n          e.preventDefault();\n        }\n      }\n    }, true);\n    editor.on('keyup', function (e) {\n      if (checkKeyCode(keyCodes, e)) {\n        handleInlineKey(editor, patternsState.get());\n      }\n    });\n    editor.on('keypress', function (e) {\n      if (checkCharCode(charCodes, e)) {\n        global$4.setEditorTimeout(editor, function () {\n          handleInlineKey(editor, patternsState.get());\n        });\n      }\n    });\n  };\n\n  function Plugin() {\n    global$5.add('textpattern', function (editor) {\n      var patternsState = Cell(getPatternSet(editor));\n      setup(editor, patternsState);\n      return get(patternsState);\n    });\n  }\n\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/textpattern/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/tinymce/plugins/textpattern/index.js");
/******/ 	
/******/ })()
;