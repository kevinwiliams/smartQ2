/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/fullpage/index.js":
/*!********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/fullpage/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Exports the \"fullpage\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/fullpage')\n//   ES2015:\n//     import 'tinymce/plugins/fullpage'\n__webpack_require__(/*! ./plugin.js */ \"./resources/assets/core/plugins/custom/tinymce/plugins/fullpage/plugin.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL2Z1bGxwYWdlL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQSxtQkFBTyxDQUFDLDhGQUFELENBQVAiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL2Z1bGxwYWdlL2luZGV4LmpzP2NjZDEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRXhwb3J0cyB0aGUgXCJmdWxscGFnZVwiIHBsdWdpbiBmb3IgdXNhZ2Ugd2l0aCBtb2R1bGUgbG9hZGVyc1xyXG4vLyBVc2FnZTpcclxuLy8gICBDb21tb25KUzpcclxuLy8gICAgIHJlcXVpcmUoJ3RpbnltY2UvcGx1Z2lucy9mdWxscGFnZScpXHJcbi8vICAgRVMyMDE1OlxyXG4vLyAgICAgaW1wb3J0ICd0aW55bWNlL3BsdWdpbnMvZnVsbHBhZ2UnXHJcbnJlcXVpcmUoJy4vcGx1Z2luLmpzJyk7Il0sIm5hbWVzIjpbInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/fullpage/index.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/fullpage/plugin.js":
/*!*********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/fullpage/plugin.js ***!
  \*********************************************************************************/
/***/ (() => {

eval("/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var Cell = function Cell(initial) {\n    var value = initial;\n\n    var get = function get() {\n      return value;\n    };\n\n    var set = function set(v) {\n      value = v;\n    };\n\n    return {\n      get: get,\n      set: set\n    };\n  };\n\n  var global$4 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) {\n          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n      }\n\n      return t;\n    };\n\n    return _assign.apply(this, arguments);\n  };\n\n  var global$3 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n  var global$2 = tinymce.util.Tools.resolve('tinymce.html.DomParser');\n  var global$1 = tinymce.util.Tools.resolve('tinymce.html.Node');\n  var global = tinymce.util.Tools.resolve('tinymce.html.Serializer');\n\n  var shouldHideInSourceView = function shouldHideInSourceView(editor) {\n    return editor.getParam('fullpage_hide_in_source_view');\n  };\n\n  var getDefaultXmlPi = function getDefaultXmlPi(editor) {\n    return editor.getParam('fullpage_default_xml_pi');\n  };\n\n  var getDefaultEncoding = function getDefaultEncoding(editor) {\n    return editor.getParam('fullpage_default_encoding');\n  };\n\n  var getDefaultFontFamily = function getDefaultFontFamily(editor) {\n    return editor.getParam('fullpage_default_font_family');\n  };\n\n  var getDefaultFontSize = function getDefaultFontSize(editor) {\n    return editor.getParam('fullpage_default_font_size');\n  };\n\n  var getDefaultTextColor = function getDefaultTextColor(editor) {\n    return editor.getParam('fullpage_default_text_color');\n  };\n\n  var getDefaultTitle = function getDefaultTitle(editor) {\n    return editor.getParam('fullpage_default_title');\n  };\n\n  var getDefaultDocType = function getDefaultDocType(editor) {\n    return editor.getParam('fullpage_default_doctype', '<!DOCTYPE html>');\n  };\n\n  var getProtect = function getProtect(editor) {\n    return editor.getParam('protect');\n  };\n\n  var parseHeader = function parseHeader(editor, head) {\n    return global$2({\n      validate: false,\n      root_name: '#document'\n    }, editor.schema).parse(head, {\n      format: 'xhtml'\n    });\n  };\n\n  var htmlToData = function htmlToData(editor, head) {\n    var headerFragment = parseHeader(editor, head);\n    var data = {};\n    var elm, matches;\n\n    var getAttr = function getAttr(elm, name) {\n      var value = elm.attr(name);\n      return value || '';\n    };\n\n    data.fontface = getDefaultFontFamily(editor);\n    data.fontsize = getDefaultFontSize(editor);\n    elm = headerFragment.firstChild;\n\n    if (elm.type === 7) {\n      data.xml_pi = true;\n      matches = /encoding=\"([^\"]+)\"/.exec(elm.value);\n\n      if (matches) {\n        data.docencoding = matches[1];\n      }\n    }\n\n    elm = headerFragment.getAll('#doctype')[0];\n\n    if (elm) {\n      data.doctype = '<!DOCTYPE' + elm.value + '>';\n    }\n\n    elm = headerFragment.getAll('title')[0];\n\n    if (elm && elm.firstChild) {\n      data.title = elm.firstChild.value;\n    }\n\n    global$3.each(headerFragment.getAll('meta'), function (meta) {\n      var name = meta.attr('name');\n      var httpEquiv = meta.attr('http-equiv');\n      var matches;\n\n      if (name) {\n        data[name.toLowerCase()] = meta.attr('content');\n      } else if (httpEquiv === 'Content-Type') {\n        matches = /charset\\s*=\\s*(.*)\\s*/gi.exec(meta.attr('content'));\n\n        if (matches) {\n          data.docencoding = matches[1];\n        }\n      }\n    });\n    elm = headerFragment.getAll('html')[0];\n\n    if (elm) {\n      data.langcode = getAttr(elm, 'lang') || getAttr(elm, 'xml:lang');\n    }\n\n    data.stylesheets = [];\n    global$3.each(headerFragment.getAll('link'), function (link) {\n      if (link.attr('rel') === 'stylesheet') {\n        data.stylesheets.push(link.attr('href'));\n      }\n    });\n    elm = headerFragment.getAll('body')[0];\n\n    if (elm) {\n      data.langdir = getAttr(elm, 'dir');\n      data.style = getAttr(elm, 'style');\n      data.visited_color = getAttr(elm, 'vlink');\n      data.link_color = getAttr(elm, 'link');\n      data.active_color = getAttr(elm, 'alink');\n    }\n\n    return data;\n  };\n\n  var dataToHtml = function dataToHtml(editor, data, head) {\n    var headElement, elm;\n    var dom = editor.dom;\n\n    var setAttr = function setAttr(elm, name, value) {\n      elm.attr(name, value ? value : undefined);\n    };\n\n    var addHeadNode = function addHeadNode(node) {\n      if (headElement.firstChild) {\n        headElement.insert(node, headElement.firstChild);\n      } else {\n        headElement.append(node);\n      }\n    };\n\n    var headerFragment = parseHeader(editor, head);\n    headElement = headerFragment.getAll('head')[0];\n\n    if (!headElement) {\n      elm = headerFragment.getAll('html')[0];\n      headElement = new global$1('head', 1);\n\n      if (elm.firstChild) {\n        elm.insert(headElement, elm.firstChild, true);\n      } else {\n        elm.append(headElement);\n      }\n    }\n\n    elm = headerFragment.firstChild;\n\n    if (data.xml_pi) {\n      var value = 'version=\"1.0\"';\n\n      if (data.docencoding) {\n        value += ' encoding=\"' + data.docencoding + '\"';\n      }\n\n      if (elm.type !== 7) {\n        elm = new global$1('xml', 7);\n        headerFragment.insert(elm, headerFragment.firstChild, true);\n      }\n\n      elm.value = value;\n    } else if (elm && elm.type === 7) {\n      elm.remove();\n    }\n\n    elm = headerFragment.getAll('#doctype')[0];\n\n    if (data.doctype) {\n      if (!elm) {\n        elm = new global$1('#doctype', 10);\n\n        if (data.xml_pi) {\n          headerFragment.insert(elm, headerFragment.firstChild);\n        } else {\n          addHeadNode(elm);\n        }\n      }\n\n      elm.value = data.doctype.substring(9, data.doctype.length - 1);\n    } else if (elm) {\n      elm.remove();\n    }\n\n    elm = null;\n    global$3.each(headerFragment.getAll('meta'), function (meta) {\n      if (meta.attr('http-equiv') === 'Content-Type') {\n        elm = meta;\n      }\n    });\n\n    if (data.docencoding) {\n      if (!elm) {\n        elm = new global$1('meta', 1);\n        elm.attr('http-equiv', 'Content-Type');\n        elm.shortEnded = true;\n        addHeadNode(elm);\n      }\n\n      elm.attr('content', 'text/html; charset=' + data.docencoding);\n    } else if (elm) {\n      elm.remove();\n    }\n\n    elm = headerFragment.getAll('title')[0];\n\n    if (data.title) {\n      if (!elm) {\n        elm = new global$1('title', 1);\n        addHeadNode(elm);\n      } else {\n        elm.empty();\n      }\n\n      elm.append(new global$1('#text', 3)).value = data.title;\n    } else if (elm) {\n      elm.remove();\n    }\n\n    global$3.each('keywords,description,author,copyright,robots'.split(','), function (name) {\n      var nodes = headerFragment.getAll('meta');\n      var i, meta;\n      var value = data[name];\n\n      for (i = 0; i < nodes.length; i++) {\n        meta = nodes[i];\n\n        if (meta.attr('name') === name) {\n          if (value) {\n            meta.attr('content', value);\n          } else {\n            meta.remove();\n          }\n\n          return;\n        }\n      }\n\n      if (value) {\n        elm = new global$1('meta', 1);\n        elm.attr('name', name);\n        elm.attr('content', value);\n        elm.shortEnded = true;\n        addHeadNode(elm);\n      }\n    });\n    var currentStyleSheetsMap = {};\n    global$3.each(headerFragment.getAll('link'), function (stylesheet) {\n      if (stylesheet.attr('rel') === 'stylesheet') {\n        currentStyleSheetsMap[stylesheet.attr('href')] = stylesheet;\n      }\n    });\n    global$3.each(data.stylesheets, function (stylesheet) {\n      if (!currentStyleSheetsMap[stylesheet]) {\n        elm = new global$1('link', 1);\n        elm.attr({\n          rel: 'stylesheet',\n          text: 'text/css',\n          href: stylesheet\n        });\n        elm.shortEnded = true;\n        addHeadNode(elm);\n      }\n\n      delete currentStyleSheetsMap[stylesheet];\n    });\n    global$3.each(currentStyleSheetsMap, function (stylesheet) {\n      stylesheet.remove();\n    });\n    elm = headerFragment.getAll('body')[0];\n\n    if (elm) {\n      setAttr(elm, 'dir', data.langdir);\n      setAttr(elm, 'style', data.style);\n      setAttr(elm, 'vlink', data.visited_color);\n      setAttr(elm, 'link', data.link_color);\n      setAttr(elm, 'alink', data.active_color);\n      dom.setAttribs(editor.getBody(), {\n        style: data.style,\n        dir: data.dir,\n        vLink: data.visited_color,\n        link: data.link_color,\n        aLink: data.active_color\n      });\n    }\n\n    elm = headerFragment.getAll('html')[0];\n\n    if (elm) {\n      setAttr(elm, 'lang', data.langcode);\n      setAttr(elm, 'xml:lang', data.langcode);\n    }\n\n    if (!headElement.firstChild) {\n      headElement.remove();\n    }\n\n    var html = global({\n      validate: false,\n      indent: true,\n      indent_before: 'head,html,body,meta,title,script,link,style',\n      indent_after: 'head,html,body,meta,title,script,link,style'\n    }).serialize(headerFragment);\n    return html.substring(0, html.indexOf('</body>'));\n  };\n\n  var open = function open(editor, headState) {\n    var data = htmlToData(editor, headState.get());\n    var defaultData = {\n      title: '',\n      keywords: '',\n      description: '',\n      robots: '',\n      author: '',\n      docencoding: ''\n    };\n\n    var initialData = _assign(_assign({}, defaultData), data);\n\n    editor.windowManager.open({\n      title: 'Metadata and Document Properties',\n      size: 'normal',\n      body: {\n        type: 'panel',\n        items: [{\n          name: 'title',\n          type: 'input',\n          label: 'Title'\n        }, {\n          name: 'keywords',\n          type: 'input',\n          label: 'Keywords'\n        }, {\n          name: 'description',\n          type: 'input',\n          label: 'Description'\n        }, {\n          name: 'robots',\n          type: 'input',\n          label: 'Robots'\n        }, {\n          name: 'author',\n          type: 'input',\n          label: 'Author'\n        }, {\n          name: 'docencoding',\n          type: 'input',\n          label: 'Encoding'\n        }]\n      },\n      buttons: [{\n        type: 'cancel',\n        name: 'cancel',\n        text: 'Cancel'\n      }, {\n        type: 'submit',\n        name: 'save',\n        text: 'Save',\n        primary: true\n      }],\n      initialData: initialData,\n      onSubmit: function onSubmit(api) {\n        var nuData = api.getData();\n        var headHtml = dataToHtml(editor, global$3.extend(data, nuData), headState.get());\n        headState.set(headHtml);\n        api.close();\n      }\n    });\n  };\n\n  var register$1 = function register$1(editor, headState) {\n    editor.addCommand('mceFullPageProperties', function () {\n      open(editor, headState);\n    });\n  };\n\n  var protectHtml = function protectHtml(protect, html) {\n    global$3.each(protect, function (pattern) {\n      html = html.replace(pattern, function (str) {\n        return '<!--mce:protected ' + escape(str) + '-->';\n      });\n    });\n    return html;\n  };\n\n  var unprotectHtml = function unprotectHtml(html) {\n    return html.replace(/<!--mce:protected ([\\s\\S]*?)-->/g, function (a, m) {\n      return unescape(m);\n    });\n  };\n\n  var each = global$3.each;\n\n  var low = function low(s) {\n    return s.replace(/<\\/?[A-Z]+/g, function (a) {\n      return a.toLowerCase();\n    });\n  };\n\n  var handleSetContent = function handleSetContent(editor, headState, footState, evt) {\n    var startPos,\n        endPos,\n        content,\n        styles = '';\n    var dom = editor.dom;\n\n    if (evt.selection) {\n      return;\n    }\n\n    content = protectHtml(getProtect(editor), evt.content);\n\n    if (evt.format === 'raw' && headState.get()) {\n      return;\n    }\n\n    if (evt.source_view && shouldHideInSourceView(editor)) {\n      return;\n    }\n\n    if (content.length === 0 && !evt.source_view) {\n      content = global$3.trim(headState.get()) + '\\n' + global$3.trim(content) + '\\n' + global$3.trim(footState.get());\n    }\n\n    content = content.replace(/<(\\/?)BODY/gi, '<$1body');\n    startPos = content.indexOf('<body');\n\n    if (startPos !== -1) {\n      startPos = content.indexOf('>', startPos);\n      headState.set(low(content.substring(0, startPos + 1)));\n      endPos = content.indexOf('</body', startPos);\n\n      if (endPos === -1) {\n        endPos = content.length;\n      }\n\n      evt.content = global$3.trim(content.substring(startPos + 1, endPos));\n      footState.set(low(content.substring(endPos)));\n    } else {\n      headState.set(getDefaultHeader(editor));\n      footState.set('\\n</body>\\n</html>');\n    }\n\n    var headerFragment = parseHeader(editor, headState.get());\n    each(headerFragment.getAll('style'), function (node) {\n      if (node.firstChild) {\n        styles += node.firstChild.value;\n      }\n    });\n    var bodyElm = headerFragment.getAll('body')[0];\n\n    if (bodyElm) {\n      dom.setAttribs(editor.getBody(), {\n        style: bodyElm.attr('style') || '',\n        dir: bodyElm.attr('dir') || '',\n        vLink: bodyElm.attr('vlink') || '',\n        link: bodyElm.attr('link') || '',\n        aLink: bodyElm.attr('alink') || ''\n      });\n    }\n\n    dom.remove('fullpage_styles');\n    var headElm = editor.getDoc().getElementsByTagName('head')[0];\n\n    if (styles) {\n      var styleElm = dom.add(headElm, 'style', {\n        id: 'fullpage_styles'\n      });\n      styleElm.appendChild(document.createTextNode(styles));\n    }\n\n    var currentStyleSheetsMap = {};\n    global$3.each(headElm.getElementsByTagName('link'), function (stylesheet) {\n      if (stylesheet.rel === 'stylesheet' && stylesheet.getAttribute('data-mce-fullpage')) {\n        currentStyleSheetsMap[stylesheet.href] = stylesheet;\n      }\n    });\n    global$3.each(headerFragment.getAll('link'), function (stylesheet) {\n      var href = stylesheet.attr('href');\n\n      if (!href) {\n        return true;\n      }\n\n      if (!currentStyleSheetsMap[href] && stylesheet.attr('rel') === 'stylesheet') {\n        dom.add(headElm, 'link', {\n          'rel': 'stylesheet',\n          'text': 'text/css',\n          href: href,\n          'data-mce-fullpage': '1'\n        });\n      }\n\n      delete currentStyleSheetsMap[href];\n    });\n    global$3.each(currentStyleSheetsMap, function (stylesheet) {\n      stylesheet.parentNode.removeChild(stylesheet);\n    });\n  };\n\n  var getDefaultHeader = function getDefaultHeader(editor) {\n    var header = '',\n        value,\n        styles = '';\n\n    if (getDefaultXmlPi(editor)) {\n      var piEncoding = getDefaultEncoding(editor);\n      header += '<?xml version=\"1.0\" encoding=\"' + (piEncoding ? piEncoding : 'ISO-8859-1') + '\" ?>\\n';\n    }\n\n    header += getDefaultDocType(editor);\n    header += '\\n<html>\\n<head>\\n';\n\n    if (value = getDefaultTitle(editor)) {\n      header += '<title>' + value + '</title>\\n';\n    }\n\n    if (value = getDefaultEncoding(editor)) {\n      header += '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=' + value + '\" />\\n';\n    }\n\n    if (value = getDefaultFontFamily(editor)) {\n      styles += 'font-family: ' + value + ';';\n    }\n\n    if (value = getDefaultFontSize(editor)) {\n      styles += 'font-size: ' + value + ';';\n    }\n\n    if (value = getDefaultTextColor(editor)) {\n      styles += 'color: ' + value + ';';\n    }\n\n    header += '</head>\\n<body' + (styles ? ' style=\"' + styles + '\"' : '') + '>\\n';\n    return header;\n  };\n\n  var handleGetContent = function handleGetContent(editor, head, foot, evt) {\n    if (evt.format === 'html' && !evt.selection && (!evt.source_view || !shouldHideInSourceView(editor))) {\n      evt.content = unprotectHtml(global$3.trim(head) + '\\n' + global$3.trim(evt.content) + '\\n' + global$3.trim(foot));\n    }\n  };\n\n  var setup = function setup(editor, headState, footState) {\n    editor.on('BeforeSetContent', function (evt) {\n      handleSetContent(editor, headState, footState, evt);\n    });\n    editor.on('GetContent', function (evt) {\n      handleGetContent(editor, headState.get(), footState.get(), evt);\n    });\n  };\n\n  var register = function register(editor) {\n    editor.ui.registry.addButton('fullpage', {\n      tooltip: 'Metadata and document properties',\n      icon: 'document-properties',\n      onAction: function onAction() {\n        editor.execCommand('mceFullPageProperties');\n      }\n    });\n    editor.ui.registry.addMenuItem('fullpage', {\n      text: 'Metadata and document properties',\n      icon: 'document-properties',\n      onAction: function onAction() {\n        editor.execCommand('mceFullPageProperties');\n      }\n    });\n  };\n\n  function Plugin() {\n    global$4.add('fullpage', function (editor) {\n      var headState = Cell(''),\n          footState = Cell('');\n      register$1(editor, headState);\n      register(editor);\n      setup(editor, headState, footState);\n    });\n  }\n\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/fullpage/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/tinymce/plugins/fullpage/index.js");
/******/ 	
/******/ })()
;