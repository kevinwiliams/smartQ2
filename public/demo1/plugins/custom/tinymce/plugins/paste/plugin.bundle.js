/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/paste/plugin.js":
/*!******************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/paste/plugin.js ***!
  \******************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var Cell = function Cell(initial) {\n    var value = initial;\n\n    var get = function get() {\n      return value;\n    };\n\n    var set = function set(v) {\n      value = v;\n    };\n\n    return {\n      get: get,\n      set: set\n    };\n  };\n\n  var global$b = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n  var hasProPlugin = function hasProPlugin(editor) {\n    if (editor.hasPlugin('powerpaste', true)) {\n      if (typeof window.console !== 'undefined' && window.console.log) {\n        window.console.log('PowerPaste is incompatible with Paste plugin! Remove \\'paste\\' from the \\'plugins\\' option.');\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  var get = function get(clipboard) {\n    return {\n      clipboard: clipboard\n    };\n  };\n\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n\n  var isType = function isType(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n\n  var isSimpleType = function isSimpleType(type) {\n    return function (value) {\n      return _typeof(value) === type;\n    };\n  };\n\n  var isArray = isType('array');\n\n  var isNullable = function isNullable(a) {\n    return a === null || a === undefined;\n  };\n\n  var isNonNullable = function isNonNullable(a) {\n    return !isNullable(a);\n  };\n\n  var isFunction = isSimpleType('function');\n\n  var noop = function noop() {};\n\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  var never = constant(false);\n  var always = constant(true);\n\n  var none = function none() {\n    return NONE;\n  };\n\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n\n  var some = function some(a) {\n    var constant_a = constant(a);\n\n    var self = function self() {\n      return me;\n    };\n\n    var bind = function bind(f) {\n      return f(a);\n    };\n\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n\n  var from$1 = function from$1(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n\n  var Optional = {\n    some: some,\n    none: none,\n    from: from$1\n  };\n  var nativeSlice = Array.prototype.slice;\n  var nativePush = Array.prototype.push;\n\n  var exists = function exists(xs, pred) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n\n      if (pred(x, i)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var map = function map(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n\n    return r;\n  };\n\n  var each = function each(xs, f) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n\n  var filter$1 = function filter$1(xs, pred) {\n    var r = [];\n\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n\n      if (pred(x, i)) {\n        r.push(x);\n      }\n    }\n\n    return r;\n  };\n\n  var foldl = function foldl(xs, f, acc) {\n    each(xs, function (x, i) {\n      acc = f(acc, x, i);\n    });\n    return acc;\n  };\n\n  var flatten = function flatten(xs) {\n    var r = [];\n\n    for (var i = 0, len = xs.length; i < len; ++i) {\n      if (!isArray(xs[i])) {\n        throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n      }\n\n      nativePush.apply(r, xs[i]);\n    }\n\n    return r;\n  };\n\n  var bind = function bind(xs, f) {\n    return flatten(map(xs, f));\n  };\n\n  var from = isFunction(Array.from) ? Array.from : function (x) {\n    return nativeSlice.call(x);\n  };\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) {\n          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n      }\n\n      return t;\n    };\n\n    return _assign.apply(this, arguments);\n  };\n\n  var singleton = function singleton(doRevoke) {\n    var subject = Cell(Optional.none());\n\n    var revoke = function revoke() {\n      return subject.get().each(doRevoke);\n    };\n\n    var clear = function clear() {\n      revoke();\n      subject.set(Optional.none());\n    };\n\n    var isSet = function isSet() {\n      return subject.get().isSome();\n    };\n\n    var get = function get() {\n      return subject.get();\n    };\n\n    var set = function set(s) {\n      revoke();\n      subject.set(Optional.some(s));\n    };\n\n    return {\n      clear: clear,\n      isSet: isSet,\n      get: get,\n      set: set\n    };\n  };\n\n  var value = function value() {\n    var subject = singleton(noop);\n\n    var on = function on(f) {\n      return subject.get().each(f);\n    };\n\n    return _assign(_assign({}, subject), {\n      on: on\n    });\n  };\n\n  var checkRange = function checkRange(str, substr, start) {\n    return substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n  };\n\n  var startsWith = function startsWith(str, prefix) {\n    return checkRange(str, prefix, 0);\n  };\n\n  var endsWith = function endsWith(str, suffix) {\n    return checkRange(str, suffix, str.length - suffix.length);\n  };\n\n  var repeat = function repeat(s, count) {\n    return count <= 0 ? '' : new Array(count + 1).join(s);\n  };\n\n  var global$a = tinymce.util.Tools.resolve('tinymce.Env');\n  var global$9 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n  var global$8 = tinymce.util.Tools.resolve('tinymce.util.Promise');\n  var global$7 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n  var firePastePreProcess = function firePastePreProcess(editor, html, internal, isWordHtml) {\n    return editor.fire('PastePreProcess', {\n      content: html,\n      internal: internal,\n      wordContent: isWordHtml\n    });\n  };\n\n  var firePastePostProcess = function firePastePostProcess(editor, node, internal, isWordHtml) {\n    return editor.fire('PastePostProcess', {\n      node: node,\n      internal: internal,\n      wordContent: isWordHtml\n    });\n  };\n\n  var firePastePlainTextToggle = function firePastePlainTextToggle(editor, state) {\n    return editor.fire('PastePlainTextToggle', {\n      state: state\n    });\n  };\n\n  var firePaste = function firePaste(editor, ieFake) {\n    return editor.fire('paste', {\n      ieFake: ieFake\n    });\n  };\n\n  var global$6 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n  var shouldBlockDrop = function shouldBlockDrop(editor) {\n    return editor.getParam('paste_block_drop', false);\n  };\n\n  var shouldPasteDataImages = function shouldPasteDataImages(editor) {\n    return editor.getParam('paste_data_images', false);\n  };\n\n  var shouldFilterDrop = function shouldFilterDrop(editor) {\n    return editor.getParam('paste_filter_drop', true);\n  };\n\n  var getPreProcess = function getPreProcess(editor) {\n    return editor.getParam('paste_preprocess');\n  };\n\n  var getPostProcess = function getPostProcess(editor) {\n    return editor.getParam('paste_postprocess');\n  };\n\n  var getWebkitStyles = function getWebkitStyles(editor) {\n    return editor.getParam('paste_webkit_styles');\n  };\n\n  var shouldRemoveWebKitStyles = function shouldRemoveWebKitStyles(editor) {\n    return editor.getParam('paste_remove_styles_if_webkit', true);\n  };\n\n  var shouldMergeFormats = function shouldMergeFormats(editor) {\n    return editor.getParam('paste_merge_formats', true);\n  };\n\n  var isSmartPasteEnabled = function isSmartPasteEnabled(editor) {\n    return editor.getParam('smart_paste', true);\n  };\n\n  var isPasteAsTextEnabled = function isPasteAsTextEnabled(editor) {\n    return editor.getParam('paste_as_text', false);\n  };\n\n  var getRetainStyleProps = function getRetainStyleProps(editor) {\n    return editor.getParam('paste_retain_style_properties');\n  };\n\n  var getWordValidElements = function getWordValidElements(editor) {\n    var defaultValidElements = '-strong/b,-em/i,-u,-span,-p,-ol,-ul,-li,-h1,-h2,-h3,-h4,-h5,-h6,' + '-p/div,-a[href|name],sub,sup,strike,br,del,table[width],tr,' + 'td[colspan|rowspan|width],th[colspan|rowspan|width],thead,tfoot,tbody';\n    return editor.getParam('paste_word_valid_elements', defaultValidElements);\n  };\n\n  var shouldConvertWordFakeLists = function shouldConvertWordFakeLists(editor) {\n    return editor.getParam('paste_convert_word_fake_lists', true);\n  };\n\n  var shouldUseDefaultFilters = function shouldUseDefaultFilters(editor) {\n    return editor.getParam('paste_enable_default_filters', true);\n  };\n\n  var getValidate = function getValidate(editor) {\n    return editor.getParam('validate');\n  };\n\n  var getAllowHtmlDataUrls = function getAllowHtmlDataUrls(editor) {\n    return editor.getParam('allow_html_data_urls', false, 'boolean');\n  };\n\n  var getPasteDataImages = function getPasteDataImages(editor) {\n    return editor.getParam('paste_data_images', false, 'boolean');\n  };\n\n  var getImagesDataImgFilter = function getImagesDataImgFilter(editor) {\n    return editor.getParam('images_dataimg_filter');\n  };\n\n  var getImagesReuseFilename = function getImagesReuseFilename(editor) {\n    return editor.getParam('images_reuse_filename');\n  };\n\n  var getForcedRootBlock = function getForcedRootBlock(editor) {\n    return editor.getParam('forced_root_block');\n  };\n\n  var getForcedRootBlockAttrs = function getForcedRootBlockAttrs(editor) {\n    return editor.getParam('forced_root_block_attrs');\n  };\n\n  var getTabSpaces = function getTabSpaces(editor) {\n    return editor.getParam('paste_tab_spaces', 4, 'number');\n  };\n\n  var getAllowedImageFileTypes = function getAllowedImageFileTypes(editor) {\n    var defaultImageFileTypes = 'jpeg,jpg,jpe,jfi,jif,jfif,png,gif,bmp,webp';\n    return global$6.explode(editor.getParam('images_file_types', defaultImageFileTypes, 'string'));\n  };\n\n  var internalMimeType = 'x-tinymce/html';\n  var internalMark = '<!-- ' + internalMimeType + ' -->';\n\n  var mark = function mark(html) {\n    return internalMark + html;\n  };\n\n  var unmark = function unmark(html) {\n    return html.replace(internalMark, '');\n  };\n\n  var isMarked = function isMarked(html) {\n    return html.indexOf(internalMark) !== -1;\n  };\n\n  var internalHtmlMime = constant(internalMimeType);\n  var hasOwnProperty = Object.hasOwnProperty;\n\n  var has = function has(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  var global$5 = tinymce.util.Tools.resolve('tinymce.html.Entities');\n\n  var isPlainText = function isPlainText(text) {\n    return !/<(?:\\/?(?!(?:div|p|br|span)>)\\w+|(?:(?!(?:span style=\"white-space:\\s?pre;?\">)|br\\s?\\/>))\\w+\\s[^>]+)>/i.test(text);\n  };\n\n  var toBRs = function toBRs(text) {\n    return text.replace(/\\r?\\n/g, '<br>');\n  };\n\n  var openContainer = function openContainer(rootTag, rootAttrs) {\n    var attrs = [];\n    var tag = '<' + rootTag;\n\n    if (_typeof(rootAttrs) === 'object') {\n      for (var key in rootAttrs) {\n        if (has(rootAttrs, key)) {\n          attrs.push(key + '=\"' + global$5.encodeAllRaw(rootAttrs[key]) + '\"');\n        }\n      }\n\n      if (attrs.length) {\n        tag += ' ' + attrs.join(' ');\n      }\n    }\n\n    return tag + '>';\n  };\n\n  var toBlockElements = function toBlockElements(text, rootTag, rootAttrs) {\n    var blocks = text.split(/\\n\\n/);\n    var tagOpen = openContainer(rootTag, rootAttrs);\n    var tagClose = '</' + rootTag + '>';\n    var paragraphs = global$6.map(blocks, function (p) {\n      return p.split(/\\n/).join('<br />');\n    });\n\n    var stitch = function stitch(p) {\n      return tagOpen + p + tagClose;\n    };\n\n    return paragraphs.length === 1 ? paragraphs[0] : global$6.map(paragraphs, stitch).join('');\n  };\n\n  var convert = function convert(text, rootTag, rootAttrs) {\n    return rootTag ? toBlockElements(text, rootTag === true ? 'p' : rootTag, rootAttrs) : toBRs(text);\n  };\n\n  var global$4 = tinymce.util.Tools.resolve('tinymce.html.DomParser');\n  var global$3 = tinymce.util.Tools.resolve('tinymce.html.Serializer');\n  var nbsp = '\\xA0';\n  var global$2 = tinymce.util.Tools.resolve('tinymce.html.Node');\n  var global$1 = tinymce.util.Tools.resolve('tinymce.html.Schema');\n\n  var isRegExp = function isRegExp(val) {\n    return val.constructor === RegExp;\n  };\n\n  var filter = function filter(content, items) {\n    global$6.each(items, function (v) {\n      if (isRegExp(v)) {\n        content = content.replace(v, '');\n      } else {\n        content = content.replace(v[0], v[1]);\n      }\n    });\n    return content;\n  };\n\n  var innerText = function innerText(html) {\n    var schema = global$1();\n    var domParser = global$4({}, schema);\n    var text = '';\n    var shortEndedElements = schema.getShortEndedElements();\n    var ignoreElements = global$6.makeMap('script noscript style textarea video audio iframe object', ' ');\n    var blockElements = schema.getBlockElements();\n\n    var walk = function walk(node) {\n      var name = node.name,\n          currentNode = node;\n\n      if (name === 'br') {\n        text += '\\n';\n        return;\n      }\n\n      if (name === 'wbr') {\n        return;\n      }\n\n      if (shortEndedElements[name]) {\n        text += ' ';\n      }\n\n      if (ignoreElements[name]) {\n        text += ' ';\n        return;\n      }\n\n      if (node.type === 3) {\n        text += node.value;\n      }\n\n      if (!node.shortEnded) {\n        if (node = node.firstChild) {\n          do {\n            walk(node);\n          } while (node = node.next);\n        }\n      }\n\n      if (blockElements[name] && currentNode.next) {\n        text += '\\n';\n\n        if (name === 'p') {\n          text += '\\n';\n        }\n      }\n    };\n\n    html = filter(html, [/<!\\[[^\\]]+\\]>/g]);\n    walk(domParser.parse(html));\n    return text;\n  };\n\n  var trimHtml = function trimHtml(html) {\n    var trimSpaces = function trimSpaces(all, s1, s2) {\n      if (!s1 && !s2) {\n        return ' ';\n      }\n\n      return nbsp;\n    };\n\n    html = filter(html, [/^[\\s\\S]*<body[^>]*>\\s*|\\s*<\\/body[^>]*>[\\s\\S]*$/ig, /<!--StartFragment-->|<!--EndFragment-->/g, [/( ?)<span class=\"Apple-converted-space\">\\u00a0<\\/span>( ?)/g, trimSpaces], /<br class=\"Apple-interchange-newline\">/g, /<br>$/i]);\n    return html;\n  };\n\n  var createIdGenerator = function createIdGenerator(prefix) {\n    var count = 0;\n    return function () {\n      return prefix + count++;\n    };\n  };\n\n  var getImageMimeType = function getImageMimeType(ext) {\n    var lowerExt = ext.toLowerCase();\n    var mimeOverrides = {\n      jpg: 'jpeg',\n      jpe: 'jpeg',\n      jfi: 'jpeg',\n      jif: 'jpeg',\n      jfif: 'jpeg',\n      pjpeg: 'jpeg',\n      pjp: 'jpeg',\n      svg: 'svg+xml'\n    };\n    return global$6.hasOwn(mimeOverrides, lowerExt) ? 'image/' + mimeOverrides[lowerExt] : 'image/' + lowerExt;\n  };\n\n  var isWordContent = function isWordContent(content) {\n    return /<font face=\"Times New Roman\"|class=\"?Mso|style=\"[^\"]*\\bmso-|style='[^']*\\bmso-|w:WordDocument/i.test(content) || /class=\"OutlineElement/.test(content) || /id=\"?docs\\-internal\\-guid\\-/.test(content);\n  };\n\n  var isNumericList = function isNumericList(text) {\n    var found = false;\n    var patterns = [/^[IVXLMCD]+\\.[ \\u00a0]/, /^[ivxlmcd]+\\.[ \\u00a0]/, /^[a-z]{1,2}[\\.\\)][ \\u00a0]/, /^[A-Z]{1,2}[\\.\\)][ \\u00a0]/, /^[0-9]+\\.[ \\u00a0]/, /^[\\u3007\\u4e00\\u4e8c\\u4e09\\u56db\\u4e94\\u516d\\u4e03\\u516b\\u4e5d]+\\.[ \\u00a0]/, /^[\\u58f1\\u5f10\\u53c2\\u56db\\u4f0d\\u516d\\u4e03\\u516b\\u4e5d\\u62fe]+\\.[ \\u00a0]/];\n    text = text.replace(/^[\\u00a0 ]+/, '');\n    global$6.each(patterns, function (pattern) {\n      if (pattern.test(text)) {\n        found = true;\n        return false;\n      }\n    });\n    return found;\n  };\n\n  var isBulletList = function isBulletList(text) {\n    return /^[\\s\\u00a0]*[\\u2022\\u00b7\\u00a7\\u25CF]\\s*/.test(text);\n  };\n\n  var convertFakeListsToProperLists = function convertFakeListsToProperLists(node) {\n    var currentListNode,\n        prevListNode,\n        lastLevel = 1;\n\n    var getText = function getText(node) {\n      var txt = '';\n\n      if (node.type === 3) {\n        return node.value;\n      }\n\n      if (node = node.firstChild) {\n        do {\n          txt += getText(node);\n        } while (node = node.next);\n      }\n\n      return txt;\n    };\n\n    var trimListStart = function trimListStart(node, regExp) {\n      if (node.type === 3) {\n        if (regExp.test(node.value)) {\n          node.value = node.value.replace(regExp, '');\n          return false;\n        }\n      }\n\n      if (node = node.firstChild) {\n        do {\n          if (!trimListStart(node, regExp)) {\n            return false;\n          }\n        } while (node = node.next);\n      }\n\n      return true;\n    };\n\n    var removeIgnoredNodes = function removeIgnoredNodes(node) {\n      if (node._listIgnore) {\n        node.remove();\n        return;\n      }\n\n      if (node = node.firstChild) {\n        do {\n          removeIgnoredNodes(node);\n        } while (node = node.next);\n      }\n    };\n\n    var convertParagraphToLi = function convertParagraphToLi(paragraphNode, listName, start) {\n      var level = paragraphNode._listLevel || lastLevel;\n\n      if (level !== lastLevel) {\n        if (level < lastLevel) {\n          if (currentListNode) {\n            currentListNode = currentListNode.parent.parent;\n          }\n        } else {\n          prevListNode = currentListNode;\n          currentListNode = null;\n        }\n      }\n\n      if (!currentListNode || currentListNode.name !== listName) {\n        prevListNode = prevListNode || currentListNode;\n        currentListNode = new global$2(listName, 1);\n\n        if (start > 1) {\n          currentListNode.attr('start', '' + start);\n        }\n\n        paragraphNode.wrap(currentListNode);\n      } else {\n        currentListNode.append(paragraphNode);\n      }\n\n      paragraphNode.name = 'li';\n\n      if (level > lastLevel && prevListNode) {\n        prevListNode.lastChild.append(currentListNode);\n      }\n\n      lastLevel = level;\n      removeIgnoredNodes(paragraphNode);\n      trimListStart(paragraphNode, /^\\u00a0+/);\n      trimListStart(paragraphNode, /^\\s*([\\u2022\\u00b7\\u00a7\\u25CF]|\\w+\\.)/);\n      trimListStart(paragraphNode, /^\\u00a0+/);\n    };\n\n    var elements = [];\n    var child = node.firstChild;\n\n    while (typeof child !== 'undefined' && child !== null) {\n      elements.push(child);\n      child = child.walk();\n\n      if (child !== null) {\n        while (typeof child !== 'undefined' && child.parent !== node) {\n          child = child.walk();\n        }\n      }\n    }\n\n    for (var i = 0; i < elements.length; i++) {\n      node = elements[i];\n\n      if (node.name === 'p' && node.firstChild) {\n        var nodeText = getText(node);\n\n        if (isBulletList(nodeText)) {\n          convertParagraphToLi(node, 'ul');\n          continue;\n        }\n\n        if (isNumericList(nodeText)) {\n          var matches = /([0-9]+)\\./.exec(nodeText);\n          var start = 1;\n\n          if (matches) {\n            start = parseInt(matches[1], 10);\n          }\n\n          convertParagraphToLi(node, 'ol', start);\n          continue;\n        }\n\n        if (node._listLevel) {\n          convertParagraphToLi(node, 'ul', 1);\n          continue;\n        }\n\n        currentListNode = null;\n      } else {\n        prevListNode = currentListNode;\n        currentListNode = null;\n      }\n    }\n  };\n\n  var filterStyles = function filterStyles(editor, validStyles, node, styleValue) {\n    var outputStyles = {};\n    var styles = editor.dom.parseStyle(styleValue);\n    global$6.each(styles, function (value, name) {\n      switch (name) {\n        case 'mso-list':\n          var matches = /\\w+ \\w+([0-9]+)/i.exec(styleValue);\n\n          if (matches) {\n            node._listLevel = parseInt(matches[1], 10);\n          }\n\n          if (/Ignore/i.test(value) && node.firstChild) {\n            node._listIgnore = true;\n            node.firstChild._listIgnore = true;\n          }\n\n          break;\n\n        case 'horiz-align':\n          name = 'text-align';\n          break;\n\n        case 'vert-align':\n          name = 'vertical-align';\n          break;\n\n        case 'font-color':\n        case 'mso-foreground':\n          name = 'color';\n          break;\n\n        case 'mso-background':\n        case 'mso-highlight':\n          name = 'background';\n          break;\n\n        case 'font-weight':\n        case 'font-style':\n          if (value !== 'normal') {\n            outputStyles[name] = value;\n          }\n\n          return;\n\n        case 'mso-element':\n          if (/^(comment|comment-list)$/i.test(value)) {\n            node.remove();\n            return;\n          }\n\n          break;\n      }\n\n      if (name.indexOf('mso-comment') === 0) {\n        node.remove();\n        return;\n      }\n\n      if (name.indexOf('mso-') === 0) {\n        return;\n      }\n\n      if (getRetainStyleProps(editor) === 'all' || validStyles && validStyles[name]) {\n        outputStyles[name] = value;\n      }\n    });\n\n    if (/(bold)/i.test(outputStyles['font-weight'])) {\n      delete outputStyles['font-weight'];\n      node.wrap(new global$2('b', 1));\n    }\n\n    if (/(italic)/i.test(outputStyles['font-style'])) {\n      delete outputStyles['font-style'];\n      node.wrap(new global$2('i', 1));\n    }\n\n    var outputStyle = editor.dom.serializeStyle(outputStyles, node.name);\n\n    if (outputStyle) {\n      return outputStyle;\n    }\n\n    return null;\n  };\n\n  var filterWordContent = function filterWordContent(editor, content) {\n    var validStyles;\n    var retainStyleProperties = getRetainStyleProps(editor);\n\n    if (retainStyleProperties) {\n      validStyles = global$6.makeMap(retainStyleProperties.split(/[, ]/));\n    }\n\n    content = filter(content, [/<br class=\"?Apple-interchange-newline\"?>/gi, /<b[^>]+id=\"?docs-internal-[^>]*>/gi, /<!--[\\s\\S]+?-->/gi, /<(!|script[^>]*>.*?<\\/script(?=[>\\s])|\\/?(\\?xml(:\\w+)?|img|meta|link|style|\\w:\\w+)(?=[\\s\\/>]))[^>]*>/gi, [/<(\\/?)s>/gi, '<$1strike>'], [/&nbsp;/gi, nbsp], [/<span\\s+style\\s*=\\s*\"\\s*mso-spacerun\\s*:\\s*yes\\s*;?\\s*\"\\s*>([\\s\\u00a0]*)<\\/span>/gi, function (str, spaces) {\n      return spaces.length > 0 ? spaces.replace(/./, ' ').slice(Math.floor(spaces.length / 2)).split('').join(nbsp) : '';\n    }]]);\n    var validElements = getWordValidElements(editor);\n    var schema = global$1({\n      valid_elements: validElements,\n      valid_children: '-li[p]'\n    });\n    global$6.each(schema.elements, function (rule) {\n      if (!rule.attributes[\"class\"]) {\n        rule.attributes[\"class\"] = {};\n        rule.attributesOrder.push('class');\n      }\n\n      if (!rule.attributes.style) {\n        rule.attributes.style = {};\n        rule.attributesOrder.push('style');\n      }\n    });\n    var domParser = global$4({}, schema);\n    domParser.addAttributeFilter('style', function (nodes) {\n      var i = nodes.length,\n          node;\n\n      while (i--) {\n        node = nodes[i];\n        node.attr('style', filterStyles(editor, validStyles, node, node.attr('style')));\n\n        if (node.name === 'span' && node.parent && !node.attributes.length) {\n          node.unwrap();\n        }\n      }\n    });\n    domParser.addAttributeFilter('class', function (nodes) {\n      var i = nodes.length,\n          node,\n          className;\n\n      while (i--) {\n        node = nodes[i];\n        className = node.attr('class');\n\n        if (/^(MsoCommentReference|MsoCommentText|msoDel)$/i.test(className)) {\n          node.remove();\n        }\n\n        node.attr('class', null);\n      }\n    });\n    domParser.addNodeFilter('del', function (nodes) {\n      var i = nodes.length;\n\n      while (i--) {\n        nodes[i].remove();\n      }\n    });\n    domParser.addNodeFilter('a', function (nodes) {\n      var i = nodes.length,\n          node,\n          href,\n          name;\n\n      while (i--) {\n        node = nodes[i];\n        href = node.attr('href');\n        name = node.attr('name');\n\n        if (href && href.indexOf('#_msocom_') !== -1) {\n          node.remove();\n          continue;\n        }\n\n        if (href && href.indexOf('file://') === 0) {\n          href = href.split('#')[1];\n\n          if (href) {\n            href = '#' + href;\n          }\n        }\n\n        if (!href && !name) {\n          node.unwrap();\n        } else {\n          if (name && !/^_?(?:toc|edn|ftn)/i.test(name)) {\n            node.unwrap();\n            continue;\n          }\n\n          node.attr({\n            href: href,\n            name: name\n          });\n        }\n      }\n    });\n    var rootNode = domParser.parse(content);\n\n    if (shouldConvertWordFakeLists(editor)) {\n      convertFakeListsToProperLists(rootNode);\n    }\n\n    content = global$3({\n      validate: getValidate(editor)\n    }, schema).serialize(rootNode);\n    return content;\n  };\n\n  var preProcess$1 = function preProcess$1(editor, content) {\n    return shouldUseDefaultFilters(editor) ? filterWordContent(editor, content) : content;\n  };\n\n  var preProcess = function preProcess(editor, html) {\n    var parser = global$4({}, editor.schema);\n    parser.addNodeFilter('meta', function (nodes) {\n      global$6.each(nodes, function (node) {\n        node.remove();\n      });\n    });\n    var fragment = parser.parse(html, {\n      forced_root_block: false,\n      isRootContent: true\n    });\n    return global$3({\n      validate: getValidate(editor)\n    }, editor.schema).serialize(fragment);\n  };\n\n  var processResult = function processResult(content, cancelled) {\n    return {\n      content: content,\n      cancelled: cancelled\n    };\n  };\n\n  var postProcessFilter = function postProcessFilter(editor, html, internal, isWordHtml) {\n    var tempBody = editor.dom.create('div', {\n      style: 'display:none'\n    }, html);\n    var postProcessArgs = firePastePostProcess(editor, tempBody, internal, isWordHtml);\n    return processResult(postProcessArgs.node.innerHTML, postProcessArgs.isDefaultPrevented());\n  };\n\n  var filterContent = function filterContent(editor, content, internal, isWordHtml) {\n    var preProcessArgs = firePastePreProcess(editor, content, internal, isWordHtml);\n    var filteredContent = preProcess(editor, preProcessArgs.content);\n\n    if (editor.hasEventListeners('PastePostProcess') && !preProcessArgs.isDefaultPrevented()) {\n      return postProcessFilter(editor, filteredContent, internal, isWordHtml);\n    } else {\n      return processResult(filteredContent, preProcessArgs.isDefaultPrevented());\n    }\n  };\n\n  var process = function process(editor, html, internal) {\n    var isWordHtml = isWordContent(html);\n    var content = isWordHtml ? preProcess$1(editor, html) : html;\n    return filterContent(editor, content, internal, isWordHtml);\n  };\n\n  var pasteHtml$1 = function pasteHtml$1(editor, html) {\n    editor.insertContent(html, {\n      merge: shouldMergeFormats(editor),\n      paste: true\n    });\n    return true;\n  };\n\n  var isAbsoluteUrl = function isAbsoluteUrl(url) {\n    return /^https?:\\/\\/[\\w\\?\\-\\/+=.&%@~#]+$/i.test(url);\n  };\n\n  var isImageUrl = function isImageUrl(editor, url) {\n    return isAbsoluteUrl(url) && exists(getAllowedImageFileTypes(editor), function (type) {\n      return endsWith(url.toLowerCase(), '.' + type.toLowerCase());\n    });\n  };\n\n  var createImage = function createImage(editor, url, pasteHtmlFn) {\n    editor.undoManager.extra(function () {\n      pasteHtmlFn(editor, url);\n    }, function () {\n      editor.insertContent('<img src=\"' + url + '\">');\n    });\n    return true;\n  };\n\n  var createLink = function createLink(editor, url, pasteHtmlFn) {\n    editor.undoManager.extra(function () {\n      pasteHtmlFn(editor, url);\n    }, function () {\n      editor.execCommand('mceInsertLink', false, url);\n    });\n    return true;\n  };\n\n  var linkSelection = function linkSelection(editor, html, pasteHtmlFn) {\n    return editor.selection.isCollapsed() === false && isAbsoluteUrl(html) ? createLink(editor, html, pasteHtmlFn) : false;\n  };\n\n  var insertImage = function insertImage(editor, html, pasteHtmlFn) {\n    return isImageUrl(editor, html) ? createImage(editor, html, pasteHtmlFn) : false;\n  };\n\n  var smartInsertContent = function smartInsertContent(editor, html) {\n    global$6.each([linkSelection, insertImage, pasteHtml$1], function (action) {\n      return action(editor, html, pasteHtml$1) !== true;\n    });\n  };\n\n  var insertContent = function insertContent(editor, html, pasteAsText) {\n    if (pasteAsText || isSmartPasteEnabled(editor) === false) {\n      pasteHtml$1(editor, html);\n    } else {\n      smartInsertContent(editor, html);\n    }\n  };\n\n  var isCollapsibleWhitespace = function isCollapsibleWhitespace(c) {\n    return ' \\f\\t\\x0B'.indexOf(c) !== -1;\n  };\n\n  var isNewLineChar = function isNewLineChar(c) {\n    return c === '\\n' || c === '\\r';\n  };\n\n  var isNewline = function isNewline(text, idx) {\n    return idx < text.length && idx >= 0 ? isNewLineChar(text[idx]) : false;\n  };\n\n  var normalizeWhitespace = function normalizeWhitespace(editor, text) {\n    var tabSpace = repeat(' ', getTabSpaces(editor));\n    var normalizedText = text.replace(/\\t/g, tabSpace);\n    var result = foldl(normalizedText, function (acc, c) {\n      if (isCollapsibleWhitespace(c) || c === nbsp) {\n        if (acc.pcIsSpace || acc.str === '' || acc.str.length === normalizedText.length - 1 || isNewline(normalizedText, acc.str.length + 1)) {\n          return {\n            pcIsSpace: false,\n            str: acc.str + nbsp\n          };\n        } else {\n          return {\n            pcIsSpace: true,\n            str: acc.str + ' '\n          };\n        }\n      } else {\n        return {\n          pcIsSpace: isNewLineChar(c),\n          str: acc.str + c\n        };\n      }\n    }, {\n      pcIsSpace: false,\n      str: ''\n    });\n    return result.str;\n  };\n\n  var doPaste = function doPaste(editor, content, internal, pasteAsText) {\n    var args = process(editor, content, internal);\n\n    if (args.cancelled === false) {\n      insertContent(editor, args.content, pasteAsText);\n    }\n  };\n\n  var _pasteHtml = function pasteHtml(editor, html, internalFlag) {\n    var internal = internalFlag ? internalFlag : isMarked(html);\n    doPaste(editor, unmark(html), internal, false);\n  };\n\n  var _pasteText = function pasteText(editor, text) {\n    var encodedText = editor.dom.encode(text).replace(/\\r\\n/g, '\\n');\n    var normalizedText = normalizeWhitespace(editor, encodedText);\n    var html = convert(normalizedText, getForcedRootBlock(editor), getForcedRootBlockAttrs(editor));\n    doPaste(editor, html, false, true);\n  };\n\n  var getDataTransferItems = function getDataTransferItems(dataTransfer) {\n    var items = {};\n    var mceInternalUrlPrefix = 'data:text/mce-internal,';\n\n    if (dataTransfer) {\n      if (dataTransfer.getData) {\n        var legacyText = dataTransfer.getData('Text');\n\n        if (legacyText && legacyText.length > 0) {\n          if (legacyText.indexOf(mceInternalUrlPrefix) === -1) {\n            items['text/plain'] = legacyText;\n          }\n        }\n      }\n\n      if (dataTransfer.types) {\n        for (var i = 0; i < dataTransfer.types.length; i++) {\n          var contentType = dataTransfer.types[i];\n\n          try {\n            items[contentType] = dataTransfer.getData(contentType);\n          } catch (ex) {\n            items[contentType] = '';\n          }\n        }\n      }\n    }\n\n    return items;\n  };\n\n  var getClipboardContent = function getClipboardContent(editor, clipboardEvent) {\n    return getDataTransferItems(clipboardEvent.clipboardData || editor.getDoc().dataTransfer);\n  };\n\n  var hasContentType = function hasContentType(clipboardContent, mimeType) {\n    return mimeType in clipboardContent && clipboardContent[mimeType].length > 0;\n  };\n\n  var hasHtmlOrText = function hasHtmlOrText(content) {\n    return hasContentType(content, 'text/html') || hasContentType(content, 'text/plain');\n  };\n\n  var parseDataUri = function parseDataUri(uri) {\n    var matches = /data:([^;]+);base64,([a-z0-9\\+\\/=]+)/i.exec(uri);\n\n    if (matches) {\n      return {\n        type: matches[1],\n        data: decodeURIComponent(matches[2])\n      };\n    } else {\n      return {\n        type: null,\n        data: null\n      };\n    }\n  };\n\n  var isValidDataUriImage = function isValidDataUriImage(editor, imgElm) {\n    var filter = getImagesDataImgFilter(editor);\n    return filter ? filter(imgElm) : true;\n  };\n\n  var extractFilename = function extractFilename(editor, str) {\n    var m = str.match(/([\\s\\S]+?)(?:\\.[a-z0-9.]+)$/i);\n    return isNonNullable(m) ? editor.dom.encode(m[1]) : null;\n  };\n\n  var uniqueId = createIdGenerator('mceclip');\n\n  var pasteImage = function pasteImage(editor, imageItem) {\n    var _a = parseDataUri(imageItem.uri),\n        base64 = _a.data,\n        type = _a.type;\n\n    var id = uniqueId();\n    var file = imageItem.blob;\n    var img = new Image();\n    img.src = imageItem.uri;\n\n    if (isValidDataUriImage(editor, img)) {\n      var blobCache = editor.editorUpload.blobCache;\n      var blobInfo = void 0;\n      var existingBlobInfo = blobCache.getByData(base64, type);\n\n      if (!existingBlobInfo) {\n        var useFileName = getImagesReuseFilename(editor) && isNonNullable(file.name);\n        var name_1 = useFileName ? extractFilename(editor, file.name) : id;\n        var filename = useFileName ? file.name : undefined;\n        blobInfo = blobCache.create(id, file, base64, name_1, filename);\n        blobCache.add(blobInfo);\n      } else {\n        blobInfo = existingBlobInfo;\n      }\n\n      _pasteHtml(editor, '<img src=\"' + blobInfo.blobUri() + '\">', false);\n    } else {\n      _pasteHtml(editor, '<img src=\"' + imageItem.uri + '\">', false);\n    }\n  };\n\n  var isClipboardEvent = function isClipboardEvent(event) {\n    return event.type === 'paste';\n  };\n\n  var isDataTransferItem = function isDataTransferItem(item) {\n    return isNonNullable(item.getAsFile);\n  };\n\n  var readFilesAsDataUris = function readFilesAsDataUris(items) {\n    return global$8.all(map(items, function (item) {\n      return new global$8(function (resolve) {\n        var blob = isDataTransferItem(item) ? item.getAsFile() : item;\n        var reader = new window.FileReader();\n\n        reader.onload = function () {\n          resolve({\n            blob: blob,\n            uri: reader.result\n          });\n        };\n\n        reader.readAsDataURL(blob);\n      });\n    }));\n  };\n\n  var isImage = function isImage(editor) {\n    var allowedExtensions = getAllowedImageFileTypes(editor);\n    return function (file) {\n      return startsWith(file.type, 'image/') && exists(allowedExtensions, function (extension) {\n        return getImageMimeType(extension) === file.type;\n      });\n    };\n  };\n\n  var getImagesFromDataTransfer = function getImagesFromDataTransfer(editor, dataTransfer) {\n    var items = dataTransfer.items ? bind(from(dataTransfer.items), function (item) {\n      return item.kind === 'file' ? [item.getAsFile()] : [];\n    }) : [];\n    var files = dataTransfer.files ? from(dataTransfer.files) : [];\n    return filter$1(items.length > 0 ? items : files, isImage(editor));\n  };\n\n  var _pasteImageData = function pasteImageData(editor, e, rng) {\n    var dataTransfer = isClipboardEvent(e) ? e.clipboardData : e.dataTransfer;\n\n    if (getPasteDataImages(editor) && dataTransfer) {\n      var images = getImagesFromDataTransfer(editor, dataTransfer);\n\n      if (images.length > 0) {\n        e.preventDefault();\n        readFilesAsDataUris(images).then(function (fileResults) {\n          if (rng) {\n            editor.selection.setRng(rng);\n          }\n\n          each(fileResults, function (result) {\n            pasteImage(editor, result);\n          });\n        });\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var isBrokenAndroidClipboardEvent = function isBrokenAndroidClipboardEvent(e) {\n    var clipboardData = e.clipboardData;\n    return navigator.userAgent.indexOf('Android') !== -1 && clipboardData && clipboardData.items && clipboardData.items.length === 0;\n  };\n\n  var isKeyboardPasteEvent = function isKeyboardPasteEvent(e) {\n    return global$7.metaKeyPressed(e) && e.keyCode === 86 || e.shiftKey && e.keyCode === 45;\n  };\n\n  var registerEventHandlers = function registerEventHandlers(editor, pasteBin, pasteFormat) {\n    var keyboardPasteEvent = value();\n    var keyboardPastePressed = value();\n    var keyboardPastePlainTextState;\n    editor.on('keyup', keyboardPastePressed.clear);\n    editor.on('keydown', function (e) {\n      var removePasteBinOnKeyUp = function removePasteBinOnKeyUp(e) {\n        if (isKeyboardPasteEvent(e) && !e.isDefaultPrevented()) {\n          pasteBin.remove();\n        }\n      };\n\n      if (isKeyboardPasteEvent(e) && !e.isDefaultPrevented()) {\n        keyboardPastePlainTextState = e.shiftKey && e.keyCode === 86;\n\n        if (keyboardPastePlainTextState && global$a.webkit && navigator.userAgent.indexOf('Version/') !== -1) {\n          return;\n        }\n\n        e.stopImmediatePropagation();\n        keyboardPasteEvent.set(e);\n        keyboardPastePressed.set(true);\n\n        if (global$a.ie && keyboardPastePlainTextState) {\n          e.preventDefault();\n          firePaste(editor, true);\n          return;\n        }\n\n        pasteBin.remove();\n        pasteBin.create();\n        editor.once('keyup', removePasteBinOnKeyUp);\n        editor.once('paste', function () {\n          editor.off('keyup', removePasteBinOnKeyUp);\n        });\n      }\n    });\n\n    var insertClipboardContent = function insertClipboardContent(editor, clipboardContent, isKeyBoardPaste, plainTextMode, internal) {\n      var content;\n\n      if (hasContentType(clipboardContent, 'text/html')) {\n        content = clipboardContent['text/html'];\n      } else {\n        content = pasteBin.getHtml();\n        internal = internal ? internal : isMarked(content);\n\n        if (pasteBin.isDefaultContent(content)) {\n          plainTextMode = true;\n        }\n      }\n\n      content = trimHtml(content);\n      pasteBin.remove();\n      var isPlainTextHtml = internal === false && isPlainText(content);\n      var isAbsoluteUrl$1 = isAbsoluteUrl(content);\n\n      if (!content.length || isPlainTextHtml && !isAbsoluteUrl$1) {\n        plainTextMode = true;\n      }\n\n      if (plainTextMode || isAbsoluteUrl$1) {\n        if (hasContentType(clipboardContent, 'text/plain') && isPlainTextHtml) {\n          content = clipboardContent['text/plain'];\n        } else {\n          content = innerText(content);\n        }\n      }\n\n      if (pasteBin.isDefaultContent(content)) {\n        if (!isKeyBoardPaste) {\n          editor.windowManager.alert('Please use Ctrl+V/Cmd+V keyboard shortcuts to paste contents.');\n        }\n\n        return;\n      }\n\n      if (plainTextMode) {\n        _pasteText(editor, content);\n      } else {\n        _pasteHtml(editor, content, internal);\n      }\n    };\n\n    var getLastRng = function getLastRng() {\n      return pasteBin.getLastRng() || editor.selection.getRng();\n    };\n\n    editor.on('paste', function (e) {\n      var isKeyboardPaste = keyboardPasteEvent.isSet() || keyboardPastePressed.isSet();\n\n      if (isKeyboardPaste) {\n        keyboardPasteEvent.clear();\n      }\n\n      var clipboardContent = getClipboardContent(editor, e);\n      var plainTextMode = pasteFormat.get() === 'text' || keyboardPastePlainTextState;\n      var internal = hasContentType(clipboardContent, internalHtmlMime());\n      keyboardPastePlainTextState = false;\n\n      if (e.isDefaultPrevented() || isBrokenAndroidClipboardEvent(e)) {\n        pasteBin.remove();\n        return;\n      }\n\n      if (!hasHtmlOrText(clipboardContent) && _pasteImageData(editor, e, getLastRng())) {\n        pasteBin.remove();\n        return;\n      }\n\n      if (!isKeyboardPaste) {\n        e.preventDefault();\n      }\n\n      if (global$a.ie && (!isKeyboardPaste || e.ieFake) && !hasContentType(clipboardContent, 'text/html')) {\n        pasteBin.create();\n        editor.dom.bind(pasteBin.getEl(), 'paste', function (e) {\n          e.stopPropagation();\n        });\n        editor.getDoc().execCommand('Paste', false, null);\n        clipboardContent['text/html'] = pasteBin.getHtml();\n      }\n\n      if (hasContentType(clipboardContent, 'text/html')) {\n        e.preventDefault();\n\n        if (!internal) {\n          internal = isMarked(clipboardContent['text/html']);\n        }\n\n        insertClipboardContent(editor, clipboardContent, isKeyboardPaste, plainTextMode, internal);\n      } else {\n        global$9.setEditorTimeout(editor, function () {\n          insertClipboardContent(editor, clipboardContent, isKeyboardPaste, plainTextMode, internal);\n        }, 0);\n      }\n    });\n  };\n\n  var registerEventsAndFilters = function registerEventsAndFilters(editor, pasteBin, pasteFormat) {\n    registerEventHandlers(editor, pasteBin, pasteFormat);\n    var src;\n    editor.parser.addNodeFilter('img', function (nodes, name, args) {\n      var isPasteInsert = function isPasteInsert(args) {\n        return args.data && args.data.paste === true;\n      };\n\n      var remove = function remove(node) {\n        if (!node.attr('data-mce-object') && src !== global$a.transparentSrc) {\n          node.remove();\n        }\n      };\n\n      var isWebKitFakeUrl = function isWebKitFakeUrl(src) {\n        return src.indexOf('webkit-fake-url') === 0;\n      };\n\n      var isDataUri = function isDataUri(src) {\n        return src.indexOf('data:') === 0;\n      };\n\n      if (!getPasteDataImages(editor) && isPasteInsert(args)) {\n        var i = nodes.length;\n\n        while (i--) {\n          src = nodes[i].attr('src');\n\n          if (!src) {\n            continue;\n          }\n\n          if (isWebKitFakeUrl(src)) {\n            remove(nodes[i]);\n          } else if (!getAllowHtmlDataUrls(editor) && isDataUri(src)) {\n            remove(nodes[i]);\n          }\n        }\n      }\n    });\n  };\n\n  var getPasteBinParent = function getPasteBinParent(editor) {\n    return global$a.ie && editor.inline ? document.body : editor.getBody();\n  };\n\n  var isExternalPasteBin = function isExternalPasteBin(editor) {\n    return getPasteBinParent(editor) !== editor.getBody();\n  };\n\n  var delegatePasteEvents = function delegatePasteEvents(editor, pasteBinElm, pasteBinDefaultContent) {\n    if (isExternalPasteBin(editor)) {\n      editor.dom.bind(pasteBinElm, 'paste keyup', function (_e) {\n        if (!_isDefault(editor, pasteBinDefaultContent)) {\n          editor.fire('paste');\n        }\n      });\n    }\n  };\n\n  var _create = function create(editor, lastRngCell, pasteBinDefaultContent) {\n    var dom = editor.dom,\n        body = editor.getBody();\n    lastRngCell.set(editor.selection.getRng());\n    var pasteBinElm = editor.dom.add(getPasteBinParent(editor), 'div', {\n      'id': 'mcepastebin',\n      'class': 'mce-pastebin',\n      'contentEditable': true,\n      'data-mce-bogus': 'all',\n      'style': 'position: fixed; top: 50%; width: 10px; height: 10px; overflow: hidden; opacity: 0'\n    }, pasteBinDefaultContent);\n\n    if (global$a.ie || global$a.gecko) {\n      dom.setStyle(pasteBinElm, 'left', dom.getStyle(body, 'direction', true) === 'rtl' ? 65535 : -65535);\n    }\n\n    dom.bind(pasteBinElm, 'beforedeactivate focusin focusout', function (e) {\n      e.stopPropagation();\n    });\n    delegatePasteEvents(editor, pasteBinElm, pasteBinDefaultContent);\n    pasteBinElm.focus();\n    editor.selection.select(pasteBinElm, true);\n  };\n\n  var _remove = function remove(editor, lastRngCell) {\n    if (_getEl(editor)) {\n      var pasteBinClone = void 0;\n      var lastRng = lastRngCell.get();\n\n      while (pasteBinClone = editor.dom.get('mcepastebin')) {\n        editor.dom.remove(pasteBinClone);\n        editor.dom.unbind(pasteBinClone);\n      }\n\n      if (lastRng) {\n        editor.selection.setRng(lastRng);\n      }\n    }\n\n    lastRngCell.set(null);\n  };\n\n  var _getEl = function getEl(editor) {\n    return editor.dom.get('mcepastebin');\n  };\n\n  var _getHtml = function getHtml(editor) {\n    var copyAndRemove = function copyAndRemove(toElm, fromElm) {\n      toElm.appendChild(fromElm);\n      editor.dom.remove(fromElm, true);\n    };\n\n    var pasteBinClones = global$6.grep(getPasteBinParent(editor).childNodes, function (elm) {\n      return elm.id === 'mcepastebin';\n    });\n    var pasteBinElm = pasteBinClones.shift();\n    global$6.each(pasteBinClones, function (pasteBinClone) {\n      copyAndRemove(pasteBinElm, pasteBinClone);\n    });\n    var dirtyWrappers = editor.dom.select('div[id=mcepastebin]', pasteBinElm);\n\n    for (var i = dirtyWrappers.length - 1; i >= 0; i--) {\n      var cleanWrapper = editor.dom.create('div');\n      pasteBinElm.insertBefore(cleanWrapper, dirtyWrappers[i]);\n      copyAndRemove(cleanWrapper, dirtyWrappers[i]);\n    }\n\n    return pasteBinElm ? pasteBinElm.innerHTML : '';\n  };\n\n  var _isDefaultContent = function isDefaultContent(pasteBinDefaultContent, content) {\n    return content === pasteBinDefaultContent;\n  };\n\n  var isPasteBin = function isPasteBin(elm) {\n    return elm && elm.id === 'mcepastebin';\n  };\n\n  var _isDefault = function isDefault(editor, pasteBinDefaultContent) {\n    var pasteBinElm = _getEl(editor);\n\n    return isPasteBin(pasteBinElm) && _isDefaultContent(pasteBinDefaultContent, pasteBinElm.innerHTML);\n  };\n\n  var PasteBin = function PasteBin(editor) {\n    var lastRng = Cell(null);\n    var pasteBinDefaultContent = '%MCEPASTEBIN%';\n    return {\n      create: function create() {\n        return _create(editor, lastRng, pasteBinDefaultContent);\n      },\n      remove: function remove() {\n        return _remove(editor, lastRng);\n      },\n      getEl: function getEl() {\n        return _getEl(editor);\n      },\n      getHtml: function getHtml() {\n        return _getHtml(editor);\n      },\n      getLastRng: lastRng.get,\n      isDefault: function isDefault() {\n        return _isDefault(editor, pasteBinDefaultContent);\n      },\n      isDefaultContent: function isDefaultContent(content) {\n        return _isDefaultContent(pasteBinDefaultContent, content);\n      }\n    };\n  };\n\n  var Clipboard = function Clipboard(editor, pasteFormat) {\n    var pasteBin = PasteBin(editor);\n    editor.on('PreInit', function () {\n      return registerEventsAndFilters(editor, pasteBin, pasteFormat);\n    });\n    return {\n      pasteFormat: pasteFormat,\n      pasteHtml: function pasteHtml(html, internalFlag) {\n        return _pasteHtml(editor, html, internalFlag);\n      },\n      pasteText: function pasteText(text) {\n        return _pasteText(editor, text);\n      },\n      pasteImageData: function pasteImageData(e, rng) {\n        return _pasteImageData(editor, e, rng);\n      },\n      getDataTransferItems: getDataTransferItems,\n      hasHtmlOrText: hasHtmlOrText,\n      hasContentType: hasContentType\n    };\n  };\n\n  var togglePlainTextPaste = function togglePlainTextPaste(editor, clipboard) {\n    if (clipboard.pasteFormat.get() === 'text') {\n      clipboard.pasteFormat.set('html');\n      firePastePlainTextToggle(editor, false);\n    } else {\n      clipboard.pasteFormat.set('text');\n      firePastePlainTextToggle(editor, true);\n    }\n\n    editor.focus();\n  };\n\n  var register$2 = function register$2(editor, clipboard) {\n    editor.addCommand('mceTogglePlainTextPaste', function () {\n      togglePlainTextPaste(editor, clipboard);\n    });\n    editor.addCommand('mceInsertClipboardContent', function (ui, value) {\n      if (value.content) {\n        clipboard.pasteHtml(value.content, value.internal);\n      }\n\n      if (value.text) {\n        clipboard.pasteText(value.text);\n      }\n    });\n  };\n\n  var hasWorkingClipboardApi = function hasWorkingClipboardApi(clipboardData) {\n    return global$a.iOS === false && typeof (clipboardData === null || clipboardData === void 0 ? void 0 : clipboardData.setData) === 'function';\n  };\n\n  var setHtml5Clipboard = function setHtml5Clipboard(clipboardData, html, text) {\n    if (hasWorkingClipboardApi(clipboardData)) {\n      try {\n        clipboardData.clearData();\n        clipboardData.setData('text/html', html);\n        clipboardData.setData('text/plain', text);\n        clipboardData.setData(internalHtmlMime(), html);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  };\n\n  var setClipboardData = function setClipboardData(evt, data, fallback, done) {\n    if (setHtml5Clipboard(evt.clipboardData, data.html, data.text)) {\n      evt.preventDefault();\n      done();\n    } else {\n      fallback(data.html, done);\n    }\n  };\n\n  var fallback = function fallback(editor) {\n    return function (html, done) {\n      var markedHtml = mark(html);\n      var outer = editor.dom.create('div', {\n        'contenteditable': 'false',\n        'data-mce-bogus': 'all'\n      });\n      var inner = editor.dom.create('div', {\n        contenteditable: 'true'\n      }, markedHtml);\n      editor.dom.setStyles(outer, {\n        position: 'fixed',\n        top: '0',\n        left: '-3000px',\n        width: '1000px',\n        overflow: 'hidden'\n      });\n      outer.appendChild(inner);\n      editor.dom.add(editor.getBody(), outer);\n      var range = editor.selection.getRng();\n      inner.focus();\n      var offscreenRange = editor.dom.createRng();\n      offscreenRange.selectNodeContents(inner);\n      editor.selection.setRng(offscreenRange);\n      global$9.setTimeout(function () {\n        editor.selection.setRng(range);\n        outer.parentNode.removeChild(outer);\n        done();\n      }, 0);\n    };\n  };\n\n  var getData = function getData(editor) {\n    return {\n      html: editor.selection.getContent({\n        contextual: true\n      }),\n      text: editor.selection.getContent({\n        format: 'text'\n      })\n    };\n  };\n\n  var isTableSelection = function isTableSelection(editor) {\n    return !!editor.dom.getParent(editor.selection.getStart(), 'td[data-mce-selected],th[data-mce-selected]', editor.getBody());\n  };\n\n  var hasSelectedContent = function hasSelectedContent(editor) {\n    return !editor.selection.isCollapsed() || isTableSelection(editor);\n  };\n\n  var cut = function cut(editor) {\n    return function (evt) {\n      if (hasSelectedContent(editor)) {\n        setClipboardData(evt, getData(editor), fallback(editor), function () {\n          if (global$a.browser.isChrome() || global$a.browser.isFirefox()) {\n            var rng_1 = editor.selection.getRng();\n            global$9.setEditorTimeout(editor, function () {\n              editor.selection.setRng(rng_1);\n              editor.execCommand('Delete');\n            }, 0);\n          } else {\n            editor.execCommand('Delete');\n          }\n        });\n      }\n    };\n  };\n\n  var copy = function copy(editor) {\n    return function (evt) {\n      if (hasSelectedContent(editor)) {\n        setClipboardData(evt, getData(editor), fallback(editor), noop);\n      }\n    };\n  };\n\n  var register$1 = function register$1(editor) {\n    editor.on('cut', cut(editor));\n    editor.on('copy', copy(editor));\n  };\n\n  var global = tinymce.util.Tools.resolve('tinymce.dom.RangeUtils');\n\n  var getCaretRangeFromEvent = function getCaretRangeFromEvent(editor, e) {\n    return global.getCaretRangeFromPoint(e.clientX, e.clientY, editor.getDoc());\n  };\n\n  var isPlainTextFileUrl = function isPlainTextFileUrl(content) {\n    var plainTextContent = content['text/plain'];\n    return plainTextContent ? plainTextContent.indexOf('file://') === 0 : false;\n  };\n\n  var setFocusedRange = function setFocusedRange(editor, rng) {\n    editor.focus();\n    editor.selection.setRng(rng);\n  };\n\n  var setup$2 = function setup$2(editor, clipboard, draggingInternallyState) {\n    if (shouldBlockDrop(editor)) {\n      editor.on('dragend dragover draggesture dragdrop drop drag', function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n    }\n\n    if (!shouldPasteDataImages(editor)) {\n      editor.on('drop', function (e) {\n        var dataTransfer = e.dataTransfer;\n\n        if (dataTransfer && dataTransfer.files && dataTransfer.files.length > 0) {\n          e.preventDefault();\n        }\n      });\n    }\n\n    editor.on('drop', function (e) {\n      var rng = getCaretRangeFromEvent(editor, e);\n\n      if (e.isDefaultPrevented() || draggingInternallyState.get()) {\n        return;\n      }\n\n      var dropContent = clipboard.getDataTransferItems(e.dataTransfer);\n      var internal = clipboard.hasContentType(dropContent, internalHtmlMime());\n\n      if ((!clipboard.hasHtmlOrText(dropContent) || isPlainTextFileUrl(dropContent)) && clipboard.pasteImageData(e, rng)) {\n        return;\n      }\n\n      if (rng && shouldFilterDrop(editor)) {\n        var content_1 = dropContent['mce-internal'] || dropContent['text/html'] || dropContent['text/plain'];\n\n        if (content_1) {\n          e.preventDefault();\n          global$9.setEditorTimeout(editor, function () {\n            editor.undoManager.transact(function () {\n              if (dropContent['mce-internal']) {\n                editor.execCommand('Delete');\n              }\n\n              setFocusedRange(editor, rng);\n              content_1 = trimHtml(content_1);\n\n              if (!dropContent['text/html']) {\n                clipboard.pasteText(content_1);\n              } else {\n                clipboard.pasteHtml(content_1, internal);\n              }\n            });\n          });\n        }\n      }\n    });\n    editor.on('dragstart', function (_e) {\n      draggingInternallyState.set(true);\n    });\n    editor.on('dragover dragend', function (e) {\n      if (shouldPasteDataImages(editor) && draggingInternallyState.get() === false) {\n        e.preventDefault();\n        setFocusedRange(editor, getCaretRangeFromEvent(editor, e));\n      }\n\n      if (e.type === 'dragend') {\n        draggingInternallyState.set(false);\n      }\n    });\n  };\n\n  var setup$1 = function setup$1(editor) {\n    var plugin = editor.plugins.paste;\n    var preProcess = getPreProcess(editor);\n\n    if (preProcess) {\n      editor.on('PastePreProcess', function (e) {\n        preProcess.call(plugin, plugin, e);\n      });\n    }\n\n    var postProcess = getPostProcess(editor);\n\n    if (postProcess) {\n      editor.on('PastePostProcess', function (e) {\n        postProcess.call(plugin, plugin, e);\n      });\n    }\n  };\n\n  var addPreProcessFilter = function addPreProcessFilter(editor, filterFunc) {\n    editor.on('PastePreProcess', function (e) {\n      e.content = filterFunc(editor, e.content, e.internal, e.wordContent);\n    });\n  };\n\n  var addPostProcessFilter = function addPostProcessFilter(editor, filterFunc) {\n    editor.on('PastePostProcess', function (e) {\n      filterFunc(editor, e.node);\n    });\n  };\n\n  var removeExplorerBrElementsAfterBlocks = function removeExplorerBrElementsAfterBlocks(editor, html) {\n    if (!isWordContent(html)) {\n      return html;\n    }\n\n    var blockElements = [];\n    global$6.each(editor.schema.getBlockElements(), function (block, blockName) {\n      blockElements.push(blockName);\n    });\n    var explorerBlocksRegExp = new RegExp('(?:<br>&nbsp;[\\\\s\\\\r\\\\n]+|<br>)*(<\\\\/?(' + blockElements.join('|') + ')[^>]*>)(?:<br>&nbsp;[\\\\s\\\\r\\\\n]+|<br>)*', 'g');\n    html = filter(html, [[explorerBlocksRegExp, '$1']]);\n    html = filter(html, [[/<br><br>/g, '<BR><BR>'], [/<br>/g, ' '], [/<BR><BR>/g, '<br>']]);\n    return html;\n  };\n\n  var removeWebKitStyles = function removeWebKitStyles(editor, content, internal, isWordHtml) {\n    if (isWordHtml || internal) {\n      return content;\n    }\n\n    var webKitStylesSetting = getWebkitStyles(editor);\n    var webKitStyles;\n\n    if (shouldRemoveWebKitStyles(editor) === false || webKitStylesSetting === 'all') {\n      return content;\n    }\n\n    if (webKitStylesSetting) {\n      webKitStyles = webKitStylesSetting.split(/[, ]/);\n    }\n\n    if (webKitStyles) {\n      var dom_1 = editor.dom,\n          node_1 = editor.selection.getNode();\n      content = content.replace(/(<[^>]+) style=\"([^\"]*)\"([^>]*>)/gi, function (all, before, value, after) {\n        var inputStyles = dom_1.parseStyle(dom_1.decode(value));\n        var outputStyles = {};\n\n        if (webKitStyles === 'none') {\n          return before + after;\n        }\n\n        for (var i = 0; i < webKitStyles.length; i++) {\n          var inputValue = inputStyles[webKitStyles[i]],\n              currentValue = dom_1.getStyle(node_1, webKitStyles[i], true);\n\n          if (/color/.test(webKitStyles[i])) {\n            inputValue = dom_1.toHex(inputValue);\n            currentValue = dom_1.toHex(currentValue);\n          }\n\n          if (currentValue !== inputValue) {\n            outputStyles[webKitStyles[i]] = inputValue;\n          }\n        }\n\n        var outputStyle = dom_1.serializeStyle(outputStyles, 'span');\n\n        if (outputStyle) {\n          return before + ' style=\"' + outputStyle + '\"' + after;\n        }\n\n        return before + after;\n      });\n    } else {\n      content = content.replace(/(<[^>]+) style=\"([^\"]*)\"([^>]*>)/gi, '$1$3');\n    }\n\n    content = content.replace(/(<[^>]+) data-mce-style=\"([^\"]+)\"([^>]*>)/gi, function (all, before, value, after) {\n      return before + ' style=\"' + value + '\"' + after;\n    });\n    return content;\n  };\n\n  var removeUnderlineAndFontInAnchor = function removeUnderlineAndFontInAnchor(editor, root) {\n    editor.$('a', root).find('font,u').each(function (i, node) {\n      editor.dom.remove(node, true);\n    });\n  };\n\n  var setup = function setup(editor) {\n    if (global$a.webkit) {\n      addPreProcessFilter(editor, removeWebKitStyles);\n    }\n\n    if (global$a.ie) {\n      addPreProcessFilter(editor, removeExplorerBrElementsAfterBlocks);\n      addPostProcessFilter(editor, removeUnderlineAndFontInAnchor);\n    }\n  };\n\n  var makeSetupHandler = function makeSetupHandler(editor, clipboard) {\n    return function (api) {\n      api.setActive(clipboard.pasteFormat.get() === 'text');\n\n      var pastePlainTextToggleHandler = function pastePlainTextToggleHandler(e) {\n        return api.setActive(e.state);\n      };\n\n      editor.on('PastePlainTextToggle', pastePlainTextToggleHandler);\n      return function () {\n        return editor.off('PastePlainTextToggle', pastePlainTextToggleHandler);\n      };\n    };\n  };\n\n  var register = function register(editor, clipboard) {\n    var onAction = function onAction() {\n      return editor.execCommand('mceTogglePlainTextPaste');\n    };\n\n    editor.ui.registry.addToggleButton('pastetext', {\n      active: false,\n      icon: 'paste-text',\n      tooltip: 'Paste as text',\n      onAction: onAction,\n      onSetup: makeSetupHandler(editor, clipboard)\n    });\n    editor.ui.registry.addToggleMenuItem('pastetext', {\n      text: 'Paste as text',\n      icon: 'paste-text',\n      onAction: onAction,\n      onSetup: makeSetupHandler(editor, clipboard)\n    });\n  };\n\n  function Plugin() {\n    global$b.add('paste', function (editor) {\n      if (hasProPlugin(editor) === false) {\n        var draggingInternallyState = Cell(false);\n        var pasteFormat = Cell(isPasteAsTextEnabled(editor) ? 'text' : 'html');\n        var clipboard = Clipboard(editor, pasteFormat);\n        setup(editor);\n        register(editor, clipboard);\n        register$2(editor, clipboard);\n        setup$1(editor);\n        register$1(editor);\n        setup$2(editor, clipboard, draggingInternallyState);\n        return get(clipboard);\n      }\n    });\n  }\n\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/paste/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/paste/plugin.js"]();
/******/ 	
/******/ })()
;