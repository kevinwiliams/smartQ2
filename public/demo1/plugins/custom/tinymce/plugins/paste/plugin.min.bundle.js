/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/paste/plugin.min.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/paste/plugin.min.js ***!
  \**********************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n!function () {\n  \"use strict\";\n\n  function w(e) {\n    var t = e;\n    return {\n      get: function get() {\n        return t;\n      },\n      set: function set(e) {\n        t = e;\n      }\n    };\n  }\n\n  function P(e) {\n    return !(null == e);\n  }\n\n  function _() {}\n\n  function o(e) {\n    return function () {\n      return e;\n    };\n  }\n\n  function e(e) {\n    return e;\n  }\n\n  function t() {\n    return l;\n  }\n\n  var n,\n      r = tinymce.util.Tools.resolve(\"tinymce.PluginManager\"),\n      u = function u(e) {\n    return n = _typeof(t = e), \"array\" == (null === t ? \"null\" : \"object\" == n && (Array.prototype.isPrototypeOf(t) || t.constructor && \"Array\" === t.constructor.name) ? \"array\" : \"object\" == n && (String.prototype.isPrototypeOf(t) || t.constructor && \"String\" === t.constructor.name) ? \"string\" : n);\n    var t, n;\n  },\n      i = o(!(n = \"function\")),\n      s = o(!0),\n      l = {\n    fold: function fold(e, t) {\n      return e();\n    },\n    isSome: i,\n    isNone: s,\n    getOr: e,\n    getOrThunk: a,\n    getOrDie: function getOrDie(e) {\n      throw new Error(e || \"error: getOrDie called on none.\");\n    },\n    getOrNull: o(null),\n    getOrUndefined: o(void 0),\n    or: e,\n    orThunk: a,\n    map: t,\n    each: _,\n    bind: t,\n    exists: i,\n    forall: s,\n    filter: function filter() {\n      return l;\n    },\n    toArray: function toArray() {\n      return [];\n    },\n    toString: o(\"none()\")\n  };\n\n  function a(e) {\n    return e();\n  }\n\n  function c(e, t) {\n    for (var n = 0, r = e.length; n < r; n++) {\n      if (t(e[n], n)) return !0;\n    }\n\n    return !1;\n  }\n\n  function f(e, t) {\n    for (var n = e.length, r = new Array(n), a = 0; a < n; a++) {\n      var o = e[a];\n      r[a] = t(o, a);\n    }\n\n    return r;\n  }\n\n  function d(e, t) {\n    for (var n = 0, r = e.length; n < r; n++) {\n      t(e[n], n);\n    }\n  }\n\n  function p() {\n    var e,\n        t,\n        n = (e = _, t = w(le.none()), {\n      clear: function clear() {\n        r(), t.set(le.none());\n      },\n      isSet: function isSet() {\n        return t.get().isSome();\n      },\n      get: function get() {\n        return t.get();\n      },\n      set: function set(e) {\n        r(), t.set(le.some(e));\n      }\n    });\n\n    function r() {\n      return t.get().each(e);\n    }\n\n    return _de(_de({}, n), {\n      on: function on(e) {\n        return n.get().each(e);\n      }\n    });\n  }\n\n  function m(e, t, n) {\n    return \"\" === t || e.length >= t.length && e.substr(n, n + t.length) === t;\n  }\n\n  function C(e, t) {\n    return e.fire(\"PastePlainTextToggle\", {\n      state: t\n    });\n  }\n\n  function T(e) {\n    return e.getParam(\"paste_data_images\", !1);\n  }\n\n  function g(e) {\n    return e.getParam(\"paste_retain_style_properties\");\n  }\n\n  function h(e) {\n    return e.getParam(\"validate\");\n  }\n\n  function y(e) {\n    return e.getParam(\"paste_data_images\", !1, \"boolean\");\n  }\n\n  function v(e) {\n    return he.explode(e.getParam(\"images_file_types\", \"jpeg,jpg,jpe,jfi,jif,jfif,png,gif,bmp,webp\", \"string\"));\n  }\n\n  function b(e) {\n    return -1 !== e.indexOf(be);\n  }\n\n  function x(e, t, n) {\n    return t ? (r = !0 === t ? \"p\" : t, a = n, o = e.split(/\\n\\n/), i = function (e, t) {\n      var n,\n          r = [],\n          a = \"<\" + e;\n\n      if (\"object\" == _typeof(t)) {\n        for (var o in t) {\n          n = o, we.call(t, n) && r.push(o + '=\"' + Pe.encodeAllRaw(t[o]) + '\"');\n        }\n\n        r.length && (a += \" \" + r.join(\" \"));\n      }\n\n      return a + \">\";\n    }(r, a), s = \"</\" + r + \">\", 1 === (l = he.map(o, function (e) {\n      return e.split(/\\n/).join(\"<br />\");\n    })).length ? l[0] : he.map(l, function (e) {\n      return i + e + s;\n    }).join(\"\")) : e.replace(/\\r?\\n/g, \"<br>\");\n    var r, a, o, i, s, l;\n  }\n\n  function D(t, e) {\n    return he.each(e, function (e) {\n      t = e.constructor === RegExp ? t.replace(e, \"\") : t.replace(e[0], e[1]);\n    }), t;\n  }\n\n  function k(e) {\n    return D(e, [/^[\\s\\S]*<body[^>]*>\\s*|\\s*<\\/body[^>]*>[\\s\\S]*$/gi, /<!--StartFragment-->|<!--EndFragment-->/g, [/( ?)<span class=\"Apple-converted-space\">\\u00a0<\\/span>( ?)/g, function (e, t, n) {\n      return t || n ? \"\\xa0\" : \" \";\n    }], /<br class=\"Apple-interchange-newline\">/g, /<br>$/i]);\n  }\n\n  function O(e) {\n    return /<font face=\"Times New Roman\"|class=\"?Mso|style=\"[^\"]*\\bmso-|style='[^']*\\bmso-|w:WordDocument/i.test(e) || /class=\"OutlineElement/.test(e) || /id=\"?docs\\-internal\\-guid\\-/.test(e);\n  }\n\n  function S(r, e) {\n    var a,\n        t = g(r);\n    t && (a = he.makeMap(t.split(/[, ]/))), e = D(e, [/<br class=\"?Apple-interchange-newline\"?>/gi, /<b[^>]+id=\"?docs-internal-[^>]*>/gi, /<!--[\\s\\S]+?-->/gi, /<(!|script[^>]*>.*?<\\/script(?=[>\\s])|\\/?(\\?xml(:\\w+)?|img|meta|link|style|\\w:\\w+)(?=[\\s\\/>]))[^>]*>/gi, [/<(\\/?)s>/gi, \"<$1strike>\"], [/&nbsp;/gi, \"\\xa0\"], [/<span\\s+style\\s*=\\s*\"\\s*mso-spacerun\\s*:\\s*yes\\s*;?\\s*\"\\s*>([\\s\\u00a0]*)<\\/span>/gi, function (e, t) {\n      return 0 < t.length ? t.replace(/./, \" \").slice(Math.floor(t.length / 2)).split(\"\").join(\"\\xa0\") : \"\";\n    }]]);\n    var n = r.getParam(\"paste_word_valid_elements\", \"-strong/b,-em/i,-u,-span,-p,-ol,-ul,-li,-h1,-h2,-h3,-h4,-h5,-h6,-p/div,-a[href|name],sub,sup,strike,br,del,table[width],tr,td[colspan|rowspan|width],th[colspan|rowspan|width],thead,tfoot,tbody\"),\n        o = De({\n      valid_elements: n,\n      valid_children: \"-li[p]\"\n    });\n    he.each(o.elements, function (e) {\n      e.attributes[\"class\"] || (e.attributes[\"class\"] = {}, e.attributesOrder.push(\"class\")), e.attributes.style || (e.attributes.style = {}, e.attributesOrder.push(\"style\"));\n    });\n\n    var i = _e({}, o);\n\n    i.addAttributeFilter(\"style\", function (e) {\n      for (var t, n = e.length; n--;) {\n        (t = e[n]).attr(\"style\", function (r, a, o, i) {\n          var s = {},\n              e = r.dom.parseStyle(i);\n          return he.each(e, function (e, t) {\n            switch (t) {\n              case \"mso-list\":\n                var n = /\\w+ \\w+([0-9]+)/i.exec(i);\n                n && (o._listLevel = parseInt(n[1], 10)), /Ignore/i.test(e) && o.firstChild && (o._listIgnore = !0, o.firstChild._listIgnore = !0);\n                break;\n\n              case \"horiz-align\":\n                t = \"text-align\";\n                break;\n\n              case \"vert-align\":\n                t = \"vertical-align\";\n                break;\n\n              case \"font-color\":\n              case \"mso-foreground\":\n                t = \"color\";\n                break;\n\n              case \"mso-background\":\n              case \"mso-highlight\":\n                t = \"background\";\n                break;\n\n              case \"font-weight\":\n              case \"font-style\":\n                return void (\"normal\" !== e && (s[t] = e));\n\n              case \"mso-element\":\n                if (/^(comment|comment-list)$/i.test(e)) return void o.remove();\n            }\n\n            0 !== t.indexOf(\"mso-comment\") ? 0 !== t.indexOf(\"mso-\") && (\"all\" === g(r) || a && a[t]) && (s[t] = e) : o.remove();\n          }), /(bold)/i.test(s[\"font-weight\"]) && (delete s[\"font-weight\"], o.wrap(new Te(\"b\", 1))), /(italic)/i.test(s[\"font-style\"]) && (delete s[\"font-style\"], o.wrap(new Te(\"i\", 1))), r.dom.serializeStyle(s, o.name) || null;\n        }(r, a, t, t.attr(\"style\"))), \"span\" === t.name && t.parent && !t.attributes.length && t.unwrap();\n      }\n    }), i.addAttributeFilter(\"class\", function (e) {\n      for (var t, n, r = e.length; r--;) {\n        n = (t = e[r]).attr(\"class\"), /^(MsoCommentReference|MsoCommentText|msoDel)$/i.test(n) && t.remove(), t.attr(\"class\", null);\n      }\n    }), i.addNodeFilter(\"del\", function (e) {\n      for (var t = e.length; t--;) {\n        e[t].remove();\n      }\n    }), i.addNodeFilter(\"a\", function (e) {\n      for (var t, n, r, a = e.length; a--;) {\n        n = (t = e[a]).attr(\"href\"), r = t.attr(\"name\"), n && -1 !== n.indexOf(\"#_msocom_\") ? t.remove() : !(n = n && 0 === n.indexOf(\"file://\") ? (n = n.split(\"#\")[1]) && \"#\" + n : n) && !r || r && !/^_?(?:toc|edn|ftn)/i.test(r) ? t.unwrap() : t.attr({\n          href: n,\n          name: r\n        });\n      }\n    });\n    var s = i.parse(e);\n    return r.getParam(\"paste_convert_word_fake_lists\", !0) && function (e) {\n      for (var a, o, i = 1, n = function n(e) {\n        var t = \"\";\n        if (3 === e.type) return e.value;\n        if (e = e.firstChild) for (; t += n(e), e = e.next;) {\n          ;\n        }\n        return t;\n      }, s = function s(e, t) {\n        if (3 === e.type && t.test(e.value)) return e.value = e.value.replace(t, \"\"), !1;\n        if (e = e.firstChild) do {\n          if (!s(e, t)) return !1;\n        } while (e = e.next);\n        return !0;\n      }, l = function l(e) {\n        if (e._listIgnore) e.remove();else if (e = e.firstChild) for (; l(e), e = e.next;) {\n          ;\n        }\n      }, t = function t(e, _t, n) {\n        var r = e._listLevel || i;\n        (a = r !== i ? r < i ? a && a.parent.parent : (o = a, null) : a) && a.name === _t ? a.append(e) : (o = o || a, a = new Te(_t, 1), 1 < n && a.attr(\"start\", \"\" + n), e.wrap(a)), e.name = \"li\", i < r && o && o.lastChild.append(a), i = r, l(e), s(e, /^\\u00a0+/), s(e, /^\\s*([\\u2022\\u00b7\\u00a7\\u25CF]|\\w+\\.)/), s(e, /^\\u00a0+/);\n      }, r = [], u = e.firstChild; null != u;) {\n        if (r.push(u), null !== (u = u.walk())) for (; void 0 !== u && u.parent !== e;) {\n          u = u.walk();\n        }\n      }\n\n      for (var c, f, d, p = 0; p < r.length; p++) {\n        \"p\" === (e = r[p]).name && e.firstChild ? (c = n(e), /^[\\s\\u00a0]*[\\u2022\\u00b7\\u00a7\\u25CF]\\s*/.test(c) ? t(e, \"ul\") : function (t) {\n          var n = !1;\n          return t = c.replace(/^[\\u00a0 ]+/, \"\"), he.each([/^[IVXLMCD]+\\.[ \\u00a0]/, /^[ivxlmcd]+\\.[ \\u00a0]/, /^[a-z]{1,2}[\\.\\)][ \\u00a0]/, /^[A-Z]{1,2}[\\.\\)][ \\u00a0]/, /^[0-9]+\\.[ \\u00a0]/, /^[\\u3007\\u4e00\\u4e8c\\u4e09\\u56db\\u4e94\\u516d\\u4e03\\u516b\\u4e5d]+\\.[ \\u00a0]/, /^[\\u58f1\\u5f10\\u53c2\\u56db\\u4f0d\\u516d\\u4e03\\u516b\\u4e5d\\u62fe]+\\.[ \\u00a0]/], function (e) {\n            if (e.test(t)) return !(n = !0);\n          }), n;\n        }(c) ? (d = 1, t(e, \"ol\", d = (f = /([0-9]+)\\./.exec(c)) ? parseInt(f[1], 10) : d)) : e._listLevel ? t(e, \"ul\", 1) : a = null) : (o = a, a = null);\n      }\n    }(s), Ce({\n      validate: h(r)\n    }, o).serialize(s);\n  }\n\n  function j(e, t) {\n    return {\n      content: e,\n      cancelled: t\n    };\n  }\n\n  function A(e, t, n) {\n    var r,\n        a,\n        o,\n        i,\n        s,\n        l,\n        u,\n        c,\n        f,\n        d,\n        p,\n        m,\n        g = O(t),\n        v = g ? (a = t, (r = e).getParam(\"paste_enable_default_filters\", !0) ? S(r, a) : a) : t;\n    return i = n, s = g, p = (o = e).fire(\"PastePreProcess\", {\n      content: v,\n      internal: i,\n      wordContent: s\n    }), m = function (e, t) {\n      var n = _e({}, e.schema);\n\n      n.addNodeFilter(\"meta\", function (e) {\n        he.each(e, function (e) {\n          e.remove();\n        });\n      });\n      var r = n.parse(t, {\n        forced_root_block: !1,\n        isRootContent: !0\n      });\n      return Ce({\n        validate: h(e)\n      }, e.schema).serialize(r);\n    }(o, p.content), o.hasEventListeners(\"PastePostProcess\") && !p.isDefaultPrevented() ? (u = i, c = s, f = (l = o).dom.create(\"div\", {\n      style: \"display:none\"\n    }, m), j((d = l.fire(\"PastePostProcess\", {\n      node: f,\n      internal: u,\n      wordContent: c\n    })).node.innerHTML, d.isDefaultPrevented())) : j(m, p.isDefaultPrevented());\n  }\n\n  function R(e, t) {\n    return e.insertContent(t, {\n      merge: e.getParam(\"paste_merge_formats\", !0),\n      paste: !0\n    }), !0;\n  }\n\n  function I(e) {\n    return /^https?:\\/\\/[\\w\\?\\-\\/+=.&%@~#]+$/i.test(e);\n  }\n\n  function F(e, t, n) {\n    return !(!1 !== e.selection.isCollapsed() || !I(t) || (a = t, o = n, (r = e).undoManager.extra(function () {\n      o(r, a);\n    }, function () {\n      r.execCommand(\"mceInsertLink\", !1, a);\n    }), 0));\n    var r, a, o;\n  }\n\n  function E(e, t, n) {\n    return r = e, !(!I(a = t) || !c(v(r), function (e) {\n      return m(t = a.toLowerCase(), n = \".\" + e.toLowerCase(), t.length - n.length);\n      var t, n;\n    }) || (i = t, s = n, (o = e).undoManager.extra(function () {\n      s(o, i);\n    }, function () {\n      o.insertContent('<img src=\"' + i + '\">');\n    }), 0));\n    var r, a, o, i, s;\n  }\n\n  function M(e) {\n    return \"\\n\" === e || \"\\r\" === e;\n  }\n\n  function B(e, t, n, r) {\n    var a,\n        o,\n        i,\n        s,\n        l = A(e, t, n);\n    !1 === l.cancelled && (a = e, o = l.content, r || !1 === a.getParam(\"smart_paste\", !0) ? R(a, o) : (i = a, s = o, he.each([F, E, R], function (e) {\n      return !0 !== e(i, s, R);\n    })));\n  }\n\n  function L(e, t, n) {\n    var r = n || b(t);\n    B(e, t.replace(be, \"\"), r, !1);\n  }\n\n  function N(e, t) {\n    var n,\n        r,\n        a,\n        o,\n        i,\n        s,\n        l = e.dom.encode(t).replace(/\\r\\n/g, \"\\n\"),\n        u = x((n = l, o = (r = e.getParam(\"paste_tab_spaces\", 4, \"number\")) <= 0 ? \"\" : new Array(r + 1).join(\" \"), i = n.replace(/\\t/g, o), s = {\n      pcIsSpace: !(a = function a(e, t) {\n        return -1 !== \" \\f\\t\\v\".indexOf(t) || \"\\xa0\" === t ? e.pcIsSpace || \"\" === e.str || e.str.length === i.length - 1 || (n = e.str.length + 1) < i.length && 0 <= n && M(i[n]) ? {\n          pcIsSpace: !1,\n          str: e.str + \"\\xa0\"\n        } : {\n          pcIsSpace: !0,\n          str: e.str + \" \"\n        } : {\n          pcIsSpace: M(t),\n          str: e.str + t\n        };\n        var n;\n      }),\n      str: \"\"\n    }, d(i, function (e, t) {\n      s = a(s, e);\n    }), s.str), e.getParam(\"forced_root_block\"), e.getParam(\"forced_root_block_attrs\"));\n    B(e, u, !1, !0);\n  }\n\n  function H(e) {\n    var t,\n        n = {};\n    if (e && (!e.getData || (t = e.getData(\"Text\")) && 0 < t.length && -1 === t.indexOf(\"data:text/mce-internal,\") && (n[\"text/plain\"] = t), e.types)) for (var r = 0; r < e.types.length; r++) {\n      var a = e.types[r];\n\n      try {\n        n[a] = e.getData(a);\n      } catch (e) {\n        n[a] = \"\";\n      }\n    }\n    return n;\n  }\n\n  function $(e, t) {\n    return t in e && 0 < e[t].length;\n  }\n\n  function z(e) {\n    return $(e, \"text/html\") || $(e, \"text/plain\");\n  }\n\n  function U(w, e, t) {\n    var n,\n        r,\n        a,\n        o,\n        i,\n        s = \"paste\" === e.type ? e.clipboardData : e.dataTransfer;\n\n    if (y(w) && s) {\n      var l = (n = w, a = (r = s).items ? function (e) {\n        for (var t = [], n = 0, r = e.length; n < r; ++n) {\n          if (!u(e[n])) throw new Error(\"Arr.flatten item \" + n + \" was not an array, input: \" + e);\n          ce.apply(t, e[n]);\n        }\n\n        return t;\n      }(f(fe(r.items), function (e) {\n        return \"file\" === e.kind ? [e.getAsFile()] : [];\n      })) : [], o = r.files ? fe(r.files) : [], function (e, t) {\n        for (var n = [], r = 0, a = e.length; r < a; r++) {\n          var o = e[r];\n          t(o, r) && n.push(o);\n        }\n\n        return n;\n      }(0 < a.length ? a : o, (i = v(n), function (r) {\n        return m(r.type, \"image/\", 0) && c(i, function (e) {\n          return t = e.toLowerCase(), (he.hasOwn(n = {\n            jpg: \"jpeg\",\n            jpe: \"jpeg\",\n            jfi: \"jpeg\",\n            jif: \"jpeg\",\n            jfif: \"jpeg\",\n            pjpeg: \"jpeg\",\n            pjp: \"jpeg\",\n            svg: \"svg+xml\"\n          }, t) ? \"image/\" + n[t] : \"image/\" + t) === r.type;\n          var t, n;\n        });\n      })));\n      if (0 < l.length) return e.preventDefault(), ge.all(f(l, function (r) {\n        return new ge(function (e) {\n          var t = P(r.getAsFile) ? r.getAsFile() : r,\n              n = new window.FileReader();\n          n.onload = function () {\n            e({\n              blob: t,\n              uri: n.result\n            });\n          }, n.readAsDataURL(t);\n        });\n      })).then(function (e) {\n        t && w.selection.setRng(t), d(e, function (e) {\n          var t, n, r, a, o, i, s, l, u, c, f, d, p, m, g, v, h, y, b, x;\n          t = w, r = (n = e).uri, g = (a = /data:([^;]+);base64,([a-z0-9\\+\\/=]+)/i.exec(r)) ? {\n            type: a[1],\n            data: decodeURIComponent(a[2])\n          } : {\n            type: null,\n            data: null\n          }, v = g.data, h = g.type, y = ke(), b = n.blob, (x = new Image()).src = n.uri, p = x, !(m = t.getParam(\"images_dataimg_filter\")) || m(p) ? (c = void 0, (i = (o = t.editorUpload.blobCache).getByData(v, h)) ? c = i : (l = (s = t.getParam(\"images_reuse_filename\") && P(b.name)) ? (f = t, P(d = b.name.match(/([\\s\\S]+?)(?:\\.[a-z0-9.]+)$/i)) ? f.dom.encode(d[1]) : null) : y, u = s ? b.name : void 0, c = o.create(y, b, v, l, u), o.add(c)), L(t, '<img src=\"' + c.blobUri() + '\">', !1)) : L(t, '<img src=\"' + n.uri + '\">', !1);\n        });\n      }), !0;\n    }\n\n    return !1;\n  }\n\n  function V(e) {\n    return ve.metaKeyPressed(e) && 86 === e.keyCode || e.shiftKey && 45 === e.keyCode;\n  }\n\n  function K(o, e, t) {\n    var i, s, v, l, u, c, f;\n\n    function d(e, t, n, r, a) {\n      var o;\n      $(t, \"text/html\") ? o = t[\"text/html\"] : (o = v.getHtml(), a = a || b(o), v.isDefaultContent(o) && (r = !0)), o = k(o), v.remove();\n\n      var i,\n          s,\n          l,\n          u,\n          c,\n          f,\n          d,\n          _p,\n          m = !1 === a && !/<(?:\\/?(?!(?:div|p|br|span)>)\\w+|(?:(?!(?:span style=\"white-space:\\s?pre;?\">)|br\\s?\\/>))\\w+\\s[^>]+)>/i.test(o),\n          g = I(o);\n\n      ((r = !o.length || m && !g || r) || g) && (o = $(t, \"text/plain\") && m ? t[\"text/plain\"] : (i = o, s = De(), l = _e({}, s), u = \"\", c = s.getShortEndedElements(), f = he.makeMap(\"script noscript style textarea video audio iframe object\", \" \"), d = s.getBlockElements(), _p = function p(e) {\n        var t = e.name,\n            n = e;\n\n        if (\"br\" !== t) {\n          if (\"wbr\" !== t) if (c[t] && (u += \" \"), f[t]) u += \" \";else {\n            if (3 === e.type && (u += e.value), !e.shortEnded && (e = e.firstChild)) for (; _p(e), e = e.next;) {\n              ;\n            }\n            d[t] && n.next && (u += \"\\n\", \"p\" === t && (u += \"\\n\"));\n          }\n        } else u += \"\\n\";\n      }, i = D(i, [/<!\\[[^\\]]+\\]>/g]), _p(l.parse(i)), u)), v.isDefaultContent(o) ? n || e.windowManager.alert(\"Please use Ctrl+V/Cmd+V keyboard shortcuts to paste contents.\") : r ? N(e, o) : L(e, o, a);\n    }\n\n    s = o, v = e, l = t, c = p(), f = p(), s.on(\"keyup\", f.clear), s.on(\"keydown\", function (e) {\n      function t(e) {\n        V(e) && !e.isDefaultPrevented() && v.remove();\n      }\n\n      if (V(e) && !e.isDefaultPrevented() && (!(u = e.shiftKey && 86 === e.keyCode) || !pe.webkit || -1 === navigator.userAgent.indexOf(\"Version/\"))) {\n        if (e.stopImmediatePropagation(), c.set(e), f.set(!0), pe.ie && u) return e.preventDefault(), void s.fire(\"paste\", {\n          ieFake: !0\n        });\n        v.remove(), v.create(), s.once(\"keyup\", t), s.once(\"paste\", function () {\n          s.off(\"keyup\", t);\n        });\n      }\n    }), s.on(\"paste\", function (e) {\n      var t = c.isSet() || f.isSet();\n      t && c.clear();\n      var n,\n          r = H(e.clipboardData || s.getDoc().dataTransfer),\n          a = \"text\" === l.get() || u,\n          o = $(r, xe());\n      u = !1, e.isDefaultPrevented() || (n = e.clipboardData, -1 !== navigator.userAgent.indexOf(\"Android\") && n && n.items && 0 === n.items.length) || !z(r) && U(s, e, v.getLastRng() || s.selection.getRng()) ? v.remove() : (t || e.preventDefault(), !pe.ie || t && !e.ieFake || $(r, \"text/html\") || (v.create(), s.dom.bind(v.getEl(), \"paste\", function (e) {\n        e.stopPropagation();\n      }), s.getDoc().execCommand(\"Paste\", !1, null), r[\"text/html\"] = v.getHtml()), $(r, \"text/html\") ? (e.preventDefault(), o = o || b(r[\"text/html\"]), d(s, r, t, a, o)) : me.setEditorTimeout(s, function () {\n        d(s, r, t, a, o);\n      }, 0));\n    }), o.parser.addNodeFilter(\"img\", function (e, t, n) {\n      var r;\n      if (!y(o) && n.data && !0 === n.data.paste) for (var a = e.length; a--;) {\n        (i = e[a].attr(\"src\")) && (0 !== i.indexOf(\"webkit-fake-url\") && (o.getParam(\"allow_html_data_urls\", !1, \"boolean\") || 0 !== i.indexOf(\"data:\")) || (r = e[a]).attr(\"data-mce-object\") || i === pe.transparentSrc || r.remove());\n      }\n    });\n  }\n\n  function X(e) {\n    return pe.ie && e.inline ? document.body : e.getBody();\n  }\n\n  function W(e) {\n    var t = w(null),\n        n = \"%MCEPASTEBIN%\";\n    return {\n      create: function create() {\n        return function (e, t, n) {\n          var r = e.dom,\n              a = e.getBody();\n          t.set(e.selection.getRng());\n          var o,\n              i,\n              s,\n              l,\n              u = e.dom.add(X(e), \"div\", {\n            id: \"mcepastebin\",\n            \"class\": \"mce-pastebin\",\n            contentEditable: !0,\n            \"data-mce-bogus\": \"all\",\n            style: \"position: fixed; top: 50%; width: 10px; height: 10px; overflow: hidden; opacity: 0\"\n          }, n);\n          (pe.ie || pe.gecko) && r.setStyle(u, \"left\", \"rtl\" === r.getStyle(a, \"direction\", !0) ? 65535 : -65535), r.bind(u, \"beforedeactivate focusin focusout\", function (e) {\n            e.stopPropagation();\n          }), i = u, s = n, X(l = o = e) !== l.getBody() && o.dom.bind(i, \"paste keyup\", function (e) {\n            Oe(o, s) || o.fire(\"paste\");\n          }), u.focus(), e.selection.select(u, !0);\n        }(e, t, n);\n      },\n      remove: function remove() {\n        return function (e, t) {\n          if (oe(e)) {\n            for (var n, r = t.get(); n = e.dom.get(\"mcepastebin\");) {\n              e.dom.remove(n), e.dom.unbind(n);\n            }\n\n            r && e.selection.setRng(r);\n          }\n\n          t.set(null);\n        }(e, t);\n      },\n      getEl: function getEl() {\n        return oe(e);\n      },\n      getHtml: function getHtml() {\n        return function (n) {\n          function t(e, t) {\n            e.appendChild(t), n.dom.remove(t, !0);\n          }\n\n          var e = he.grep(X(n).childNodes, function (e) {\n            return \"mcepastebin\" === e.id;\n          }),\n              r = e.shift();\n          he.each(e, function (e) {\n            t(r, e);\n          });\n\n          for (var a = n.dom.select(\"div[id=mcepastebin]\", r), o = a.length - 1; 0 <= o; o--) {\n            var i = n.dom.create(\"div\");\n            r.insertBefore(i, a[o]), t(i, a[o]);\n          }\n\n          return r ? r.innerHTML : \"\";\n        }(e);\n      },\n      getLastRng: t.get,\n      isDefault: function isDefault() {\n        return Oe(e, n);\n      },\n      isDefaultContent: function isDefaultContent(e) {\n        return e === n;\n      }\n    };\n  }\n\n  function Y(e, t, n, r) {\n    !function (e, t, n) {\n      if (!1 === pe.iOS && \"function\" == typeof (null == e ? void 0 : e.setData)) try {\n        return e.clearData(), e.setData(\"text/html\", t), e.setData(\"text/plain\", n), e.setData(xe(), t), 1;\n      } catch (e) {\n        return;\n      }\n    }(e.clipboardData, t.html, t.text) ? n(t.html, r) : (e.preventDefault(), r());\n  }\n\n  function Z(s) {\n    return function (e, t) {\n      var n = be + e,\n          r = s.dom.create(\"div\", {\n        contenteditable: \"false\",\n        \"data-mce-bogus\": \"all\"\n      }),\n          a = s.dom.create(\"div\", {\n        contenteditable: \"true\"\n      }, n);\n      s.dom.setStyles(r, {\n        position: \"fixed\",\n        top: \"0\",\n        left: \"-3000px\",\n        width: \"1000px\",\n        overflow: \"hidden\"\n      }), r.appendChild(a), s.dom.add(s.getBody(), r);\n      var o = s.selection.getRng();\n      a.focus();\n      var i = s.dom.createRng();\n      i.selectNodeContents(a), s.selection.setRng(i), me.setTimeout(function () {\n        s.selection.setRng(o), r.parentNode.removeChild(r), t();\n      }, 0);\n    };\n  }\n\n  function q(e) {\n    return {\n      html: e.selection.getContent({\n        contextual: !0\n      }),\n      text: e.selection.getContent({\n        format: \"text\"\n      })\n    };\n  }\n\n  function G(e) {\n    return !e.selection.isCollapsed() || (t = e).dom.getParent(t.selection.getStart(), \"td[data-mce-selected],th[data-mce-selected]\", t.getBody());\n    var t;\n  }\n\n  function J(e, t) {\n    return Se.getCaretRangeFromPoint(t.clientX, t.clientY, e.getDoc());\n  }\n\n  function Q(e, t) {\n    e.focus(), e.selection.setRng(t);\n  }\n\n  function ee(t, n) {\n    t.on(\"PastePreProcess\", function (e) {\n      e.content = n(t, e.content, e.internal, e.wordContent);\n    });\n  }\n\n  function te(e, t) {\n    if (!O(t)) return t;\n    var n = [];\n    return he.each(e.schema.getBlockElements(), function (e, t) {\n      n.push(t);\n    }), t = D(t, [[new RegExp(\"(?:<br>&nbsp;[\\\\s\\\\r\\\\n]+|<br>)*(<\\\\/?(\" + n.join(\"|\") + \")[^>]*>)(?:<br>&nbsp;[\\\\s\\\\r\\\\n]+|<br>)*\", \"g\"), \"$1\"]]), D(t, [[/<br><br>/g, \"<BR><BR>\"], [/<br>/g, \" \"], [/<BR><BR>/g, \"<br>\"]]);\n  }\n\n  function ne(e, t, n, r) {\n    if (r || n) return t;\n    var c,\n        f,\n        d,\n        a = e.getParam(\"paste_webkit_styles\");\n    return !1 === e.getParam(\"paste_remove_styles_if_webkit\", !0) || \"all\" === a ? t : (t = (c = a ? a.split(/[, ]/) : c) ? (f = e.dom, d = e.selection.getNode(), t.replace(/(<[^>]+) style=\"([^\"]*)\"([^>]*>)/gi, function (e, t, n, r) {\n      var a = f.parseStyle(f.decode(n)),\n          o = {};\n      if (\"none\" === c) return t + r;\n\n      for (var i = 0; i < c.length; i++) {\n        var s = a[c[i]],\n            l = f.getStyle(d, c[i], !0);\n        /color/.test(c[i]) && (s = f.toHex(s), l = f.toHex(l)), l !== s && (o[c[i]] = s);\n      }\n\n      var u = f.serializeStyle(o, \"span\");\n      return u ? t + ' style=\"' + u + '\"' + r : t + r;\n    })) : t.replace(/(<[^>]+) style=\"([^\"]*)\"([^>]*>)/gi, \"$1$3\")).replace(/(<[^>]+) data-mce-style=\"([^\"]+)\"([^>]*>)/gi, function (e, t, n, r) {\n      return t + ' style=\"' + n + '\"' + r;\n    });\n  }\n\n  function re(n, e) {\n    n.$(\"a\", e).find(\"font,u\").each(function (e, t) {\n      n.dom.remove(t, !0);\n    });\n  }\n\n  function ae(n, r) {\n    return function (t) {\n      function e(e) {\n        return t.setActive(e.state);\n      }\n\n      return t.setActive(\"text\" === r.pasteFormat.get()), n.on(\"PastePlainTextToggle\", e), function () {\n        return n.off(\"PastePlainTextToggle\", e);\n      };\n    };\n  }\n\n  function oe(e) {\n    return e.dom.get(\"mcepastebin\");\n  }\n\n  var ie,\n      se = function se(n) {\n    function e() {\n      return a;\n    }\n\n    function t(e) {\n      return e(n);\n    }\n\n    var r = o(n),\n        a = {\n      fold: function fold(e, t) {\n        return t(n);\n      },\n      isSome: s,\n      isNone: i,\n      getOr: r,\n      getOrThunk: r,\n      getOrDie: r,\n      getOrNull: r,\n      getOrUndefined: r,\n      or: e,\n      orThunk: e,\n      map: function map(e) {\n        return se(e(n));\n      },\n      each: function each(e) {\n        e(n);\n      },\n      bind: t,\n      exists: t,\n      forall: t,\n      filter: function filter(e) {\n        return e(n) ? a : l;\n      },\n      toArray: function toArray() {\n        return [n];\n      },\n      toString: function toString() {\n        return \"some(\" + n + \")\";\n      }\n    };\n    return a;\n  },\n      le = {\n    some: se,\n    none: t,\n    from: function from(e) {\n      return null == e ? l : se(e);\n    }\n  },\n      ue = Array.prototype.slice,\n      ce = Array.prototype.push,\n      fe = _typeof(Array.from) === n ? Array.from : function (e) {\n    return ue.call(e);\n  },\n      _de = function de() {\n    return (_de = Object.assign || function (e) {\n      for (var t, n = 1, r = arguments.length; n < r; n++) {\n        for (var a in t = arguments[n]) {\n          Object.prototype.hasOwnProperty.call(t, a) && (e[a] = t[a]);\n        }\n      }\n\n      return e;\n    }).apply(this, arguments);\n  },\n      pe = tinymce.util.Tools.resolve(\"tinymce.Env\"),\n      me = tinymce.util.Tools.resolve(\"tinymce.util.Delay\"),\n      ge = tinymce.util.Tools.resolve(\"tinymce.util.Promise\"),\n      ve = tinymce.util.Tools.resolve(\"tinymce.util.VK\"),\n      he = tinymce.util.Tools.resolve(\"tinymce.util.Tools\"),\n      ye = \"x-tinymce/html\",\n      be = \"\\x3c!-- \" + ye + \" --\\x3e\",\n      xe = o(ye),\n      we = Object.hasOwnProperty,\n      Pe = tinymce.util.Tools.resolve(\"tinymce.html.Entities\"),\n      _e = tinymce.util.Tools.resolve(\"tinymce.html.DomParser\"),\n      Ce = tinymce.util.Tools.resolve(\"tinymce.html.Serializer\"),\n      Te = tinymce.util.Tools.resolve(\"tinymce.html.Node\"),\n      De = tinymce.util.Tools.resolve(\"tinymce.html.Schema\"),\n      ke = (ie = 0, function () {\n    return \"mceclip\" + ie++;\n  }),\n      Oe = function Oe(e, t) {\n    var n = oe(e);\n    return n && \"mcepastebin\" === n.id && n.innerHTML === t;\n  },\n      Se = tinymce.util.Tools.resolve(\"tinymce.dom.RangeUtils\");\n\n  r.add(\"paste\", function (e) {\n    if (0 == (!!e.hasPlugin(\"powerpaste\", !0) && (void 0 !== window.console && window.console.log && window.console.log(\"PowerPaste is incompatible with Paste plugin! Remove 'paste' from the 'plugins' option.\"), !0))) {\n      var t = w(!1),\n          n = w(e.getParam(\"paste_as_text\", !1) ? \"text\" : \"html\"),\n          r = (y = n, b = W(h = e), h.on(\"PreInit\", function () {\n        return K(h, b, y);\n      }), {\n        pasteFormat: y,\n        pasteHtml: function pasteHtml(e, t) {\n          return L(h, e, t);\n        },\n        pasteText: function pasteText(e) {\n          return N(h, e);\n        },\n        pasteImageData: function pasteImageData(e, t) {\n          return U(h, e, t);\n        },\n        getDataTransferItems: H,\n        hasHtmlOrText: z,\n        hasContentType: $\n      }),\n          a = e;\n      return pe.webkit && ee(a, ne), pe.ie && (ee(a, te), v = re, (g = a).on(\"PastePostProcess\", function (e) {\n        v(g, e.node);\n      })), (p = e).ui.registry.addToggleButton(\"pastetext\", {\n        active: !1,\n        icon: \"paste-text\",\n        tooltip: \"Paste as text\",\n        onAction: x,\n        onSetup: ae(p, m = r)\n      }), p.ui.registry.addToggleMenuItem(\"pastetext\", {\n        text: \"Paste as text\",\n        icon: \"paste-text\",\n        onAction: x,\n        onSetup: ae(p, m)\n      }), d = r, (f = e).addCommand(\"mceTogglePlainTextPaste\", function () {\n        var e,\n            t = f;\n        \"text\" === (e = d).pasteFormat.get() ? (e.pasteFormat.set(\"html\"), C(t, !1)) : (e.pasteFormat.set(\"text\"), C(t, !0)), t.focus();\n      }), f.addCommand(\"mceInsertClipboardContent\", function (e, t) {\n        t.content && d.pasteHtml(t.content, t.internal), t.text && d.pasteText(t.text);\n      }), function (e) {\n        var t = e.plugins.paste,\n            n = e.getParam(\"paste_preprocess\");\n        n && e.on(\"PastePreProcess\", function (e) {\n          n.call(t, t, e);\n        });\n        var r = e.getParam(\"paste_postprocess\");\n        r && e.on(\"PastePostProcess\", function (e) {\n          r.call(t, t, e);\n        });\n      }(e), (o = e).on(\"cut\", (u = o, function (e) {\n        G(u) && Y(e, q(u), Z(u), function () {\n          var e;\n          pe.browser.isChrome() || pe.browser.isFirefox() ? (e = u.selection.getRng(), me.setEditorTimeout(u, function () {\n            u.selection.setRng(e), u.execCommand(\"Delete\");\n          }, 0)) : u.execCommand(\"Delete\");\n        });\n      })), o.on(\"copy\", (c = o, function (e) {\n        G(c) && Y(e, q(c), Z(c), _);\n      })), s = r, l = t, (i = e).getParam(\"paste_block_drop\", !1) && i.on(\"dragend dragover draggesture dragdrop drop drag\", function (e) {\n        e.preventDefault(), e.stopPropagation();\n      }), T(i) || i.on(\"drop\", function (e) {\n        var t = e.dataTransfer;\n        t && t.files && 0 < t.files.length && e.preventDefault();\n      }), i.on(\"drop\", function (e) {\n        var t,\n            n,\n            r,\n            a,\n            o = J(i, e);\n        e.isDefaultPrevented() || l.get() || (t = s.getDataTransferItems(e.dataTransfer), n = s.hasContentType(t, xe()), (!s.hasHtmlOrText(t) || (r = t[\"text/plain\"]) && 0 === r.indexOf(\"file://\")) && s.pasteImageData(e, o) || !o || !i.getParam(\"paste_filter_drop\", !0) || (a = t[\"mce-internal\"] || t[\"text/html\"] || t[\"text/plain\"]) && (e.preventDefault(), me.setEditorTimeout(i, function () {\n          i.undoManager.transact(function () {\n            t[\"mce-internal\"] && i.execCommand(\"Delete\"), Q(i, o), a = k(a), t[\"text/html\"] ? s.pasteHtml(a, n) : s.pasteText(a);\n          });\n        })));\n      }), i.on(\"dragstart\", function (e) {\n        l.set(!0);\n      }), i.on(\"dragover dragend\", function (e) {\n        T(i) && !1 === l.get() && (e.preventDefault(), Q(i, J(i, e))), \"dragend\" === e.type && l.set(!1);\n      }), {\n        clipboard: r\n      };\n    }\n\n    var i, s, l, o, u, c, f, d, p, m, a, g, v, h, y, b;\n\n    function x() {\n      return p.execCommand(\"mceTogglePlainTextPaste\");\n    }\n  });\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL3Bhc3RlL3BsdWdpbi5taW4uanM/NTBlZSJdLCJuYW1lcyI6WyJ3IiwiZSIsInQiLCJnZXQiLCJzZXQiLCJQIiwiXyIsIm8iLCJsIiwibiIsInIiLCJ0aW55bWNlIiwidXRpbCIsIlRvb2xzIiwicmVzb2x2ZSIsInUiLCJBcnJheSIsInByb3RvdHlwZSIsImlzUHJvdG90eXBlT2YiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJTdHJpbmciLCJpIiwicyIsImZvbGQiLCJpc1NvbWUiLCJpc05vbmUiLCJnZXRPciIsImdldE9yVGh1bmsiLCJhIiwiZ2V0T3JEaWUiLCJFcnJvciIsImdldE9yTnVsbCIsImdldE9yVW5kZWZpbmVkIiwib3IiLCJvclRodW5rIiwibWFwIiwiZWFjaCIsImJpbmQiLCJleGlzdHMiLCJmb3JhbGwiLCJmaWx0ZXIiLCJ0b0FycmF5IiwidG9TdHJpbmciLCJjIiwibGVuZ3RoIiwiZiIsImQiLCJwIiwibGUiLCJub25lIiwiY2xlYXIiLCJpc1NldCIsInNvbWUiLCJkZSIsIm9uIiwibSIsInN1YnN0ciIsIkMiLCJmaXJlIiwic3RhdGUiLCJUIiwiZ2V0UGFyYW0iLCJnIiwiaCIsInkiLCJ2IiwiaGUiLCJleHBsb2RlIiwiYiIsImluZGV4T2YiLCJiZSIsIngiLCJzcGxpdCIsIndlIiwiY2FsbCIsInB1c2giLCJQZSIsImVuY29kZUFsbFJhdyIsImpvaW4iLCJyZXBsYWNlIiwiRCIsIlJlZ0V4cCIsImsiLCJPIiwidGVzdCIsIlMiLCJtYWtlTWFwIiwic2xpY2UiLCJNYXRoIiwiZmxvb3IiLCJEZSIsInZhbGlkX2VsZW1lbnRzIiwidmFsaWRfY2hpbGRyZW4iLCJlbGVtZW50cyIsImF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzT3JkZXIiLCJzdHlsZSIsIl9lIiwiYWRkQXR0cmlidXRlRmlsdGVyIiwiYXR0ciIsImRvbSIsInBhcnNlU3R5bGUiLCJleGVjIiwiX2xpc3RMZXZlbCIsInBhcnNlSW50IiwiZmlyc3RDaGlsZCIsIl9saXN0SWdub3JlIiwicmVtb3ZlIiwid3JhcCIsIlRlIiwic2VyaWFsaXplU3R5bGUiLCJwYXJlbnQiLCJ1bndyYXAiLCJhZGROb2RlRmlsdGVyIiwiaHJlZiIsInBhcnNlIiwidHlwZSIsInZhbHVlIiwibmV4dCIsImFwcGVuZCIsImxhc3RDaGlsZCIsIndhbGsiLCJDZSIsInZhbGlkYXRlIiwic2VyaWFsaXplIiwiaiIsImNvbnRlbnQiLCJjYW5jZWxsZWQiLCJBIiwiaW50ZXJuYWwiLCJ3b3JkQ29udGVudCIsInNjaGVtYSIsImZvcmNlZF9yb290X2Jsb2NrIiwiaXNSb290Q29udGVudCIsImhhc0V2ZW50TGlzdGVuZXJzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiY3JlYXRlIiwibm9kZSIsImlubmVySFRNTCIsIlIiLCJpbnNlcnRDb250ZW50IiwibWVyZ2UiLCJwYXN0ZSIsIkkiLCJGIiwic2VsZWN0aW9uIiwiaXNDb2xsYXBzZWQiLCJ1bmRvTWFuYWdlciIsImV4dHJhIiwiZXhlY0NvbW1hbmQiLCJFIiwidG9Mb3dlckNhc2UiLCJNIiwiQiIsIkwiLCJOIiwiZW5jb2RlIiwicGNJc1NwYWNlIiwic3RyIiwiSCIsImdldERhdGEiLCJ0eXBlcyIsIiQiLCJ6IiwiVSIsImNsaXBib2FyZERhdGEiLCJkYXRhVHJhbnNmZXIiLCJpdGVtcyIsImNlIiwiYXBwbHkiLCJmZSIsImtpbmQiLCJnZXRBc0ZpbGUiLCJmaWxlcyIsImhhc093biIsImpwZyIsImpwZSIsImpmaSIsImppZiIsImpmaWYiLCJwanBlZyIsInBqcCIsInN2ZyIsInByZXZlbnREZWZhdWx0IiwiZ2UiLCJhbGwiLCJ3aW5kb3ciLCJGaWxlUmVhZGVyIiwib25sb2FkIiwiYmxvYiIsInVyaSIsInJlc3VsdCIsInJlYWRBc0RhdGFVUkwiLCJ0aGVuIiwic2V0Um5nIiwiZGF0YSIsImRlY29kZVVSSUNvbXBvbmVudCIsImtlIiwiSW1hZ2UiLCJzcmMiLCJlZGl0b3JVcGxvYWQiLCJibG9iQ2FjaGUiLCJnZXRCeURhdGEiLCJtYXRjaCIsImFkZCIsImJsb2JVcmkiLCJWIiwidmUiLCJtZXRhS2V5UHJlc3NlZCIsImtleUNvZGUiLCJzaGlmdEtleSIsIksiLCJnZXRIdG1sIiwiaXNEZWZhdWx0Q29udGVudCIsImdldFNob3J0RW5kZWRFbGVtZW50cyIsImdldEJsb2NrRWxlbWVudHMiLCJzaG9ydEVuZGVkIiwid2luZG93TWFuYWdlciIsImFsZXJ0IiwicGUiLCJ3ZWJraXQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJpZSIsImllRmFrZSIsIm9uY2UiLCJvZmYiLCJnZXREb2MiLCJ4ZSIsImdldExhc3RSbmciLCJnZXRSbmciLCJnZXRFbCIsInN0b3BQcm9wYWdhdGlvbiIsIm1lIiwic2V0RWRpdG9yVGltZW91dCIsInBhcnNlciIsInRyYW5zcGFyZW50U3JjIiwiWCIsImlubGluZSIsImRvY3VtZW50IiwiYm9keSIsImdldEJvZHkiLCJXIiwiaWQiLCJjb250ZW50RWRpdGFibGUiLCJnZWNrbyIsInNldFN0eWxlIiwiZ2V0U3R5bGUiLCJPZSIsImZvY3VzIiwic2VsZWN0Iiwib2UiLCJ1bmJpbmQiLCJhcHBlbmRDaGlsZCIsImdyZXAiLCJjaGlsZE5vZGVzIiwic2hpZnQiLCJpbnNlcnRCZWZvcmUiLCJpc0RlZmF1bHQiLCJZIiwiaU9TIiwic2V0RGF0YSIsImNsZWFyRGF0YSIsImh0bWwiLCJ0ZXh0IiwiWiIsImNvbnRlbnRlZGl0YWJsZSIsInNldFN0eWxlcyIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsIndpZHRoIiwib3ZlcmZsb3ciLCJjcmVhdGVSbmciLCJzZWxlY3ROb2RlQ29udGVudHMiLCJzZXRUaW1lb3V0IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicSIsImdldENvbnRlbnQiLCJjb250ZXh0dWFsIiwiZm9ybWF0IiwiRyIsImdldFBhcmVudCIsImdldFN0YXJ0IiwiSiIsIlNlIiwiZ2V0Q2FyZXRSYW5nZUZyb21Qb2ludCIsImNsaWVudFgiLCJjbGllbnRZIiwiUSIsImVlIiwidGUiLCJuZSIsImdldE5vZGUiLCJkZWNvZGUiLCJ0b0hleCIsInJlIiwiZmluZCIsImFlIiwic2V0QWN0aXZlIiwicGFzdGVGb3JtYXQiLCJzZSIsImZyb20iLCJ1ZSIsIk9iamVjdCIsImFzc2lnbiIsImFyZ3VtZW50cyIsImhhc093blByb3BlcnR5IiwieWUiLCJoYXNQbHVnaW4iLCJjb25zb2xlIiwibG9nIiwicGFzdGVIdG1sIiwicGFzdGVUZXh0IiwicGFzdGVJbWFnZURhdGEiLCJnZXREYXRhVHJhbnNmZXJJdGVtcyIsImhhc0h0bWxPclRleHQiLCJoYXNDb250ZW50VHlwZSIsInVpIiwicmVnaXN0cnkiLCJhZGRUb2dnbGVCdXR0b24iLCJhY3RpdmUiLCJpY29uIiwidG9vbHRpcCIsIm9uQWN0aW9uIiwib25TZXR1cCIsImFkZFRvZ2dsZU1lbnVJdGVtIiwiYWRkQ29tbWFuZCIsInBsdWdpbnMiLCJicm93c2VyIiwiaXNDaHJvbWUiLCJpc0ZpcmVmb3giLCJ0cmFuc2FjdCIsImNsaXBib2FyZCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxZQUFVO0FBQUM7O0FBQWEsV0FBU0EsQ0FBVCxDQUFXQyxDQUFYLEVBQWE7QUFBQyxRQUFJQyxDQUFDLEdBQUNELENBQU47QUFBUSxXQUFNO0FBQUNFLE1BQUFBLEdBQUcsRUFBQyxlQUFVO0FBQUMsZUFBT0QsQ0FBUDtBQUFTLE9BQXpCO0FBQTBCRSxNQUFBQSxHQUFHLEVBQUMsYUFBU0gsQ0FBVCxFQUFXO0FBQUNDLFFBQUFBLENBQUMsR0FBQ0QsQ0FBRjtBQUFJO0FBQTlDLEtBQU47QUFBc0Q7O0FBQUEsV0FBU0ksQ0FBVCxDQUFXSixDQUFYLEVBQWE7QUFBQyxXQUFNLEVBQUUsUUFBTUEsQ0FBUixDQUFOO0FBQWlCOztBQUFBLFdBQVNLLENBQVQsR0FBWSxDQUFF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QUNvSCxJQUFkLElBQW9CN0csQ0FBQyxDQUFDSixHQUFGLENBQU0sQ0FBQyxDQUFQLENBQXpFO0FBQW1GLE9BQXZILENBQTk5RCxFQUF1bEU7QUFBQzRVLFFBQUFBLFNBQVMsRUFBQ3RVO0FBQVgsT0FBOWxFO0FBQTRtRTs7QUFBQSxRQUFJWSxDQUFKLEVBQU1DLENBQU4sRUFBUWYsQ0FBUixFQUFVRCxDQUFWLEVBQVlRLENBQVosRUFBYzZCLENBQWQsRUFBZ0JFLENBQWhCLEVBQWtCQyxDQUFsQixFQUFvQkMsQ0FBcEIsRUFBc0JRLENBQXRCLEVBQXdCM0IsQ0FBeEIsRUFBMEJrQyxDQUExQixFQUE0QkcsQ0FBNUIsRUFBOEJGLENBQTlCLEVBQWdDQyxDQUFoQyxFQUFrQ0ksQ0FBbEM7O0FBQW9DLGFBQVNHLENBQVQsR0FBWTtBQUFDLGFBQU94QixDQUFDLENBQUNzRyxXQUFGLENBQWMseUJBQWQsQ0FBUDtBQUFnRDtBQUFDLEdBQXB2RjtBQUFzdkYsQ0FBcndyQixFQUFEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgVGlueSBUZWNobm9sb2dpZXMsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIExHUEwgb3IgYSBjb21tZXJjaWFsIGxpY2Vuc2UuXHJcbiAqIEZvciBMR1BMIHNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKiBGb3IgY29tbWVyY2lhbCBsaWNlbnNlcyBzZWUgaHR0cHM6Ly93d3cudGlueS5jbG91ZC9cclxuICpcclxuICogVmVyc2lvbjogNS4xMC4zICgyMDIyLTAyLTA5KVxyXG4gKi9cclxuIWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdyhlKXt2YXIgdD1lO3JldHVybntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdH0sc2V0OmZ1bmN0aW9uKGUpe3Q9ZX19fWZ1bmN0aW9uIFAoZSl7cmV0dXJuIShudWxsPT1lKX1mdW5jdGlvbiBfKCl7fWZ1bmN0aW9uIG8oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGV9fWZ1bmN0aW9uIGUoZSl7cmV0dXJuIGV9ZnVuY3Rpb24gdCgpe3JldHVybiBsfXZhciBuLHI9dGlueW1jZS51dGlsLlRvb2xzLnJlc29sdmUoXCJ0aW55bWNlLlBsdWdpbk1hbmFnZXJcIiksdT1mdW5jdGlvbihlKXtyZXR1cm4gbj10eXBlb2YodD1lKSxcImFycmF5XCI9PShudWxsPT09dD9cIm51bGxcIjpcIm9iamVjdFwiPT1uJiYoQXJyYXkucHJvdG90eXBlLmlzUHJvdG90eXBlT2YodCl8fHQuY29uc3RydWN0b3ImJlwiQXJyYXlcIj09PXQuY29uc3RydWN0b3IubmFtZSk/XCJhcnJheVwiOlwib2JqZWN0XCI9PW4mJihTdHJpbmcucHJvdG90eXBlLmlzUHJvdG90eXBlT2YodCl8fHQuY29uc3RydWN0b3ImJlwiU3RyaW5nXCI9PT10LmNvbnN0cnVjdG9yLm5hbWUpP1wic3RyaW5nXCI6bik7dmFyIHQsbn0saT1vKCEobj1cImZ1bmN0aW9uXCIpKSxzPW8oITApLGw9e2ZvbGQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZSgpfSxpc1NvbWU6aSxpc05vbmU6cyxnZXRPcjplLGdldE9yVGh1bms6YSxnZXRPckRpZTpmdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoZXx8XCJlcnJvcjogZ2V0T3JEaWUgY2FsbGVkIG9uIG5vbmUuXCIpfSxnZXRPck51bGw6byhudWxsKSxnZXRPclVuZGVmaW5lZDpvKHZvaWQgMCksb3I6ZSxvclRodW5rOmEsbWFwOnQsZWFjaDpfLGJpbmQ6dCxleGlzdHM6aSxmb3JhbGw6cyxmaWx0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gbH0sdG9BcnJheTpmdW5jdGlvbigpe3JldHVybltdfSx0b1N0cmluZzpvKFwibm9uZSgpXCIpfTtmdW5jdGlvbiBhKGUpe3JldHVybiBlKCl9ZnVuY3Rpb24gYyhlLHQpe2Zvcih2YXIgbj0wLHI9ZS5sZW5ndGg7bjxyO24rKylpZih0KGVbbl0sbikpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gZihlLHQpe2Zvcih2YXIgbj1lLmxlbmd0aCxyPW5ldyBBcnJheShuKSxhPTA7YTxuO2ErKyl7dmFyIG89ZVthXTtyW2FdPXQobyxhKX1yZXR1cm4gcn1mdW5jdGlvbiBkKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKXQoZVtuXSxuKX1mdW5jdGlvbiBwKCl7dmFyIGUsdCxuPShlPV8sdD13KGxlLm5vbmUoKSkse2NsZWFyOmZ1bmN0aW9uKCl7cigpLHQuc2V0KGxlLm5vbmUoKSl9LGlzU2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZ2V0KCkuaXNTb21lKCl9LGdldDpmdW5jdGlvbigpe3JldHVybiB0LmdldCgpfSxzZXQ6ZnVuY3Rpb24oZSl7cigpLHQuc2V0KGxlLnNvbWUoZSkpfX0pO2Z1bmN0aW9uIHIoKXtyZXR1cm4gdC5nZXQoKS5lYWNoKGUpfXJldHVybiBkZShkZSh7fSxuKSx7b246ZnVuY3Rpb24oZSl7cmV0dXJuIG4uZ2V0KCkuZWFjaChlKX19KX1mdW5jdGlvbiBtKGUsdCxuKXtyZXR1cm5cIlwiPT09dHx8ZS5sZW5ndGg+PXQubGVuZ3RoJiZlLnN1YnN0cihuLG4rdC5sZW5ndGgpPT09dH1mdW5jdGlvbiBDKGUsdCl7cmV0dXJuIGUuZmlyZShcIlBhc3RlUGxhaW5UZXh0VG9nZ2xlXCIse3N0YXRlOnR9KX1mdW5jdGlvbiBUKGUpe3JldHVybiBlLmdldFBhcmFtKFwicGFzdGVfZGF0YV9pbWFnZXNcIiwhMSl9ZnVuY3Rpb24gZyhlKXtyZXR1cm4gZS5nZXRQYXJhbShcInBhc3RlX3JldGFpbl9zdHlsZV9wcm9wZXJ0aWVzXCIpfWZ1bmN0aW9uIGgoZSl7cmV0dXJuIGUuZ2V0UGFyYW0oXCJ2YWxpZGF0ZVwiKX1mdW5jdGlvbiB5KGUpe3JldHVybiBlLmdldFBhcmFtKFwicGFzdGVfZGF0YV9pbWFnZXNcIiwhMSxcImJvb2xlYW5cIil9ZnVuY3Rpb24gdihlKXtyZXR1cm4gaGUuZXhwbG9kZShlLmdldFBhcmFtKFwiaW1hZ2VzX2ZpbGVfdHlwZXNcIixcImpwZWcsanBnLGpwZSxqZmksamlmLGpmaWYscG5nLGdpZixibXAsd2VicFwiLFwic3RyaW5nXCIpKX1mdW5jdGlvbiBiKGUpe3JldHVybi0xIT09ZS5pbmRleE9mKGJlKX1mdW5jdGlvbiB4KGUsdCxuKXtyZXR1cm4gdD8ocj0hMD09PXQ/XCJwXCI6dCxhPW4sbz1lLnNwbGl0KC9cXG5cXG4vKSxpPWZ1bmN0aW9uKGUsdCl7dmFyIG4scj1bXSxhPVwiPFwiK2U7aWYoXCJvYmplY3RcIj09dHlwZW9mIHQpe2Zvcih2YXIgbyBpbiB0KW49byx3ZS5jYWxsKHQsbikmJnIucHVzaChvKyc9XCInK1BlLmVuY29kZUFsbFJhdyh0W29dKSsnXCInKTtyLmxlbmd0aCYmKGErPVwiIFwiK3Iuam9pbihcIiBcIikpfXJldHVybiBhK1wiPlwifShyLGEpLHM9XCI8L1wiK3IrXCI+XCIsMT09PShsPWhlLm1hcChvLGZ1bmN0aW9uKGUpe3JldHVybiBlLnNwbGl0KC9cXG4vKS5qb2luKFwiPGJyIC8+XCIpfSkpLmxlbmd0aD9sWzBdOmhlLm1hcChsLGZ1bmN0aW9uKGUpe3JldHVybiBpK2Urc30pLmpvaW4oXCJcIikpOmUucmVwbGFjZSgvXFxyP1xcbi9nLFwiPGJyPlwiKTt2YXIgcixhLG8saSxzLGx9ZnVuY3Rpb24gRCh0LGUpe3JldHVybiBoZS5lYWNoKGUsZnVuY3Rpb24oZSl7dD1lLmNvbnN0cnVjdG9yPT09UmVnRXhwP3QucmVwbGFjZShlLFwiXCIpOnQucmVwbGFjZShlWzBdLGVbMV0pfSksdH1mdW5jdGlvbiBrKGUpe3JldHVybiBEKGUsWy9eW1xcc1xcU10qPGJvZHlbXj5dKj5cXHMqfFxccyo8XFwvYm9keVtePl0qPltcXHNcXFNdKiQvZ2ksLzwhLS1TdGFydEZyYWdtZW50LS0+fDwhLS1FbmRGcmFnbWVudC0tPi9nLFsvKCA/KTxzcGFuIGNsYXNzPVwiQXBwbGUtY29udmVydGVkLXNwYWNlXCI+XFx1MDBhMDxcXC9zcGFuPiggPykvZyxmdW5jdGlvbihlLHQsbil7cmV0dXJuIHR8fG4/XCJcXHhhMFwiOlwiIFwifV0sLzxiciBjbGFzcz1cIkFwcGxlLWludGVyY2hhbmdlLW5ld2xpbmVcIj4vZywvPGJyPiQvaV0pfWZ1bmN0aW9uIE8oZSl7cmV0dXJuLzxmb250IGZhY2U9XCJUaW1lcyBOZXcgUm9tYW5cInxjbGFzcz1cIj9Nc298c3R5bGU9XCJbXlwiXSpcXGJtc28tfHN0eWxlPSdbXiddKlxcYm1zby18dzpXb3JkRG9jdW1lbnQvaS50ZXN0KGUpfHwvY2xhc3M9XCJPdXRsaW5lRWxlbWVudC8udGVzdChlKXx8L2lkPVwiP2RvY3NcXC1pbnRlcm5hbFxcLWd1aWRcXC0vLnRlc3QoZSl9ZnVuY3Rpb24gUyhyLGUpe3ZhciBhLHQ9ZyhyKTt0JiYoYT1oZS5tYWtlTWFwKHQuc3BsaXQoL1ssIF0vKSkpLGU9RChlLFsvPGJyIGNsYXNzPVwiP0FwcGxlLWludGVyY2hhbmdlLW5ld2xpbmVcIj8+L2dpLC88YltePl0raWQ9XCI/ZG9jcy1pbnRlcm5hbC1bXj5dKj4vZ2ksLzwhLS1bXFxzXFxTXSs/LS0+L2dpLC88KCF8c2NyaXB0W14+XSo+Lio/PFxcL3NjcmlwdCg/PVs+XFxzXSl8XFwvPyhcXD94bWwoOlxcdyspP3xpbWd8bWV0YXxsaW5rfHN0eWxlfFxcdzpcXHcrKSg/PVtcXHNcXC8+XSkpW14+XSo+L2dpLFsvPChcXC8/KXM+L2dpLFwiPCQxc3RyaWtlPlwiXSxbLyZuYnNwOy9naSxcIlxceGEwXCJdLFsvPHNwYW5cXHMrc3R5bGVcXHMqPVxccypcIlxccyptc28tc3BhY2VydW5cXHMqOlxccyp5ZXNcXHMqOz9cXHMqXCJcXHMqPihbXFxzXFx1MDBhMF0qKTxcXC9zcGFuPi9naSxmdW5jdGlvbihlLHQpe3JldHVybiAwPHQubGVuZ3RoP3QucmVwbGFjZSgvLi8sXCIgXCIpLnNsaWNlKE1hdGguZmxvb3IodC5sZW5ndGgvMikpLnNwbGl0KFwiXCIpLmpvaW4oXCJcXHhhMFwiKTpcIlwifV1dKTt2YXIgbj1yLmdldFBhcmFtKFwicGFzdGVfd29yZF92YWxpZF9lbGVtZW50c1wiLFwiLXN0cm9uZy9iLC1lbS9pLC11LC1zcGFuLC1wLC1vbCwtdWwsLWxpLC1oMSwtaDIsLWgzLC1oNCwtaDUsLWg2LC1wL2RpdiwtYVtocmVmfG5hbWVdLHN1YixzdXAsc3RyaWtlLGJyLGRlbCx0YWJsZVt3aWR0aF0sdHIsdGRbY29sc3Bhbnxyb3dzcGFufHdpZHRoXSx0aFtjb2xzcGFufHJvd3NwYW58d2lkdGhdLHRoZWFkLHRmb290LHRib2R5XCIpLG89RGUoe3ZhbGlkX2VsZW1lbnRzOm4sdmFsaWRfY2hpbGRyZW46XCItbGlbcF1cIn0pO2hlLmVhY2goby5lbGVtZW50cyxmdW5jdGlvbihlKXtlLmF0dHJpYnV0ZXMuY2xhc3N8fChlLmF0dHJpYnV0ZXMuY2xhc3M9e30sZS5hdHRyaWJ1dGVzT3JkZXIucHVzaChcImNsYXNzXCIpKSxlLmF0dHJpYnV0ZXMuc3R5bGV8fChlLmF0dHJpYnV0ZXMuc3R5bGU9e30sZS5hdHRyaWJ1dGVzT3JkZXIucHVzaChcInN0eWxlXCIpKX0pO3ZhciBpPV9lKHt9LG8pO2kuYWRkQXR0cmlidXRlRmlsdGVyKFwic3R5bGVcIixmdW5jdGlvbihlKXtmb3IodmFyIHQsbj1lLmxlbmd0aDtuLS07KSh0PWVbbl0pLmF0dHIoXCJzdHlsZVwiLGZ1bmN0aW9uKHIsYSxvLGkpe3ZhciBzPXt9LGU9ci5kb20ucGFyc2VTdHlsZShpKTtyZXR1cm4gaGUuZWFjaChlLGZ1bmN0aW9uKGUsdCl7c3dpdGNoKHQpe2Nhc2VcIm1zby1saXN0XCI6dmFyIG49L1xcdysgXFx3KyhbMC05XSspL2kuZXhlYyhpKTtuJiYoby5fbGlzdExldmVsPXBhcnNlSW50KG5bMV0sMTApKSwvSWdub3JlL2kudGVzdChlKSYmby5maXJzdENoaWxkJiYoby5fbGlzdElnbm9yZT0hMCxvLmZpcnN0Q2hpbGQuX2xpc3RJZ25vcmU9ITApO2JyZWFrO2Nhc2VcImhvcml6LWFsaWduXCI6dD1cInRleHQtYWxpZ25cIjticmVhaztjYXNlXCJ2ZXJ0LWFsaWduXCI6dD1cInZlcnRpY2FsLWFsaWduXCI7YnJlYWs7Y2FzZVwiZm9udC1jb2xvclwiOmNhc2VcIm1zby1mb3JlZ3JvdW5kXCI6dD1cImNvbG9yXCI7YnJlYWs7Y2FzZVwibXNvLWJhY2tncm91bmRcIjpjYXNlXCJtc28taGlnaGxpZ2h0XCI6dD1cImJhY2tncm91bmRcIjticmVhaztjYXNlXCJmb250LXdlaWdodFwiOmNhc2VcImZvbnQtc3R5bGVcIjpyZXR1cm4gdm9pZChcIm5vcm1hbFwiIT09ZSYmKHNbdF09ZSkpO2Nhc2VcIm1zby1lbGVtZW50XCI6aWYoL14oY29tbWVudHxjb21tZW50LWxpc3QpJC9pLnRlc3QoZSkpcmV0dXJuIHZvaWQgby5yZW1vdmUoKX0wIT09dC5pbmRleE9mKFwibXNvLWNvbW1lbnRcIik/MCE9PXQuaW5kZXhPZihcIm1zby1cIikmJihcImFsbFwiPT09ZyhyKXx8YSYmYVt0XSkmJihzW3RdPWUpOm8ucmVtb3ZlKCl9KSwvKGJvbGQpL2kudGVzdChzW1wiZm9udC13ZWlnaHRcIl0pJiYoZGVsZXRlIHNbXCJmb250LXdlaWdodFwiXSxvLndyYXAobmV3IFRlKFwiYlwiLDEpKSksLyhpdGFsaWMpL2kudGVzdChzW1wiZm9udC1zdHlsZVwiXSkmJihkZWxldGUgc1tcImZvbnQtc3R5bGVcIl0sby53cmFwKG5ldyBUZShcImlcIiwxKSkpLHIuZG9tLnNlcmlhbGl6ZVN0eWxlKHMsby5uYW1lKXx8bnVsbH0ocixhLHQsdC5hdHRyKFwic3R5bGVcIikpKSxcInNwYW5cIj09PXQubmFtZSYmdC5wYXJlbnQmJiF0LmF0dHJpYnV0ZXMubGVuZ3RoJiZ0LnVud3JhcCgpfSksaS5hZGRBdHRyaWJ1dGVGaWx0ZXIoXCJjbGFzc1wiLGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuLHI9ZS5sZW5ndGg7ci0tOyluPSh0PWVbcl0pLmF0dHIoXCJjbGFzc1wiKSwvXihNc29Db21tZW50UmVmZXJlbmNlfE1zb0NvbW1lbnRUZXh0fG1zb0RlbCkkL2kudGVzdChuKSYmdC5yZW1vdmUoKSx0LmF0dHIoXCJjbGFzc1wiLG51bGwpfSksaS5hZGROb2RlRmlsdGVyKFwiZGVsXCIsZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUubGVuZ3RoO3QtLTspZVt0XS5yZW1vdmUoKX0pLGkuYWRkTm9kZUZpbHRlcihcImFcIixmdW5jdGlvbihlKXtmb3IodmFyIHQsbixyLGE9ZS5sZW5ndGg7YS0tOyluPSh0PWVbYV0pLmF0dHIoXCJocmVmXCIpLHI9dC5hdHRyKFwibmFtZVwiKSxuJiYtMSE9PW4uaW5kZXhPZihcIiNfbXNvY29tX1wiKT90LnJlbW92ZSgpOiEobj1uJiYwPT09bi5pbmRleE9mKFwiZmlsZTovL1wiKT8obj1uLnNwbGl0KFwiI1wiKVsxXSkmJlwiI1wiK246bikmJiFyfHxyJiYhL15fPyg/OnRvY3xlZG58ZnRuKS9pLnRlc3Qocik/dC51bndyYXAoKTp0LmF0dHIoe2hyZWY6bixuYW1lOnJ9KX0pO3ZhciBzPWkucGFyc2UoZSk7cmV0dXJuIHIuZ2V0UGFyYW0oXCJwYXN0ZV9jb252ZXJ0X3dvcmRfZmFrZV9saXN0c1wiLCEwKSYmZnVuY3Rpb24oZSl7Zm9yKHZhciBhLG8saT0xLG49ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtpZigzPT09ZS50eXBlKXJldHVybiBlLnZhbHVlO2lmKGU9ZS5maXJzdENoaWxkKWZvcig7dCs9bihlKSxlPWUubmV4dDspO3JldHVybiB0fSxzPWZ1bmN0aW9uKGUsdCl7aWYoMz09PWUudHlwZSYmdC50ZXN0KGUudmFsdWUpKXJldHVybiBlLnZhbHVlPWUudmFsdWUucmVwbGFjZSh0LFwiXCIpLCExO2lmKGU9ZS5maXJzdENoaWxkKWRve2lmKCFzKGUsdCkpcmV0dXJuITF9d2hpbGUoZT1lLm5leHQpO3JldHVybiEwfSxsPWZ1bmN0aW9uKGUpe2lmKGUuX2xpc3RJZ25vcmUpZS5yZW1vdmUoKTtlbHNlIGlmKGU9ZS5maXJzdENoaWxkKWZvcig7bChlKSxlPWUubmV4dDspO30sdD1mdW5jdGlvbihlLHQsbil7dmFyIHI9ZS5fbGlzdExldmVsfHxpOyhhPXIhPT1pP3I8aT9hJiZhLnBhcmVudC5wYXJlbnQ6KG89YSxudWxsKTphKSYmYS5uYW1lPT09dD9hLmFwcGVuZChlKToobz1vfHxhLGE9bmV3IFRlKHQsMSksMTxuJiZhLmF0dHIoXCJzdGFydFwiLFwiXCIrbiksZS53cmFwKGEpKSxlLm5hbWU9XCJsaVwiLGk8ciYmbyYmby5sYXN0Q2hpbGQuYXBwZW5kKGEpLGk9cixsKGUpLHMoZSwvXlxcdTAwYTArLykscyhlLC9eXFxzKihbXFx1MjAyMlxcdTAwYjdcXHUwMGE3XFx1MjVDRl18XFx3K1xcLikvKSxzKGUsL15cXHUwMGEwKy8pfSxyPVtdLHU9ZS5maXJzdENoaWxkO251bGwhPXU7KWlmKHIucHVzaCh1KSxudWxsIT09KHU9dS53YWxrKCkpKWZvcig7dm9pZCAwIT09dSYmdS5wYXJlbnQhPT1lOyl1PXUud2FsaygpO2Zvcih2YXIgYyxmLGQscD0wO3A8ci5sZW5ndGg7cCsrKVwicFwiPT09KGU9cltwXSkubmFtZSYmZS5maXJzdENoaWxkPyhjPW4oZSksL15bXFxzXFx1MDBhMF0qW1xcdTIwMjJcXHUwMGI3XFx1MDBhN1xcdTI1Q0ZdXFxzKi8udGVzdChjKT90KGUsXCJ1bFwiKTpmdW5jdGlvbih0KXt2YXIgbj0hMTtyZXR1cm4gdD1jLnJlcGxhY2UoL15bXFx1MDBhMCBdKy8sXCJcIiksaGUuZWFjaChbL15bSVZYTE1DRF0rXFwuWyBcXHUwMGEwXS8sL15baXZ4bG1jZF0rXFwuWyBcXHUwMGEwXS8sL15bYS16XXsxLDJ9W1xcLlxcKV1bIFxcdTAwYTBdLywvXltBLVpdezEsMn1bXFwuXFwpXVsgXFx1MDBhMF0vLC9eWzAtOV0rXFwuWyBcXHUwMGEwXS8sL15bXFx1MzAwN1xcdTRlMDBcXHU0ZThjXFx1NGUwOVxcdTU2ZGJcXHU0ZTk0XFx1NTE2ZFxcdTRlMDNcXHU1MTZiXFx1NGU1ZF0rXFwuWyBcXHUwMGEwXS8sL15bXFx1NThmMVxcdTVmMTBcXHU1M2MyXFx1NTZkYlxcdTRmMGRcXHU1MTZkXFx1NGUwM1xcdTUxNmJcXHU0ZTVkXFx1NjJmZV0rXFwuWyBcXHUwMGEwXS9dLGZ1bmN0aW9uKGUpe2lmKGUudGVzdCh0KSlyZXR1cm4hKG49ITApfSksbn0oYyk/KGQ9MSx0KGUsXCJvbFwiLGQ9KGY9LyhbMC05XSspXFwuLy5leGVjKGMpKT9wYXJzZUludChmWzFdLDEwKTpkKSk6ZS5fbGlzdExldmVsP3QoZSxcInVsXCIsMSk6YT1udWxsKToobz1hLGE9bnVsbCl9KHMpLENlKHt2YWxpZGF0ZTpoKHIpfSxvKS5zZXJpYWxpemUocyl9ZnVuY3Rpb24gaihlLHQpe3JldHVybntjb250ZW50OmUsY2FuY2VsbGVkOnR9fWZ1bmN0aW9uIEEoZSx0LG4pe3ZhciByLGEsbyxpLHMsbCx1LGMsZixkLHAsbSxnPU8odCksdj1nPyhhPXQsKHI9ZSkuZ2V0UGFyYW0oXCJwYXN0ZV9lbmFibGVfZGVmYXVsdF9maWx0ZXJzXCIsITApP1MocixhKTphKTp0O3JldHVybiBpPW4scz1nLHA9KG89ZSkuZmlyZShcIlBhc3RlUHJlUHJvY2Vzc1wiLHtjb250ZW50OnYsaW50ZXJuYWw6aSx3b3JkQ29udGVudDpzfSksbT1mdW5jdGlvbihlLHQpe3ZhciBuPV9lKHt9LGUuc2NoZW1hKTtuLmFkZE5vZGVGaWx0ZXIoXCJtZXRhXCIsZnVuY3Rpb24oZSl7aGUuZWFjaChlLGZ1bmN0aW9uKGUpe2UucmVtb3ZlKCl9KX0pO3ZhciByPW4ucGFyc2UodCx7Zm9yY2VkX3Jvb3RfYmxvY2s6ITEsaXNSb290Q29udGVudDohMH0pO3JldHVybiBDZSh7dmFsaWRhdGU6aChlKX0sZS5zY2hlbWEpLnNlcmlhbGl6ZShyKX0obyxwLmNvbnRlbnQpLG8uaGFzRXZlbnRMaXN0ZW5lcnMoXCJQYXN0ZVBvc3RQcm9jZXNzXCIpJiYhcC5pc0RlZmF1bHRQcmV2ZW50ZWQoKT8odT1pLGM9cyxmPShsPW8pLmRvbS5jcmVhdGUoXCJkaXZcIix7c3R5bGU6XCJkaXNwbGF5Om5vbmVcIn0sbSksaigoZD1sLmZpcmUoXCJQYXN0ZVBvc3RQcm9jZXNzXCIse25vZGU6ZixpbnRlcm5hbDp1LHdvcmRDb250ZW50OmN9KSkubm9kZS5pbm5lckhUTUwsZC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkpOmoobSxwLmlzRGVmYXVsdFByZXZlbnRlZCgpKX1mdW5jdGlvbiBSKGUsdCl7cmV0dXJuIGUuaW5zZXJ0Q29udGVudCh0LHttZXJnZTplLmdldFBhcmFtKFwicGFzdGVfbWVyZ2VfZm9ybWF0c1wiLCEwKSxwYXN0ZTohMH0pLCEwfWZ1bmN0aW9uIEkoZSl7cmV0dXJuL15odHRwcz86XFwvXFwvW1xcd1xcP1xcLVxcLys9LiYlQH4jXSskL2kudGVzdChlKX1mdW5jdGlvbiBGKGUsdCxuKXtyZXR1cm4hKCExIT09ZS5zZWxlY3Rpb24uaXNDb2xsYXBzZWQoKXx8IUkodCl8fChhPXQsbz1uLChyPWUpLnVuZG9NYW5hZ2VyLmV4dHJhKGZ1bmN0aW9uKCl7byhyLGEpfSxmdW5jdGlvbigpe3IuZXhlY0NvbW1hbmQoXCJtY2VJbnNlcnRMaW5rXCIsITEsYSl9KSwwKSk7dmFyIHIsYSxvfWZ1bmN0aW9uIEUoZSx0LG4pe3JldHVybiByPWUsISghSShhPXQpfHwhYyh2KHIpLGZ1bmN0aW9uKGUpe3JldHVybiBtKHQ9YS50b0xvd2VyQ2FzZSgpLG49XCIuXCIrZS50b0xvd2VyQ2FzZSgpLHQubGVuZ3RoLW4ubGVuZ3RoKTt2YXIgdCxufSl8fChpPXQscz1uLChvPWUpLnVuZG9NYW5hZ2VyLmV4dHJhKGZ1bmN0aW9uKCl7cyhvLGkpfSxmdW5jdGlvbigpe28uaW5zZXJ0Q29udGVudCgnPGltZyBzcmM9XCInK2krJ1wiPicpfSksMCkpO3ZhciByLGEsbyxpLHN9ZnVuY3Rpb24gTShlKXtyZXR1cm5cIlxcblwiPT09ZXx8XCJcXHJcIj09PWV9ZnVuY3Rpb24gQihlLHQsbixyKXt2YXIgYSxvLGkscyxsPUEoZSx0LG4pOyExPT09bC5jYW5jZWxsZWQmJihhPWUsbz1sLmNvbnRlbnQscnx8ITE9PT1hLmdldFBhcmFtKFwic21hcnRfcGFzdGVcIiwhMCk/UihhLG8pOihpPWEscz1vLGhlLmVhY2goW0YsRSxSXSxmdW5jdGlvbihlKXtyZXR1cm4hMCE9PWUoaSxzLFIpfSkpKX1mdW5jdGlvbiBMKGUsdCxuKXt2YXIgcj1ufHxiKHQpO0IoZSx0LnJlcGxhY2UoYmUsXCJcIiksciwhMSl9ZnVuY3Rpb24gTihlLHQpe3ZhciBuLHIsYSxvLGkscyxsPWUuZG9tLmVuY29kZSh0KS5yZXBsYWNlKC9cXHJcXG4vZyxcIlxcblwiKSx1PXgoKG49bCxvPShyPWUuZ2V0UGFyYW0oXCJwYXN0ZV90YWJfc3BhY2VzXCIsNCxcIm51bWJlclwiKSk8PTA/XCJcIjpuZXcgQXJyYXkocisxKS5qb2luKFwiIFwiKSxpPW4ucmVwbGFjZSgvXFx0L2csbykscz17cGNJc1NwYWNlOiEoYT1mdW5jdGlvbihlLHQpe3JldHVybi0xIT09XCIgXFxmXFx0XFx2XCIuaW5kZXhPZih0KXx8XCJcXHhhMFwiPT09dD9lLnBjSXNTcGFjZXx8XCJcIj09PWUuc3RyfHxlLnN0ci5sZW5ndGg9PT1pLmxlbmd0aC0xfHwobj1lLnN0ci5sZW5ndGgrMSk8aS5sZW5ndGgmJjA8PW4mJk0oaVtuXSk/e3BjSXNTcGFjZTohMSxzdHI6ZS5zdHIrXCJcXHhhMFwifTp7cGNJc1NwYWNlOiEwLHN0cjplLnN0citcIiBcIn06e3BjSXNTcGFjZTpNKHQpLHN0cjplLnN0cit0fTt2YXIgbn0pLHN0cjpcIlwifSxkKGksZnVuY3Rpb24oZSx0KXtzPWEocyxlKX0pLHMuc3RyKSxlLmdldFBhcmFtKFwiZm9yY2VkX3Jvb3RfYmxvY2tcIiksZS5nZXRQYXJhbShcImZvcmNlZF9yb290X2Jsb2NrX2F0dHJzXCIpKTtCKGUsdSwhMSwhMCl9ZnVuY3Rpb24gSChlKXt2YXIgdCxuPXt9O2lmKGUmJighZS5nZXREYXRhfHwodD1lLmdldERhdGEoXCJUZXh0XCIpKSYmMDx0Lmxlbmd0aCYmLTE9PT10LmluZGV4T2YoXCJkYXRhOnRleHQvbWNlLWludGVybmFsLFwiKSYmKG5bXCJ0ZXh0L3BsYWluXCJdPXQpLGUudHlwZXMpKWZvcih2YXIgcj0wO3I8ZS50eXBlcy5sZW5ndGg7cisrKXt2YXIgYT1lLnR5cGVzW3JdO3RyeXtuW2FdPWUuZ2V0RGF0YShhKX1jYXRjaChlKXtuW2FdPVwiXCJ9fXJldHVybiBufWZ1bmN0aW9uICQoZSx0KXtyZXR1cm4gdCBpbiBlJiYwPGVbdF0ubGVuZ3RofWZ1bmN0aW9uIHooZSl7cmV0dXJuICQoZSxcInRleHQvaHRtbFwiKXx8JChlLFwidGV4dC9wbGFpblwiKX1mdW5jdGlvbiBVKHcsZSx0KXt2YXIgbixyLGEsbyxpLHM9XCJwYXN0ZVwiPT09ZS50eXBlP2UuY2xpcGJvYXJkRGF0YTplLmRhdGFUcmFuc2ZlcjtpZih5KHcpJiZzKXt2YXIgbD0obj13LGE9KHI9cykuaXRlbXM/ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLG49MCxyPWUubGVuZ3RoO248cjsrK24pe2lmKCF1KGVbbl0pKXRocm93IG5ldyBFcnJvcihcIkFyci5mbGF0dGVuIGl0ZW0gXCIrbitcIiB3YXMgbm90IGFuIGFycmF5LCBpbnB1dDogXCIrZSk7Y2UuYXBwbHkodCxlW25dKX1yZXR1cm4gdH0oZihmZShyLml0ZW1zKSxmdW5jdGlvbihlKXtyZXR1cm5cImZpbGVcIj09PWUua2luZD9bZS5nZXRBc0ZpbGUoKV06W119KSk6W10sbz1yLmZpbGVzP2ZlKHIuZmlsZXMpOltdLGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVtdLHI9MCxhPWUubGVuZ3RoO3I8YTtyKyspe3ZhciBvPWVbcl07dChvLHIpJiZuLnB1c2gobyl9cmV0dXJuIG59KDA8YS5sZW5ndGg/YTpvLChpPXYobiksZnVuY3Rpb24ocil7cmV0dXJuIG0oci50eXBlLFwiaW1hZ2UvXCIsMCkmJmMoaSxmdW5jdGlvbihlKXtyZXR1cm4gdD1lLnRvTG93ZXJDYXNlKCksKGhlLmhhc093bihuPXtqcGc6XCJqcGVnXCIsanBlOlwianBlZ1wiLGpmaTpcImpwZWdcIixqaWY6XCJqcGVnXCIsamZpZjpcImpwZWdcIixwanBlZzpcImpwZWdcIixwanA6XCJqcGVnXCIsc3ZnOlwic3ZnK3htbFwifSx0KT9cImltYWdlL1wiK25bdF06XCJpbWFnZS9cIit0KT09PXIudHlwZTt2YXIgdCxufSl9KSkpO2lmKDA8bC5sZW5ndGgpcmV0dXJuIGUucHJldmVudERlZmF1bHQoKSxnZS5hbGwoZihsLGZ1bmN0aW9uKHIpe3JldHVybiBuZXcgZ2UoZnVuY3Rpb24oZSl7dmFyIHQ9UChyLmdldEFzRmlsZSk/ci5nZXRBc0ZpbGUoKTpyLG49bmV3IHdpbmRvdy5GaWxlUmVhZGVyO24ub25sb2FkPWZ1bmN0aW9uKCl7ZSh7YmxvYjp0LHVyaTpuLnJlc3VsdH0pfSxuLnJlYWRBc0RhdGFVUkwodCl9KX0pKS50aGVuKGZ1bmN0aW9uKGUpe3QmJncuc2VsZWN0aW9uLnNldFJuZyh0KSxkKGUsZnVuY3Rpb24oZSl7dmFyIHQsbixyLGEsbyxpLHMsbCx1LGMsZixkLHAsbSxnLHYsaCx5LGIseDt0PXcscj0obj1lKS51cmksZz0oYT0vZGF0YTooW147XSspO2Jhc2U2NCwoW2EtejAtOVxcK1xcLz1dKykvaS5leGVjKHIpKT97dHlwZTphWzFdLGRhdGE6ZGVjb2RlVVJJQ29tcG9uZW50KGFbMl0pfTp7dHlwZTpudWxsLGRhdGE6bnVsbH0sdj1nLmRhdGEsaD1nLnR5cGUseT1rZSgpLGI9bi5ibG9iLCh4PW5ldyBJbWFnZSkuc3JjPW4udXJpLHA9eCwhKG09dC5nZXRQYXJhbShcImltYWdlc19kYXRhaW1nX2ZpbHRlclwiKSl8fG0ocCk/KGM9dm9pZCAwLChpPShvPXQuZWRpdG9yVXBsb2FkLmJsb2JDYWNoZSkuZ2V0QnlEYXRhKHYsaCkpP2M9aToobD0ocz10LmdldFBhcmFtKFwiaW1hZ2VzX3JldXNlX2ZpbGVuYW1lXCIpJiZQKGIubmFtZSkpPyhmPXQsUChkPWIubmFtZS5tYXRjaCgvKFtcXHNcXFNdKz8pKD86XFwuW2EtejAtOS5dKykkL2kpKT9mLmRvbS5lbmNvZGUoZFsxXSk6bnVsbCk6eSx1PXM/Yi5uYW1lOnZvaWQgMCxjPW8uY3JlYXRlKHksYix2LGwsdSksby5hZGQoYykpLEwodCwnPGltZyBzcmM9XCInK2MuYmxvYlVyaSgpKydcIj4nLCExKSk6TCh0LCc8aW1nIHNyYz1cIicrbi51cmkrJ1wiPicsITEpfSl9KSwhMH1yZXR1cm4hMX1mdW5jdGlvbiBWKGUpe3JldHVybiB2ZS5tZXRhS2V5UHJlc3NlZChlKSYmODY9PT1lLmtleUNvZGV8fGUuc2hpZnRLZXkmJjQ1PT09ZS5rZXlDb2RlfWZ1bmN0aW9uIEsobyxlLHQpe3ZhciBpLHMsdixsLHUsYyxmO2Z1bmN0aW9uIGQoZSx0LG4scixhKXt2YXIgbzskKHQsXCJ0ZXh0L2h0bWxcIik/bz10W1widGV4dC9odG1sXCJdOihvPXYuZ2V0SHRtbCgpLGE9YXx8YihvKSx2LmlzRGVmYXVsdENvbnRlbnQobykmJihyPSEwKSksbz1rKG8pLHYucmVtb3ZlKCk7dmFyIGkscyxsLHUsYyxmLGQscCxtPSExPT09YSYmIS88KD86XFwvPyg/ISg/OmRpdnxwfGJyfHNwYW4pPilcXHcrfCg/Oig/ISg/OnNwYW4gc3R5bGU9XCJ3aGl0ZS1zcGFjZTpcXHM/cHJlOz9cIj4pfGJyXFxzP1xcLz4pKVxcdytcXHNbXj5dKyk+L2kudGVzdChvKSxnPUkobyk7KChyPSFvLmxlbmd0aHx8bSYmIWd8fHIpfHxnKSYmKG89JCh0LFwidGV4dC9wbGFpblwiKSYmbT90W1widGV4dC9wbGFpblwiXTooaT1vLHM9RGUoKSxsPV9lKHt9LHMpLHU9XCJcIixjPXMuZ2V0U2hvcnRFbmRlZEVsZW1lbnRzKCksZj1oZS5tYWtlTWFwKFwic2NyaXB0IG5vc2NyaXB0IHN0eWxlIHRleHRhcmVhIHZpZGVvIGF1ZGlvIGlmcmFtZSBvYmplY3RcIixcIiBcIiksZD1zLmdldEJsb2NrRWxlbWVudHMoKSxwPWZ1bmN0aW9uKGUpe3ZhciB0PWUubmFtZSxuPWU7aWYoXCJiclwiIT09dCl7aWYoXCJ3YnJcIiE9PXQpaWYoY1t0XSYmKHUrPVwiIFwiKSxmW3RdKXUrPVwiIFwiO2Vsc2V7aWYoMz09PWUudHlwZSYmKHUrPWUudmFsdWUpLCFlLnNob3J0RW5kZWQmJihlPWUuZmlyc3RDaGlsZCkpZm9yKDtwKGUpLGU9ZS5uZXh0Oyk7ZFt0XSYmbi5uZXh0JiYodSs9XCJcXG5cIixcInBcIj09PXQmJih1Kz1cIlxcblwiKSl9fWVsc2UgdSs9XCJcXG5cIn0saT1EKGksWy88IVxcW1teXFxdXStcXF0+L2ddKSxwKGwucGFyc2UoaSkpLHUpKSx2LmlzRGVmYXVsdENvbnRlbnQobyk/bnx8ZS53aW5kb3dNYW5hZ2VyLmFsZXJ0KFwiUGxlYXNlIHVzZSBDdHJsK1YvQ21kK1Yga2V5Ym9hcmQgc2hvcnRjdXRzIHRvIHBhc3RlIGNvbnRlbnRzLlwiKTpyP04oZSxvKTpMKGUsbyxhKX1zPW8sdj1lLGw9dCxjPXAoKSxmPXAoKSxzLm9uKFwia2V5dXBcIixmLmNsZWFyKSxzLm9uKFwia2V5ZG93blwiLGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSl7VihlKSYmIWUuaXNEZWZhdWx0UHJldmVudGVkKCkmJnYucmVtb3ZlKCl9aWYoVihlKSYmIWUuaXNEZWZhdWx0UHJldmVudGVkKCkmJighKHU9ZS5zaGlmdEtleSYmODY9PT1lLmtleUNvZGUpfHwhcGUud2Via2l0fHwtMT09PW5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIlZlcnNpb24vXCIpKSl7aWYoZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSxjLnNldChlKSxmLnNldCghMCkscGUuaWUmJnUpcmV0dXJuIGUucHJldmVudERlZmF1bHQoKSx2b2lkIHMuZmlyZShcInBhc3RlXCIse2llRmFrZTohMH0pO3YucmVtb3ZlKCksdi5jcmVhdGUoKSxzLm9uY2UoXCJrZXl1cFwiLHQpLHMub25jZShcInBhc3RlXCIsZnVuY3Rpb24oKXtzLm9mZihcImtleXVwXCIsdCl9KX19KSxzLm9uKFwicGFzdGVcIixmdW5jdGlvbihlKXt2YXIgdD1jLmlzU2V0KCl8fGYuaXNTZXQoKTt0JiZjLmNsZWFyKCk7dmFyIG4scj1IKGUuY2xpcGJvYXJkRGF0YXx8cy5nZXREb2MoKS5kYXRhVHJhbnNmZXIpLGE9XCJ0ZXh0XCI9PT1sLmdldCgpfHx1LG89JChyLHhlKCkpO3U9ITEsZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8KG49ZS5jbGlwYm9hcmREYXRhLC0xIT09bmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiQW5kcm9pZFwiKSYmbiYmbi5pdGVtcyYmMD09PW4uaXRlbXMubGVuZ3RoKXx8IXoocikmJlUocyxlLHYuZ2V0TGFzdFJuZygpfHxzLnNlbGVjdGlvbi5nZXRSbmcoKSk/di5yZW1vdmUoKToodHx8ZS5wcmV2ZW50RGVmYXVsdCgpLCFwZS5pZXx8dCYmIWUuaWVGYWtlfHwkKHIsXCJ0ZXh0L2h0bWxcIil8fCh2LmNyZWF0ZSgpLHMuZG9tLmJpbmQodi5nZXRFbCgpLFwicGFzdGVcIixmdW5jdGlvbihlKXtlLnN0b3BQcm9wYWdhdGlvbigpfSkscy5nZXREb2MoKS5leGVjQ29tbWFuZChcIlBhc3RlXCIsITEsbnVsbCkscltcInRleHQvaHRtbFwiXT12LmdldEh0bWwoKSksJChyLFwidGV4dC9odG1sXCIpPyhlLnByZXZlbnREZWZhdWx0KCksbz1vfHxiKHJbXCJ0ZXh0L2h0bWxcIl0pLGQocyxyLHQsYSxvKSk6bWUuc2V0RWRpdG9yVGltZW91dChzLGZ1bmN0aW9uKCl7ZChzLHIsdCxhLG8pfSwwKSl9KSxvLnBhcnNlci5hZGROb2RlRmlsdGVyKFwiaW1nXCIsZnVuY3Rpb24oZSx0LG4pe3ZhciByO2lmKCF5KG8pJiZuLmRhdGEmJiEwPT09bi5kYXRhLnBhc3RlKWZvcih2YXIgYT1lLmxlbmd0aDthLS07KShpPWVbYV0uYXR0cihcInNyY1wiKSkmJigwIT09aS5pbmRleE9mKFwid2Via2l0LWZha2UtdXJsXCIpJiYoby5nZXRQYXJhbShcImFsbG93X2h0bWxfZGF0YV91cmxzXCIsITEsXCJib29sZWFuXCIpfHwwIT09aS5pbmRleE9mKFwiZGF0YTpcIikpfHwoKHI9ZVthXSkuYXR0cihcImRhdGEtbWNlLW9iamVjdFwiKXx8aT09PXBlLnRyYW5zcGFyZW50U3JjfHxyLnJlbW92ZSgpKSl9KX1mdW5jdGlvbiBYKGUpe3JldHVybiBwZS5pZSYmZS5pbmxpbmU/ZG9jdW1lbnQuYm9keTplLmdldEJvZHkoKX1mdW5jdGlvbiBXKGUpe3ZhciB0PXcobnVsbCksbj1cIiVNQ0VQQVNURUJJTiVcIjtyZXR1cm57Y3JlYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1lLmRvbSxhPWUuZ2V0Qm9keSgpO3Quc2V0KGUuc2VsZWN0aW9uLmdldFJuZygpKTt2YXIgbyxpLHMsbCx1PWUuZG9tLmFkZChYKGUpLFwiZGl2XCIse2lkOlwibWNlcGFzdGViaW5cIixjbGFzczpcIm1jZS1wYXN0ZWJpblwiLGNvbnRlbnRFZGl0YWJsZTohMCxcImRhdGEtbWNlLWJvZ3VzXCI6XCJhbGxcIixzdHlsZTpcInBvc2l0aW9uOiBmaXhlZDsgdG9wOiA1MCU7IHdpZHRoOiAxMHB4OyBoZWlnaHQ6IDEwcHg7IG92ZXJmbG93OiBoaWRkZW47IG9wYWNpdHk6IDBcIn0sbik7KHBlLmllfHxwZS5nZWNrbykmJnIuc2V0U3R5bGUodSxcImxlZnRcIixcInJ0bFwiPT09ci5nZXRTdHlsZShhLFwiZGlyZWN0aW9uXCIsITApPzY1NTM1Oi02NTUzNSksci5iaW5kKHUsXCJiZWZvcmVkZWFjdGl2YXRlIGZvY3VzaW4gZm9jdXNvdXRcIixmdW5jdGlvbihlKXtlLnN0b3BQcm9wYWdhdGlvbigpfSksaT11LHM9bixYKGw9bz1lKSE9PWwuZ2V0Qm9keSgpJiZvLmRvbS5iaW5kKGksXCJwYXN0ZSBrZXl1cFwiLGZ1bmN0aW9uKGUpe09lKG8scyl8fG8uZmlyZShcInBhc3RlXCIpfSksdS5mb2N1cygpLGUuc2VsZWN0aW9uLnNlbGVjdCh1LCEwKX0oZSx0LG4pfSxyZW1vdmU6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihvZShlKSl7Zm9yKHZhciBuLHI9dC5nZXQoKTtuPWUuZG9tLmdldChcIm1jZXBhc3RlYmluXCIpOyllLmRvbS5yZW1vdmUobiksZS5kb20udW5iaW5kKG4pO3ImJmUuc2VsZWN0aW9uLnNldFJuZyhyKX10LnNldChudWxsKX0oZSx0KX0sZ2V0RWw6ZnVuY3Rpb24oKXtyZXR1cm4gb2UoZSl9LGdldEh0bWw6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24obil7ZnVuY3Rpb24gdChlLHQpe2UuYXBwZW5kQ2hpbGQodCksbi5kb20ucmVtb3ZlKHQsITApfXZhciBlPWhlLmdyZXAoWChuKS5jaGlsZE5vZGVzLGZ1bmN0aW9uKGUpe3JldHVyblwibWNlcGFzdGViaW5cIj09PWUuaWR9KSxyPWUuc2hpZnQoKTtoZS5lYWNoKGUsZnVuY3Rpb24oZSl7dChyLGUpfSk7Zm9yKHZhciBhPW4uZG9tLnNlbGVjdChcImRpdltpZD1tY2VwYXN0ZWJpbl1cIixyKSxvPWEubGVuZ3RoLTE7MDw9bztvLS0pe3ZhciBpPW4uZG9tLmNyZWF0ZShcImRpdlwiKTtyLmluc2VydEJlZm9yZShpLGFbb10pLHQoaSxhW29dKX1yZXR1cm4gcj9yLmlubmVySFRNTDpcIlwifShlKX0sZ2V0TGFzdFJuZzp0LmdldCxpc0RlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gT2UoZSxuKX0saXNEZWZhdWx0Q29udGVudDpmdW5jdGlvbihlKXtyZXR1cm4gZT09PW59fX1mdW5jdGlvbiBZKGUsdCxuLHIpeyFmdW5jdGlvbihlLHQsbil7aWYoITE9PT1wZS5pT1MmJlwiZnVuY3Rpb25cIj09dHlwZW9mKG51bGw9PWU/dm9pZCAwOmUuc2V0RGF0YSkpdHJ5e3JldHVybiBlLmNsZWFyRGF0YSgpLGUuc2V0RGF0YShcInRleHQvaHRtbFwiLHQpLGUuc2V0RGF0YShcInRleHQvcGxhaW5cIixuKSxlLnNldERhdGEoeGUoKSx0KSwxfWNhdGNoKGUpe3JldHVybn19KGUuY2xpcGJvYXJkRGF0YSx0Lmh0bWwsdC50ZXh0KT9uKHQuaHRtbCxyKTooZS5wcmV2ZW50RGVmYXVsdCgpLHIoKSl9ZnVuY3Rpb24gWihzKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXt2YXIgbj1iZStlLHI9cy5kb20uY3JlYXRlKFwiZGl2XCIse2NvbnRlbnRlZGl0YWJsZTpcImZhbHNlXCIsXCJkYXRhLW1jZS1ib2d1c1wiOlwiYWxsXCJ9KSxhPXMuZG9tLmNyZWF0ZShcImRpdlwiLHtjb250ZW50ZWRpdGFibGU6XCJ0cnVlXCJ9LG4pO3MuZG9tLnNldFN0eWxlcyhyLHtwb3NpdGlvbjpcImZpeGVkXCIsdG9wOlwiMFwiLGxlZnQ6XCItMzAwMHB4XCIsd2lkdGg6XCIxMDAwcHhcIixvdmVyZmxvdzpcImhpZGRlblwifSksci5hcHBlbmRDaGlsZChhKSxzLmRvbS5hZGQocy5nZXRCb2R5KCkscik7dmFyIG89cy5zZWxlY3Rpb24uZ2V0Um5nKCk7YS5mb2N1cygpO3ZhciBpPXMuZG9tLmNyZWF0ZVJuZygpO2kuc2VsZWN0Tm9kZUNvbnRlbnRzKGEpLHMuc2VsZWN0aW9uLnNldFJuZyhpKSxtZS5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cy5zZWxlY3Rpb24uc2V0Um5nKG8pLHIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKSx0KCl9LDApfX1mdW5jdGlvbiBxKGUpe3JldHVybntodG1sOmUuc2VsZWN0aW9uLmdldENvbnRlbnQoe2NvbnRleHR1YWw6ITB9KSx0ZXh0OmUuc2VsZWN0aW9uLmdldENvbnRlbnQoe2Zvcm1hdDpcInRleHRcIn0pfX1mdW5jdGlvbiBHKGUpe3JldHVybiFlLnNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpfHwodD1lKS5kb20uZ2V0UGFyZW50KHQuc2VsZWN0aW9uLmdldFN0YXJ0KCksXCJ0ZFtkYXRhLW1jZS1zZWxlY3RlZF0sdGhbZGF0YS1tY2Utc2VsZWN0ZWRdXCIsdC5nZXRCb2R5KCkpO3ZhciB0fWZ1bmN0aW9uIEooZSx0KXtyZXR1cm4gU2UuZ2V0Q2FyZXRSYW5nZUZyb21Qb2ludCh0LmNsaWVudFgsdC5jbGllbnRZLGUuZ2V0RG9jKCkpfWZ1bmN0aW9uIFEoZSx0KXtlLmZvY3VzKCksZS5zZWxlY3Rpb24uc2V0Um5nKHQpfWZ1bmN0aW9uIGVlKHQsbil7dC5vbihcIlBhc3RlUHJlUHJvY2Vzc1wiLGZ1bmN0aW9uKGUpe2UuY29udGVudD1uKHQsZS5jb250ZW50LGUuaW50ZXJuYWwsZS53b3JkQ29udGVudCl9KX1mdW5jdGlvbiB0ZShlLHQpe2lmKCFPKHQpKXJldHVybiB0O3ZhciBuPVtdO3JldHVybiBoZS5lYWNoKGUuc2NoZW1hLmdldEJsb2NrRWxlbWVudHMoKSxmdW5jdGlvbihlLHQpe24ucHVzaCh0KX0pLHQ9RCh0LFtbbmV3IFJlZ0V4cChcIig/Ojxicj4mbmJzcDtbXFxcXHNcXFxcclxcXFxuXSt8PGJyPikqKDxcXFxcLz8oXCIrbi5qb2luKFwifFwiKStcIilbXj5dKj4pKD86PGJyPiZuYnNwO1tcXFxcc1xcXFxyXFxcXG5dK3w8YnI+KSpcIixcImdcIiksXCIkMVwiXV0pLEQodCxbWy88YnI+PGJyPi9nLFwiPEJSPjxCUj5cIl0sWy88YnI+L2csXCIgXCJdLFsvPEJSPjxCUj4vZyxcIjxicj5cIl1dKX1mdW5jdGlvbiBuZShlLHQsbixyKXtpZihyfHxuKXJldHVybiB0O3ZhciBjLGYsZCxhPWUuZ2V0UGFyYW0oXCJwYXN0ZV93ZWJraXRfc3R5bGVzXCIpO3JldHVybiExPT09ZS5nZXRQYXJhbShcInBhc3RlX3JlbW92ZV9zdHlsZXNfaWZfd2Via2l0XCIsITApfHxcImFsbFwiPT09YT90Oih0PShjPWE/YS5zcGxpdCgvWywgXS8pOmMpPyhmPWUuZG9tLGQ9ZS5zZWxlY3Rpb24uZ2V0Tm9kZSgpLHQucmVwbGFjZSgvKDxbXj5dKykgc3R5bGU9XCIoW15cIl0qKVwiKFtePl0qPikvZ2ksZnVuY3Rpb24oZSx0LG4scil7dmFyIGE9Zi5wYXJzZVN0eWxlKGYuZGVjb2RlKG4pKSxvPXt9O2lmKFwibm9uZVwiPT09YylyZXR1cm4gdCtyO2Zvcih2YXIgaT0wO2k8Yy5sZW5ndGg7aSsrKXt2YXIgcz1hW2NbaV1dLGw9Zi5nZXRTdHlsZShkLGNbaV0sITApOy9jb2xvci8udGVzdChjW2ldKSYmKHM9Zi50b0hleChzKSxsPWYudG9IZXgobCkpLGwhPT1zJiYob1tjW2ldXT1zKX12YXIgdT1mLnNlcmlhbGl6ZVN0eWxlKG8sXCJzcGFuXCIpO3JldHVybiB1P3QrJyBzdHlsZT1cIicrdSsnXCInK3I6dCtyfSkpOnQucmVwbGFjZSgvKDxbXj5dKykgc3R5bGU9XCIoW15cIl0qKVwiKFtePl0qPikvZ2ksXCIkMSQzXCIpKS5yZXBsYWNlKC8oPFtePl0rKSBkYXRhLW1jZS1zdHlsZT1cIihbXlwiXSspXCIoW14+XSo+KS9naSxmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdCsnIHN0eWxlPVwiJytuKydcIicrcn0pfWZ1bmN0aW9uIHJlKG4sZSl7bi4kKFwiYVwiLGUpLmZpbmQoXCJmb250LHVcIikuZWFjaChmdW5jdGlvbihlLHQpe24uZG9tLnJlbW92ZSh0LCEwKX0pfWZ1bmN0aW9uIGFlKG4scil7cmV0dXJuIGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSl7cmV0dXJuIHQuc2V0QWN0aXZlKGUuc3RhdGUpfXJldHVybiB0LnNldEFjdGl2ZShcInRleHRcIj09PXIucGFzdGVGb3JtYXQuZ2V0KCkpLG4ub24oXCJQYXN0ZVBsYWluVGV4dFRvZ2dsZVwiLGUpLGZ1bmN0aW9uKCl7cmV0dXJuIG4ub2ZmKFwiUGFzdGVQbGFpblRleHRUb2dnbGVcIixlKX19fWZ1bmN0aW9uIG9lKGUpe3JldHVybiBlLmRvbS5nZXQoXCJtY2VwYXN0ZWJpblwiKX12YXIgaWUsc2U9ZnVuY3Rpb24obil7ZnVuY3Rpb24gZSgpe3JldHVybiBhfWZ1bmN0aW9uIHQoZSl7cmV0dXJuIGUobil9dmFyIHI9byhuKSxhPXtmb2xkOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQobil9LGlzU29tZTpzLGlzTm9uZTppLGdldE9yOnIsZ2V0T3JUaHVuazpyLGdldE9yRGllOnIsZ2V0T3JOdWxsOnIsZ2V0T3JVbmRlZmluZWQ6cixvcjplLG9yVGh1bms6ZSxtYXA6ZnVuY3Rpb24oZSl7cmV0dXJuIHNlKGUobikpfSxlYWNoOmZ1bmN0aW9uKGUpe2Uobil9LGJpbmQ6dCxleGlzdHM6dCxmb3JhbGw6dCxmaWx0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGUobik/YTpsfSx0b0FycmF5OmZ1bmN0aW9uKCl7cmV0dXJuW25dfSx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVyblwic29tZShcIituK1wiKVwifX07cmV0dXJuIGF9LGxlPXtzb21lOnNlLG5vbmU6dCxmcm9tOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP2w6c2UoZSl9fSx1ZT1BcnJheS5wcm90b3R5cGUuc2xpY2UsY2U9QXJyYXkucHJvdG90eXBlLnB1c2gsZmU9dHlwZW9mIEFycmF5LmZyb209PT1uP0FycmF5LmZyb206ZnVuY3Rpb24oZSl7cmV0dXJuIHVlLmNhbGwoZSl9LGRlPWZ1bmN0aW9uKCl7cmV0dXJuKGRlPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPTEscj1hcmd1bWVudHMubGVuZ3RoO248cjtuKyspZm9yKHZhciBhIGluIHQ9YXJndW1lbnRzW25dKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGEpJiYoZVthXT10W2FdKTtyZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0scGU9dGlueW1jZS51dGlsLlRvb2xzLnJlc29sdmUoXCJ0aW55bWNlLkVudlwiKSxtZT10aW55bWNlLnV0aWwuVG9vbHMucmVzb2x2ZShcInRpbnltY2UudXRpbC5EZWxheVwiKSxnZT10aW55bWNlLnV0aWwuVG9vbHMucmVzb2x2ZShcInRpbnltY2UudXRpbC5Qcm9taXNlXCIpLHZlPXRpbnltY2UudXRpbC5Ub29scy5yZXNvbHZlKFwidGlueW1jZS51dGlsLlZLXCIpLGhlPXRpbnltY2UudXRpbC5Ub29scy5yZXNvbHZlKFwidGlueW1jZS51dGlsLlRvb2xzXCIpLHllPVwieC10aW55bWNlL2h0bWxcIixiZT1cIlxceDNjIS0tIFwiK3llK1wiIC0tXFx4M2VcIix4ZT1vKHllKSx3ZT1PYmplY3QuaGFzT3duUHJvcGVydHksUGU9dGlueW1jZS51dGlsLlRvb2xzLnJlc29sdmUoXCJ0aW55bWNlLmh0bWwuRW50aXRpZXNcIiksX2U9dGlueW1jZS51dGlsLlRvb2xzLnJlc29sdmUoXCJ0aW55bWNlLmh0bWwuRG9tUGFyc2VyXCIpLENlPXRpbnltY2UudXRpbC5Ub29scy5yZXNvbHZlKFwidGlueW1jZS5odG1sLlNlcmlhbGl6ZXJcIiksVGU9dGlueW1jZS51dGlsLlRvb2xzLnJlc29sdmUoXCJ0aW55bWNlLmh0bWwuTm9kZVwiKSxEZT10aW55bWNlLnV0aWwuVG9vbHMucmVzb2x2ZShcInRpbnltY2UuaHRtbC5TY2hlbWFcIiksa2U9KGllPTAsZnVuY3Rpb24oKXtyZXR1cm5cIm1jZWNsaXBcIitpZSsrfSksT2U9ZnVuY3Rpb24oZSx0KXt2YXIgbj1vZShlKTtyZXR1cm4gbiYmXCJtY2VwYXN0ZWJpblwiPT09bi5pZCYmbi5pbm5lckhUTUw9PT10fSxTZT10aW55bWNlLnV0aWwuVG9vbHMucmVzb2x2ZShcInRpbnltY2UuZG9tLlJhbmdlVXRpbHNcIik7ci5hZGQoXCJwYXN0ZVwiLGZ1bmN0aW9uKGUpe2lmKDA9PSghIWUuaGFzUGx1Z2luKFwicG93ZXJwYXN0ZVwiLCEwKSYmKHZvaWQgMCE9PXdpbmRvdy5jb25zb2xlJiZ3aW5kb3cuY29uc29sZS5sb2cmJndpbmRvdy5jb25zb2xlLmxvZyhcIlBvd2VyUGFzdGUgaXMgaW5jb21wYXRpYmxlIHdpdGggUGFzdGUgcGx1Z2luISBSZW1vdmUgJ3Bhc3RlJyBmcm9tIHRoZSAncGx1Z2lucycgb3B0aW9uLlwiKSwhMCkpKXt2YXIgdD13KCExKSxuPXcoZS5nZXRQYXJhbShcInBhc3RlX2FzX3RleHRcIiwhMSk/XCJ0ZXh0XCI6XCJodG1sXCIpLHI9KHk9bixiPVcoaD1lKSxoLm9uKFwiUHJlSW5pdFwiLGZ1bmN0aW9uKCl7cmV0dXJuIEsoaCxiLHkpfSkse3Bhc3RlRm9ybWF0OnkscGFzdGVIdG1sOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIEwoaCxlLHQpfSxwYXN0ZVRleHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIE4oaCxlKX0scGFzdGVJbWFnZURhdGE6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gVShoLGUsdCl9LGdldERhdGFUcmFuc2Zlckl0ZW1zOkgsaGFzSHRtbE9yVGV4dDp6LGhhc0NvbnRlbnRUeXBlOiR9KSxhPWU7cmV0dXJuIHBlLndlYmtpdCYmZWUoYSxuZSkscGUuaWUmJihlZShhLHRlKSx2PXJlLChnPWEpLm9uKFwiUGFzdGVQb3N0UHJvY2Vzc1wiLGZ1bmN0aW9uKGUpe3YoZyxlLm5vZGUpfSkpLChwPWUpLnVpLnJlZ2lzdHJ5LmFkZFRvZ2dsZUJ1dHRvbihcInBhc3RldGV4dFwiLHthY3RpdmU6ITEsaWNvbjpcInBhc3RlLXRleHRcIix0b29sdGlwOlwiUGFzdGUgYXMgdGV4dFwiLG9uQWN0aW9uOngsb25TZXR1cDphZShwLG09cil9KSxwLnVpLnJlZ2lzdHJ5LmFkZFRvZ2dsZU1lbnVJdGVtKFwicGFzdGV0ZXh0XCIse3RleHQ6XCJQYXN0ZSBhcyB0ZXh0XCIsaWNvbjpcInBhc3RlLXRleHRcIixvbkFjdGlvbjp4LG9uU2V0dXA6YWUocCxtKX0pLGQ9ciwoZj1lKS5hZGRDb21tYW5kKFwibWNlVG9nZ2xlUGxhaW5UZXh0UGFzdGVcIixmdW5jdGlvbigpe3ZhciBlLHQ9ZjtcInRleHRcIj09PShlPWQpLnBhc3RlRm9ybWF0LmdldCgpPyhlLnBhc3RlRm9ybWF0LnNldChcImh0bWxcIiksQyh0LCExKSk6KGUucGFzdGVGb3JtYXQuc2V0KFwidGV4dFwiKSxDKHQsITApKSx0LmZvY3VzKCl9KSxmLmFkZENvbW1hbmQoXCJtY2VJbnNlcnRDbGlwYm9hcmRDb250ZW50XCIsZnVuY3Rpb24oZSx0KXt0LmNvbnRlbnQmJmQucGFzdGVIdG1sKHQuY29udGVudCx0LmludGVybmFsKSx0LnRleHQmJmQucGFzdGVUZXh0KHQudGV4dCl9KSxmdW5jdGlvbihlKXt2YXIgdD1lLnBsdWdpbnMucGFzdGUsbj1lLmdldFBhcmFtKFwicGFzdGVfcHJlcHJvY2Vzc1wiKTtuJiZlLm9uKFwiUGFzdGVQcmVQcm9jZXNzXCIsZnVuY3Rpb24oZSl7bi5jYWxsKHQsdCxlKX0pO3ZhciByPWUuZ2V0UGFyYW0oXCJwYXN0ZV9wb3N0cHJvY2Vzc1wiKTtyJiZlLm9uKFwiUGFzdGVQb3N0UHJvY2Vzc1wiLGZ1bmN0aW9uKGUpe3IuY2FsbCh0LHQsZSl9KX0oZSksKG89ZSkub24oXCJjdXRcIiwodT1vLGZ1bmN0aW9uKGUpe0codSkmJlkoZSxxKHUpLFoodSksZnVuY3Rpb24oKXt2YXIgZTtwZS5icm93c2VyLmlzQ2hyb21lKCl8fHBlLmJyb3dzZXIuaXNGaXJlZm94KCk/KGU9dS5zZWxlY3Rpb24uZ2V0Um5nKCksbWUuc2V0RWRpdG9yVGltZW91dCh1LGZ1bmN0aW9uKCl7dS5zZWxlY3Rpb24uc2V0Um5nKGUpLHUuZXhlY0NvbW1hbmQoXCJEZWxldGVcIil9LDApKTp1LmV4ZWNDb21tYW5kKFwiRGVsZXRlXCIpfSl9KSksby5vbihcImNvcHlcIiwoYz1vLGZ1bmN0aW9uKGUpe0coYykmJlkoZSxxKGMpLFooYyksXyl9KSkscz1yLGw9dCwoaT1lKS5nZXRQYXJhbShcInBhc3RlX2Jsb2NrX2Ryb3BcIiwhMSkmJmkub24oXCJkcmFnZW5kIGRyYWdvdmVyIGRyYWdnZXN0dXJlIGRyYWdkcm9wIGRyb3AgZHJhZ1wiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpfSksVChpKXx8aS5vbihcImRyb3BcIixmdW5jdGlvbihlKXt2YXIgdD1lLmRhdGFUcmFuc2Zlcjt0JiZ0LmZpbGVzJiYwPHQuZmlsZXMubGVuZ3RoJiZlLnByZXZlbnREZWZhdWx0KCl9KSxpLm9uKFwiZHJvcFwiLGZ1bmN0aW9uKGUpe3ZhciB0LG4scixhLG89SihpLGUpO2UuaXNEZWZhdWx0UHJldmVudGVkKCl8fGwuZ2V0KCl8fCh0PXMuZ2V0RGF0YVRyYW5zZmVySXRlbXMoZS5kYXRhVHJhbnNmZXIpLG49cy5oYXNDb250ZW50VHlwZSh0LHhlKCkpLCghcy5oYXNIdG1sT3JUZXh0KHQpfHwocj10W1widGV4dC9wbGFpblwiXSkmJjA9PT1yLmluZGV4T2YoXCJmaWxlOi8vXCIpKSYmcy5wYXN0ZUltYWdlRGF0YShlLG8pfHwhb3x8IWkuZ2V0UGFyYW0oXCJwYXN0ZV9maWx0ZXJfZHJvcFwiLCEwKXx8KGE9dFtcIm1jZS1pbnRlcm5hbFwiXXx8dFtcInRleHQvaHRtbFwiXXx8dFtcInRleHQvcGxhaW5cIl0pJiYoZS5wcmV2ZW50RGVmYXVsdCgpLG1lLnNldEVkaXRvclRpbWVvdXQoaSxmdW5jdGlvbigpe2kudW5kb01hbmFnZXIudHJhbnNhY3QoZnVuY3Rpb24oKXt0W1wibWNlLWludGVybmFsXCJdJiZpLmV4ZWNDb21tYW5kKFwiRGVsZXRlXCIpLFEoaSxvKSxhPWsoYSksdFtcInRleHQvaHRtbFwiXT9zLnBhc3RlSHRtbChhLG4pOnMucGFzdGVUZXh0KGEpfSl9KSkpfSksaS5vbihcImRyYWdzdGFydFwiLGZ1bmN0aW9uKGUpe2wuc2V0KCEwKX0pLGkub24oXCJkcmFnb3ZlciBkcmFnZW5kXCIsZnVuY3Rpb24oZSl7VChpKSYmITE9PT1sLmdldCgpJiYoZS5wcmV2ZW50RGVmYXVsdCgpLFEoaSxKKGksZSkpKSxcImRyYWdlbmRcIj09PWUudHlwZSYmbC5zZXQoITEpfSkse2NsaXBib2FyZDpyfX12YXIgaSxzLGwsbyx1LGMsZixkLHAsbSxhLGcsdixoLHksYjtmdW5jdGlvbiB4KCl7cmV0dXJuIHAuZXhlY0NvbW1hbmQoXCJtY2VUb2dnbGVQbGFpblRleHRQYXN0ZVwiKX19KX0oKTsiXSwiZmlsZSI6Ii4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL3BsdWdpbnMvY3VzdG9tL3RpbnltY2UvcGx1Z2lucy9wYXN0ZS9wbHVnaW4ubWluLmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/paste/plugin.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/paste/plugin.min.js"]();
/******/ 	
/******/ })()
;