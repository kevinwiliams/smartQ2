/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/media/plugin.js":
/*!******************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/media/plugin.js ***!
  \******************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var global$9 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) {\n          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n      }\n\n      return t;\n    };\n\n    return _assign.apply(this, arguments);\n  };\n\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n\n  var isType = function isType(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n\n  var isString = isType('string');\n  var isObject = isType('object');\n  var isArray = isType('array');\n\n  var isNullable = function isNullable(a) {\n    return a === null || a === undefined;\n  };\n\n  var isNonNullable = function isNonNullable(a) {\n    return !isNullable(a);\n  };\n\n  var noop = function noop() {};\n\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  var never = constant(false);\n  var always = constant(true);\n\n  var none = function none() {\n    return NONE;\n  };\n\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n\n  var some = function some(a) {\n    var constant_a = constant(a);\n\n    var self = function self() {\n      return me;\n    };\n\n    var bind = function bind(f) {\n      return f(a);\n    };\n\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n  var nativePush = Array.prototype.push;\n\n  var each$1 = function each$1(xs, f) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n\n  var flatten = function flatten(xs) {\n    var r = [];\n\n    for (var i = 0, len = xs.length; i < len; ++i) {\n      if (!isArray(xs[i])) {\n        throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n      }\n\n      nativePush.apply(r, xs[i]);\n    }\n\n    return r;\n  };\n\n  var Cell = function Cell(initial) {\n    var value = initial;\n\n    var get = function get() {\n      return value;\n    };\n\n    var set = function set(v) {\n      value = v;\n    };\n\n    return {\n      get: get,\n      set: set\n    };\n  };\n\n  var keys = Object.keys;\n  var hasOwnProperty = Object.hasOwnProperty;\n\n  var each = function each(obj, f) {\n    var props = keys(obj);\n\n    for (var k = 0, len = props.length; k < len; k++) {\n      var i = props[k];\n      var x = obj[i];\n      f(x, i);\n    }\n  };\n\n  var get$1 = function get$1(obj, key) {\n    return has(obj, key) ? Optional.from(obj[key]) : Optional.none();\n  };\n\n  var has = function has(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  var getScripts = function getScripts(editor) {\n    return editor.getParam('media_scripts');\n  };\n\n  var getAudioTemplateCallback = function getAudioTemplateCallback(editor) {\n    return editor.getParam('audio_template_callback');\n  };\n\n  var getVideoTemplateCallback = function getVideoTemplateCallback(editor) {\n    return editor.getParam('video_template_callback');\n  };\n\n  var hasLiveEmbeds = function hasLiveEmbeds(editor) {\n    return editor.getParam('media_live_embeds', true);\n  };\n\n  var shouldFilterHtml = function shouldFilterHtml(editor) {\n    return editor.getParam('media_filter_html', true);\n  };\n\n  var getUrlResolver = function getUrlResolver(editor) {\n    return editor.getParam('media_url_resolver');\n  };\n\n  var hasAltSource = function hasAltSource(editor) {\n    return editor.getParam('media_alt_source', true);\n  };\n\n  var hasPoster = function hasPoster(editor) {\n    return editor.getParam('media_poster', true);\n  };\n\n  var hasDimensions = function hasDimensions(editor) {\n    return editor.getParam('media_dimensions', true);\n  };\n\n  var global$8 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n  var global$7 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n  var global$6 = tinymce.util.Tools.resolve('tinymce.html.SaxParser');\n\n  var getVideoScriptMatch = function getVideoScriptMatch(prefixes, src) {\n    if (prefixes) {\n      for (var i = 0; i < prefixes.length; i++) {\n        if (src.indexOf(prefixes[i].filter) !== -1) {\n          return prefixes[i];\n        }\n      }\n    }\n  };\n\n  var DOM$1 = global$7.DOM;\n\n  var trimPx = function trimPx(value) {\n    return value.replace(/px$/, '');\n  };\n\n  var getEphoxEmbedData = function getEphoxEmbedData(attrs) {\n    var style = attrs.map.style;\n    var styles = style ? DOM$1.parseStyle(style) : {};\n    return {\n      type: 'ephox-embed-iri',\n      source: attrs.map['data-ephox-embed-iri'],\n      altsource: '',\n      poster: '',\n      width: get$1(styles, 'max-width').map(trimPx).getOr(''),\n      height: get$1(styles, 'max-height').map(trimPx).getOr('')\n    };\n  };\n\n  var htmlToData = function htmlToData(prefixes, html) {\n    var isEphoxEmbed = Cell(false);\n    var data = {};\n    global$6({\n      validate: false,\n      allow_conditional_comments: true,\n      start: function start(name, attrs) {\n        if (isEphoxEmbed.get()) ;else if (has(attrs.map, 'data-ephox-embed-iri')) {\n          isEphoxEmbed.set(true);\n          data = getEphoxEmbedData(attrs);\n        } else {\n          if (!data.source && name === 'param') {\n            data.source = attrs.map.movie;\n          }\n\n          if (name === 'iframe' || name === 'object' || name === 'embed' || name === 'video' || name === 'audio') {\n            if (!data.type) {\n              data.type = name;\n            }\n\n            data = global$8.extend(attrs.map, data);\n          }\n\n          if (name === 'script') {\n            var videoScript = getVideoScriptMatch(prefixes, attrs.map.src);\n\n            if (!videoScript) {\n              return;\n            }\n\n            data = {\n              type: 'script',\n              source: attrs.map.src,\n              width: String(videoScript.width),\n              height: String(videoScript.height)\n            };\n          }\n\n          if (name === 'source') {\n            if (!data.source) {\n              data.source = attrs.map.src;\n            } else if (!data.altsource) {\n              data.altsource = attrs.map.src;\n            }\n          }\n\n          if (name === 'img' && !data.poster) {\n            data.poster = attrs.map.src;\n          }\n        }\n      }\n    }).parse(html);\n    data.source = data.source || data.src || data.data;\n    data.altsource = data.altsource || '';\n    data.poster = data.poster || '';\n    return data;\n  };\n\n  var guess = function guess(url) {\n    var mimes = {\n      mp3: 'audio/mpeg',\n      m4a: 'audio/x-m4a',\n      wav: 'audio/wav',\n      mp4: 'video/mp4',\n      webm: 'video/webm',\n      ogg: 'video/ogg',\n      swf: 'application/x-shockwave-flash'\n    };\n    var fileEnd = url.toLowerCase().split('.').pop();\n    var mime = mimes[fileEnd];\n    return mime ? mime : '';\n  };\n\n  var global$5 = tinymce.util.Tools.resolve('tinymce.html.Schema');\n  var global$4 = tinymce.util.Tools.resolve('tinymce.html.Writer');\n  var DOM = global$7.DOM;\n\n  var addPx = function addPx(value) {\n    return /^[0-9.]+$/.test(value) ? value + 'px' : value;\n  };\n\n  var setAttributes = function setAttributes(attrs, updatedAttrs) {\n    each(updatedAttrs, function (val, name) {\n      var value = '' + val;\n\n      if (attrs.map[name]) {\n        var i = attrs.length;\n\n        while (i--) {\n          var attr = attrs[i];\n\n          if (attr.name === name) {\n            if (value) {\n              attrs.map[name] = value;\n              attr.value = value;\n            } else {\n              delete attrs.map[name];\n              attrs.splice(i, 1);\n            }\n          }\n        }\n      } else if (value) {\n        attrs.push({\n          name: name,\n          value: value\n        });\n        attrs.map[name] = value;\n      }\n    });\n  };\n\n  var updateEphoxEmbed = function updateEphoxEmbed(data, attrs) {\n    var style = attrs.map.style;\n    var styleMap = style ? DOM.parseStyle(style) : {};\n    styleMap['max-width'] = addPx(data.width);\n    styleMap['max-height'] = addPx(data.height);\n    setAttributes(attrs, {\n      style: DOM.serializeStyle(styleMap)\n    });\n  };\n\n  var sources = ['source', 'altsource'];\n\n  var updateHtml = function updateHtml(html, data, updateAll) {\n    var writer = global$4();\n    var isEphoxEmbed = Cell(false);\n    var sourceCount = 0;\n    var hasImage;\n    global$6({\n      validate: false,\n      allow_conditional_comments: true,\n      comment: function comment(text) {\n        writer.comment(text);\n      },\n      cdata: function cdata(text) {\n        writer.cdata(text);\n      },\n      text: function text(_text, raw) {\n        writer.text(_text, raw);\n      },\n      start: function start(name, attrs, empty) {\n        if (isEphoxEmbed.get()) ;else if (has(attrs.map, 'data-ephox-embed-iri')) {\n          isEphoxEmbed.set(true);\n          updateEphoxEmbed(data, attrs);\n        } else {\n          switch (name) {\n            case 'video':\n            case 'object':\n            case 'embed':\n            case 'img':\n            case 'iframe':\n              if (data.height !== undefined && data.width !== undefined) {\n                setAttributes(attrs, {\n                  width: data.width,\n                  height: data.height\n                });\n              }\n\n              break;\n          }\n\n          if (updateAll) {\n            switch (name) {\n              case 'video':\n                setAttributes(attrs, {\n                  poster: data.poster,\n                  src: ''\n                });\n\n                if (data.altsource) {\n                  setAttributes(attrs, {\n                    src: ''\n                  });\n                }\n\n                break;\n\n              case 'iframe':\n                setAttributes(attrs, {\n                  src: data.source\n                });\n                break;\n\n              case 'source':\n                if (sourceCount < 2) {\n                  setAttributes(attrs, {\n                    src: data[sources[sourceCount]],\n                    type: data[sources[sourceCount] + 'mime']\n                  });\n\n                  if (!data[sources[sourceCount]]) {\n                    return;\n                  }\n                }\n\n                sourceCount++;\n                break;\n\n              case 'img':\n                if (!data.poster) {\n                  return;\n                }\n\n                hasImage = true;\n                break;\n            }\n          }\n        }\n        writer.start(name, attrs, empty);\n      },\n      end: function end(name) {\n        if (!isEphoxEmbed.get()) {\n          if (name === 'video' && updateAll) {\n            for (var index = 0; index < 2; index++) {\n              if (data[sources[index]]) {\n                var attrs = [];\n                attrs.map = {};\n\n                if (sourceCount <= index) {\n                  setAttributes(attrs, {\n                    src: data[sources[index]],\n                    type: data[sources[index] + 'mime']\n                  });\n                  writer.start('source', attrs, true);\n                }\n              }\n            }\n          }\n\n          if (data.poster && name === 'object' && updateAll && !hasImage) {\n            var imgAttrs = [];\n            imgAttrs.map = {};\n            setAttributes(imgAttrs, {\n              src: data.poster,\n              width: data.width,\n              height: data.height\n            });\n            writer.start('img', imgAttrs, true);\n          }\n        }\n\n        writer.end(name);\n      }\n    }, global$5({})).parse(html);\n    return writer.getContent();\n  };\n\n  var urlPatterns = [{\n    regex: /youtu\\.be\\/([\\w\\-_\\?&=.]+)/i,\n    type: 'iframe',\n    w: 560,\n    h: 314,\n    url: 'www.youtube.com/embed/$1',\n    allowFullscreen: true\n  }, {\n    regex: /youtube\\.com(.+)v=([^&]+)(&([a-z0-9&=\\-_]+))?/i,\n    type: 'iframe',\n    w: 560,\n    h: 314,\n    url: 'www.youtube.com/embed/$2?$4',\n    allowFullscreen: true\n  }, {\n    regex: /youtube.com\\/embed\\/([a-z0-9\\?&=\\-_]+)/i,\n    type: 'iframe',\n    w: 560,\n    h: 314,\n    url: 'www.youtube.com/embed/$1',\n    allowFullscreen: true\n  }, {\n    regex: /vimeo\\.com\\/([0-9]+)/,\n    type: 'iframe',\n    w: 425,\n    h: 350,\n    url: 'player.vimeo.com/video/$1?title=0&byline=0&portrait=0&color=8dc7dc',\n    allowFullscreen: true\n  }, {\n    regex: /vimeo\\.com\\/(.*)\\/([0-9]+)/,\n    type: 'iframe',\n    w: 425,\n    h: 350,\n    url: 'player.vimeo.com/video/$2?title=0&amp;byline=0',\n    allowFullscreen: true\n  }, {\n    regex: /maps\\.google\\.([a-z]{2,3})\\/maps\\/(.+)msid=(.+)/,\n    type: 'iframe',\n    w: 425,\n    h: 350,\n    url: 'maps.google.com/maps/ms?msid=$2&output=embed\"',\n    allowFullscreen: false\n  }, {\n    regex: /dailymotion\\.com\\/video\\/([^_]+)/,\n    type: 'iframe',\n    w: 480,\n    h: 270,\n    url: 'www.dailymotion.com/embed/video/$1',\n    allowFullscreen: true\n  }, {\n    regex: /dai\\.ly\\/([^_]+)/,\n    type: 'iframe',\n    w: 480,\n    h: 270,\n    url: 'www.dailymotion.com/embed/video/$1',\n    allowFullscreen: true\n  }];\n\n  var getProtocol = function getProtocol(url) {\n    var protocolMatches = url.match(/^(https?:\\/\\/|www\\.)(.+)$/i);\n\n    if (protocolMatches && protocolMatches.length > 1) {\n      return protocolMatches[1] === 'www.' ? 'https://' : protocolMatches[1];\n    } else {\n      return 'https://';\n    }\n  };\n\n  var getUrl = function getUrl(pattern, url) {\n    var protocol = getProtocol(url);\n    var match = pattern.regex.exec(url);\n    var newUrl = protocol + pattern.url;\n\n    var _loop_1 = function _loop_1(i) {\n      newUrl = newUrl.replace('$' + i, function () {\n        return match[i] ? match[i] : '';\n      });\n    };\n\n    for (var i = 0; i < match.length; i++) {\n      _loop_1(i);\n    }\n\n    return newUrl.replace(/\\?$/, '');\n  };\n\n  var matchPattern = function matchPattern(url) {\n    var patterns = urlPatterns.filter(function (pattern) {\n      return pattern.regex.test(url);\n    });\n\n    if (patterns.length > 0) {\n      return global$8.extend({}, patterns[0], {\n        url: getUrl(patterns[0], url)\n      });\n    } else {\n      return null;\n    }\n  };\n\n  var getIframeHtml = function getIframeHtml(data) {\n    var allowFullscreen = data.allowfullscreen ? ' allowFullscreen=\"1\"' : '';\n    return '<iframe src=\"' + data.source + '\" width=\"' + data.width + '\" height=\"' + data.height + '\"' + allowFullscreen + '></iframe>';\n  };\n\n  var getFlashHtml = function getFlashHtml(data) {\n    var html = '<object data=\"' + data.source + '\" width=\"' + data.width + '\" height=\"' + data.height + '\" type=\"application/x-shockwave-flash\">';\n\n    if (data.poster) {\n      html += '<img src=\"' + data.poster + '\" width=\"' + data.width + '\" height=\"' + data.height + '\" />';\n    }\n\n    html += '</object>';\n    return html;\n  };\n\n  var getAudioHtml = function getAudioHtml(data, audioTemplateCallback) {\n    if (audioTemplateCallback) {\n      return audioTemplateCallback(data);\n    } else {\n      return '<audio controls=\"controls\" src=\"' + data.source + '\">' + (data.altsource ? '\\n<source src=\"' + data.altsource + '\"' + (data.altsourcemime ? ' type=\"' + data.altsourcemime + '\"' : '') + ' />\\n' : '') + '</audio>';\n    }\n  };\n\n  var getVideoHtml = function getVideoHtml(data, videoTemplateCallback) {\n    if (videoTemplateCallback) {\n      return videoTemplateCallback(data);\n    } else {\n      return '<video width=\"' + data.width + '\" height=\"' + data.height + '\"' + (data.poster ? ' poster=\"' + data.poster + '\"' : '') + ' controls=\"controls\">\\n' + '<source src=\"' + data.source + '\"' + (data.sourcemime ? ' type=\"' + data.sourcemime + '\"' : '') + ' />\\n' + (data.altsource ? '<source src=\"' + data.altsource + '\"' + (data.altsourcemime ? ' type=\"' + data.altsourcemime + '\"' : '') + ' />\\n' : '') + '</video>';\n    }\n  };\n\n  var getScriptHtml = function getScriptHtml(data) {\n    return '<script src=\"' + data.source + '\"></script>';\n  };\n\n  var dataToHtml = function dataToHtml(editor, dataIn) {\n    var data = global$8.extend({}, dataIn);\n\n    if (!data.source) {\n      global$8.extend(data, htmlToData(getScripts(editor), data.embed));\n\n      if (!data.source) {\n        return '';\n      }\n    }\n\n    if (!data.altsource) {\n      data.altsource = '';\n    }\n\n    if (!data.poster) {\n      data.poster = '';\n    }\n\n    data.source = editor.convertURL(data.source, 'source');\n    data.altsource = editor.convertURL(data.altsource, 'source');\n    data.sourcemime = guess(data.source);\n    data.altsourcemime = guess(data.altsource);\n    data.poster = editor.convertURL(data.poster, 'poster');\n    var pattern = matchPattern(data.source);\n\n    if (pattern) {\n      data.source = pattern.url;\n      data.type = pattern.type;\n      data.allowfullscreen = pattern.allowFullscreen;\n      data.width = data.width || String(pattern.w);\n      data.height = data.height || String(pattern.h);\n    }\n\n    if (data.embed) {\n      return updateHtml(data.embed, data, true);\n    } else {\n      var videoScript = getVideoScriptMatch(getScripts(editor), data.source);\n\n      if (videoScript) {\n        data.type = 'script';\n        data.width = String(videoScript.width);\n        data.height = String(videoScript.height);\n      }\n\n      var audioTemplateCallback = getAudioTemplateCallback(editor);\n      var videoTemplateCallback = getVideoTemplateCallback(editor);\n      data.width = data.width || '300';\n      data.height = data.height || '150';\n      global$8.each(data, function (value, key) {\n        data[key] = editor.dom.encode('' + value);\n      });\n\n      if (data.type === 'iframe') {\n        return getIframeHtml(data);\n      } else if (data.sourcemime === 'application/x-shockwave-flash') {\n        return getFlashHtml(data);\n      } else if (data.sourcemime.indexOf('audio') !== -1) {\n        return getAudioHtml(data, audioTemplateCallback);\n      } else if (data.type === 'script') {\n        return getScriptHtml(data);\n      } else {\n        return getVideoHtml(data, videoTemplateCallback);\n      }\n    }\n  };\n\n  var isMediaElement = function isMediaElement(element) {\n    return element.hasAttribute('data-mce-object') || element.hasAttribute('data-ephox-embed-iri');\n  };\n\n  var setup$2 = function setup$2(editor) {\n    editor.on('click keyup touchend', function () {\n      var selectedNode = editor.selection.getNode();\n\n      if (selectedNode && editor.dom.hasClass(selectedNode, 'mce-preview-object')) {\n        if (editor.dom.getAttrib(selectedNode, 'data-mce-selected')) {\n          selectedNode.setAttribute('data-mce-selected', '2');\n        }\n      }\n    });\n    editor.on('ObjectSelected', function (e) {\n      var objectType = e.target.getAttribute('data-mce-object');\n\n      if (objectType === 'script') {\n        e.preventDefault();\n      }\n    });\n    editor.on('ObjectResized', function (e) {\n      var target = e.target;\n\n      if (target.getAttribute('data-mce-object')) {\n        var html = target.getAttribute('data-mce-html');\n\n        if (html) {\n          html = unescape(html);\n          target.setAttribute('data-mce-html', escape(updateHtml(html, {\n            width: String(e.width),\n            height: String(e.height)\n          })));\n        }\n      }\n    });\n  };\n\n  var global$3 = tinymce.util.Tools.resolve('tinymce.util.Promise');\n  var cache = {};\n\n  var embedPromise = function embedPromise(data, dataToHtml, handler) {\n    return new global$3(function (res, rej) {\n      var wrappedResolve = function wrappedResolve(response) {\n        if (response.html) {\n          cache[data.source] = response;\n        }\n\n        return res({\n          url: data.source,\n          html: response.html ? response.html : dataToHtml(data)\n        });\n      };\n\n      if (cache[data.source]) {\n        wrappedResolve(cache[data.source]);\n      } else {\n        handler({\n          url: data.source\n        }, wrappedResolve, rej);\n      }\n    });\n  };\n\n  var defaultPromise = function defaultPromise(data, dataToHtml) {\n    return global$3.resolve({\n      html: dataToHtml(data),\n      url: data.source\n    });\n  };\n\n  var loadedData = function loadedData(editor) {\n    return function (data) {\n      return dataToHtml(editor, data);\n    };\n  };\n\n  var getEmbedHtml = function getEmbedHtml(editor, data) {\n    var embedHandler = getUrlResolver(editor);\n    return embedHandler ? embedPromise(data, loadedData(editor), embedHandler) : defaultPromise(data, loadedData(editor));\n  };\n\n  var isCached = function isCached(url) {\n    return has(cache, url);\n  };\n\n  var extractMeta = function extractMeta(sourceInput, data) {\n    return get$1(data, sourceInput).bind(function (mainData) {\n      return get$1(mainData, 'meta');\n    });\n  };\n\n  var getValue = function getValue(data, metaData, sourceInput) {\n    return function (prop) {\n      var _a;\n\n      var getFromData = function getFromData() {\n        return get$1(data, prop);\n      };\n\n      var getFromMetaData = function getFromMetaData() {\n        return get$1(metaData, prop);\n      };\n\n      var getNonEmptyValue = function getNonEmptyValue(c) {\n        return get$1(c, 'value').bind(function (v) {\n          return v.length > 0 ? Optional.some(v) : Optional.none();\n        });\n      };\n\n      var getFromValueFirst = function getFromValueFirst() {\n        return getFromData().bind(function (child) {\n          return isObject(child) ? getNonEmptyValue(child).orThunk(getFromMetaData) : getFromMetaData().orThunk(function () {\n            return Optional.from(child);\n          });\n        });\n      };\n\n      var getFromMetaFirst = function getFromMetaFirst() {\n        return getFromMetaData().orThunk(function () {\n          return getFromData().bind(function (child) {\n            return isObject(child) ? getNonEmptyValue(child) : Optional.from(child);\n          });\n        });\n      };\n\n      return _a = {}, _a[prop] = (prop === sourceInput ? getFromValueFirst() : getFromMetaFirst()).getOr(''), _a;\n    };\n  };\n\n  var getDimensions = function getDimensions(data, metaData) {\n    var dimensions = {};\n    get$1(data, 'dimensions').each(function (dims) {\n      each$1(['width', 'height'], function (prop) {\n        get$1(metaData, prop).orThunk(function () {\n          return get$1(dims, prop);\n        }).each(function (value) {\n          return dimensions[prop] = value;\n        });\n      });\n    });\n    return dimensions;\n  };\n\n  var unwrap = function unwrap(data, sourceInput) {\n    var metaData = sourceInput ? extractMeta(sourceInput, data).getOr({}) : {};\n    var get = getValue(data, metaData, sourceInput);\n    return _assign(_assign(_assign(_assign(_assign({}, get('source')), get('altsource')), get('poster')), get('embed')), getDimensions(data, metaData));\n  };\n\n  var wrap = function wrap(data) {\n    var wrapped = _assign(_assign({}, data), {\n      source: {\n        value: get$1(data, 'source').getOr('')\n      },\n      altsource: {\n        value: get$1(data, 'altsource').getOr('')\n      },\n      poster: {\n        value: get$1(data, 'poster').getOr('')\n      }\n    });\n\n    each$1(['width', 'height'], function (prop) {\n      get$1(data, prop).each(function (value) {\n        var dimensions = wrapped.dimensions || {};\n        dimensions[prop] = value;\n        wrapped.dimensions = dimensions;\n      });\n    });\n    return wrapped;\n  };\n\n  var handleError = function handleError(editor) {\n    return function (error) {\n      var errorMessage = error && error.msg ? 'Media embed handler error: ' + error.msg : 'Media embed handler threw unknown error.';\n      editor.notificationManager.open({\n        type: 'error',\n        text: errorMessage\n      });\n    };\n  };\n\n  var snippetToData = function snippetToData(editor, embedSnippet) {\n    return htmlToData(getScripts(editor), embedSnippet);\n  };\n\n  var getEditorData = function getEditorData(editor) {\n    var element = editor.selection.getNode();\n    var snippet = isMediaElement(element) ? editor.serializer.serialize(element, {\n      selection: true\n    }) : '';\n    return _assign({\n      embed: snippet\n    }, htmlToData(getScripts(editor), snippet));\n  };\n\n  var addEmbedHtml = function addEmbedHtml(api, editor) {\n    return function (response) {\n      if (isString(response.url) && response.url.trim().length > 0) {\n        var html = response.html;\n        var snippetData = snippetToData(editor, html);\n\n        var nuData = _assign(_assign({}, snippetData), {\n          source: response.url,\n          embed: html\n        });\n\n        api.setData(wrap(nuData));\n      }\n    };\n  };\n\n  var selectPlaceholder = function selectPlaceholder(editor, beforeObjects) {\n    var afterObjects = editor.dom.select('*[data-mce-object]');\n\n    for (var i = 0; i < beforeObjects.length; i++) {\n      for (var y = afterObjects.length - 1; y >= 0; y--) {\n        if (beforeObjects[i] === afterObjects[y]) {\n          afterObjects.splice(y, 1);\n        }\n      }\n    }\n\n    editor.selection.select(afterObjects[0]);\n  };\n\n  var handleInsert = function handleInsert(editor, html) {\n    var beforeObjects = editor.dom.select('*[data-mce-object]');\n    editor.insertContent(html);\n    selectPlaceholder(editor, beforeObjects);\n    editor.nodeChanged();\n  };\n\n  var submitForm = function submitForm(prevData, newData, editor) {\n    newData.embed = updateHtml(newData.embed, newData);\n\n    if (newData.embed && (prevData.source === newData.source || isCached(newData.source))) {\n      handleInsert(editor, newData.embed);\n    } else {\n      getEmbedHtml(editor, newData).then(function (response) {\n        handleInsert(editor, response.html);\n      })[\"catch\"](handleError(editor));\n    }\n  };\n\n  var showDialog = function showDialog(editor) {\n    var editorData = getEditorData(editor);\n    var currentData = Cell(editorData);\n    var initialData = wrap(editorData);\n\n    var handleSource = function handleSource(prevData, api) {\n      var serviceData = unwrap(api.getData(), 'source');\n\n      if (prevData.source !== serviceData.source) {\n        addEmbedHtml(win, editor)({\n          url: serviceData.source,\n          html: ''\n        });\n        getEmbedHtml(editor, serviceData).then(addEmbedHtml(win, editor))[\"catch\"](handleError(editor));\n      }\n    };\n\n    var handleEmbed = function handleEmbed(api) {\n      var data = unwrap(api.getData());\n      var dataFromEmbed = snippetToData(editor, data.embed);\n      api.setData(wrap(dataFromEmbed));\n    };\n\n    var handleUpdate = function handleUpdate(api, sourceInput) {\n      var data = unwrap(api.getData(), sourceInput);\n      var embed = dataToHtml(editor, data);\n      api.setData(wrap(_assign(_assign({}, data), {\n        embed: embed\n      })));\n    };\n\n    var mediaInput = [{\n      name: 'source',\n      type: 'urlinput',\n      filetype: 'media',\n      label: 'Source'\n    }];\n    var sizeInput = !hasDimensions(editor) ? [] : [{\n      type: 'sizeinput',\n      name: 'dimensions',\n      label: 'Constrain proportions',\n      constrain: true\n    }];\n    var generalTab = {\n      title: 'General',\n      name: 'general',\n      items: flatten([mediaInput, sizeInput])\n    };\n    var embedTextarea = {\n      type: 'textarea',\n      name: 'embed',\n      label: 'Paste your embed code below:'\n    };\n    var embedTab = {\n      title: 'Embed',\n      items: [embedTextarea]\n    };\n    var advancedFormItems = [];\n\n    if (hasAltSource(editor)) {\n      advancedFormItems.push({\n        name: 'altsource',\n        type: 'urlinput',\n        filetype: 'media',\n        label: 'Alternative source URL'\n      });\n    }\n\n    if (hasPoster(editor)) {\n      advancedFormItems.push({\n        name: 'poster',\n        type: 'urlinput',\n        filetype: 'image',\n        label: 'Media poster (Image URL)'\n      });\n    }\n\n    var advancedTab = {\n      title: 'Advanced',\n      name: 'advanced',\n      items: advancedFormItems\n    };\n    var tabs = [generalTab, embedTab];\n\n    if (advancedFormItems.length > 0) {\n      tabs.push(advancedTab);\n    }\n\n    var body = {\n      type: 'tabpanel',\n      tabs: tabs\n    };\n    var win = editor.windowManager.open({\n      title: 'Insert/Edit Media',\n      size: 'normal',\n      body: body,\n      buttons: [{\n        type: 'cancel',\n        name: 'cancel',\n        text: 'Cancel'\n      }, {\n        type: 'submit',\n        name: 'save',\n        text: 'Save',\n        primary: true\n      }],\n      onSubmit: function onSubmit(api) {\n        var serviceData = unwrap(api.getData());\n        submitForm(currentData.get(), serviceData, editor);\n        api.close();\n      },\n      onChange: function onChange(api, detail) {\n        switch (detail.name) {\n          case 'source':\n            handleSource(currentData.get(), api);\n            break;\n\n          case 'embed':\n            handleEmbed(api);\n            break;\n\n          case 'dimensions':\n          case 'altsource':\n          case 'poster':\n            handleUpdate(api, detail.name);\n            break;\n        }\n\n        currentData.set(unwrap(api.getData()));\n      },\n      initialData: initialData\n    });\n  };\n\n  var get = function get(editor) {\n    var showDialog$1 = function showDialog$1() {\n      showDialog(editor);\n    };\n\n    return {\n      showDialog: showDialog$1\n    };\n  };\n\n  var register$1 = function register$1(editor) {\n    var showDialog$1 = function showDialog$1() {\n      showDialog(editor);\n    };\n\n    editor.addCommand('mceMedia', showDialog$1);\n  };\n\n  var global$2 = tinymce.util.Tools.resolve('tinymce.html.Node');\n  var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n  var global = tinymce.util.Tools.resolve('tinymce.html.DomParser');\n\n  var sanitize = function sanitize(editor, html) {\n    if (shouldFilterHtml(editor) === false) {\n      return html;\n    }\n\n    var writer = global$4();\n    var blocked;\n    global$6({\n      validate: false,\n      allow_conditional_comments: false,\n      comment: function comment(text) {\n        if (!blocked) {\n          writer.comment(text);\n        }\n      },\n      cdata: function cdata(text) {\n        if (!blocked) {\n          writer.cdata(text);\n        }\n      },\n      text: function text(_text2, raw) {\n        if (!blocked) {\n          writer.text(_text2, raw);\n        }\n      },\n      start: function start(name, attrs, empty) {\n        blocked = true;\n\n        if (name === 'script' || name === 'noscript' || name === 'svg') {\n          return;\n        }\n\n        for (var i = attrs.length - 1; i >= 0; i--) {\n          var attrName = attrs[i].name;\n\n          if (attrName.indexOf('on') === 0) {\n            delete attrs.map[attrName];\n            attrs.splice(i, 1);\n          }\n\n          if (attrName === 'style') {\n            attrs[i].value = editor.dom.serializeStyle(editor.dom.parseStyle(attrs[i].value), name);\n          }\n        }\n\n        writer.start(name, attrs, empty);\n        blocked = false;\n      },\n      end: function end(name) {\n        if (blocked) {\n          return;\n        }\n\n        writer.end(name);\n      }\n    }, global$5({})).parse(html);\n    return writer.getContent();\n  };\n\n  var isLiveEmbedNode = function isLiveEmbedNode(node) {\n    var name = node.name;\n    return name === 'iframe' || name === 'video' || name === 'audio';\n  };\n\n  var getDimension = function getDimension(node, styles, dimension, defaultValue) {\n    if (defaultValue === void 0) {\n      defaultValue = null;\n    }\n\n    var value = node.attr(dimension);\n\n    if (isNonNullable(value)) {\n      return value;\n    } else if (!has(styles, dimension)) {\n      return defaultValue;\n    } else {\n      return null;\n    }\n  };\n\n  var setDimensions = function setDimensions(node, previewNode, styles) {\n    var useDefaults = previewNode.name === 'img' || node.name === 'video';\n    var defaultWidth = useDefaults ? '300' : null;\n    var fallbackHeight = node.name === 'audio' ? '30' : '150';\n    var defaultHeight = useDefaults ? fallbackHeight : null;\n    previewNode.attr({\n      width: getDimension(node, styles, 'width', defaultWidth),\n      height: getDimension(node, styles, 'height', defaultHeight)\n    });\n  };\n\n  var appendNodeContent = function appendNodeContent(editor, nodeName, previewNode, html) {\n    var newNode = global({\n      forced_root_block: false,\n      validate: false\n    }, editor.schema).parse(html, {\n      context: nodeName\n    });\n\n    while (newNode.firstChild) {\n      previewNode.append(newNode.firstChild);\n    }\n  };\n\n  var createPlaceholderNode = function createPlaceholderNode(editor, node) {\n    var name = node.name;\n    var placeHolder = new global$2('img', 1);\n    placeHolder.shortEnded = true;\n    retainAttributesAndInnerHtml(editor, node, placeHolder);\n    setDimensions(node, placeHolder, {});\n    placeHolder.attr({\n      'style': node.attr('style'),\n      'src': global$1.transparentSrc,\n      'data-mce-object': name,\n      'class': 'mce-object mce-object-' + name\n    });\n    return placeHolder;\n  };\n\n  var createPreviewNode = function createPreviewNode(editor, node) {\n    var name = node.name;\n    var previewWrapper = new global$2('span', 1);\n    previewWrapper.attr({\n      'contentEditable': 'false',\n      'style': node.attr('style'),\n      'data-mce-object': name,\n      'class': 'mce-preview-object mce-object-' + name\n    });\n    retainAttributesAndInnerHtml(editor, node, previewWrapper);\n    var styles = editor.dom.parseStyle(node.attr('style'));\n    var previewNode = new global$2(name, 1);\n    setDimensions(node, previewNode, styles);\n    previewNode.attr({\n      src: node.attr('src'),\n      style: node.attr('style'),\n      \"class\": node.attr('class')\n    });\n\n    if (name === 'iframe') {\n      previewNode.attr({\n        allowfullscreen: node.attr('allowfullscreen'),\n        frameborder: '0'\n      });\n    } else {\n      var attrs = ['controls', 'crossorigin', 'currentTime', 'loop', 'muted', 'poster', 'preload'];\n      each$1(attrs, function (attrName) {\n        previewNode.attr(attrName, node.attr(attrName));\n      });\n      var sanitizedHtml = previewWrapper.attr('data-mce-html');\n\n      if (isNonNullable(sanitizedHtml)) {\n        appendNodeContent(editor, name, previewNode, unescape(sanitizedHtml));\n      }\n    }\n\n    var shimNode = new global$2('span', 1);\n    shimNode.attr('class', 'mce-shim');\n    previewWrapper.append(previewNode);\n    previewWrapper.append(shimNode);\n    return previewWrapper;\n  };\n\n  var retainAttributesAndInnerHtml = function retainAttributesAndInnerHtml(editor, sourceNode, targetNode) {\n    var attribs = sourceNode.attributes;\n    var ai = attribs.length;\n\n    while (ai--) {\n      var attrName = attribs[ai].name;\n      var attrValue = attribs[ai].value;\n\n      if (attrName !== 'width' && attrName !== 'height' && attrName !== 'style') {\n        if (attrName === 'data' || attrName === 'src') {\n          attrValue = editor.convertURL(attrValue, attrName);\n        }\n\n        targetNode.attr('data-mce-p-' + attrName, attrValue);\n      }\n    }\n\n    var innerHtml = sourceNode.firstChild && sourceNode.firstChild.value;\n\n    if (innerHtml) {\n      targetNode.attr('data-mce-html', escape(sanitize(editor, innerHtml)));\n      targetNode.firstChild = null;\n    }\n  };\n\n  var isPageEmbedWrapper = function isPageEmbedWrapper(node) {\n    var nodeClass = node.attr('class');\n    return nodeClass && /\\btiny-pageembed\\b/.test(nodeClass);\n  };\n\n  var isWithinEmbedWrapper = function isWithinEmbedWrapper(node) {\n    while (node = node.parent) {\n      if (node.attr('data-ephox-embed-iri') || isPageEmbedWrapper(node)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var placeHolderConverter = function placeHolderConverter(editor) {\n    return function (nodes) {\n      var i = nodes.length;\n      var node;\n      var videoScript;\n\n      while (i--) {\n        node = nodes[i];\n\n        if (!node.parent) {\n          continue;\n        }\n\n        if (node.parent.attr('data-mce-object')) {\n          continue;\n        }\n\n        if (node.name === 'script') {\n          videoScript = getVideoScriptMatch(getScripts(editor), node.attr('src'));\n\n          if (!videoScript) {\n            continue;\n          }\n        }\n\n        if (videoScript) {\n          if (videoScript.width) {\n            node.attr('width', videoScript.width.toString());\n          }\n\n          if (videoScript.height) {\n            node.attr('height', videoScript.height.toString());\n          }\n        }\n\n        if (isLiveEmbedNode(node) && hasLiveEmbeds(editor) && global$1.ceFalse) {\n          if (!isWithinEmbedWrapper(node)) {\n            node.replace(createPreviewNode(editor, node));\n          }\n        } else {\n          if (!isWithinEmbedWrapper(node)) {\n            node.replace(createPlaceholderNode(editor, node));\n          }\n        }\n      }\n    };\n  };\n\n  var setup$1 = function setup$1(editor) {\n    editor.on('preInit', function () {\n      var specialElements = editor.schema.getSpecialElements();\n      global$8.each('video audio iframe object'.split(' '), function (name) {\n        specialElements[name] = new RegExp('</' + name + '[^>]*>', 'gi');\n      });\n      var boolAttrs = editor.schema.getBoolAttrs();\n      global$8.each('webkitallowfullscreen mozallowfullscreen allowfullscreen'.split(' '), function (name) {\n        boolAttrs[name] = {};\n      });\n      editor.parser.addNodeFilter('iframe,video,audio,object,embed,script', placeHolderConverter(editor));\n      editor.serializer.addAttributeFilter('data-mce-object', function (nodes, name) {\n        var i = nodes.length;\n        var node;\n        var realElm;\n        var ai;\n        var attribs;\n        var innerHtml;\n        var innerNode;\n        var realElmName;\n        var className;\n\n        while (i--) {\n          node = nodes[i];\n\n          if (!node.parent) {\n            continue;\n          }\n\n          realElmName = node.attr(name);\n          realElm = new global$2(realElmName, 1);\n\n          if (realElmName !== 'audio' && realElmName !== 'script') {\n            className = node.attr('class');\n\n            if (className && className.indexOf('mce-preview-object') !== -1) {\n              realElm.attr({\n                width: node.firstChild.attr('width'),\n                height: node.firstChild.attr('height')\n              });\n            } else {\n              realElm.attr({\n                width: node.attr('width'),\n                height: node.attr('height')\n              });\n            }\n          }\n\n          realElm.attr({\n            style: node.attr('style')\n          });\n          attribs = node.attributes;\n          ai = attribs.length;\n\n          while (ai--) {\n            var attrName = attribs[ai].name;\n\n            if (attrName.indexOf('data-mce-p-') === 0) {\n              realElm.attr(attrName.substr(11), attribs[ai].value);\n            }\n          }\n\n          if (realElmName === 'script') {\n            realElm.attr('type', 'text/javascript');\n          }\n\n          innerHtml = node.attr('data-mce-html');\n\n          if (innerHtml) {\n            innerNode = new global$2('#text', 3);\n            innerNode.raw = true;\n            innerNode.value = sanitize(editor, unescape(innerHtml));\n            realElm.append(innerNode);\n          }\n\n          node.replace(realElm);\n        }\n      });\n    });\n    editor.on('SetContent', function () {\n      editor.$('span.mce-preview-object').each(function (index, elm) {\n        var $elm = editor.$(elm);\n\n        if ($elm.find('span.mce-shim').length === 0) {\n          $elm.append('<span class=\"mce-shim\"></span>');\n        }\n      });\n    });\n  };\n\n  var setup = function setup(editor) {\n    editor.on('ResolveName', function (e) {\n      var name;\n\n      if (e.target.nodeType === 1 && (name = e.target.getAttribute('data-mce-object'))) {\n        e.name = name;\n      }\n    });\n  };\n\n  var register = function register(editor) {\n    var onAction = function onAction() {\n      return editor.execCommand('mceMedia');\n    };\n\n    editor.ui.registry.addToggleButton('media', {\n      tooltip: 'Insert/edit media',\n      icon: 'embed',\n      onAction: onAction,\n      onSetup: function onSetup(buttonApi) {\n        var selection = editor.selection;\n        buttonApi.setActive(isMediaElement(selection.getNode()));\n        return selection.selectorChangedWithUnbind('img[data-mce-object],span[data-mce-object],div[data-ephox-embed-iri]', buttonApi.setActive).unbind;\n      }\n    });\n    editor.ui.registry.addMenuItem('media', {\n      icon: 'embed',\n      text: 'Media...',\n      onAction: onAction\n    });\n  };\n\n  function Plugin() {\n    global$9.add('media', function (editor) {\n      register$1(editor);\n      register(editor);\n      setup(editor);\n      setup$1(editor);\n      setup$2(editor);\n      return get(editor);\n    });\n  }\n\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/media/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/media/plugin.js"]();
/******/ 	
/******/ })()
;