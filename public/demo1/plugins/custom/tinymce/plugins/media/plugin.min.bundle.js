/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/media/plugin.min.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/media/plugin.min.js ***!
  \**********************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n!function () {\n  \"use strict\";\n\n  function e(n) {\n    return function (e) {\n      return r = _typeof(t = e), (null === t ? \"null\" : \"object\" == r && (Array.prototype.isPrototypeOf(t) || t.constructor && \"Array\" === t.constructor.name) ? \"array\" : \"object\" == r && (String.prototype.isPrototypeOf(t) || t.constructor && \"String\" === t.constructor.name) ? \"string\" : r) === n;\n      var t, r;\n    };\n  }\n\n  function s(e) {\n    return null != e;\n  }\n\n  function o(e) {\n    return function () {\n      return e;\n    };\n  }\n\n  function t(e) {\n    return e;\n  }\n\n  function r() {\n    return d;\n  }\n\n  var n = tinymce.util.Tools.resolve(\"tinymce.PluginManager\"),\n      _p = function p() {\n    return (_p = Object.assign || function (e) {\n      for (var t, r = 1, n = arguments.length; r < n; r++) {\n        for (var a in t = arguments[r]) {\n          Object.prototype.hasOwnProperty.call(t, a) && (e[a] = t[a]);\n        }\n      }\n\n      return e;\n    }).apply(this, arguments);\n  },\n      i = e(\"string\"),\n      u = e(\"object\"),\n      l = e(\"array\"),\n      c = o(!1),\n      m = o(!0),\n      d = {\n    fold: function fold(e, t) {\n      return e();\n    },\n    isSome: c,\n    isNone: m,\n    getOr: t,\n    getOrThunk: a,\n    getOrDie: function getOrDie(e) {\n      throw new Error(e || \"error: getOrDie called on none.\");\n    },\n    getOrNull: o(null),\n    getOrUndefined: o(void 0),\n    or: t,\n    orThunk: a,\n    map: r,\n    each: function each() {},\n    bind: r,\n    exists: c,\n    forall: m,\n    filter: function filter() {\n      return d;\n    },\n    toArray: function toArray() {\n      return [];\n    },\n    toString: o(\"none()\")\n  };\n\n  function a(e) {\n    return e();\n  }\n\n  function h(e, t) {\n    for (var r = 0, n = e.length; r < n; r++) {\n      t(e[r], r);\n    }\n  }\n\n  function f(e) {\n    var t = e;\n    return {\n      get: function get() {\n        return t;\n      },\n      set: function set(e) {\n        t = e;\n      }\n    };\n  }\n\n  function g(e, t) {\n    return J(e, t) ? W.from(e[t]) : W.none();\n  }\n\n  function v(e) {\n    return e.getParam(\"media_scripts\");\n  }\n\n  function b(e, t) {\n    if (e) for (var r = 0; r < e.length; r++) {\n      if (-1 !== t.indexOf(e[r].filter)) return e[r];\n    }\n  }\n\n  function w(e) {\n    return e.replace(/px$/, \"\");\n  }\n\n  function y(i, e) {\n    var c = f(!1),\n        s = {};\n    return V({\n      validate: !1,\n      allow_conditional_comments: !0,\n      start: function start(e, t) {\n        if (!c.get()) if (J(t.map, \"data-ephox-embed-iri\")) c.set(!0), o = (a = (n = t).map.style) ? X.parseStyle(a) : {}, s = {\n          type: \"ephox-embed-iri\",\n          source: n.map[\"data-ephox-embed-iri\"],\n          altsource: \"\",\n          poster: \"\",\n          width: g(o, \"max-width\").map(w).getOr(\"\"),\n          height: g(o, \"max-height\").map(w).getOr(\"\")\n        };else {\n          if (s.source || \"param\" !== e || (s.source = t.map.movie), \"iframe\" !== e && \"object\" !== e && \"embed\" !== e && \"video\" !== e && \"audio\" !== e || (s.type || (s.type = e), s = K.extend(t.map, s)), \"script\" === e) {\n            var r = b(i, t.map.src);\n            if (!r) return;\n            s = {\n              type: \"script\",\n              source: t.map.src,\n              width: String(r.width),\n              height: String(r.height)\n            };\n          }\n\n          \"source\" === e && (s.source ? s.altsource || (s.altsource = t.map.src) : s.source = t.map.src), \"img\" !== e || s.poster || (s.poster = t.map.src);\n        }\n        var n, a, o;\n      }\n    }).parse(e), s.source = s.source || s.src || s.data, s.altsource = s.altsource || \"\", s.poster = s.poster || \"\", s;\n  }\n\n  function x(e) {\n    return {\n      mp3: \"audio/mpeg\",\n      m4a: \"audio/x-m4a\",\n      wav: \"audio/wav\",\n      mp4: \"video/mp4\",\n      webm: \"video/webm\",\n      ogg: \"video/ogg\",\n      swf: \"application/x-shockwave-flash\"\n    }[e.toLowerCase().split(\".\").pop()] || \"\";\n  }\n\n  function j(e) {\n    return /^[0-9.]+$/.test(e) ? e + \"px\" : e;\n  }\n\n  function O(o, e) {\n    !function (e) {\n      for (var t = q(e), r = 0, n = t.length; r < n; r++) {\n        var a = t[r];\n        !function (e, t) {\n          var r = \"\" + e;\n          if (o.map[t]) for (var n = o.length; n--;) {\n            var a = o[n];\n            a.name === t && (r ? (o.map[t] = r, a.value = r) : (delete o.map[t], o.splice(n, 1)));\n          } else r && (o.push({\n            name: t,\n            value: r\n          }), o.map[t] = r);\n        }(e[a], a);\n      }\n    }(e);\n  }\n\n  function S(e, c, s) {\n    var u,\n        l = Z(),\n        m = f(!1),\n        d = 0;\n    return V({\n      validate: !1,\n      allow_conditional_comments: !0,\n      comment: function comment(e) {\n        l.comment(e);\n      },\n      cdata: function cdata(e) {\n        l.cdata(e);\n      },\n      text: function text(e, t) {\n        l.text(e, t);\n      },\n      start: function start(e, t, r) {\n        if (!m.get()) if (J(t.map, \"data-ephox-embed-iri\")) m.set(!0), n = c, (i = (o = (a = t).map.style) ? ee.parseStyle(o) : {})[\"max-width\"] = j(n.width), i[\"max-height\"] = j(n.height), O(a, {\n          style: ee.serializeStyle(i)\n        });else {\n          switch (e) {\n            case \"video\":\n            case \"object\":\n            case \"embed\":\n            case \"img\":\n            case \"iframe\":\n              void 0 !== c.height && void 0 !== c.width && O(t, {\n                width: c.width,\n                height: c.height\n              });\n          }\n\n          if (s) switch (e) {\n            case \"video\":\n              O(t, {\n                poster: c.poster,\n                src: \"\"\n              }), c.altsource && O(t, {\n                src: \"\"\n              });\n              break;\n\n            case \"iframe\":\n              O(t, {\n                src: c.source\n              });\n              break;\n\n            case \"source\":\n              if (d < 2 && (O(t, {\n                src: c[te[d]],\n                type: c[te[d] + \"mime\"]\n              }), !c[te[d]])) return;\n              d++;\n              break;\n\n            case \"img\":\n              if (!c.poster) return;\n              u = !0;\n          }\n        }\n        var n, a, o, i;\n        l.start(e, t, r);\n      },\n      end: function end(e) {\n        if (!m.get()) {\n          if (\"video\" === e && s) for (var t, r = 0; r < 2; r++) {\n            c[te[r]] && ((t = []).map = {}, d <= r && (O(t, {\n              src: c[te[r]],\n              type: c[te[r] + \"mime\"]\n            }), l.start(\"source\", t, !0)));\n          }\n          var n;\n          c.poster && \"object\" === e && s && !u && ((n = []).map = {}, O(n, {\n            src: c.poster,\n            width: c.width,\n            height: c.height\n          }), l.start(\"img\", n, !0));\n        }\n\n        l.end(e);\n      }\n    }, Y({})).parse(e), l.getContent();\n  }\n\n  function _(e, t) {\n    for (var r, n = (r = t.match(/^(https?:\\/\\/|www\\.)(.+)$/i)) && 1 < r.length && \"www.\" !== r[1] ? r[1] : \"https://\", a = e.regex.exec(t), o = n + e.url, i = 0; i < a.length; i++) {\n      !function (e) {\n        o = o.replace(\"$\" + e, function () {\n          return a[e] || \"\";\n        });\n      }(i);\n    }\n\n    return o.replace(/\\?$/, \"\");\n  }\n\n  function k(r, e) {\n    var n = K.extend({}, e);\n    if (!n.source && (K.extend(n, y(v(r), n.embed)), !n.source)) return \"\";\n    n.altsource || (n.altsource = \"\"), n.poster || (n.poster = \"\"), n.source = r.convertURL(n.source, \"source\"), n.altsource = r.convertURL(n.altsource, \"source\"), n.sourcemime = x(n.source), n.altsourcemime = x(n.altsource), n.poster = r.convertURL(n.poster, \"poster\");\n    var t,\n        a,\n        o = (t = n.source, 0 < (a = re.filter(function (e) {\n      return e.regex.test(t);\n    })).length ? K.extend({}, a[0], {\n      url: _(a[0], t)\n    }) : null);\n    if (o && (n.source = o.url, n.type = o.type, n.allowfullscreen = o.allowFullscreen, n.width = n.width || String(o.w), n.height = n.height || String(o.h)), n.embed) return S(n.embed, n, !0);\n    var i = b(v(r), n.source);\n    i && (n.type = \"script\", n.width = String(i.width), n.height = String(i.height));\n    var c,\n        s,\n        u,\n        l,\n        m = r.getParam(\"audio_template_callback\"),\n        d = r.getParam(\"video_template_callback\");\n    return n.width = n.width || \"300\", n.height = n.height || \"150\", K.each(n, function (e, t) {\n      n[t] = r.dom.encode(\"\" + e);\n    }), \"iframe\" === n.type ? (l = n.allowfullscreen ? ' allowFullscreen=\"1\"' : \"\", '<iframe src=\"' + n.source + '\" width=\"' + n.width + '\" height=\"' + n.height + '\"' + l + \"></iframe>\") : \"application/x-shockwave-flash\" === n.sourcemime ? (u = '<object data=\"' + n.source + '\" width=\"' + n.width + '\" height=\"' + n.height + '\" type=\"application/x-shockwave-flash\">', n.poster && (u += '<img src=\"' + n.poster + '\" width=\"' + n.width + '\" height=\"' + n.height + '\" />'), u + \"</object>\") : -1 !== n.sourcemime.indexOf(\"audio\") ? (s = n, m ? m(s) : '<audio controls=\"controls\" src=\"' + s.source + '\">' + (s.altsource ? '\\n<source src=\"' + s.altsource + '\"' + (s.altsourcemime ? ' type=\"' + s.altsourcemime + '\"' : \"\") + \" />\\n\" : \"\") + \"</audio>\") : \"script\" === n.type ? '<script src=\"' + n.source + '\"><\\/script>' : (c = n, d ? d(c) : '<video width=\"' + c.width + '\" height=\"' + c.height + '\"' + (c.poster ? ' poster=\"' + c.poster + '\"' : \"\") + ' controls=\"controls\">\\n<source src=\"' + c.source + '\"' + (c.sourcemime ? ' type=\"' + c.sourcemime + '\"' : \"\") + \" />\\n\" + (c.altsource ? '<source src=\"' + c.altsource + '\"' + (c.altsourcemime ? ' type=\"' + c.altsourcemime + '\"' : \"\") + \" />\\n\" : \"\") + \"</video>\");\n  }\n\n  function A(e) {\n    return e.hasAttribute(\"data-mce-object\") || e.hasAttribute(\"data-ephox-embed-iri\");\n  }\n\n  function T(t) {\n    return function (e) {\n      return k(t, e);\n    };\n  }\n\n  function C(e, t) {\n    var r,\n        n,\n        a,\n        o,\n        i,\n        c = e.getParam(\"media_url_resolver\");\n    return c ? (a = t, o = T(e), i = c, new ne(function (t, e) {\n      function r(e) {\n        return e.html && (ae[a.source] = e), t({\n          url: a.source,\n          html: e.html || o(a)\n        });\n      }\n\n      ae[a.source] ? r(ae[a.source]) : i({\n        url: a.source\n      }, r, e);\n    })) : (n = T(e), ne.resolve({\n      html: n(r = t),\n      url: r.source\n    }));\n  }\n\n  function D(e, t) {\n    var r,\n        n,\n        o,\n        i,\n        c,\n        a = t ? g(e, t).bind(function (e) {\n      return g(e, \"meta\");\n    }).getOr({}) : {},\n        s = (o = e, i = a, c = t, function (e) {\n      function t() {\n        return g(o, e);\n      }\n\n      function r() {\n        return g(i, e);\n      }\n\n      function n(e) {\n        return g(e, \"value\").bind(function (e) {\n          return 0 < e.length ? W.some(e) : W.none();\n        });\n      }\n\n      var a = {};\n      return a[e] = (e === c ? t().bind(function (e) {\n        return u(e) ? n(e).orThunk(r) : r().orThunk(function () {\n          return W.from(e);\n        });\n      }) : r().orThunk(function () {\n        return t().bind(function (e) {\n          return u(e) ? n(e) : W.from(e);\n        });\n      })).getOr(\"\"), a;\n    });\n    return _p(_p(_p(_p(_p({}, s(\"source\")), s(\"altsource\")), s(\"poster\")), s(\"embed\")), (r = a, n = {}, g(e, \"dimensions\").each(function (e) {\n      h([\"width\", \"height\"], function (t) {\n        g(r, t).orThunk(function () {\n          return g(e, t);\n        }).each(function (e) {\n          return n[t] = e;\n        });\n      });\n    }), n));\n  }\n\n  function P(e) {\n    var n = _p(_p({}, e), {\n      source: {\n        value: g(e, \"source\").getOr(\"\")\n      },\n      altsource: {\n        value: g(e, \"altsource\").getOr(\"\")\n      },\n      poster: {\n        value: g(e, \"poster\").getOr(\"\")\n      }\n    });\n\n    return h([\"width\", \"height\"], function (r) {\n      g(e, r).each(function (e) {\n        var t = n.dimensions || {};\n        t[r] = e, n.dimensions = t;\n      });\n    }), n;\n  }\n\n  function $(r) {\n    return function (e) {\n      var t = e && e.msg ? \"Media embed handler error: \" + e.msg : \"Media embed handler threw unknown error.\";\n      r.notificationManager.open({\n        type: \"error\",\n        text: t\n      });\n    };\n  }\n\n  function M(e, t) {\n    return y(v(e), t);\n  }\n\n  function F(a, o) {\n    return function (e) {\n      var t, r, n;\n      i(e.url) && 0 < e.url.trim().length && (t = e.html, r = M(o, t), n = _p(_p({}, r), {\n        source: e.url,\n        embed: t\n      }), a.setData(P(n)));\n    };\n  }\n\n  function z(e, t) {\n    var r = e.dom.select(\"*[data-mce-object]\");\n    e.insertContent(t), function (e, t) {\n      for (var r = e.dom.select(\"*[data-mce-object]\"), n = 0; n < t.length; n++) {\n        for (var a = r.length - 1; 0 <= a; a--) {\n          t[n] === r[a] && r.splice(a, 1);\n        }\n      }\n\n      e.selection.select(r[0]);\n    }(e, r), e.nodeChanged();\n  }\n\n  function N(m) {\n    var e,\n        t,\n        r,\n        n = (r = A(t = (e = m).selection.getNode()) ? e.serializer.serialize(t, {\n      selection: !0\n    }) : \"\", _p({\n      embed: r\n    }, y(v(e), r))),\n        d = f(n),\n        a = P(n),\n        o = {\n      title: \"General\",\n      name: \"general\",\n      items: function (e) {\n        for (var t = [], r = 0, n = e.length; r < n; ++r) {\n          if (!l(e[r])) throw new Error(\"Arr.flatten item \" + r + \" was not an array, input: \" + e);\n          G.apply(t, e[r]);\n        }\n\n        return t;\n      }([[{\n        name: \"source\",\n        type: \"urlinput\",\n        filetype: \"media\",\n        label: \"Source\"\n      }], m.getParam(\"media_dimensions\", !0) ? [{\n        type: \"sizeinput\",\n        name: \"dimensions\",\n        label: \"Constrain proportions\",\n        constrain: !0\n      }] : []])\n    },\n        i = [];\n    m.getParam(\"media_alt_source\", !0) && i.push({\n      name: \"altsource\",\n      type: \"urlinput\",\n      filetype: \"media\",\n      label: \"Alternative source URL\"\n    }), m.getParam(\"media_poster\", !0) && i.push({\n      name: \"poster\",\n      type: \"urlinput\",\n      filetype: \"image\",\n      label: \"Media poster (Image URL)\"\n    });\n    var c = [o, {\n      title: \"Embed\",\n      items: [{\n        type: \"textarea\",\n        name: \"embed\",\n        label: \"Paste your embed code below:\"\n      }]\n    }];\n    0 < i.length && c.push({\n      title: \"Advanced\",\n      name: \"advanced\",\n      items: i\n    });\n    var h = m.windowManager.open({\n      title: \"Insert/Edit Media\",\n      size: \"normal\",\n      body: {\n        type: \"tabpanel\",\n        tabs: c\n      },\n      buttons: [{\n        type: \"cancel\",\n        name: \"cancel\",\n        text: \"Cancel\"\n      }, {\n        type: \"submit\",\n        name: \"save\",\n        text: \"Save\",\n        primary: !0\n      }],\n      onSubmit: function onSubmit(e) {\n        var t,\n            r,\n            n,\n            a,\n            o = D(e.getData());\n        t = d.get(), n = m, (r = o).embed = S(r.embed, r), r.embed && (t.source === r.source || (a = r.source, J(ae, a))) ? z(n, r.embed) : C(n, r).then(function (e) {\n          z(n, e.html);\n        })[\"catch\"]($(n)), e.close();\n      },\n      onChange: function onChange(e, t) {\n        switch (t.name) {\n          case \"source\":\n            u = d.get(), l = D(e.getData(), \"source\"), u.source !== l.source && (F(h, m)({\n              url: l.source,\n              html: \"\"\n            }), C(m, l).then(F(h, m))[\"catch\"]($(m)));\n            break;\n\n          case \"embed\":\n            c = D((i = e).getData()), s = M(m, c.embed), i.setData(P(s));\n            break;\n\n          case \"dimensions\":\n          case \"altsource\":\n          case \"poster\":\n            n = t.name, a = D((r = e).getData(), n), o = k(m, a), r.setData(P(_p(_p({}, a), {\n              embed: o\n            })));\n        }\n\n        var r, n, a, o, i, c, s, u, l;\n        d.set(D(e.getData()));\n      },\n      initialData: a\n    });\n  }\n\n  function U(o, e) {\n    if (!1 === o.getParam(\"media_filter_html\", !0)) return e;\n    var i,\n        c = Z();\n    return V({\n      validate: !1,\n      allow_conditional_comments: !1,\n      comment: function comment(e) {\n        i || c.comment(e);\n      },\n      cdata: function cdata(e) {\n        i || c.cdata(e);\n      },\n      text: function text(e, t) {\n        i || c.text(e, t);\n      },\n      start: function start(e, t, r) {\n        if (i = !0, \"script\" !== e && \"noscript\" !== e && \"svg\" !== e) {\n          for (var n = t.length - 1; 0 <= n; n--) {\n            var a = t[n].name;\n            0 === a.indexOf(\"on\") && (delete t.map[a], t.splice(n, 1)), \"style\" === a && (t[n].value = o.dom.serializeStyle(o.dom.parseStyle(t[n].value), e));\n          }\n\n          c.start(e, t, r), i = !1;\n        }\n      },\n      end: function end(e) {\n        i || c.end(e);\n      }\n    }, Y({})).parse(e), c.getContent();\n  }\n\n  function E(e, t, r, n) {\n    void 0 === n && (n = null);\n    var a = e.attr(r);\n    return s(a) ? a : J(t, r) ? null : n;\n  }\n\n  function R(e, t, r) {\n    var n = \"img\" === t.name || \"video\" === e.name,\n        a = \"audio\" === e.name ? \"30\" : \"150\",\n        o = n ? a : null;\n    t.attr({\n      width: E(e, r, \"width\", n ? \"300\" : null),\n      height: E(e, r, \"height\", o)\n    });\n  }\n\n  function L(e, t) {\n    var r = t.name,\n        n = new oe(\"span\", 1);\n    n.attr({\n      contentEditable: \"false\",\n      style: t.attr(\"style\"),\n      \"data-mce-object\": r,\n      \"class\": \"mce-preview-object mce-object-\" + r\n    }), se(e, t, n);\n    var a,\n        o = e.dom.parseStyle(t.attr(\"style\")),\n        i = new oe(r, 1);\n    R(t, i, o), i.attr({\n      src: t.attr(\"src\"),\n      style: t.attr(\"style\"),\n      \"class\": t.attr(\"class\")\n    }), \"iframe\" === r ? i.attr({\n      allowfullscreen: t.attr(\"allowfullscreen\"),\n      frameborder: \"0\"\n    }) : (h([\"controls\", \"crossorigin\", \"currentTime\", \"loop\", \"muted\", \"poster\", \"preload\"], function (e) {\n      i.attr(e, t.attr(e));\n    }), s(a = n.attr(\"data-mce-html\")) && function (e, t, r, n) {\n      for (var a = ce({\n        forced_root_block: !1,\n        validate: !1\n      }, e.schema).parse(n, {\n        context: t\n      }); a.firstChild;) {\n        r.append(a.firstChild);\n      }\n    }(e, r, i, unescape(a)));\n    var c = new oe(\"span\", 1);\n    return c.attr(\"class\", \"mce-shim\"), n.append(i), n.append(c), n;\n  }\n\n  function I(e) {\n    for (; e = e.parent;) {\n      if (e.attr(\"data-ephox-embed-iri\") || (t = e.attr(\"class\")) && /\\btiny-pageembed\\b/.test(t)) return 1;\n    }\n\n    var t;\n  }\n\n  var B = function B(r) {\n    function e() {\n      return a;\n    }\n\n    function t(e) {\n      return e(r);\n    }\n\n    var n = o(r),\n        a = {\n      fold: function fold(e, t) {\n        return t(r);\n      },\n      isSome: m,\n      isNone: c,\n      getOr: n,\n      getOrThunk: n,\n      getOrDie: n,\n      getOrNull: n,\n      getOrUndefined: n,\n      or: e,\n      orThunk: e,\n      map: function map(e) {\n        return B(e(r));\n      },\n      each: function each(e) {\n        e(r);\n      },\n      bind: t,\n      exists: t,\n      forall: t,\n      filter: function filter(e) {\n        return e(r) ? a : d;\n      },\n      toArray: function toArray() {\n        return [r];\n      },\n      toString: function toString() {\n        return \"some(\" + r + \")\";\n      }\n    };\n    return a;\n  },\n      W = {\n    some: B,\n    none: r,\n    from: function from(e) {\n      return null == e ? d : B(e);\n    }\n  },\n      G = Array.prototype.push,\n      q = Object.keys,\n      H = Object.hasOwnProperty,\n      J = function J(e, t) {\n    return H.call(e, t);\n  },\n      K = tinymce.util.Tools.resolve(\"tinymce.util.Tools\"),\n      Q = tinymce.util.Tools.resolve(\"tinymce.dom.DOMUtils\"),\n      V = tinymce.util.Tools.resolve(\"tinymce.html.SaxParser\"),\n      X = Q.DOM,\n      Y = tinymce.util.Tools.resolve(\"tinymce.html.Schema\"),\n      Z = tinymce.util.Tools.resolve(\"tinymce.html.Writer\"),\n      ee = Q.DOM,\n      te = [\"source\", \"altsource\"],\n      re = [{\n    regex: /youtu\\.be\\/([\\w\\-_\\?&=.]+)/i,\n    type: \"iframe\",\n    w: 560,\n    h: 314,\n    url: \"www.youtube.com/embed/$1\",\n    allowFullscreen: !0\n  }, {\n    regex: /youtube\\.com(.+)v=([^&]+)(&([a-z0-9&=\\-_]+))?/i,\n    type: \"iframe\",\n    w: 560,\n    h: 314,\n    url: \"www.youtube.com/embed/$2?$4\",\n    allowFullscreen: !0\n  }, {\n    regex: /youtube.com\\/embed\\/([a-z0-9\\?&=\\-_]+)/i,\n    type: \"iframe\",\n    w: 560,\n    h: 314,\n    url: \"www.youtube.com/embed/$1\",\n    allowFullscreen: !0\n  }, {\n    regex: /vimeo\\.com\\/([0-9]+)/,\n    type: \"iframe\",\n    w: 425,\n    h: 350,\n    url: \"player.vimeo.com/video/$1?title=0&byline=0&portrait=0&color=8dc7dc\",\n    allowFullscreen: !0\n  }, {\n    regex: /vimeo\\.com\\/(.*)\\/([0-9]+)/,\n    type: \"iframe\",\n    w: 425,\n    h: 350,\n    url: \"player.vimeo.com/video/$2?title=0&amp;byline=0\",\n    allowFullscreen: !0\n  }, {\n    regex: /maps\\.google\\.([a-z]{2,3})\\/maps\\/(.+)msid=(.+)/,\n    type: \"iframe\",\n    w: 425,\n    h: 350,\n    url: 'maps.google.com/maps/ms?msid=$2&output=embed\"',\n    allowFullscreen: !1\n  }, {\n    regex: /dailymotion\\.com\\/video\\/([^_]+)/,\n    type: \"iframe\",\n    w: 480,\n    h: 270,\n    url: \"www.dailymotion.com/embed/video/$1\",\n    allowFullscreen: !0\n  }, {\n    regex: /dai\\.ly\\/([^_]+)/,\n    type: \"iframe\",\n    w: 480,\n    h: 270,\n    url: \"www.dailymotion.com/embed/video/$1\",\n    allowFullscreen: !0\n  }],\n      ne = tinymce.util.Tools.resolve(\"tinymce.util.Promise\"),\n      ae = {},\n      oe = tinymce.util.Tools.resolve(\"tinymce.html.Node\"),\n      ie = tinymce.util.Tools.resolve(\"tinymce.Env\"),\n      ce = tinymce.util.Tools.resolve(\"tinymce.html.DomParser\"),\n      se = function se(e, t, r) {\n    for (var n = t.attributes, a = n.length; a--;) {\n      var o = n[a].name,\n          i = n[a].value;\n      \"width\" !== o && \"height\" !== o && \"style\" !== o && (\"data\" !== o && \"src\" !== o || (i = e.convertURL(i, o)), r.attr(\"data-mce-p-\" + o, i));\n    }\n\n    var c = t.firstChild && t.firstChild.value;\n    c && (r.attr(\"data-mce-html\", escape(U(e, c))), r.firstChild = null);\n  };\n\n  n.add(\"media\", function (e) {\n    var t, r, d, n, a;\n\n    function o() {\n      return r.execCommand(\"mceMedia\");\n    }\n\n    return (t = e).addCommand(\"mceMedia\", function () {\n      N(t);\n    }), (r = e).ui.registry.addToggleButton(\"media\", {\n      tooltip: \"Insert/edit media\",\n      icon: \"embed\",\n      onAction: o,\n      onSetup: function onSetup(e) {\n        var t = r.selection;\n        return e.setActive(A(t.getNode())), t.selectorChangedWithUnbind(\"img[data-mce-object],span[data-mce-object],div[data-ephox-embed-iri]\", e.setActive).unbind;\n      }\n    }), r.ui.registry.addMenuItem(\"media\", {\n      icon: \"embed\",\n      text: \"Media...\",\n      onAction: o\n    }), e.on(\"ResolveName\", function (e) {\n      var t;\n      1 === e.target.nodeType && (t = e.target.getAttribute(\"data-mce-object\")) && (e.name = t);\n    }), (d = e).on(\"preInit\", function () {\n      var t = d.schema.getSpecialElements();\n      K.each(\"video audio iframe object\".split(\" \"), function (e) {\n        t[e] = new RegExp(\"</\" + e + \"[^>]*>\", \"gi\");\n      });\n      var u,\n          r = d.schema.getBoolAttrs();\n      K.each(\"webkitallowfullscreen mozallowfullscreen allowfullscreen\".split(\" \"), function (e) {\n        r[e] = {};\n      }), d.parser.addNodeFilter(\"iframe,video,audio,object,embed,script\", (u = d, function (e) {\n        for (var t, r, n, a, o, i, c, s = e.length; s--;) {\n          (t = e[s]).parent && (t.parent.attr(\"data-mce-object\") || \"script\" === t.name && !(r = b(v(u), t.attr(\"src\"))) || (r && (r.width && t.attr(\"width\", r.width.toString()), r.height && t.attr(\"height\", r.height.toString())), (\"iframe\" === (c = t.name) || \"video\" === c || \"audio\" === c) && u.getParam(\"media_live_embeds\", !0) && ie.ceFalse ? I(t) || t.replace(L(u, t)) : I(t) || t.replace((n = u, i = void 0, o = (a = t).name, (i = new oe(\"img\", 1)).shortEnded = !0, se(n, a, i), R(a, i, {}), i.attr({\n            style: a.attr(\"style\"),\n            src: ie.transparentSrc,\n            \"data-mce-object\": o,\n            \"class\": \"mce-object mce-object-\" + o\n          }), i))));\n        }\n      })), d.serializer.addAttributeFilter(\"data-mce-object\", function (e, t) {\n        for (var r, n, a, o, i, c, s, u, l = e.length; l--;) {\n          if ((r = e[l]).parent) {\n            for (s = r.attr(t), n = new oe(s, 1), \"audio\" !== s && \"script\" !== s && ((u = r.attr(\"class\")) && -1 !== u.indexOf(\"mce-preview-object\") ? n.attr({\n              width: r.firstChild.attr(\"width\"),\n              height: r.firstChild.attr(\"height\")\n            }) : n.attr({\n              width: r.attr(\"width\"),\n              height: r.attr(\"height\")\n            })), n.attr({\n              style: r.attr(\"style\")\n            }), a = (o = r.attributes).length; a--;) {\n              var m = o[a].name;\n              0 === m.indexOf(\"data-mce-p-\") && n.attr(m.substr(11), o[a].value);\n            }\n\n            \"script\" === s && n.attr(\"type\", \"text/javascript\"), (i = r.attr(\"data-mce-html\")) && ((c = new oe(\"#text\", 3)).raw = !0, c.value = U(d, unescape(i)), n.append(c)), r.replace(n);\n          }\n        }\n      });\n    }), d.on(\"SetContent\", function () {\n      d.$(\"span.mce-preview-object\").each(function (e, t) {\n        var r = d.$(t);\n        0 === r.find(\"span.mce-shim\").length && r.append('<span class=\"mce-shim\"></span>');\n      });\n    }), (n = e).on(\"click keyup touchend\", function () {\n      var e = n.selection.getNode();\n      e && n.dom.hasClass(e, \"mce-preview-object\") && n.dom.getAttrib(e, \"data-mce-selected\") && e.setAttribute(\"data-mce-selected\", \"2\");\n    }), n.on(\"ObjectSelected\", function (e) {\n      \"script\" === e.target.getAttribute(\"data-mce-object\") && e.preventDefault();\n    }), n.on(\"ObjectResized\", function (e) {\n      var t,\n          r = e.target;\n      !r.getAttribute(\"data-mce-object\") || (t = r.getAttribute(\"data-mce-html\")) && (t = unescape(t), r.setAttribute(\"data-mce-html\", escape(S(t, {\n        width: String(e.width),\n        height: String(e.height)\n      }))));\n    }), a = e, {\n      showDialog: function showDialog() {\n        N(a);\n      }\n    };\n  });\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/media/plugin.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/media/plugin.min.js"]();
/******/ 	
/******/ })()
;