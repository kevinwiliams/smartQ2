/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/lists/index.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/lists/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Exports the \"lists\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/lists')\n//   ES2015:\n//     import 'tinymce/plugins/lists'\n__webpack_require__(/*! ./plugin.js */ \"./resources/assets/core/plugins/custom/tinymce/plugins/lists/plugin.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL2xpc3RzL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQSxtQkFBTyxDQUFDLDJGQUFELENBQVAiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL2xpc3RzL2luZGV4LmpzP2Y0M2MiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRXhwb3J0cyB0aGUgXCJsaXN0c1wiIHBsdWdpbiBmb3IgdXNhZ2Ugd2l0aCBtb2R1bGUgbG9hZGVyc1xyXG4vLyBVc2FnZTpcclxuLy8gICBDb21tb25KUzpcclxuLy8gICAgIHJlcXVpcmUoJ3RpbnltY2UvcGx1Z2lucy9saXN0cycpXHJcbi8vICAgRVMyMDE1OlxyXG4vLyAgICAgaW1wb3J0ICd0aW55bWNlL3BsdWdpbnMvbGlzdHMnXHJcbnJlcXVpcmUoJy4vcGx1Z2luLmpzJyk7Il0sIm5hbWVzIjpbInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/lists/index.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/lists/plugin.js":
/*!******************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/lists/plugin.js ***!
  \******************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var global$7 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n\n  var isType$1 = function isType$1(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n\n  var isSimpleType = function isSimpleType(type) {\n    return function (value) {\n      return _typeof(value) === type;\n    };\n  };\n\n  var isString = isType$1('string');\n  var isObject = isType$1('object');\n  var isArray = isType$1('array');\n  var isBoolean = isSimpleType('boolean');\n  var isFunction = isSimpleType('function');\n  var isNumber = isSimpleType('number');\n\n  var noop = function noop() {};\n\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  var tripleEquals = function tripleEquals(a, b) {\n    return a === b;\n  };\n\n  var not = function not(f) {\n    return function (t) {\n      return !f(t);\n    };\n  };\n\n  var never = constant(false);\n  var always = constant(true);\n\n  var none = function none() {\n    return NONE;\n  };\n\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n\n  var some = function some(a) {\n    var constant_a = constant(a);\n\n    var self = function self() {\n      return me;\n    };\n\n    var bind = function bind(f) {\n      return f(a);\n    };\n\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n  var nativeSlice = Array.prototype.slice;\n  var nativePush = Array.prototype.push;\n\n  var map = function map(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n\n    return r;\n  };\n\n  var each$1 = function each$1(xs, f) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n\n  var filter$1 = function filter$1(xs, pred) {\n    var r = [];\n\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n\n      if (pred(x, i)) {\n        r.push(x);\n      }\n    }\n\n    return r;\n  };\n\n  var groupBy = function groupBy(xs, f) {\n    if (xs.length === 0) {\n      return [];\n    } else {\n      var wasType = f(xs[0]);\n      var r = [];\n      var group = [];\n\n      for (var i = 0, len = xs.length; i < len; i++) {\n        var x = xs[i];\n        var type = f(x);\n\n        if (type !== wasType) {\n          r.push(group);\n          group = [];\n        }\n\n        wasType = type;\n        group.push(x);\n      }\n\n      if (group.length !== 0) {\n        r.push(group);\n      }\n\n      return r;\n    }\n  };\n\n  var foldl = function foldl(xs, f, acc) {\n    each$1(xs, function (x, i) {\n      acc = f(acc, x, i);\n    });\n    return acc;\n  };\n\n  var findUntil = function findUntil(xs, pred, until) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n\n      if (pred(x, i)) {\n        return Optional.some(x);\n      } else if (until(x, i)) {\n        break;\n      }\n    }\n\n    return Optional.none();\n  };\n\n  var find$1 = function find$1(xs, pred) {\n    return findUntil(xs, pred, never);\n  };\n\n  var flatten = function flatten(xs) {\n    var r = [];\n\n    for (var i = 0, len = xs.length; i < len; ++i) {\n      if (!isArray(xs[i])) {\n        throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n      }\n\n      nativePush.apply(r, xs[i]);\n    }\n\n    return r;\n  };\n\n  var bind = function bind(xs, f) {\n    return flatten(map(xs, f));\n  };\n\n  var reverse = function reverse(xs) {\n    var r = nativeSlice.call(xs, 0);\n    r.reverse();\n    return r;\n  };\n\n  var get$1 = function get$1(xs, i) {\n    return i >= 0 && i < xs.length ? Optional.some(xs[i]) : Optional.none();\n  };\n\n  var head = function head(xs) {\n    return get$1(xs, 0);\n  };\n\n  var last = function last(xs) {\n    return get$1(xs, xs.length - 1);\n  };\n\n  var findMap = function findMap(arr, f) {\n    for (var i = 0; i < arr.length; i++) {\n      var r = f(arr[i], i);\n\n      if (r.isSome()) {\n        return r;\n      }\n    }\n\n    return Optional.none();\n  };\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) {\n          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n      }\n\n      return t;\n    };\n\n    return _assign.apply(this, arguments);\n  };\n\n  function __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n        if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n        ar[i] = from[i];\n      }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n  }\n\n  var cached = function cached(f) {\n    var called = false;\n    var r;\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      if (!called) {\n        called = true;\n        r = f.apply(null, args);\n      }\n\n      return r;\n    };\n  };\n\n  var DeviceType = function DeviceType(os, browser, userAgent, mediaMatch) {\n    var isiPad = os.isiOS() && /ipad/i.test(userAgent) === true;\n    var isiPhone = os.isiOS() && !isiPad;\n    var isMobile = os.isiOS() || os.isAndroid();\n    var isTouch = isMobile || mediaMatch('(pointer:coarse)');\n    var isTablet = isiPad || !isiPhone && isMobile && mediaMatch('(min-device-width:768px)');\n    var isPhone = isiPhone || isMobile && !isTablet;\n    var iOSwebview = browser.isSafari() && os.isiOS() && /safari/i.test(userAgent) === false;\n    var isDesktop = !isPhone && !isTablet && !iOSwebview;\n    return {\n      isiPad: constant(isiPad),\n      isiPhone: constant(isiPhone),\n      isTablet: constant(isTablet),\n      isPhone: constant(isPhone),\n      isTouch: constant(isTouch),\n      isAndroid: os.isAndroid,\n      isiOS: os.isiOS,\n      isWebView: constant(iOSwebview),\n      isDesktop: constant(isDesktop)\n    };\n  };\n\n  var firstMatch = function firstMatch(regexes, s) {\n    for (var i = 0; i < regexes.length; i++) {\n      var x = regexes[i];\n\n      if (x.test(s)) {\n        return x;\n      }\n    }\n\n    return undefined;\n  };\n\n  var find = function find(regexes, agent) {\n    var r = firstMatch(regexes, agent);\n\n    if (!r) {\n      return {\n        major: 0,\n        minor: 0\n      };\n    }\n\n    var group = function group(i) {\n      return Number(agent.replace(r, '$' + i));\n    };\n\n    return nu$2(group(1), group(2));\n  };\n\n  var detect$3 = function detect$3(versionRegexes, agent) {\n    var cleanedAgent = String(agent).toLowerCase();\n\n    if (versionRegexes.length === 0) {\n      return unknown$2();\n    }\n\n    return find(versionRegexes, cleanedAgent);\n  };\n\n  var unknown$2 = function unknown$2() {\n    return nu$2(0, 0);\n  };\n\n  var nu$2 = function nu$2(major, minor) {\n    return {\n      major: major,\n      minor: minor\n    };\n  };\n\n  var Version = {\n    nu: nu$2,\n    detect: detect$3,\n    unknown: unknown$2\n  };\n\n  var detectBrowser$1 = function detectBrowser$1(browsers, userAgentData) {\n    return findMap(userAgentData.brands, function (uaBrand) {\n      var lcBrand = uaBrand.brand.toLowerCase();\n      return find$1(browsers, function (browser) {\n        var _a;\n\n        return lcBrand === ((_a = browser.brand) === null || _a === void 0 ? void 0 : _a.toLowerCase());\n      }).map(function (info) {\n        return {\n          current: info.name,\n          version: Version.nu(parseInt(uaBrand.version, 10), 0)\n        };\n      });\n    });\n  };\n\n  var detect$2 = function detect$2(candidates, userAgent) {\n    var agent = String(userAgent).toLowerCase();\n    return find$1(candidates, function (candidate) {\n      return candidate.search(agent);\n    });\n  };\n\n  var detectBrowser = function detectBrowser(browsers, userAgent) {\n    return detect$2(browsers, userAgent).map(function (browser) {\n      var version = Version.detect(browser.versionRegexes, userAgent);\n      return {\n        current: browser.name,\n        version: version\n      };\n    });\n  };\n\n  var detectOs = function detectOs(oses, userAgent) {\n    return detect$2(oses, userAgent).map(function (os) {\n      var version = Version.detect(os.versionRegexes, userAgent);\n      return {\n        current: os.name,\n        version: version\n      };\n    });\n  };\n\n  var contains$1 = function contains$1(str, substr) {\n    return str.indexOf(substr) !== -1;\n  };\n\n  var blank = function blank(r) {\n    return function (s) {\n      return s.replace(r, '');\n    };\n  };\n\n  var trim = blank(/^\\s+|\\s+$/g);\n\n  var isNotEmpty = function isNotEmpty(s) {\n    return s.length > 0;\n  };\n\n  var isEmpty$1 = function isEmpty$1(s) {\n    return !isNotEmpty(s);\n  };\n\n  var normalVersionRegex = /.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/;\n\n  var checkContains = function checkContains(target) {\n    return function (uastring) {\n      return contains$1(uastring, target);\n    };\n  };\n\n  var browsers = [{\n    name: 'Edge',\n    versionRegexes: [/.*?edge\\/ ?([0-9]+)\\.([0-9]+)$/],\n    search: function search(uastring) {\n      return contains$1(uastring, 'edge/') && contains$1(uastring, 'chrome') && contains$1(uastring, 'safari') && contains$1(uastring, 'applewebkit');\n    }\n  }, {\n    name: 'Chrome',\n    brand: 'Chromium',\n    versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/, normalVersionRegex],\n    search: function search(uastring) {\n      return contains$1(uastring, 'chrome') && !contains$1(uastring, 'chromeframe');\n    }\n  }, {\n    name: 'IE',\n    versionRegexes: [/.*?msie\\ ?([0-9]+)\\.([0-9]+).*/, /.*?rv:([0-9]+)\\.([0-9]+).*/],\n    search: function search(uastring) {\n      return contains$1(uastring, 'msie') || contains$1(uastring, 'trident');\n    }\n  }, {\n    name: 'Opera',\n    versionRegexes: [normalVersionRegex, /.*?opera\\/([0-9]+)\\.([0-9]+).*/],\n    search: checkContains('opera')\n  }, {\n    name: 'Firefox',\n    versionRegexes: [/.*?firefox\\/\\ ?([0-9]+)\\.([0-9]+).*/],\n    search: checkContains('firefox')\n  }, {\n    name: 'Safari',\n    versionRegexes: [normalVersionRegex, /.*?cpu os ([0-9]+)_([0-9]+).*/],\n    search: function search(uastring) {\n      return (contains$1(uastring, 'safari') || contains$1(uastring, 'mobile/')) && contains$1(uastring, 'applewebkit');\n    }\n  }];\n  var oses = [{\n    name: 'Windows',\n    search: checkContains('win'),\n    versionRegexes: [/.*?windows\\ nt\\ ?([0-9]+)\\.([0-9]+).*/]\n  }, {\n    name: 'iOS',\n    search: function search(uastring) {\n      return contains$1(uastring, 'iphone') || contains$1(uastring, 'ipad');\n    },\n    versionRegexes: [/.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/, /.*cpu os ([0-9]+)_([0-9]+).*/, /.*cpu iphone os ([0-9]+)_([0-9]+).*/]\n  }, {\n    name: 'Android',\n    search: checkContains('android'),\n    versionRegexes: [/.*?android\\ ?([0-9]+)\\.([0-9]+).*/]\n  }, {\n    name: 'OSX',\n    search: checkContains('mac os x'),\n    versionRegexes: [/.*?mac\\ os\\ x\\ ?([0-9]+)_([0-9]+).*/]\n  }, {\n    name: 'Linux',\n    search: checkContains('linux'),\n    versionRegexes: []\n  }, {\n    name: 'Solaris',\n    search: checkContains('sunos'),\n    versionRegexes: []\n  }, {\n    name: 'FreeBSD',\n    search: checkContains('freebsd'),\n    versionRegexes: []\n  }, {\n    name: 'ChromeOS',\n    search: checkContains('cros'),\n    versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/]\n  }];\n  var PlatformInfo = {\n    browsers: constant(browsers),\n    oses: constant(oses)\n  };\n  var edge = 'Edge';\n  var chrome = 'Chrome';\n  var ie = 'IE';\n  var opera = 'Opera';\n  var firefox = 'Firefox';\n  var safari = 'Safari';\n\n  var unknown$1 = function unknown$1() {\n    return nu$1({\n      current: undefined,\n      version: Version.unknown()\n    });\n  };\n\n  var nu$1 = function nu$1(info) {\n    var current = info.current;\n    var version = info.version;\n\n    var isBrowser = function isBrowser(name) {\n      return function () {\n        return current === name;\n      };\n    };\n\n    return {\n      current: current,\n      version: version,\n      isEdge: isBrowser(edge),\n      isChrome: isBrowser(chrome),\n      isIE: isBrowser(ie),\n      isOpera: isBrowser(opera),\n      isFirefox: isBrowser(firefox),\n      isSafari: isBrowser(safari)\n    };\n  };\n\n  var Browser = {\n    unknown: unknown$1,\n    nu: nu$1,\n    edge: constant(edge),\n    chrome: constant(chrome),\n    ie: constant(ie),\n    opera: constant(opera),\n    firefox: constant(firefox),\n    safari: constant(safari)\n  };\n  var windows = 'Windows';\n  var ios = 'iOS';\n  var android = 'Android';\n  var linux = 'Linux';\n  var osx = 'OSX';\n  var solaris = 'Solaris';\n  var freebsd = 'FreeBSD';\n  var chromeos = 'ChromeOS';\n\n  var unknown = function unknown() {\n    return nu({\n      current: undefined,\n      version: Version.unknown()\n    });\n  };\n\n  var nu = function nu(info) {\n    var current = info.current;\n    var version = info.version;\n\n    var isOS = function isOS(name) {\n      return function () {\n        return current === name;\n      };\n    };\n\n    return {\n      current: current,\n      version: version,\n      isWindows: isOS(windows),\n      isiOS: isOS(ios),\n      isAndroid: isOS(android),\n      isOSX: isOS(osx),\n      isLinux: isOS(linux),\n      isSolaris: isOS(solaris),\n      isFreeBSD: isOS(freebsd),\n      isChromeOS: isOS(chromeos)\n    };\n  };\n\n  var OperatingSystem = {\n    unknown: unknown,\n    nu: nu,\n    windows: constant(windows),\n    ios: constant(ios),\n    android: constant(android),\n    linux: constant(linux),\n    osx: constant(osx),\n    solaris: constant(solaris),\n    freebsd: constant(freebsd),\n    chromeos: constant(chromeos)\n  };\n\n  var detect$1 = function detect$1(userAgent, userAgentDataOpt, mediaMatch) {\n    var browsers = PlatformInfo.browsers();\n    var oses = PlatformInfo.oses();\n    var browser = userAgentDataOpt.bind(function (userAgentData) {\n      return detectBrowser$1(browsers, userAgentData);\n    }).orThunk(function () {\n      return detectBrowser(browsers, userAgent);\n    }).fold(Browser.unknown, Browser.nu);\n    var os = detectOs(oses, userAgent).fold(OperatingSystem.unknown, OperatingSystem.nu);\n    var deviceType = DeviceType(os, browser, userAgent, mediaMatch);\n    return {\n      browser: browser,\n      os: os,\n      deviceType: deviceType\n    };\n  };\n\n  var PlatformDetection = {\n    detect: detect$1\n  };\n\n  var mediaMatch = function mediaMatch(query) {\n    return window.matchMedia(query).matches;\n  };\n\n  var platform = cached(function () {\n    return PlatformDetection.detect(navigator.userAgent, Optional.from(navigator.userAgentData), mediaMatch);\n  });\n\n  var detect = function detect() {\n    return platform();\n  };\n\n  var compareDocumentPosition = function compareDocumentPosition(a, b, match) {\n    return (a.compareDocumentPosition(b) & match) !== 0;\n  };\n\n  var documentPositionContainedBy = function documentPositionContainedBy(a, b) {\n    return compareDocumentPosition(a, b, Node.DOCUMENT_POSITION_CONTAINED_BY);\n  };\n\n  var ELEMENT = 1;\n\n  var fromHtml = function fromHtml(html, scope) {\n    var doc = scope || document;\n    var div = doc.createElement('div');\n    div.innerHTML = html;\n\n    if (!div.hasChildNodes() || div.childNodes.length > 1) {\n      console.error('HTML does not have a single root node', html);\n      throw new Error('HTML must have a single root node');\n    }\n\n    return fromDom(div.childNodes[0]);\n  };\n\n  var fromTag = function fromTag(tag, scope) {\n    var doc = scope || document;\n    var node = doc.createElement(tag);\n    return fromDom(node);\n  };\n\n  var fromText = function fromText(text, scope) {\n    var doc = scope || document;\n    var node = doc.createTextNode(text);\n    return fromDom(node);\n  };\n\n  var fromDom = function fromDom(node) {\n    if (node === null || node === undefined) {\n      throw new Error('Node cannot be null or undefined');\n    }\n\n    return {\n      dom: node\n    };\n  };\n\n  var fromPoint = function fromPoint(docElm, x, y) {\n    return Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom);\n  };\n\n  var SugarElement = {\n    fromHtml: fromHtml,\n    fromTag: fromTag,\n    fromText: fromText,\n    fromDom: fromDom,\n    fromPoint: fromPoint\n  };\n\n  var is$2 = function is$2(element, selector) {\n    var dom = element.dom;\n\n    if (dom.nodeType !== ELEMENT) {\n      return false;\n    } else {\n      var elem = dom;\n\n      if (elem.matches !== undefined) {\n        return elem.matches(selector);\n      } else if (elem.msMatchesSelector !== undefined) {\n        return elem.msMatchesSelector(selector);\n      } else if (elem.webkitMatchesSelector !== undefined) {\n        return elem.webkitMatchesSelector(selector);\n      } else if (elem.mozMatchesSelector !== undefined) {\n        return elem.mozMatchesSelector(selector);\n      } else {\n        throw new Error('Browser lacks native selectors');\n      }\n    }\n  };\n\n  var eq = function eq(e1, e2) {\n    return e1.dom === e2.dom;\n  };\n\n  var regularContains = function regularContains(e1, e2) {\n    var d1 = e1.dom;\n    var d2 = e2.dom;\n    return d1 === d2 ? false : d1.contains(d2);\n  };\n\n  var ieContains = function ieContains(e1, e2) {\n    return documentPositionContainedBy(e1.dom, e2.dom);\n  };\n\n  var contains = function contains(e1, e2) {\n    return detect().browser.isIE() ? ieContains(e1, e2) : regularContains(e1, e2);\n  };\n\n  var is$1 = is$2;\n  var global$6 = tinymce.util.Tools.resolve('tinymce.dom.RangeUtils');\n  var global$5 = tinymce.util.Tools.resolve('tinymce.dom.TreeWalker');\n  var global$4 = tinymce.util.Tools.resolve('tinymce.util.VK');\n  var keys = Object.keys;\n\n  var each = function each(obj, f) {\n    var props = keys(obj);\n\n    for (var k = 0, len = props.length; k < len; k++) {\n      var i = props[k];\n      var x = obj[i];\n      f(x, i);\n    }\n  };\n\n  var objAcc = function objAcc(r) {\n    return function (x, i) {\n      r[i] = x;\n    };\n  };\n\n  var internalFilter = function internalFilter(obj, pred, onTrue, onFalse) {\n    var r = {};\n    each(obj, function (x, i) {\n      (pred(x, i) ? onTrue : onFalse)(x, i);\n    });\n    return r;\n  };\n\n  var filter = function filter(obj, pred) {\n    var t = {};\n    internalFilter(obj, pred, objAcc(t), noop);\n    return t;\n  };\n\n  typeof window !== 'undefined' ? window : Function('return this;')();\n\n  var name = function name(element) {\n    var r = element.dom.nodeName;\n    return r.toLowerCase();\n  };\n\n  var type = function type(element) {\n    return element.dom.nodeType;\n  };\n\n  var isType = function isType(t) {\n    return function (element) {\n      return type(element) === t;\n    };\n  };\n\n  var isElement = isType(ELEMENT);\n\n  var isTag = function isTag(tag) {\n    return function (e) {\n      return isElement(e) && name(e) === tag;\n    };\n  };\n\n  var rawSet = function rawSet(dom, key, value) {\n    if (isString(value) || isBoolean(value) || isNumber(value)) {\n      dom.setAttribute(key, value + '');\n    } else {\n      console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n      throw new Error('Attribute value was not simple');\n    }\n  };\n\n  var setAll = function setAll(element, attrs) {\n    var dom = element.dom;\n    each(attrs, function (v, k) {\n      rawSet(dom, k, v);\n    });\n  };\n\n  var clone$1 = function clone$1(element) {\n    return foldl(element.dom.attributes, function (acc, attr) {\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n  };\n\n  var parent = function parent(element) {\n    return Optional.from(element.dom.parentNode).map(SugarElement.fromDom);\n  };\n\n  var children = function children(element) {\n    return map(element.dom.childNodes, SugarElement.fromDom);\n  };\n\n  var child = function child(element, index) {\n    var cs = element.dom.childNodes;\n    return Optional.from(cs[index]).map(SugarElement.fromDom);\n  };\n\n  var firstChild = function firstChild(element) {\n    return child(element, 0);\n  };\n\n  var lastChild = function lastChild(element) {\n    return child(element, element.dom.childNodes.length - 1);\n  };\n\n  var before$1 = function before$1(marker, element) {\n    var parent$1 = parent(marker);\n    parent$1.each(function (v) {\n      v.dom.insertBefore(element.dom, marker.dom);\n    });\n  };\n\n  var append$1 = function append$1(parent, element) {\n    parent.dom.appendChild(element.dom);\n  };\n\n  var before = function before(marker, elements) {\n    each$1(elements, function (x) {\n      before$1(marker, x);\n    });\n  };\n\n  var append = function append(parent, elements) {\n    each$1(elements, function (x) {\n      append$1(parent, x);\n    });\n  };\n\n  var remove = function remove(element) {\n    var dom = element.dom;\n\n    if (dom.parentNode !== null) {\n      dom.parentNode.removeChild(dom);\n    }\n  };\n\n  var clone = function clone(original, isDeep) {\n    return SugarElement.fromDom(original.dom.cloneNode(isDeep));\n  };\n\n  var deep = function deep(original) {\n    return clone(original, true);\n  };\n\n  var shallowAs = function shallowAs(original, tag) {\n    var nu = SugarElement.fromTag(tag);\n    var attributes = clone$1(original);\n    setAll(nu, attributes);\n    return nu;\n  };\n\n  var mutate = function mutate(original, tag) {\n    var nu = shallowAs(original, tag);\n    before$1(original, nu);\n    var children$1 = children(original);\n    append(nu, children$1);\n    remove(original);\n    return nu;\n  };\n\n  var global$3 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n  var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n  var matchNodeName = function matchNodeName(name) {\n    return function (node) {\n      return node && node.nodeName.toLowerCase() === name;\n    };\n  };\n\n  var matchNodeNames = function matchNodeNames(regex) {\n    return function (node) {\n      return node && regex.test(node.nodeName);\n    };\n  };\n\n  var isTextNode = function isTextNode(node) {\n    return node && node.nodeType === 3;\n  };\n\n  var isListNode = matchNodeNames(/^(OL|UL|DL)$/);\n  var isOlUlNode = matchNodeNames(/^(OL|UL)$/);\n  var isOlNode = matchNodeName('ol');\n  var isListItemNode = matchNodeNames(/^(LI|DT|DD)$/);\n  var isDlItemNode = matchNodeNames(/^(DT|DD)$/);\n  var isTableCellNode = matchNodeNames(/^(TH|TD)$/);\n  var isBr = matchNodeName('br');\n\n  var isFirstChild = function isFirstChild(node) {\n    return node.parentNode.firstChild === node;\n  };\n\n  var isTextBlock = function isTextBlock(editor, node) {\n    return node && !!editor.schema.getTextBlockElements()[node.nodeName];\n  };\n\n  var isBlock = function isBlock(node, blockElements) {\n    return node && node.nodeName in blockElements;\n  };\n\n  var isBogusBr = function isBogusBr(dom, node) {\n    if (!isBr(node)) {\n      return false;\n    }\n\n    return dom.isBlock(node.nextSibling) && !isBr(node.previousSibling);\n  };\n\n  var isEmpty = function isEmpty(dom, elm, keepBookmarks) {\n    var empty = dom.isEmpty(elm);\n\n    if (keepBookmarks && dom.select('span[data-mce-type=bookmark]', elm).length > 0) {\n      return false;\n    }\n\n    return empty;\n  };\n\n  var isChildOfBody = function isChildOfBody(dom, elm) {\n    return dom.isChildOf(elm, dom.getRoot());\n  };\n\n  var shouldIndentOnTab = function shouldIndentOnTab(editor) {\n    return editor.getParam('lists_indent_on_tab', true);\n  };\n\n  var getForcedRootBlock = function getForcedRootBlock(editor) {\n    var block = editor.getParam('forced_root_block', 'p');\n\n    if (block === false) {\n      return '';\n    } else if (block === true) {\n      return 'p';\n    } else {\n      return block;\n    }\n  };\n\n  var getForcedRootBlockAttrs = function getForcedRootBlockAttrs(editor) {\n    return editor.getParam('forced_root_block_attrs', {});\n  };\n\n  var createTextBlock = function createTextBlock(editor, contentNode) {\n    var dom = editor.dom;\n    var blockElements = editor.schema.getBlockElements();\n    var fragment = dom.createFragment();\n    var blockName = getForcedRootBlock(editor);\n    var node, textBlock, hasContentNode;\n\n    if (blockName) {\n      textBlock = dom.create(blockName);\n\n      if (textBlock.tagName === blockName.toUpperCase()) {\n        dom.setAttribs(textBlock, getForcedRootBlockAttrs(editor));\n      }\n\n      if (!isBlock(contentNode.firstChild, blockElements)) {\n        fragment.appendChild(textBlock);\n      }\n    }\n\n    if (contentNode) {\n      while (node = contentNode.firstChild) {\n        var nodeName = node.nodeName;\n\n        if (!hasContentNode && (nodeName !== 'SPAN' || node.getAttribute('data-mce-type') !== 'bookmark')) {\n          hasContentNode = true;\n        }\n\n        if (isBlock(node, blockElements)) {\n          fragment.appendChild(node);\n          textBlock = null;\n        } else {\n          if (blockName) {\n            if (!textBlock) {\n              textBlock = dom.create(blockName);\n              fragment.appendChild(textBlock);\n            }\n\n            textBlock.appendChild(node);\n          } else {\n            fragment.appendChild(node);\n          }\n        }\n      }\n    }\n\n    if (!blockName) {\n      fragment.appendChild(dom.create('br'));\n    } else {\n      if (!hasContentNode) {\n        textBlock.appendChild(dom.create('br', {\n          'data-mce-bogus': '1'\n        }));\n      }\n    }\n\n    return fragment;\n  };\n\n  var DOM$2 = global$3.DOM;\n\n  var splitList = function splitList(editor, list, li) {\n    var removeAndKeepBookmarks = function removeAndKeepBookmarks(targetNode) {\n      global$2.each(bookmarks, function (node) {\n        targetNode.parentNode.insertBefore(node, li.parentNode);\n      });\n      DOM$2.remove(targetNode);\n    };\n\n    var bookmarks = DOM$2.select('span[data-mce-type=\"bookmark\"]', list);\n    var newBlock = createTextBlock(editor, li);\n    var tmpRng = DOM$2.createRng();\n    tmpRng.setStartAfter(li);\n    tmpRng.setEndAfter(list);\n    var fragment = tmpRng.extractContents();\n\n    for (var node = fragment.firstChild; node; node = node.firstChild) {\n      if (node.nodeName === 'LI' && editor.dom.isEmpty(node)) {\n        DOM$2.remove(node);\n        break;\n      }\n    }\n\n    if (!editor.dom.isEmpty(fragment)) {\n      DOM$2.insertAfter(fragment, list);\n    }\n\n    DOM$2.insertAfter(newBlock, list);\n\n    if (isEmpty(editor.dom, li.parentNode)) {\n      removeAndKeepBookmarks(li.parentNode);\n    }\n\n    DOM$2.remove(li);\n\n    if (isEmpty(editor.dom, list)) {\n      DOM$2.remove(list);\n    }\n  };\n\n  var isDescriptionDetail = isTag('dd');\n  var isDescriptionTerm = isTag('dt');\n\n  var outdentDlItem = function outdentDlItem(editor, item) {\n    if (isDescriptionDetail(item)) {\n      mutate(item, 'dt');\n    } else if (isDescriptionTerm(item)) {\n      parent(item).each(function (dl) {\n        return splitList(editor, dl.dom, item.dom);\n      });\n    }\n  };\n\n  var indentDlItem = function indentDlItem(item) {\n    if (isDescriptionTerm(item)) {\n      mutate(item, 'dd');\n    }\n  };\n\n  var dlIndentation = function dlIndentation(editor, indentation, dlItems) {\n    if (indentation === 'Indent') {\n      each$1(dlItems, indentDlItem);\n    } else {\n      each$1(dlItems, function (item) {\n        return outdentDlItem(editor, item);\n      });\n    }\n  };\n\n  var getNormalizedPoint = function getNormalizedPoint(container, offset) {\n    if (isTextNode(container)) {\n      return {\n        container: container,\n        offset: offset\n      };\n    }\n\n    var node = global$6.getNode(container, offset);\n\n    if (isTextNode(node)) {\n      return {\n        container: node,\n        offset: offset >= container.childNodes.length ? node.data.length : 0\n      };\n    } else if (node.previousSibling && isTextNode(node.previousSibling)) {\n      return {\n        container: node.previousSibling,\n        offset: node.previousSibling.data.length\n      };\n    } else if (node.nextSibling && isTextNode(node.nextSibling)) {\n      return {\n        container: node.nextSibling,\n        offset: 0\n      };\n    }\n\n    return {\n      container: container,\n      offset: offset\n    };\n  };\n\n  var normalizeRange = function normalizeRange(rng) {\n    var outRng = rng.cloneRange();\n    var rangeStart = getNormalizedPoint(rng.startContainer, rng.startOffset);\n    outRng.setStart(rangeStart.container, rangeStart.offset);\n    var rangeEnd = getNormalizedPoint(rng.endContainer, rng.endOffset);\n    outRng.setEnd(rangeEnd.container, rangeEnd.offset);\n    return outRng;\n  };\n\n  var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DomQuery');\n\n  var getParentList = function getParentList(editor, node) {\n    var selectionStart = node || editor.selection.getStart(true);\n    return editor.dom.getParent(selectionStart, 'OL,UL,DL', getClosestListRootElm(editor, selectionStart));\n  };\n\n  var isParentListSelected = function isParentListSelected(parentList, selectedBlocks) {\n    return parentList && selectedBlocks.length === 1 && selectedBlocks[0] === parentList;\n  };\n\n  var findSubLists = function findSubLists(parentList) {\n    return filter$1(parentList.querySelectorAll('ol,ul,dl'), isListNode);\n  };\n\n  var getSelectedSubLists = function getSelectedSubLists(editor) {\n    var parentList = getParentList(editor);\n    var selectedBlocks = editor.selection.getSelectedBlocks();\n\n    if (isParentListSelected(parentList, selectedBlocks)) {\n      return findSubLists(parentList);\n    } else {\n      return filter$1(selectedBlocks, function (elm) {\n        return isListNode(elm) && parentList !== elm;\n      });\n    }\n  };\n\n  var findParentListItemsNodes = function findParentListItemsNodes(editor, elms) {\n    var listItemsElms = global$2.map(elms, function (elm) {\n      var parentLi = editor.dom.getParent(elm, 'li,dd,dt', getClosestListRootElm(editor, elm));\n      return parentLi ? parentLi : elm;\n    });\n    return global$1.unique(listItemsElms);\n  };\n\n  var getSelectedListItems = function getSelectedListItems(editor) {\n    var selectedBlocks = editor.selection.getSelectedBlocks();\n    return filter$1(findParentListItemsNodes(editor, selectedBlocks), isListItemNode);\n  };\n\n  var getSelectedDlItems = function getSelectedDlItems(editor) {\n    return filter$1(getSelectedListItems(editor), isDlItemNode);\n  };\n\n  var getClosestListRootElm = function getClosestListRootElm(editor, elm) {\n    var parentTableCell = editor.dom.getParents(elm, 'TD,TH');\n    return parentTableCell.length > 0 ? parentTableCell[0] : editor.getBody();\n  };\n\n  var findLastParentListNode = function findLastParentListNode(editor, elm) {\n    var parentLists = editor.dom.getParents(elm, 'ol,ul', getClosestListRootElm(editor, elm));\n    return last(parentLists);\n  };\n\n  var getSelectedLists = function getSelectedLists(editor) {\n    var firstList = findLastParentListNode(editor, editor.selection.getStart());\n    var subsequentLists = filter$1(editor.selection.getSelectedBlocks(), isOlUlNode);\n    return firstList.toArray().concat(subsequentLists);\n  };\n\n  var getSelectedListRoots = function getSelectedListRoots(editor) {\n    var selectedLists = getSelectedLists(editor);\n    return getUniqueListRoots(editor, selectedLists);\n  };\n\n  var getUniqueListRoots = function getUniqueListRoots(editor, lists) {\n    var listRoots = map(lists, function (list) {\n      return findLastParentListNode(editor, list).getOr(list);\n    });\n    return global$1.unique(listRoots);\n  };\n\n  var is = function is(lhs, rhs, comparator) {\n    if (comparator === void 0) {\n      comparator = tripleEquals;\n    }\n\n    return lhs.exists(function (left) {\n      return comparator(left, rhs);\n    });\n  };\n\n  var lift2 = function lift2(oa, ob, f) {\n    return oa.isSome() && ob.isSome() ? Optional.some(f(oa.getOrDie(), ob.getOrDie())) : Optional.none();\n  };\n\n  var fromElements = function fromElements(elements, scope) {\n    var doc = scope || document;\n    var fragment = doc.createDocumentFragment();\n    each$1(elements, function (element) {\n      fragment.appendChild(element.dom);\n    });\n    return SugarElement.fromDom(fragment);\n  };\n\n  var fireListEvent = function fireListEvent(editor, action, element) {\n    return editor.fire('ListMutation', {\n      action: action,\n      element: element\n    });\n  };\n\n  var isSupported = function isSupported(dom) {\n    return dom.style !== undefined && isFunction(dom.style.getPropertyValue);\n  };\n\n  var internalSet = function internalSet(dom, property, value) {\n    if (!isString(value)) {\n      console.error('Invalid call to CSS.set. Property ', property, ':: Value ', value, ':: Element ', dom);\n      throw new Error('CSS value must be a string: ' + value);\n    }\n\n    if (isSupported(dom)) {\n      dom.style.setProperty(property, value);\n    }\n  };\n\n  var set = function set(element, property, value) {\n    var dom = element.dom;\n    internalSet(dom, property, value);\n  };\n\n  var joinSegment = function joinSegment(parent, child) {\n    append$1(parent.item, child.list);\n  };\n\n  var joinSegments = function joinSegments(segments) {\n    for (var i = 1; i < segments.length; i++) {\n      joinSegment(segments[i - 1], segments[i]);\n    }\n  };\n\n  var appendSegments = function appendSegments(head$1, tail) {\n    lift2(last(head$1), head(tail), joinSegment);\n  };\n\n  var createSegment = function createSegment(scope, listType) {\n    var segment = {\n      list: SugarElement.fromTag(listType, scope),\n      item: SugarElement.fromTag('li', scope)\n    };\n    append$1(segment.list, segment.item);\n    return segment;\n  };\n\n  var createSegments = function createSegments(scope, entry, size) {\n    var segments = [];\n\n    for (var i = 0; i < size; i++) {\n      segments.push(createSegment(scope, entry.listType));\n    }\n\n    return segments;\n  };\n\n  var populateSegments = function populateSegments(segments, entry) {\n    for (var i = 0; i < segments.length - 1; i++) {\n      set(segments[i].item, 'list-style-type', 'none');\n    }\n\n    last(segments).each(function (segment) {\n      setAll(segment.list, entry.listAttributes);\n      setAll(segment.item, entry.itemAttributes);\n      append(segment.item, entry.content);\n    });\n  };\n\n  var normalizeSegment = function normalizeSegment(segment, entry) {\n    if (name(segment.list) !== entry.listType) {\n      segment.list = mutate(segment.list, entry.listType);\n    }\n\n    setAll(segment.list, entry.listAttributes);\n  };\n\n  var createItem = function createItem(scope, attr, content) {\n    var item = SugarElement.fromTag('li', scope);\n    setAll(item, attr);\n    append(item, content);\n    return item;\n  };\n\n  var appendItem = function appendItem(segment, item) {\n    append$1(segment.list, item);\n    segment.item = item;\n  };\n\n  var writeShallow = function writeShallow(scope, cast, entry) {\n    var newCast = cast.slice(0, entry.depth);\n    last(newCast).each(function (segment) {\n      var item = createItem(scope, entry.itemAttributes, entry.content);\n      appendItem(segment, item);\n      normalizeSegment(segment, entry);\n    });\n    return newCast;\n  };\n\n  var writeDeep = function writeDeep(scope, cast, entry) {\n    var segments = createSegments(scope, entry, entry.depth - cast.length);\n    joinSegments(segments);\n    populateSegments(segments, entry);\n    appendSegments(cast, segments);\n    return cast.concat(segments);\n  };\n\n  var composeList = function composeList(scope, entries) {\n    var cast = foldl(entries, function (cast, entry) {\n      return entry.depth > cast.length ? writeDeep(scope, cast, entry) : writeShallow(scope, cast, entry);\n    }, []);\n    return head(cast).map(function (segment) {\n      return segment.list;\n    });\n  };\n\n  var isList = function isList(el) {\n    return is$1(el, 'OL,UL');\n  };\n\n  var hasFirstChildList = function hasFirstChildList(el) {\n    return firstChild(el).exists(isList);\n  };\n\n  var hasLastChildList = function hasLastChildList(el) {\n    return lastChild(el).exists(isList);\n  };\n\n  var isIndented = function isIndented(entry) {\n    return entry.depth > 0;\n  };\n\n  var isSelected = function isSelected(entry) {\n    return entry.isSelected;\n  };\n\n  var cloneItemContent = function cloneItemContent(li) {\n    var children$1 = children(li);\n    var content = hasLastChildList(li) ? children$1.slice(0, -1) : children$1;\n    return map(content, deep);\n  };\n\n  var createEntry = function createEntry(li, depth, isSelected) {\n    return parent(li).filter(isElement).map(function (list) {\n      return {\n        depth: depth,\n        dirty: false,\n        isSelected: isSelected,\n        content: cloneItemContent(li),\n        itemAttributes: clone$1(li),\n        listAttributes: clone$1(list),\n        listType: name(list)\n      };\n    });\n  };\n\n  var indentEntry = function indentEntry(indentation, entry) {\n    switch (indentation) {\n      case 'Indent':\n        entry.depth++;\n        break;\n\n      case 'Outdent':\n        entry.depth--;\n        break;\n\n      case 'Flatten':\n        entry.depth = 0;\n    }\n\n    entry.dirty = true;\n  };\n\n  var cloneListProperties = function cloneListProperties(target, source) {\n    target.listType = source.listType;\n    target.listAttributes = _assign({}, source.listAttributes);\n  };\n\n  var cleanListProperties = function cleanListProperties(entry) {\n    entry.listAttributes = filter(entry.listAttributes, function (_value, key) {\n      return key !== 'start';\n    });\n  };\n\n  var closestSiblingEntry = function closestSiblingEntry(entries, start) {\n    var depth = entries[start].depth;\n\n    var matches = function matches(entry) {\n      return entry.depth === depth && !entry.dirty;\n    };\n\n    var until = function until(entry) {\n      return entry.depth < depth;\n    };\n\n    return findUntil(reverse(entries.slice(0, start)), matches, until).orThunk(function () {\n      return findUntil(entries.slice(start + 1), matches, until);\n    });\n  };\n\n  var normalizeEntries = function normalizeEntries(entries) {\n    each$1(entries, function (entry, i) {\n      closestSiblingEntry(entries, i).fold(function () {\n        if (entry.dirty) {\n          cleanListProperties(entry);\n        }\n      }, function (matchingEntry) {\n        return cloneListProperties(entry, matchingEntry);\n      });\n    });\n    return entries;\n  };\n\n  var Cell = function Cell(initial) {\n    var value = initial;\n\n    var get = function get() {\n      return value;\n    };\n\n    var set = function set(v) {\n      value = v;\n    };\n\n    return {\n      get: get,\n      set: set\n    };\n  };\n\n  var parseItem = function parseItem(depth, itemSelection, selectionState, item) {\n    return firstChild(item).filter(isList).fold(function () {\n      itemSelection.each(function (selection) {\n        if (eq(selection.start, item)) {\n          selectionState.set(true);\n        }\n      });\n      var currentItemEntry = createEntry(item, depth, selectionState.get());\n      itemSelection.each(function (selection) {\n        if (eq(selection.end, item)) {\n          selectionState.set(false);\n        }\n      });\n      var childListEntries = lastChild(item).filter(isList).map(function (list) {\n        return parseList(depth, itemSelection, selectionState, list);\n      }).getOr([]);\n      return currentItemEntry.toArray().concat(childListEntries);\n    }, function (list) {\n      return parseList(depth, itemSelection, selectionState, list);\n    });\n  };\n\n  var parseList = function parseList(depth, itemSelection, selectionState, list) {\n    return bind(children(list), function (element) {\n      var parser = isList(element) ? parseList : parseItem;\n      var newDepth = depth + 1;\n      return parser(newDepth, itemSelection, selectionState, element);\n    });\n  };\n\n  var parseLists = function parseLists(lists, itemSelection) {\n    var selectionState = Cell(false);\n    var initialDepth = 0;\n    return map(lists, function (list) {\n      return {\n        sourceList: list,\n        entries: parseList(initialDepth, itemSelection, selectionState, list)\n      };\n    });\n  };\n\n  var outdentedComposer = function outdentedComposer(editor, entries) {\n    var normalizedEntries = normalizeEntries(entries);\n    return map(normalizedEntries, function (entry) {\n      var content = fromElements(entry.content);\n      return SugarElement.fromDom(createTextBlock(editor, content.dom));\n    });\n  };\n\n  var indentedComposer = function indentedComposer(editor, entries) {\n    var normalizedEntries = normalizeEntries(entries);\n    return composeList(editor.contentDocument, normalizedEntries).toArray();\n  };\n\n  var composeEntries = function composeEntries(editor, entries) {\n    return bind(groupBy(entries, isIndented), function (entries) {\n      var groupIsIndented = head(entries).exists(isIndented);\n      return groupIsIndented ? indentedComposer(editor, entries) : outdentedComposer(editor, entries);\n    });\n  };\n\n  var indentSelectedEntries = function indentSelectedEntries(entries, indentation) {\n    each$1(filter$1(entries, isSelected), function (entry) {\n      return indentEntry(indentation, entry);\n    });\n  };\n\n  var getItemSelection = function getItemSelection(editor) {\n    var selectedListItems = map(getSelectedListItems(editor), SugarElement.fromDom);\n    return lift2(find$1(selectedListItems, not(hasFirstChildList)), find$1(reverse(selectedListItems), not(hasFirstChildList)), function (start, end) {\n      return {\n        start: start,\n        end: end\n      };\n    });\n  };\n\n  var listIndentation = function listIndentation(editor, lists, indentation) {\n    var entrySets = parseLists(lists, getItemSelection(editor));\n    each$1(entrySets, function (entrySet) {\n      indentSelectedEntries(entrySet.entries, indentation);\n      var composedLists = composeEntries(editor, entrySet.entries);\n      each$1(composedLists, function (composedList) {\n        fireListEvent(editor, indentation === 'Indent' ? 'IndentList' : 'OutdentList', composedList.dom);\n      });\n      before(entrySet.sourceList, composedLists);\n      remove(entrySet.sourceList);\n    });\n  };\n\n  var selectionIndentation = function selectionIndentation(editor, indentation) {\n    var lists = map(getSelectedListRoots(editor), SugarElement.fromDom);\n    var dlItems = map(getSelectedDlItems(editor), SugarElement.fromDom);\n    var isHandled = false;\n\n    if (lists.length || dlItems.length) {\n      var bookmark = editor.selection.getBookmark();\n      listIndentation(editor, lists, indentation);\n      dlIndentation(editor, indentation, dlItems);\n      editor.selection.moveToBookmark(bookmark);\n      editor.selection.setRng(normalizeRange(editor.selection.getRng()));\n      editor.nodeChanged();\n      isHandled = true;\n    }\n\n    return isHandled;\n  };\n\n  var indentListSelection = function indentListSelection(editor) {\n    return selectionIndentation(editor, 'Indent');\n  };\n\n  var outdentListSelection = function outdentListSelection(editor) {\n    return selectionIndentation(editor, 'Outdent');\n  };\n\n  var flattenListSelection = function flattenListSelection(editor) {\n    return selectionIndentation(editor, 'Flatten');\n  };\n\n  var global = tinymce.util.Tools.resolve('tinymce.dom.BookmarkManager');\n  var DOM$1 = global$3.DOM;\n\n  var createBookmark = function createBookmark(rng) {\n    var bookmark = {};\n\n    var setupEndPoint = function setupEndPoint(start) {\n      var container = rng[start ? 'startContainer' : 'endContainer'];\n      var offset = rng[start ? 'startOffset' : 'endOffset'];\n\n      if (container.nodeType === 1) {\n        var offsetNode = DOM$1.create('span', {\n          'data-mce-type': 'bookmark'\n        });\n\n        if (container.hasChildNodes()) {\n          offset = Math.min(offset, container.childNodes.length - 1);\n\n          if (start) {\n            container.insertBefore(offsetNode, container.childNodes[offset]);\n          } else {\n            DOM$1.insertAfter(offsetNode, container.childNodes[offset]);\n          }\n        } else {\n          container.appendChild(offsetNode);\n        }\n\n        container = offsetNode;\n        offset = 0;\n      }\n\n      bookmark[start ? 'startContainer' : 'endContainer'] = container;\n      bookmark[start ? 'startOffset' : 'endOffset'] = offset;\n    };\n\n    setupEndPoint(true);\n\n    if (!rng.collapsed) {\n      setupEndPoint();\n    }\n\n    return bookmark;\n  };\n\n  var resolveBookmark = function resolveBookmark(bookmark) {\n    var restoreEndPoint = function restoreEndPoint(start) {\n      var node;\n\n      var nodeIndex = function nodeIndex(container) {\n        var node = container.parentNode.firstChild,\n            idx = 0;\n\n        while (node) {\n          if (node === container) {\n            return idx;\n          }\n\n          if (node.nodeType !== 1 || node.getAttribute('data-mce-type') !== 'bookmark') {\n            idx++;\n          }\n\n          node = node.nextSibling;\n        }\n\n        return -1;\n      };\n\n      var container = node = bookmark[start ? 'startContainer' : 'endContainer'];\n      var offset = bookmark[start ? 'startOffset' : 'endOffset'];\n\n      if (!container) {\n        return;\n      }\n\n      if (container.nodeType === 1) {\n        offset = nodeIndex(container);\n        container = container.parentNode;\n        DOM$1.remove(node);\n\n        if (!container.hasChildNodes() && DOM$1.isBlock(container)) {\n          container.appendChild(DOM$1.create('br'));\n        }\n      }\n\n      bookmark[start ? 'startContainer' : 'endContainer'] = container;\n      bookmark[start ? 'startOffset' : 'endOffset'] = offset;\n    };\n\n    restoreEndPoint(true);\n    restoreEndPoint();\n    var rng = DOM$1.createRng();\n    rng.setStart(bookmark.startContainer, bookmark.startOffset);\n\n    if (bookmark.endContainer) {\n      rng.setEnd(bookmark.endContainer, bookmark.endOffset);\n    }\n\n    return normalizeRange(rng);\n  };\n\n  var listToggleActionFromListName = function listToggleActionFromListName(listName) {\n    switch (listName) {\n      case 'UL':\n        return 'ToggleUlList';\n\n      case 'OL':\n        return 'ToggleOlList';\n\n      case 'DL':\n        return 'ToggleDLList';\n    }\n  };\n\n  var isCustomList = function isCustomList(list) {\n    return /\\btox\\-/.test(list.className);\n  };\n\n  var listState = function listState(editor, listName, activate) {\n    var nodeChangeHandler = function nodeChangeHandler(e) {\n      var inList = findUntil(e.parents, isListNode, isTableCellNode).filter(function (list) {\n        return list.nodeName === listName && !isCustomList(list);\n      }).isSome();\n      activate(inList);\n    };\n\n    var parents = editor.dom.getParents(editor.selection.getNode());\n    nodeChangeHandler({\n      parents: parents\n    });\n    editor.on('NodeChange', nodeChangeHandler);\n    return function () {\n      return editor.off('NodeChange', nodeChangeHandler);\n    };\n  };\n\n  var updateListStyle = function updateListStyle(dom, el, detail) {\n    var type = detail['list-style-type'] ? detail['list-style-type'] : null;\n    dom.setStyle(el, 'list-style-type', type);\n  };\n\n  var setAttribs = function setAttribs(elm, attrs) {\n    global$2.each(attrs, function (value, key) {\n      elm.setAttribute(key, value);\n    });\n  };\n\n  var updateListAttrs = function updateListAttrs(dom, el, detail) {\n    setAttribs(el, detail['list-attributes']);\n    global$2.each(dom.select('li', el), function (li) {\n      setAttribs(li, detail['list-item-attributes']);\n    });\n  };\n\n  var updateListWithDetails = function updateListWithDetails(dom, el, detail) {\n    updateListStyle(dom, el, detail);\n    updateListAttrs(dom, el, detail);\n  };\n\n  var removeStyles = function removeStyles(dom, element, styles) {\n    global$2.each(styles, function (style) {\n      var _a;\n\n      return dom.setStyle(element, (_a = {}, _a[style] = '', _a));\n    });\n  };\n\n  var getEndPointNode = function getEndPointNode(editor, rng, start, root) {\n    var container = rng[start ? 'startContainer' : 'endContainer'];\n    var offset = rng[start ? 'startOffset' : 'endOffset'];\n\n    if (container.nodeType === 1) {\n      container = container.childNodes[Math.min(offset, container.childNodes.length - 1)] || container;\n    }\n\n    if (!start && isBr(container.nextSibling)) {\n      container = container.nextSibling;\n    }\n\n    while (container.parentNode !== root) {\n      if (isTextBlock(editor, container)) {\n        return container;\n      }\n\n      if (/^(TD|TH)$/.test(container.parentNode.nodeName)) {\n        return container;\n      }\n\n      container = container.parentNode;\n    }\n\n    return container;\n  };\n\n  var getSelectedTextBlocks = function getSelectedTextBlocks(editor, rng, root) {\n    var textBlocks = [];\n    var dom = editor.dom;\n    var startNode = getEndPointNode(editor, rng, true, root);\n    var endNode = getEndPointNode(editor, rng, false, root);\n    var block;\n    var siblings = [];\n\n    for (var node = startNode; node; node = node.nextSibling) {\n      siblings.push(node);\n\n      if (node === endNode) {\n        break;\n      }\n    }\n\n    global$2.each(siblings, function (node) {\n      if (isTextBlock(editor, node)) {\n        textBlocks.push(node);\n        block = null;\n        return;\n      }\n\n      if (dom.isBlock(node) || isBr(node)) {\n        if (isBr(node)) {\n          dom.remove(node);\n        }\n\n        block = null;\n        return;\n      }\n\n      var nextSibling = node.nextSibling;\n\n      if (global.isBookmarkNode(node)) {\n        if (isListNode(nextSibling) || isTextBlock(editor, nextSibling) || !nextSibling && node.parentNode === root) {\n          block = null;\n          return;\n        }\n      }\n\n      if (!block) {\n        block = dom.create('p');\n        node.parentNode.insertBefore(block, node);\n        textBlocks.push(block);\n      }\n\n      block.appendChild(node);\n    });\n    return textBlocks;\n  };\n\n  var hasCompatibleStyle = function hasCompatibleStyle(dom, sib, detail) {\n    var sibStyle = dom.getStyle(sib, 'list-style-type');\n    var detailStyle = detail ? detail['list-style-type'] : '';\n    detailStyle = detailStyle === null ? '' : detailStyle;\n    return sibStyle === detailStyle;\n  };\n\n  var applyList = function applyList(editor, listName, detail) {\n    var rng = editor.selection.getRng();\n    var listItemName = 'LI';\n    var root = getClosestListRootElm(editor, editor.selection.getStart(true));\n    var dom = editor.dom;\n\n    if (dom.getContentEditable(editor.selection.getNode()) === 'false') {\n      return;\n    }\n\n    listName = listName.toUpperCase();\n\n    if (listName === 'DL') {\n      listItemName = 'DT';\n    }\n\n    var bookmark = createBookmark(rng);\n    var selectedTextBlocks = getSelectedTextBlocks(editor, rng, root);\n    global$2.each(selectedTextBlocks, function (block) {\n      var listBlock;\n      var sibling = block.previousSibling;\n      var parent = block.parentNode;\n\n      if (!isListItemNode(parent)) {\n        if (sibling && isListNode(sibling) && sibling.nodeName === listName && hasCompatibleStyle(dom, sibling, detail)) {\n          listBlock = sibling;\n          block = dom.rename(block, listItemName);\n          sibling.appendChild(block);\n        } else {\n          listBlock = dom.create(listName);\n          block.parentNode.insertBefore(listBlock, block);\n          listBlock.appendChild(block);\n          block = dom.rename(block, listItemName);\n        }\n\n        removeStyles(dom, block, ['margin', 'margin-right', 'margin-bottom', 'margin-left', 'margin-top', 'padding', 'padding-right', 'padding-bottom', 'padding-left', 'padding-top']);\n        updateListWithDetails(dom, listBlock, detail);\n        mergeWithAdjacentLists(editor.dom, listBlock);\n      }\n    });\n    editor.selection.setRng(resolveBookmark(bookmark));\n  };\n\n  var isValidLists = function isValidLists(list1, list2) {\n    return list1 && list2 && isListNode(list1) && list1.nodeName === list2.nodeName;\n  };\n\n  var hasSameListStyle = function hasSameListStyle(dom, list1, list2) {\n    var targetStyle = dom.getStyle(list1, 'list-style-type', true);\n    var style = dom.getStyle(list2, 'list-style-type', true);\n    return targetStyle === style;\n  };\n\n  var hasSameClasses = function hasSameClasses(elm1, elm2) {\n    return elm1.className === elm2.className;\n  };\n\n  var shouldMerge = function shouldMerge(dom, list1, list2) {\n    return isValidLists(list1, list2) && hasSameListStyle(dom, list1, list2) && hasSameClasses(list1, list2);\n  };\n\n  var mergeWithAdjacentLists = function mergeWithAdjacentLists(dom, listBlock) {\n    var sibling, node;\n    sibling = listBlock.nextSibling;\n\n    if (shouldMerge(dom, listBlock, sibling)) {\n      while (node = sibling.firstChild) {\n        listBlock.appendChild(node);\n      }\n\n      dom.remove(sibling);\n    }\n\n    sibling = listBlock.previousSibling;\n\n    if (shouldMerge(dom, listBlock, sibling)) {\n      while (node = sibling.lastChild) {\n        listBlock.insertBefore(node, listBlock.firstChild);\n      }\n\n      dom.remove(sibling);\n    }\n  };\n\n  var updateList$1 = function updateList$1(editor, list, listName, detail) {\n    if (list.nodeName !== listName) {\n      var newList = editor.dom.rename(list, listName);\n      updateListWithDetails(editor.dom, newList, detail);\n      fireListEvent(editor, listToggleActionFromListName(listName), newList);\n    } else {\n      updateListWithDetails(editor.dom, list, detail);\n      fireListEvent(editor, listToggleActionFromListName(listName), list);\n    }\n  };\n\n  var toggleMultipleLists = function toggleMultipleLists(editor, parentList, lists, listName, detail) {\n    var parentIsList = isListNode(parentList);\n\n    if (parentIsList && parentList.nodeName === listName && !hasListStyleDetail(detail)) {\n      flattenListSelection(editor);\n    } else {\n      applyList(editor, listName, detail);\n      var bookmark = createBookmark(editor.selection.getRng());\n      var allLists = parentIsList ? __spreadArray([parentList], lists, true) : lists;\n      global$2.each(allLists, function (elm) {\n        updateList$1(editor, elm, listName, detail);\n      });\n      editor.selection.setRng(resolveBookmark(bookmark));\n    }\n  };\n\n  var hasListStyleDetail = function hasListStyleDetail(detail) {\n    return 'list-style-type' in detail;\n  };\n\n  var toggleSingleList = function toggleSingleList(editor, parentList, listName, detail) {\n    if (parentList === editor.getBody()) {\n      return;\n    }\n\n    if (parentList) {\n      if (parentList.nodeName === listName && !hasListStyleDetail(detail) && !isCustomList(parentList)) {\n        flattenListSelection(editor);\n      } else {\n        var bookmark = createBookmark(editor.selection.getRng());\n        updateListWithDetails(editor.dom, parentList, detail);\n        var newList = editor.dom.rename(parentList, listName);\n        mergeWithAdjacentLists(editor.dom, newList);\n        editor.selection.setRng(resolveBookmark(bookmark));\n        applyList(editor, listName, detail);\n        fireListEvent(editor, listToggleActionFromListName(listName), newList);\n      }\n    } else {\n      applyList(editor, listName, detail);\n      fireListEvent(editor, listToggleActionFromListName(listName), parentList);\n    }\n  };\n\n  var toggleList = function toggleList(editor, listName, _detail) {\n    var parentList = getParentList(editor);\n    var selectedSubLists = getSelectedSubLists(editor);\n    var detail = isObject(_detail) ? _detail : {};\n\n    if (selectedSubLists.length > 0) {\n      toggleMultipleLists(editor, parentList, selectedSubLists, listName, detail);\n    } else {\n      toggleSingleList(editor, parentList, listName, detail);\n    }\n  };\n\n  var DOM = global$3.DOM;\n\n  var normalizeList = function normalizeList(dom, list) {\n    var parentNode = list.parentNode;\n\n    if (parentNode.nodeName === 'LI' && parentNode.firstChild === list) {\n      var sibling = parentNode.previousSibling;\n\n      if (sibling && sibling.nodeName === 'LI') {\n        sibling.appendChild(list);\n\n        if (isEmpty(dom, parentNode)) {\n          DOM.remove(parentNode);\n        }\n      } else {\n        DOM.setStyle(parentNode, 'listStyleType', 'none');\n      }\n    }\n\n    if (isListNode(parentNode)) {\n      var sibling = parentNode.previousSibling;\n\n      if (sibling && sibling.nodeName === 'LI') {\n        sibling.appendChild(list);\n      }\n    }\n  };\n\n  var normalizeLists = function normalizeLists(dom, element) {\n    var lists = global$2.grep(dom.select('ol,ul', element));\n    global$2.each(lists, function (list) {\n      normalizeList(dom, list);\n    });\n  };\n\n  var findNextCaretContainer = function findNextCaretContainer(editor, rng, isForward, root) {\n    var node = rng.startContainer;\n    var offset = rng.startOffset;\n\n    if (isTextNode(node) && (isForward ? offset < node.data.length : offset > 0)) {\n      return node;\n    }\n\n    var nonEmptyBlocks = editor.schema.getNonEmptyElements();\n\n    if (node.nodeType === 1) {\n      node = global$6.getNode(node, offset);\n    }\n\n    var walker = new global$5(node, root);\n\n    if (isForward) {\n      if (isBogusBr(editor.dom, node)) {\n        walker.next();\n      }\n    }\n\n    while (node = walker[isForward ? 'next' : 'prev2']()) {\n      if (node.nodeName === 'LI' && !node.hasChildNodes()) {\n        return node;\n      }\n\n      if (nonEmptyBlocks[node.nodeName]) {\n        return node;\n      }\n\n      if (isTextNode(node) && node.data.length > 0) {\n        return node;\n      }\n    }\n  };\n\n  var hasOnlyOneBlockChild = function hasOnlyOneBlockChild(dom, elm) {\n    var childNodes = elm.childNodes;\n    return childNodes.length === 1 && !isListNode(childNodes[0]) && dom.isBlock(childNodes[0]);\n  };\n\n  var unwrapSingleBlockChild = function unwrapSingleBlockChild(dom, elm) {\n    if (hasOnlyOneBlockChild(dom, elm)) {\n      dom.remove(elm.firstChild, true);\n    }\n  };\n\n  var moveChildren = function moveChildren(dom, fromElm, toElm) {\n    var node;\n    var targetElm = hasOnlyOneBlockChild(dom, toElm) ? toElm.firstChild : toElm;\n    unwrapSingleBlockChild(dom, fromElm);\n\n    if (!isEmpty(dom, fromElm, true)) {\n      while (node = fromElm.firstChild) {\n        targetElm.appendChild(node);\n      }\n    }\n  };\n\n  var mergeLiElements = function mergeLiElements(dom, fromElm, toElm) {\n    var listNode;\n    var ul = fromElm.parentNode;\n\n    if (!isChildOfBody(dom, fromElm) || !isChildOfBody(dom, toElm)) {\n      return;\n    }\n\n    if (isListNode(toElm.lastChild)) {\n      listNode = toElm.lastChild;\n    }\n\n    if (ul === toElm.lastChild) {\n      if (isBr(ul.previousSibling)) {\n        dom.remove(ul.previousSibling);\n      }\n    }\n\n    var node = toElm.lastChild;\n\n    if (node && isBr(node) && fromElm.hasChildNodes()) {\n      dom.remove(node);\n    }\n\n    if (isEmpty(dom, toElm, true)) {\n      dom.$(toElm).empty();\n    }\n\n    moveChildren(dom, fromElm, toElm);\n\n    if (listNode) {\n      toElm.appendChild(listNode);\n    }\n\n    var contains$1 = contains(SugarElement.fromDom(toElm), SugarElement.fromDom(fromElm));\n    var nestedLists = contains$1 ? dom.getParents(fromElm, isListNode, toElm) : [];\n    dom.remove(fromElm);\n    each$1(nestedLists, function (list) {\n      if (isEmpty(dom, list) && list !== dom.getRoot()) {\n        dom.remove(list);\n      }\n    });\n  };\n\n  var mergeIntoEmptyLi = function mergeIntoEmptyLi(editor, fromLi, toLi) {\n    editor.dom.$(toLi).empty();\n    mergeLiElements(editor.dom, fromLi, toLi);\n    editor.selection.setCursorLocation(toLi, 0);\n  };\n\n  var mergeForward = function mergeForward(editor, rng, fromLi, toLi) {\n    var dom = editor.dom;\n\n    if (dom.isEmpty(toLi)) {\n      mergeIntoEmptyLi(editor, fromLi, toLi);\n    } else {\n      var bookmark = createBookmark(rng);\n      mergeLiElements(dom, fromLi, toLi);\n      editor.selection.setRng(resolveBookmark(bookmark));\n    }\n  };\n\n  var mergeBackward = function mergeBackward(editor, rng, fromLi, toLi) {\n    var bookmark = createBookmark(rng);\n    mergeLiElements(editor.dom, fromLi, toLi);\n    var resolvedBookmark = resolveBookmark(bookmark);\n    editor.selection.setRng(resolvedBookmark);\n  };\n\n  var backspaceDeleteFromListToListCaret = function backspaceDeleteFromListToListCaret(editor, isForward) {\n    var dom = editor.dom,\n        selection = editor.selection;\n    var selectionStartElm = selection.getStart();\n    var root = getClosestListRootElm(editor, selectionStartElm);\n    var li = dom.getParent(selection.getStart(), 'LI', root);\n\n    if (li) {\n      var ul = li.parentNode;\n\n      if (ul === editor.getBody() && isEmpty(dom, ul)) {\n        return true;\n      }\n\n      var rng_1 = normalizeRange(selection.getRng());\n      var otherLi_1 = dom.getParent(findNextCaretContainer(editor, rng_1, isForward, root), 'LI', root);\n\n      if (otherLi_1 && otherLi_1 !== li) {\n        editor.undoManager.transact(function () {\n          if (isForward) {\n            mergeForward(editor, rng_1, otherLi_1, li);\n          } else {\n            if (isFirstChild(li)) {\n              outdentListSelection(editor);\n            } else {\n              mergeBackward(editor, rng_1, li, otherLi_1);\n            }\n          }\n        });\n        return true;\n      } else if (!otherLi_1) {\n        if (!isForward && rng_1.startOffset === 0 && rng_1.endOffset === 0) {\n          editor.undoManager.transact(function () {\n            flattenListSelection(editor);\n          });\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  var removeBlock = function removeBlock(dom, block, root) {\n    var parentBlock = dom.getParent(block.parentNode, dom.isBlock, root);\n    dom.remove(block);\n\n    if (parentBlock && dom.isEmpty(parentBlock)) {\n      dom.remove(parentBlock);\n    }\n  };\n\n  var backspaceDeleteIntoListCaret = function backspaceDeleteIntoListCaret(editor, isForward) {\n    var dom = editor.dom;\n    var selectionStartElm = editor.selection.getStart();\n    var root = getClosestListRootElm(editor, selectionStartElm);\n    var block = dom.getParent(selectionStartElm, dom.isBlock, root);\n\n    if (block && dom.isEmpty(block)) {\n      var rng = normalizeRange(editor.selection.getRng());\n      var otherLi_2 = dom.getParent(findNextCaretContainer(editor, rng, isForward, root), 'LI', root);\n\n      if (otherLi_2) {\n        editor.undoManager.transact(function () {\n          removeBlock(dom, block, root);\n          mergeWithAdjacentLists(dom, otherLi_2.parentNode);\n          editor.selection.select(otherLi_2, true);\n          editor.selection.collapse(isForward);\n        });\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var backspaceDeleteCaret = function backspaceDeleteCaret(editor, isForward) {\n    return backspaceDeleteFromListToListCaret(editor, isForward) || backspaceDeleteIntoListCaret(editor, isForward);\n  };\n\n  var backspaceDeleteRange = function backspaceDeleteRange(editor) {\n    var selectionStartElm = editor.selection.getStart();\n    var root = getClosestListRootElm(editor, selectionStartElm);\n    var startListParent = editor.dom.getParent(selectionStartElm, 'LI,DT,DD', root);\n\n    if (startListParent || getSelectedListItems(editor).length > 0) {\n      editor.undoManager.transact(function () {\n        editor.execCommand('Delete');\n        normalizeLists(editor.dom, editor.getBody());\n      });\n      return true;\n    }\n\n    return false;\n  };\n\n  var _backspaceDelete = function backspaceDelete(editor, isForward) {\n    return editor.selection.isCollapsed() ? backspaceDeleteCaret(editor, isForward) : backspaceDeleteRange(editor);\n  };\n\n  var setup$1 = function setup$1(editor) {\n    editor.on('keydown', function (e) {\n      if (e.keyCode === global$4.BACKSPACE) {\n        if (_backspaceDelete(editor, false)) {\n          e.preventDefault();\n        }\n      } else if (e.keyCode === global$4.DELETE) {\n        if (_backspaceDelete(editor, true)) {\n          e.preventDefault();\n        }\n      }\n    });\n  };\n\n  var get = function get(editor) {\n    return {\n      backspaceDelete: function backspaceDelete(isForward) {\n        _backspaceDelete(editor, isForward);\n      }\n    };\n  };\n\n  var updateList = function updateList(editor, update) {\n    var parentList = getParentList(editor);\n    editor.undoManager.transact(function () {\n      if (isObject(update.styles)) {\n        editor.dom.setStyles(parentList, update.styles);\n      }\n\n      if (isObject(update.attrs)) {\n        each(update.attrs, function (v, k) {\n          return editor.dom.setAttrib(parentList, k, v);\n        });\n      }\n    });\n  };\n\n  var parseAlphabeticBase26 = function parseAlphabeticBase26(str) {\n    var chars = reverse(trim(str).split(''));\n    var values = map(chars, function (_char, i) {\n      var charValue = _char.toUpperCase().charCodeAt(0) - 'A'.charCodeAt(0) + 1;\n      return Math.pow(26, i) * charValue;\n    });\n    return foldl(values, function (sum, v) {\n      return sum + v;\n    }, 0);\n  };\n\n  var composeAlphabeticBase26 = function composeAlphabeticBase26(value) {\n    value--;\n\n    if (value < 0) {\n      return '';\n    } else {\n      var remainder = value % 26;\n      var quotient = Math.floor(value / 26);\n      var rest = composeAlphabeticBase26(quotient);\n\n      var _char2 = String.fromCharCode('A'.charCodeAt(0) + remainder);\n\n      return rest + _char2;\n    }\n  };\n\n  var isUppercase = function isUppercase(str) {\n    return /^[A-Z]+$/.test(str);\n  };\n\n  var isLowercase = function isLowercase(str) {\n    return /^[a-z]+$/.test(str);\n  };\n\n  var isNumeric = function isNumeric(str) {\n    return /^[0-9]+$/.test(str);\n  };\n\n  var deduceListType = function deduceListType(start) {\n    if (isNumeric(start)) {\n      return 2;\n    } else if (isUppercase(start)) {\n      return 0;\n    } else if (isLowercase(start)) {\n      return 1;\n    } else if (isEmpty$1(start)) {\n      return 3;\n    } else {\n      return 4;\n    }\n  };\n\n  var parseStartValue = function parseStartValue(start) {\n    switch (deduceListType(start)) {\n      case 2:\n        return Optional.some({\n          listStyleType: Optional.none(),\n          start: start\n        });\n\n      case 0:\n        return Optional.some({\n          listStyleType: Optional.some('upper-alpha'),\n          start: parseAlphabeticBase26(start).toString()\n        });\n\n      case 1:\n        return Optional.some({\n          listStyleType: Optional.some('lower-alpha'),\n          start: parseAlphabeticBase26(start).toString()\n        });\n\n      case 3:\n        return Optional.some({\n          listStyleType: Optional.none(),\n          start: ''\n        });\n\n      case 4:\n        return Optional.none();\n    }\n  };\n\n  var parseDetail = function parseDetail(detail) {\n    var start = parseInt(detail.start, 10);\n\n    if (is(detail.listStyleType, 'upper-alpha')) {\n      return composeAlphabeticBase26(start);\n    } else if (is(detail.listStyleType, 'lower-alpha')) {\n      return composeAlphabeticBase26(start).toLowerCase();\n    } else {\n      return detail.start;\n    }\n  };\n\n  var open = function open(editor) {\n    var currentList = getParentList(editor);\n\n    if (!isOlNode(currentList)) {\n      return;\n    }\n\n    editor.windowManager.open({\n      title: 'List Properties',\n      body: {\n        type: 'panel',\n        items: [{\n          type: 'input',\n          name: 'start',\n          label: 'Start list at number',\n          inputMode: 'numeric'\n        }]\n      },\n      initialData: {\n        start: parseDetail({\n          start: editor.dom.getAttrib(currentList, 'start', '1'),\n          listStyleType: Optional.some(editor.dom.getStyle(currentList, 'list-style-type'))\n        })\n      },\n      buttons: [{\n        type: 'cancel',\n        name: 'cancel',\n        text: 'Cancel'\n      }, {\n        type: 'submit',\n        name: 'save',\n        text: 'Save',\n        primary: true\n      }],\n      onSubmit: function onSubmit(api) {\n        var data = api.getData();\n        parseStartValue(data.start).each(function (detail) {\n          editor.execCommand('mceListUpdate', false, {\n            attrs: {\n              start: detail.start === '1' ? '' : detail.start\n            },\n            styles: {\n              'list-style-type': detail.listStyleType.getOr('')\n            }\n          });\n        });\n        api.close();\n      }\n    });\n  };\n\n  var queryListCommandState = function queryListCommandState(editor, listName) {\n    return function () {\n      var parentList = getParentList(editor);\n      return parentList && parentList.nodeName === listName;\n    };\n  };\n\n  var registerDialog = function registerDialog(editor) {\n    editor.addCommand('mceListProps', function () {\n      open(editor);\n    });\n  };\n\n  var register$2 = function register$2(editor) {\n    editor.on('BeforeExecCommand', function (e) {\n      var cmd = e.command.toLowerCase();\n\n      if (cmd === 'indent') {\n        indentListSelection(editor);\n      } else if (cmd === 'outdent') {\n        outdentListSelection(editor);\n      }\n    });\n    editor.addCommand('InsertUnorderedList', function (ui, detail) {\n      toggleList(editor, 'UL', detail);\n    });\n    editor.addCommand('InsertOrderedList', function (ui, detail) {\n      toggleList(editor, 'OL', detail);\n    });\n    editor.addCommand('InsertDefinitionList', function (ui, detail) {\n      toggleList(editor, 'DL', detail);\n    });\n    editor.addCommand('RemoveList', function () {\n      flattenListSelection(editor);\n    });\n    registerDialog(editor);\n    editor.addCommand('mceListUpdate', function (ui, detail) {\n      if (isObject(detail)) {\n        updateList(editor, detail);\n      }\n    });\n    editor.addQueryStateHandler('InsertUnorderedList', queryListCommandState(editor, 'UL'));\n    editor.addQueryStateHandler('InsertOrderedList', queryListCommandState(editor, 'OL'));\n    editor.addQueryStateHandler('InsertDefinitionList', queryListCommandState(editor, 'DL'));\n  };\n\n  var setupTabKey = function setupTabKey(editor) {\n    editor.on('keydown', function (e) {\n      if (e.keyCode !== global$4.TAB || global$4.metaKeyPressed(e)) {\n        return;\n      }\n\n      editor.undoManager.transact(function () {\n        if (e.shiftKey ? outdentListSelection(editor) : indentListSelection(editor)) {\n          e.preventDefault();\n        }\n      });\n    });\n  };\n\n  var setup = function setup(editor) {\n    if (shouldIndentOnTab(editor)) {\n      setupTabKey(editor);\n    }\n\n    setup$1(editor);\n  };\n\n  var register$1 = function register$1(editor) {\n    var exec = function exec(command) {\n      return function () {\n        return editor.execCommand(command);\n      };\n    };\n\n    if (!editor.hasPlugin('advlist')) {\n      editor.ui.registry.addToggleButton('numlist', {\n        icon: 'ordered-list',\n        active: false,\n        tooltip: 'Numbered list',\n        onAction: exec('InsertOrderedList'),\n        onSetup: function onSetup(api) {\n          return listState(editor, 'OL', api.setActive);\n        }\n      });\n      editor.ui.registry.addToggleButton('bullist', {\n        icon: 'unordered-list',\n        active: false,\n        tooltip: 'Bullet list',\n        onAction: exec('InsertUnorderedList'),\n        onSetup: function onSetup(api) {\n          return listState(editor, 'UL', api.setActive);\n        }\n      });\n    }\n  };\n\n  var register = function register(editor) {\n    var listProperties = {\n      text: 'List properties...',\n      icon: 'ordered-list',\n      onAction: function onAction() {\n        return editor.execCommand('mceListProps');\n      },\n      onSetup: function onSetup(api) {\n        return listState(editor, 'OL', function (active) {\n          return api.setDisabled(!active);\n        });\n      }\n    };\n    editor.ui.registry.addMenuItem('listprops', listProperties);\n    editor.ui.registry.addContextMenu('lists', {\n      update: function update(node) {\n        var parentList = getParentList(editor, node);\n        return isOlNode(parentList) ? ['listprops'] : [];\n      }\n    });\n  };\n\n  function Plugin() {\n    global$7.add('lists', function (editor) {\n      if (editor.hasPlugin('rtc', true) === false) {\n        setup(editor);\n        register$2(editor);\n      } else {\n        registerDialog(editor);\n      }\n\n      register$1(editor);\n      register(editor);\n      return get(editor);\n    });\n  }\n\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/lists/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/tinymce/plugins/lists/index.js");
/******/ 	
/******/ })()
;