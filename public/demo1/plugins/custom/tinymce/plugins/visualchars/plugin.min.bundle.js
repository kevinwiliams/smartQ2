/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/visualchars/plugin.min.js":
/*!****************************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/visualchars/plugin.min.js ***!
  \****************************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n!function () {\n  \"use strict\";\n\n  function n(t) {\n    return function (n) {\n      return _typeof(n) === t;\n    };\n  }\n\n  function i(n) {\n    return function () {\n      return n;\n    };\n  }\n\n  function t(n) {\n    return n;\n  }\n\n  function e() {\n    return l;\n  }\n\n  var o,\n      r = tinymce.util.Tools.resolve(\"tinymce.PluginManager\"),\n      u = function u(n) {\n    return e = _typeof(t = n), (null === t ? \"null\" : \"object\" == e && (Array.prototype.isPrototypeOf(t) || t.constructor && \"Array\" === t.constructor.name) ? \"array\" : \"object\" == e && (String.prototype.isPrototypeOf(t) || t.constructor && \"String\" === t.constructor.name) ? \"string\" : e) === o;\n    var t, e;\n  },\n      c = n(\"boolean\"),\n      a = n(\"number\"),\n      s = i(!(o = \"string\")),\n      f = i(!0),\n      l = {\n    fold: function fold(n, t) {\n      return n();\n    },\n    isSome: s,\n    isNone: f,\n    getOr: t,\n    getOrThunk: d,\n    getOrDie: function getOrDie(n) {\n      throw new Error(n || \"error: getOrDie called on none.\");\n    },\n    getOrNull: i(null),\n    getOrUndefined: i(void 0),\n    or: t,\n    orThunk: d,\n    map: e,\n    each: function each() {},\n    bind: e,\n    exists: s,\n    forall: f,\n    filter: function filter() {\n      return l;\n    },\n    toArray: function toArray() {\n      return [];\n    },\n    toString: i(\"none()\")\n  };\n\n  function d(n) {\n    return n();\n  }\n\n  function m(n, t) {\n    for (var e = 0, o = n.length; e < o; e++) {\n      t(n[e], e);\n    }\n  }\n\n  function v(n, t) {\n    for (var e = h(n), o = 0, r = e.length; o < r; o++) {\n      var i = e[o];\n      t(n[i], i);\n    }\n  }\n\n  var g = function g(e) {\n    function n() {\n      return r;\n    }\n\n    function t(n) {\n      return n(e);\n    }\n\n    var o = i(e),\n        r = {\n      fold: function fold(n, t) {\n        return t(e);\n      },\n      isSome: f,\n      isNone: s,\n      getOr: o,\n      getOrThunk: o,\n      getOrDie: o,\n      getOrNull: o,\n      getOrUndefined: o,\n      or: n,\n      orThunk: n,\n      map: function map(n) {\n        return g(n(e));\n      },\n      each: function each(n) {\n        n(e);\n      },\n      bind: t,\n      exists: t,\n      forall: t,\n      filter: function filter(n) {\n        return n(e) ? r : l;\n      },\n      toArray: function toArray() {\n        return [e];\n      },\n      toString: function toString() {\n        return \"some(\" + e + \")\";\n      }\n    };\n    return r;\n  },\n      h = Object.keys;\n\n  function p(n) {\n    return n.dom.nodeValue;\n  }\n\n  function y(n, t, e) {\n    !function (n, t, e) {\n      if (!(u(e) || c(e) || a(e))) throw console.error(\"Invalid call to Attribute.set. Key \", t, \":: Value \", e, \":: Element \", n), new Error(\"Attribute value was not simple\");\n      n.setAttribute(t, e + \"\");\n    }(n.dom, t, e);\n  }\n\n  function b(n, t) {\n    n.dom.removeAttribute(t);\n  }\n\n  function w(n, t) {\n    var e,\n        o = null === (e = n.dom.getAttribute(t)) ? void 0 : e;\n    return void 0 === o || \"\" === o ? [] : o.split(\" \");\n  }\n\n  function T(n) {\n    return void 0 !== n.dom.classList;\n  }\n\n  function k(n, t) {\n    return i = t, 0 < (o = function (n) {\n      for (var t = [], e = 0, o = n.length; e < o; e++) {\n        var r = n[e];\n        r !== i && t.push(r);\n      }\n\n      return t;\n    }(w(e = n, \"class\"))).length ? y(e, \"class\", o.join(\" \")) : b(e, \"class\"), 0;\n    var e, i, o;\n  }\n\n  function N(n, t) {\n    var e = \"\";\n    return v(n, function (n, t) {\n      e += t;\n    }), new RegExp(\"[\" + e + \"]\", t ? \"g\" : \"\");\n  }\n\n  function A(n) {\n    return '<span data-mce-bogus=\"1\" class=\"mce-' + H[n] + '\">' + n + \"</span>\";\n  }\n\n  function O(n) {\n    var t = p(n);\n    return j(n) && void 0 !== t && _.test(t);\n  }\n\n  function C(n) {\n    return \"span\" === n.nodeName.toLowerCase() && n.classList.contains(\"mce-nbsp-wrap\");\n  }\n\n  function S(f, n) {\n    m(K(M.fromDom(n), O), function (n) {\n      var t,\n          e,\n          o,\n          r,\n          i,\n          u = n.dom.parentNode;\n      if (C(u)) t = M.fromDom(u), e = U, T(t) ? t.dom.classList.add(e) : (r = e, i = w(o = t, \"class\").concat([r]), y(o, \"class\", i.join(\" \")));else {\n        for (var c, a = f.dom.encode(p(n)).replace(F, A), s = f.dom.create(\"div\", null, a); c = s.lastChild;) {\n          f.dom.insertAfter(c, n.dom);\n        }\n\n        f.dom.remove(n.dom);\n      }\n    });\n  }\n\n  function D(r, n) {\n    m(r.dom.select(I, n), function (n) {\n      var t, e, o;\n      C(n) ? (t = M.fromDom(n), e = U, T(t) ? t.dom.classList.remove(e) : k(t, e), 0 === (T(o = t) ? o.dom.classList : w(o, \"class\")).length && b(o, \"class\")) : r.dom.remove(n, !0);\n    });\n  }\n\n  function E(n) {\n    var t = n.getBody(),\n        e = n.selection.getBookmark(),\n        o = function (n, t) {\n      for (; n.parentNode;) {\n        if (n.parentNode === t) return n;\n        n = n.parentNode;\n      }\n    }(n.selection.getNode(), t);\n\n    D(n, o = void 0 !== o ? o : t), S(n, o), n.selection.moveToBookmark(e);\n  }\n\n  function L(n, t) {\n    var e = n,\n        o = t.get();\n    e.fire(\"VisualChars\", {\n      state: o\n    });\n    var r = n.getBody();\n    (!0 === t.get() ? S : D)(n, r);\n  }\n\n  function x(n, t) {\n    n.addCommand(\"mceVisualChars\", function () {\n      !function (n, t) {\n        t.set(!t.get());\n        var e = n.selection.getBookmark();\n        L(n, t), n.selection.moveToBookmark(e);\n      }(n, t);\n    });\n  }\n\n  function B(e, o) {\n    return function (t) {\n      function n(n) {\n        return t.setActive(n.state);\n      }\n\n      return t.setActive(o.get()), e.on(\"VisualChars\", n), function () {\n        return e.off(\"VisualChars\", n);\n      };\n    };\n  }\n\n  \"undefined\" != typeof window || Function(\"return this;\")();\n\n  function P(n) {\n    if (null == n) throw new Error(\"Node cannot be null or undefined\");\n    return {\n      dom: n\n    };\n  }\n\n  var V,\n      j = function j(n) {\n    return 3 === n.dom.nodeType;\n  },\n      M = {\n    fromHtml: function fromHtml(n, t) {\n      var e = (t || document).createElement(\"div\");\n      if (e.innerHTML = n, !e.hasChildNodes() || 1 < e.childNodes.length) throw console.error(\"HTML does not have a single root node\", n), new Error(\"HTML must have a single root node\");\n      return P(e.childNodes[0]);\n    },\n    fromTag: function fromTag(n, t) {\n      var e = (t || document).createElement(n);\n      return P(e);\n    },\n    fromText: function fromText(n, t) {\n      var e = (t || document).createTextNode(n);\n      return P(e);\n    },\n    fromDom: P,\n    fromPoint: function fromPoint(n, t, e) {\n      return (null == (o = n.dom.elementFromPoint(t, e)) ? l : g(o)).map(P);\n      var o;\n    }\n  },\n      H = {\n    \"\\xa0\": \"nbsp\",\n    \"\\xad\": \"shy\"\n  },\n      _ = N(H),\n      F = N(H, !0),\n      I = (V = \"\", v(H, function (n) {\n    V && (V += \",\"), V += \"span.mce-\" + n;\n  }), V),\n      U = \"mce-nbsp\",\n      K = function K(n, t) {\n    var e = [];\n    return m(function (n, t) {\n      for (var e = n.length, o = new Array(e), r = 0; r < e; r++) {\n        var i = n[r];\n        o[r] = t(i, r);\n      }\n\n      return o;\n    }(n.dom.childNodes, M.fromDom), function (n) {\n      e = (e = t(n) ? e.concat([n]) : e).concat(K(n, t));\n    }), e;\n  },\n      R = tinymce.util.Tools.resolve(\"tinymce.util.Delay\");\n\n  r.add(\"visualchars\", function (n) {\n    var t,\n        e,\n        o,\n        r,\n        i,\n        u,\n        c,\n        a,\n        s,\n        f,\n        l = (t = n.getParam(\"visualchars_default_state\", !1), e = t, {\n      get: function get() {\n        return e;\n      },\n      set: function set(n) {\n        e = n;\n      }\n    });\n\n    function d() {\n      return o.execCommand(\"mceVisualChars\");\n    }\n\n    return x(n, l), (o = n).ui.registry.addToggleButton(\"visualchars\", {\n      tooltip: \"Show invisible characters\",\n      icon: \"visualchars\",\n      onAction: d,\n      onSetup: B(o, r = l)\n    }), o.ui.registry.addToggleMenuItem(\"visualchars\", {\n      text: \"Show invisible characters\",\n      icon: \"visualchars\",\n      onAction: d,\n      onSetup: B(o, r)\n    }), i = n, u = l, c = R.debounce(function () {\n      E(i);\n    }, 300), !1 !== i.getParam(\"forced_root_block\") && i.on(\"keydown\", function (n) {\n      !0 === u.get() && (13 === n.keyCode ? E(i) : c());\n    }), i.on(\"remove\", c.stop), s = l, (a = n).on(\"init\", function () {\n      L(a, s);\n    }), f = l, {\n      isEnabled: function isEnabled() {\n        return f.get();\n      }\n    };\n  });\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/visualchars/plugin.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/visualchars/plugin.min.js"]();
/******/ 	
/******/ })()
;