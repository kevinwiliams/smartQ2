/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/table/index.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/table/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Exports the \"table\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/table')\n//   ES2015:\n//     import 'tinymce/plugins/table'\n__webpack_require__(/*! ./plugin.js */ \"./resources/assets/core/plugins/custom/tinymce/plugins/table/plugin.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL3RhYmxlL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQSxtQkFBTyxDQUFDLDJGQUFELENBQVAiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL3RhYmxlL2luZGV4LmpzP2QwNTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRXhwb3J0cyB0aGUgXCJ0YWJsZVwiIHBsdWdpbiBmb3IgdXNhZ2Ugd2l0aCBtb2R1bGUgbG9hZGVyc1xyXG4vLyBVc2FnZTpcclxuLy8gICBDb21tb25KUzpcclxuLy8gICAgIHJlcXVpcmUoJ3RpbnltY2UvcGx1Z2lucy90YWJsZScpXHJcbi8vICAgRVMyMDE1OlxyXG4vLyAgICAgaW1wb3J0ICd0aW55bWNlL3BsdWdpbnMvdGFibGUnXHJcbnJlcXVpcmUoJy4vcGx1Z2luLmpzJyk7Il0sIm5hbWVzIjpbInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/table/index.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/table/plugin.js":
/*!******************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/table/plugin.js ***!
  \******************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n\n  var isType$1 = function isType$1(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n\n  var isSimpleType = function isSimpleType(type) {\n    return function (value) {\n      return _typeof(value) === type;\n    };\n  };\n\n  var eq$2 = function eq$2(t) {\n    return function (a) {\n      return t === a;\n    };\n  };\n\n  var isString = isType$1('string');\n  var isObject = isType$1('object');\n  var isArray = isType$1('array');\n  var isNull = eq$2(null);\n  var isBoolean = isSimpleType('boolean');\n  var isUndefined = eq$2(undefined);\n\n  var isNullable = function isNullable(a) {\n    return a === null || a === undefined;\n  };\n\n  var isNonNullable = function isNonNullable(a) {\n    return !isNullable(a);\n  };\n\n  var isFunction = isSimpleType('function');\n  var isNumber = isSimpleType('number');\n\n  var noop = function noop() {};\n\n  var compose = function compose(fa, fb) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return fa(fb.apply(null, args));\n    };\n  };\n\n  var compose1 = function compose1(fbc, fab) {\n    return function (a) {\n      return fbc(fab(a));\n    };\n  };\n\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  var tripleEquals = function tripleEquals(a, b) {\n    return a === b;\n  };\n\n  function curry(fn) {\n    var initialArgs = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      initialArgs[_i - 1] = arguments[_i];\n    }\n\n    return function () {\n      var restArgs = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        restArgs[_i] = arguments[_i];\n      }\n\n      var all = initialArgs.concat(restArgs);\n      return fn.apply(null, all);\n    };\n  }\n\n  var not = function not(f) {\n    return function (t) {\n      return !f(t);\n    };\n  };\n\n  var die = function die(msg) {\n    return function () {\n      throw new Error(msg);\n    };\n  };\n\n  var never = constant(false);\n  var always = constant(true);\n\n  var none$2 = function none$2() {\n    return NONE;\n  };\n\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none$2,\n      each: noop,\n      bind: none$2,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none$2();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n\n  var some = function some(a) {\n    var constant_a = constant(a);\n\n    var self = function self() {\n      return me;\n    };\n\n    var bind = function bind(f) {\n      return f(a);\n    };\n\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n\n  var from$1 = function from$1(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n\n  var Optional = {\n    some: some,\n    none: none$2,\n    from: from$1\n  };\n  var nativeSlice = Array.prototype.slice;\n  var nativeIndexOf = Array.prototype.indexOf;\n  var nativePush = Array.prototype.push;\n\n  var rawIndexOf = function rawIndexOf(ts, t) {\n    return nativeIndexOf.call(ts, t);\n  };\n\n  var contains$2 = function contains$2(xs, x) {\n    return rawIndexOf(xs, x) > -1;\n  };\n\n  var exists = function exists(xs, pred) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n\n      if (pred(x, i)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var range$1 = function range$1(num, f) {\n    var r = [];\n\n    for (var i = 0; i < num; i++) {\n      r.push(f(i));\n    }\n\n    return r;\n  };\n\n  var map$1 = function map$1(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n\n    return r;\n  };\n\n  var each$2 = function each$2(xs, f) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n\n  var eachr = function eachr(xs, f) {\n    for (var i = xs.length - 1; i >= 0; i--) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n\n  var partition = function partition(xs, pred) {\n    var pass = [];\n    var fail = [];\n\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      var arr = pred(x, i) ? pass : fail;\n      arr.push(x);\n    }\n\n    return {\n      pass: pass,\n      fail: fail\n    };\n  };\n\n  var filter$2 = function filter$2(xs, pred) {\n    var r = [];\n\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n\n      if (pred(x, i)) {\n        r.push(x);\n      }\n    }\n\n    return r;\n  };\n\n  var foldr = function foldr(xs, f, acc) {\n    eachr(xs, function (x, i) {\n      acc = f(acc, x, i);\n    });\n    return acc;\n  };\n\n  var foldl = function foldl(xs, f, acc) {\n    each$2(xs, function (x, i) {\n      acc = f(acc, x, i);\n    });\n    return acc;\n  };\n\n  var findUntil = function findUntil(xs, pred, until) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n\n      if (pred(x, i)) {\n        return Optional.some(x);\n      } else if (until(x, i)) {\n        break;\n      }\n    }\n\n    return Optional.none();\n  };\n\n  var find$1 = function find$1(xs, pred) {\n    return findUntil(xs, pred, never);\n  };\n\n  var findIndex = function findIndex(xs, pred) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n\n      if (pred(x, i)) {\n        return Optional.some(i);\n      }\n    }\n\n    return Optional.none();\n  };\n\n  var flatten$1 = function flatten$1(xs) {\n    var r = [];\n\n    for (var i = 0, len = xs.length; i < len; ++i) {\n      if (!isArray(xs[i])) {\n        throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n      }\n\n      nativePush.apply(r, xs[i]);\n    }\n\n    return r;\n  };\n\n  var bind$2 = function bind$2(xs, f) {\n    return flatten$1(map$1(xs, f));\n  };\n\n  var forall = function forall(xs, pred) {\n    for (var i = 0, len = xs.length; i < len; ++i) {\n      var x = xs[i];\n\n      if (pred(x, i) !== true) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var reverse = function reverse(xs) {\n    var r = nativeSlice.call(xs, 0);\n    r.reverse();\n    return r;\n  };\n\n  var mapToObject = function mapToObject(xs, f) {\n    var r = {};\n\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      r[String(x)] = f(x, i);\n    }\n\n    return r;\n  };\n\n  var pure = function pure(x) {\n    return [x];\n  };\n\n  var sort$1 = function sort$1(xs, comparator) {\n    var copy = nativeSlice.call(xs, 0);\n    copy.sort(comparator);\n    return copy;\n  };\n\n  var get$d = function get$d(xs, i) {\n    return i >= 0 && i < xs.length ? Optional.some(xs[i]) : Optional.none();\n  };\n\n  var head = function head(xs) {\n    return get$d(xs, 0);\n  };\n\n  var last$2 = function last$2(xs) {\n    return get$d(xs, xs.length - 1);\n  };\n\n  var findMap = function findMap(arr, f) {\n    for (var i = 0; i < arr.length; i++) {\n      var r = f(arr[i], i);\n\n      if (r.isSome()) {\n        return r;\n      }\n    }\n\n    return Optional.none();\n  };\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) {\n          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n      }\n\n      return t;\n    };\n\n    return _assign.apply(this, arguments);\n  };\n\n  function __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n        if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n        ar[i] = from[i];\n      }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n  }\n\n  var cached = function cached(f) {\n    var called = false;\n    var r;\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      if (!called) {\n        called = true;\n        r = f.apply(null, args);\n      }\n\n      return r;\n    };\n  };\n\n  var DeviceType = function DeviceType(os, browser, userAgent, mediaMatch) {\n    var isiPad = os.isiOS() && /ipad/i.test(userAgent) === true;\n    var isiPhone = os.isiOS() && !isiPad;\n    var isMobile = os.isiOS() || os.isAndroid();\n    var isTouch = isMobile || mediaMatch('(pointer:coarse)');\n    var isTablet = isiPad || !isiPhone && isMobile && mediaMatch('(min-device-width:768px)');\n    var isPhone = isiPhone || isMobile && !isTablet;\n    var iOSwebview = browser.isSafari() && os.isiOS() && /safari/i.test(userAgent) === false;\n    var isDesktop = !isPhone && !isTablet && !iOSwebview;\n    return {\n      isiPad: constant(isiPad),\n      isiPhone: constant(isiPhone),\n      isTablet: constant(isTablet),\n      isPhone: constant(isPhone),\n      isTouch: constant(isTouch),\n      isAndroid: os.isAndroid,\n      isiOS: os.isiOS,\n      isWebView: constant(iOSwebview),\n      isDesktop: constant(isDesktop)\n    };\n  };\n\n  var firstMatch = function firstMatch(regexes, s) {\n    for (var i = 0; i < regexes.length; i++) {\n      var x = regexes[i];\n\n      if (x.test(s)) {\n        return x;\n      }\n    }\n\n    return undefined;\n  };\n\n  var find = function find(regexes, agent) {\n    var r = firstMatch(regexes, agent);\n\n    if (!r) {\n      return {\n        major: 0,\n        minor: 0\n      };\n    }\n\n    var group = function group(i) {\n      return Number(agent.replace(r, '$' + i));\n    };\n\n    return nu$2(group(1), group(2));\n  };\n\n  var detect$6 = function detect$6(versionRegexes, agent) {\n    var cleanedAgent = String(agent).toLowerCase();\n\n    if (versionRegexes.length === 0) {\n      return unknown$2();\n    }\n\n    return find(versionRegexes, cleanedAgent);\n  };\n\n  var unknown$2 = function unknown$2() {\n    return nu$2(0, 0);\n  };\n\n  var nu$2 = function nu$2(major, minor) {\n    return {\n      major: major,\n      minor: minor\n    };\n  };\n\n  var Version = {\n    nu: nu$2,\n    detect: detect$6,\n    unknown: unknown$2\n  };\n\n  var detectBrowser$1 = function detectBrowser$1(browsers, userAgentData) {\n    return findMap(userAgentData.brands, function (uaBrand) {\n      var lcBrand = uaBrand.brand.toLowerCase();\n      return find$1(browsers, function (browser) {\n        var _a;\n\n        return lcBrand === ((_a = browser.brand) === null || _a === void 0 ? void 0 : _a.toLowerCase());\n      }).map(function (info) {\n        return {\n          current: info.name,\n          version: Version.nu(parseInt(uaBrand.version, 10), 0)\n        };\n      });\n    });\n  };\n\n  var detect$5 = function detect$5(candidates, userAgent) {\n    var agent = String(userAgent).toLowerCase();\n    return find$1(candidates, function (candidate) {\n      return candidate.search(agent);\n    });\n  };\n\n  var detectBrowser = function detectBrowser(browsers, userAgent) {\n    return detect$5(browsers, userAgent).map(function (browser) {\n      var version = Version.detect(browser.versionRegexes, userAgent);\n      return {\n        current: browser.name,\n        version: version\n      };\n    });\n  };\n\n  var detectOs = function detectOs(oses, userAgent) {\n    return detect$5(oses, userAgent).map(function (os) {\n      var version = Version.detect(os.versionRegexes, userAgent);\n      return {\n        current: os.name,\n        version: version\n      };\n    });\n  };\n\n  var removeFromStart = function removeFromStart(str, numChars) {\n    return str.substring(numChars);\n  };\n\n  var checkRange = function checkRange(str, substr, start) {\n    return substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n  };\n\n  var removeLeading = function removeLeading(str, prefix) {\n    return startsWith(str, prefix) ? removeFromStart(str, prefix.length) : str;\n  };\n\n  var contains$1 = function contains$1(str, substr) {\n    return str.indexOf(substr) !== -1;\n  };\n\n  var startsWith = function startsWith(str, prefix) {\n    return checkRange(str, prefix, 0);\n  };\n\n  var endsWith = function endsWith(str, suffix) {\n    return checkRange(str, suffix, str.length - suffix.length);\n  };\n\n  var blank = function blank(r) {\n    return function (s) {\n      return s.replace(r, '');\n    };\n  };\n\n  var trim = blank(/^\\s+|\\s+$/g);\n\n  var isNotEmpty = function isNotEmpty(s) {\n    return s.length > 0;\n  };\n\n  var isEmpty$1 = function isEmpty$1(s) {\n    return !isNotEmpty(s);\n  };\n\n  var toFloat = function toFloat(value) {\n    var num = parseFloat(value);\n    return isNaN(num) ? Optional.none() : Optional.some(num);\n  };\n\n  var normalVersionRegex = /.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/;\n\n  var checkContains = function checkContains(target) {\n    return function (uastring) {\n      return contains$1(uastring, target);\n    };\n  };\n\n  var browsers = [{\n    name: 'Edge',\n    versionRegexes: [/.*?edge\\/ ?([0-9]+)\\.([0-9]+)$/],\n    search: function search(uastring) {\n      return contains$1(uastring, 'edge/') && contains$1(uastring, 'chrome') && contains$1(uastring, 'safari') && contains$1(uastring, 'applewebkit');\n    }\n  }, {\n    name: 'Chrome',\n    brand: 'Chromium',\n    versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/, normalVersionRegex],\n    search: function search(uastring) {\n      return contains$1(uastring, 'chrome') && !contains$1(uastring, 'chromeframe');\n    }\n  }, {\n    name: 'IE',\n    versionRegexes: [/.*?msie\\ ?([0-9]+)\\.([0-9]+).*/, /.*?rv:([0-9]+)\\.([0-9]+).*/],\n    search: function search(uastring) {\n      return contains$1(uastring, 'msie') || contains$1(uastring, 'trident');\n    }\n  }, {\n    name: 'Opera',\n    versionRegexes: [normalVersionRegex, /.*?opera\\/([0-9]+)\\.([0-9]+).*/],\n    search: checkContains('opera')\n  }, {\n    name: 'Firefox',\n    versionRegexes: [/.*?firefox\\/\\ ?([0-9]+)\\.([0-9]+).*/],\n    search: checkContains('firefox')\n  }, {\n    name: 'Safari',\n    versionRegexes: [normalVersionRegex, /.*?cpu os ([0-9]+)_([0-9]+).*/],\n    search: function search(uastring) {\n      return (contains$1(uastring, 'safari') || contains$1(uastring, 'mobile/')) && contains$1(uastring, 'applewebkit');\n    }\n  }];\n  var oses = [{\n    name: 'Windows',\n    search: checkContains('win'),\n    versionRegexes: [/.*?windows\\ nt\\ ?([0-9]+)\\.([0-9]+).*/]\n  }, {\n    name: 'iOS',\n    search: function search(uastring) {\n      return contains$1(uastring, 'iphone') || contains$1(uastring, 'ipad');\n    },\n    versionRegexes: [/.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/, /.*cpu os ([0-9]+)_([0-9]+).*/, /.*cpu iphone os ([0-9]+)_([0-9]+).*/]\n  }, {\n    name: 'Android',\n    search: checkContains('android'),\n    versionRegexes: [/.*?android\\ ?([0-9]+)\\.([0-9]+).*/]\n  }, {\n    name: 'OSX',\n    search: checkContains('mac os x'),\n    versionRegexes: [/.*?mac\\ os\\ x\\ ?([0-9]+)_([0-9]+).*/]\n  }, {\n    name: 'Linux',\n    search: checkContains('linux'),\n    versionRegexes: []\n  }, {\n    name: 'Solaris',\n    search: checkContains('sunos'),\n    versionRegexes: []\n  }, {\n    name: 'FreeBSD',\n    search: checkContains('freebsd'),\n    versionRegexes: []\n  }, {\n    name: 'ChromeOS',\n    search: checkContains('cros'),\n    versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/]\n  }];\n  var PlatformInfo = {\n    browsers: constant(browsers),\n    oses: constant(oses)\n  };\n  var edge = 'Edge';\n  var chrome = 'Chrome';\n  var ie = 'IE';\n  var opera = 'Opera';\n  var firefox = 'Firefox';\n  var safari = 'Safari';\n\n  var unknown$1 = function unknown$1() {\n    return nu$1({\n      current: undefined,\n      version: Version.unknown()\n    });\n  };\n\n  var nu$1 = function nu$1(info) {\n    var current = info.current;\n    var version = info.version;\n\n    var isBrowser = function isBrowser(name) {\n      return function () {\n        return current === name;\n      };\n    };\n\n    return {\n      current: current,\n      version: version,\n      isEdge: isBrowser(edge),\n      isChrome: isBrowser(chrome),\n      isIE: isBrowser(ie),\n      isOpera: isBrowser(opera),\n      isFirefox: isBrowser(firefox),\n      isSafari: isBrowser(safari)\n    };\n  };\n\n  var Browser = {\n    unknown: unknown$1,\n    nu: nu$1,\n    edge: constant(edge),\n    chrome: constant(chrome),\n    ie: constant(ie),\n    opera: constant(opera),\n    firefox: constant(firefox),\n    safari: constant(safari)\n  };\n  var windows = 'Windows';\n  var ios = 'iOS';\n  var android = 'Android';\n  var linux = 'Linux';\n  var osx = 'OSX';\n  var solaris = 'Solaris';\n  var freebsd = 'FreeBSD';\n  var chromeos = 'ChromeOS';\n\n  var unknown = function unknown() {\n    return nu({\n      current: undefined,\n      version: Version.unknown()\n    });\n  };\n\n  var nu = function nu(info) {\n    var current = info.current;\n    var version = info.version;\n\n    var isOS = function isOS(name) {\n      return function () {\n        return current === name;\n      };\n    };\n\n    return {\n      current: current,\n      version: version,\n      isWindows: isOS(windows),\n      isiOS: isOS(ios),\n      isAndroid: isOS(android),\n      isOSX: isOS(osx),\n      isLinux: isOS(linux),\n      isSolaris: isOS(solaris),\n      isFreeBSD: isOS(freebsd),\n      isChromeOS: isOS(chromeos)\n    };\n  };\n\n  var OperatingSystem = {\n    unknown: unknown,\n    nu: nu,\n    windows: constant(windows),\n    ios: constant(ios),\n    android: constant(android),\n    linux: constant(linux),\n    osx: constant(osx),\n    solaris: constant(solaris),\n    freebsd: constant(freebsd),\n    chromeos: constant(chromeos)\n  };\n\n  var detect$4 = function detect$4(userAgent, userAgentDataOpt, mediaMatch) {\n    var browsers = PlatformInfo.browsers();\n    var oses = PlatformInfo.oses();\n    var browser = userAgentDataOpt.bind(function (userAgentData) {\n      return detectBrowser$1(browsers, userAgentData);\n    }).orThunk(function () {\n      return detectBrowser(browsers, userAgent);\n    }).fold(Browser.unknown, Browser.nu);\n    var os = detectOs(oses, userAgent).fold(OperatingSystem.unknown, OperatingSystem.nu);\n    var deviceType = DeviceType(os, browser, userAgent, mediaMatch);\n    return {\n      browser: browser,\n      os: os,\n      deviceType: deviceType\n    };\n  };\n\n  var PlatformDetection = {\n    detect: detect$4\n  };\n\n  var mediaMatch = function mediaMatch(query) {\n    return window.matchMedia(query).matches;\n  };\n\n  var platform = cached(function () {\n    return PlatformDetection.detect(navigator.userAgent, Optional.from(navigator.userAgentData), mediaMatch);\n  });\n\n  var detect$3 = function detect$3() {\n    return platform();\n  };\n\n  var compareDocumentPosition = function compareDocumentPosition(a, b, match) {\n    return (a.compareDocumentPosition(b) & match) !== 0;\n  };\n\n  var documentPositionContainedBy = function documentPositionContainedBy(a, b) {\n    return compareDocumentPosition(a, b, Node.DOCUMENT_POSITION_CONTAINED_BY);\n  };\n\n  var COMMENT = 8;\n  var DOCUMENT = 9;\n  var DOCUMENT_FRAGMENT = 11;\n  var ELEMENT = 1;\n  var TEXT = 3;\n\n  var fromHtml$1 = function fromHtml$1(html, scope) {\n    var doc = scope || document;\n    var div = doc.createElement('div');\n    div.innerHTML = html;\n\n    if (!div.hasChildNodes() || div.childNodes.length > 1) {\n      console.error('HTML does not have a single root node', html);\n      throw new Error('HTML must have a single root node');\n    }\n\n    return fromDom$1(div.childNodes[0]);\n  };\n\n  var fromTag = function fromTag(tag, scope) {\n    var doc = scope || document;\n    var node = doc.createElement(tag);\n    return fromDom$1(node);\n  };\n\n  var fromText = function fromText(text, scope) {\n    var doc = scope || document;\n    var node = doc.createTextNode(text);\n    return fromDom$1(node);\n  };\n\n  var fromDom$1 = function fromDom$1(node) {\n    if (node === null || node === undefined) {\n      throw new Error('Node cannot be null or undefined');\n    }\n\n    return {\n      dom: node\n    };\n  };\n\n  var fromPoint$1 = function fromPoint$1(docElm, x, y) {\n    return Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom$1);\n  };\n\n  var SugarElement = {\n    fromHtml: fromHtml$1,\n    fromTag: fromTag,\n    fromText: fromText,\n    fromDom: fromDom$1,\n    fromPoint: fromPoint$1\n  };\n\n  var is$2 = function is$2(element, selector) {\n    var dom = element.dom;\n\n    if (dom.nodeType !== ELEMENT) {\n      return false;\n    } else {\n      var elem = dom;\n\n      if (elem.matches !== undefined) {\n        return elem.matches(selector);\n      } else if (elem.msMatchesSelector !== undefined) {\n        return elem.msMatchesSelector(selector);\n      } else if (elem.webkitMatchesSelector !== undefined) {\n        return elem.webkitMatchesSelector(selector);\n      } else if (elem.mozMatchesSelector !== undefined) {\n        return elem.mozMatchesSelector(selector);\n      } else {\n        throw new Error('Browser lacks native selectors');\n      }\n    }\n  };\n\n  var bypassSelector = function bypassSelector(dom) {\n    return dom.nodeType !== ELEMENT && dom.nodeType !== DOCUMENT && dom.nodeType !== DOCUMENT_FRAGMENT || dom.childElementCount === 0;\n  };\n\n  var all$1 = function all$1(selector, scope) {\n    var base = scope === undefined ? document : scope.dom;\n    return bypassSelector(base) ? [] : map$1(base.querySelectorAll(selector), SugarElement.fromDom);\n  };\n\n  var one = function one(selector, scope) {\n    var base = scope === undefined ? document : scope.dom;\n    return bypassSelector(base) ? Optional.none() : Optional.from(base.querySelector(selector)).map(SugarElement.fromDom);\n  };\n\n  var eq$1 = function eq$1(e1, e2) {\n    return e1.dom === e2.dom;\n  };\n\n  var regularContains = function regularContains(e1, e2) {\n    var d1 = e1.dom;\n    var d2 = e2.dom;\n    return d1 === d2 ? false : d1.contains(d2);\n  };\n\n  var ieContains = function ieContains(e1, e2) {\n    return documentPositionContainedBy(e1.dom, e2.dom);\n  };\n\n  var contains = function contains(e1, e2) {\n    return detect$3().browser.isIE() ? ieContains(e1, e2) : regularContains(e1, e2);\n  };\n\n  var is$1 = is$2;\n  var keys = Object.keys;\n  var hasOwnProperty = Object.hasOwnProperty;\n\n  var each$1 = function each$1(obj, f) {\n    var props = keys(obj);\n\n    for (var k = 0, len = props.length; k < len; k++) {\n      var i = props[k];\n      var x = obj[i];\n      f(x, i);\n    }\n  };\n\n  var map = function map(obj, f) {\n    return tupleMap(obj, function (x, i) {\n      return {\n        k: i,\n        v: f(x, i)\n      };\n    });\n  };\n\n  var tupleMap = function tupleMap(obj, f) {\n    var r = {};\n    each$1(obj, function (x, i) {\n      var tuple = f(x, i);\n      r[tuple.k] = tuple.v;\n    });\n    return r;\n  };\n\n  var objAcc = function objAcc(r) {\n    return function (x, i) {\n      r[i] = x;\n    };\n  };\n\n  var internalFilter = function internalFilter(obj, pred, onTrue, onFalse) {\n    var r = {};\n    each$1(obj, function (x, i) {\n      (pred(x, i) ? onTrue : onFalse)(x, i);\n    });\n    return r;\n  };\n\n  var filter$1 = function filter$1(obj, pred) {\n    var t = {};\n    internalFilter(obj, pred, objAcc(t), noop);\n    return t;\n  };\n\n  var mapToArray = function mapToArray(obj, f) {\n    var r = [];\n    each$1(obj, function (value, name) {\n      r.push(f(value, name));\n    });\n    return r;\n  };\n\n  var values = function values(obj) {\n    return mapToArray(obj, identity);\n  };\n\n  var size = function size(obj) {\n    return keys(obj).length;\n  };\n\n  var get$c = function get$c(obj, key) {\n    return has$1(obj, key) ? Optional.from(obj[key]) : Optional.none();\n  };\n\n  var has$1 = function has$1(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  var hasNonNullableKey = function hasNonNullableKey(obj, key) {\n    return has$1(obj, key) && obj[key] !== undefined && obj[key] !== null;\n  };\n\n  var isEmpty = function isEmpty(r) {\n    for (var x in r) {\n      if (hasOwnProperty.call(r, x)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var validSectionList = ['tfoot', 'thead', 'tbody', 'colgroup'];\n\n  var isValidSection = function isValidSection(parentName) {\n    return contains$2(validSectionList, parentName);\n  };\n\n  var grid = function grid(rows, columns) {\n    return {\n      rows: rows,\n      columns: columns\n    };\n  };\n\n  var address = function address(row, column) {\n    return {\n      row: row,\n      column: column\n    };\n  };\n\n  var detail = function detail(element, rowspan, colspan) {\n    return {\n      element: element,\n      rowspan: rowspan,\n      colspan: colspan\n    };\n  };\n\n  var detailnew = function detailnew(element, rowspan, colspan, isNew) {\n    return {\n      element: element,\n      rowspan: rowspan,\n      colspan: colspan,\n      isNew: isNew\n    };\n  };\n\n  var extended = function extended(element, rowspan, colspan, row, column, isLocked) {\n    return {\n      element: element,\n      rowspan: rowspan,\n      colspan: colspan,\n      row: row,\n      column: column,\n      isLocked: isLocked\n    };\n  };\n\n  var rowdetail = function rowdetail(element, cells, section) {\n    return {\n      element: element,\n      cells: cells,\n      section: section\n    };\n  };\n\n  var rowdetailnew = function rowdetailnew(element, cells, section, isNew) {\n    return {\n      element: element,\n      cells: cells,\n      section: section,\n      isNew: isNew\n    };\n  };\n\n  var elementnew = function elementnew(element, isNew, isLocked) {\n    return {\n      element: element,\n      isNew: isNew,\n      isLocked: isLocked\n    };\n  };\n\n  var rowcells = function rowcells(element, cells, section, isNew) {\n    return {\n      element: element,\n      cells: cells,\n      section: section,\n      isNew: isNew\n    };\n  };\n\n  var bounds = function bounds(startRow, startCol, finishRow, finishCol) {\n    return {\n      startRow: startRow,\n      startCol: startCol,\n      finishRow: finishRow,\n      finishCol: finishCol\n    };\n  };\n\n  var columnext = function columnext(element, colspan, column) {\n    return {\n      element: element,\n      colspan: colspan,\n      column: column\n    };\n  };\n\n  var colgroup = function colgroup(element, columns) {\n    return {\n      element: element,\n      columns: columns\n    };\n  };\n\n  typeof window !== 'undefined' ? window : Function('return this;')();\n\n  var name = function name(element) {\n    var r = element.dom.nodeName;\n    return r.toLowerCase();\n  };\n\n  var type$1 = function type$1(element) {\n    return element.dom.nodeType;\n  };\n\n  var isType = function isType(t) {\n    return function (element) {\n      return type$1(element) === t;\n    };\n  };\n\n  var isComment = function isComment(element) {\n    return type$1(element) === COMMENT || name(element) === '#comment';\n  };\n\n  var isElement = isType(ELEMENT);\n  var isText = isType(TEXT);\n  var isDocument = isType(DOCUMENT);\n  var isDocumentFragment = isType(DOCUMENT_FRAGMENT);\n\n  var isTag = function isTag(tag) {\n    return function (e) {\n      return isElement(e) && name(e) === tag;\n    };\n  };\n\n  var owner = function owner(element) {\n    return SugarElement.fromDom(element.dom.ownerDocument);\n  };\n\n  var documentOrOwner = function documentOrOwner(dos) {\n    return isDocument(dos) ? dos : owner(dos);\n  };\n\n  var defaultView = function defaultView(element) {\n    return SugarElement.fromDom(documentOrOwner(element).dom.defaultView);\n  };\n\n  var parent = function parent(element) {\n    return Optional.from(element.dom.parentNode).map(SugarElement.fromDom);\n  };\n\n  var parentElement = function parentElement(element) {\n    return Optional.from(element.dom.parentElement).map(SugarElement.fromDom);\n  };\n\n  var parents = function parents(element, isRoot) {\n    var stop = isFunction(isRoot) ? isRoot : never;\n    var dom = element.dom;\n    var ret = [];\n\n    while (dom.parentNode !== null && dom.parentNode !== undefined) {\n      var rawParent = dom.parentNode;\n      var p = SugarElement.fromDom(rawParent);\n      ret.push(p);\n\n      if (stop(p) === true) {\n        break;\n      } else {\n        dom = rawParent;\n      }\n    }\n\n    return ret;\n  };\n\n  var prevSibling = function prevSibling(element) {\n    return Optional.from(element.dom.previousSibling).map(SugarElement.fromDom);\n  };\n\n  var nextSibling = function nextSibling(element) {\n    return Optional.from(element.dom.nextSibling).map(SugarElement.fromDom);\n  };\n\n  var children$3 = function children$3(element) {\n    return map$1(element.dom.childNodes, SugarElement.fromDom);\n  };\n\n  var child$3 = function child$3(element, index) {\n    var cs = element.dom.childNodes;\n    return Optional.from(cs[index]).map(SugarElement.fromDom);\n  };\n\n  var firstChild = function firstChild(element) {\n    return child$3(element, 0);\n  };\n\n  var isShadowRoot = function isShadowRoot(dos) {\n    return isDocumentFragment(dos) && isNonNullable(dos.dom.host);\n  };\n\n  var supported = isFunction(Element.prototype.attachShadow) && isFunction(Node.prototype.getRootNode);\n  var isSupported$1 = constant(supported);\n  var getRootNode = supported ? function (e) {\n    return SugarElement.fromDom(e.dom.getRootNode());\n  } : documentOrOwner;\n\n  var getShadowRoot = function getShadowRoot(e) {\n    var r = getRootNode(e);\n    return isShadowRoot(r) ? Optional.some(r) : Optional.none();\n  };\n\n  var getShadowHost = function getShadowHost(e) {\n    return SugarElement.fromDom(e.dom.host);\n  };\n\n  var getOriginalEventTarget = function getOriginalEventTarget(event) {\n    if (isSupported$1() && isNonNullable(event.target)) {\n      var el = SugarElement.fromDom(event.target);\n\n      if (isElement(el) && isOpenShadowHost(el)) {\n        if (event.composed && event.composedPath) {\n          var composedPath = event.composedPath();\n\n          if (composedPath) {\n            return head(composedPath);\n          }\n        }\n      }\n    }\n\n    return Optional.from(event.target);\n  };\n\n  var isOpenShadowHost = function isOpenShadowHost(element) {\n    return isNonNullable(element.dom.shadowRoot);\n  };\n\n  var inBody = function inBody(element) {\n    var dom = isText(element) ? element.dom.parentNode : element.dom;\n\n    if (dom === undefined || dom === null || dom.ownerDocument === null) {\n      return false;\n    }\n\n    var doc = dom.ownerDocument;\n    return getShadowRoot(SugarElement.fromDom(dom)).fold(function () {\n      return doc.body.contains(dom);\n    }, compose1(inBody, getShadowHost));\n  };\n\n  var body$1 = function body$1() {\n    return getBody$1(SugarElement.fromDom(document));\n  };\n\n  var getBody$1 = function getBody$1(doc) {\n    var b = doc.dom.body;\n\n    if (b === null || b === undefined) {\n      throw new Error('Body is not available yet');\n    }\n\n    return SugarElement.fromDom(b);\n  };\n\n  var ancestors$4 = function ancestors$4(scope, predicate, isRoot) {\n    return filter$2(parents(scope, isRoot), predicate);\n  };\n\n  var children$2 = function children$2(scope, predicate) {\n    return filter$2(children$3(scope), predicate);\n  };\n\n  var descendants$1 = function descendants$1(scope, predicate) {\n    var result = [];\n    each$2(children$3(scope), function (x) {\n      if (predicate(x)) {\n        result = result.concat([x]);\n      }\n\n      result = result.concat(descendants$1(x, predicate));\n    });\n    return result;\n  };\n\n  var ancestors$3 = function ancestors$3(scope, selector, isRoot) {\n    return ancestors$4(scope, function (e) {\n      return is$2(e, selector);\n    }, isRoot);\n  };\n\n  var children$1 = function children$1(scope, selector) {\n    return children$2(scope, function (e) {\n      return is$2(e, selector);\n    });\n  };\n\n  var descendants = function descendants(scope, selector) {\n    return all$1(selector, scope);\n  };\n\n  function ClosestOrAncestor(is, ancestor, scope, a, isRoot) {\n    if (is(scope, a)) {\n      return Optional.some(scope);\n    } else if (isFunction(isRoot) && isRoot(scope)) {\n      return Optional.none();\n    } else {\n      return ancestor(scope, a, isRoot);\n    }\n  }\n\n  var ancestor$2 = function ancestor$2(scope, predicate, isRoot) {\n    var element = scope.dom;\n    var stop = isFunction(isRoot) ? isRoot : never;\n\n    while (element.parentNode) {\n      element = element.parentNode;\n      var el = SugarElement.fromDom(element);\n\n      if (predicate(el)) {\n        return Optional.some(el);\n      } else if (stop(el)) {\n        break;\n      }\n    }\n\n    return Optional.none();\n  };\n\n  var closest$2 = function closest$2(scope, predicate, isRoot) {\n    var is = function is(s, test) {\n      return test(s);\n    };\n\n    return ClosestOrAncestor(is, ancestor$2, scope, predicate, isRoot);\n  };\n\n  var child$2 = function child$2(scope, predicate) {\n    var pred = function pred(node) {\n      return predicate(SugarElement.fromDom(node));\n    };\n\n    var result = find$1(scope.dom.childNodes, pred);\n    return result.map(SugarElement.fromDom);\n  };\n\n  var descendant$1 = function descendant$1(scope, predicate) {\n    var descend = function descend(node) {\n      for (var i = 0; i < node.childNodes.length; i++) {\n        var child_1 = SugarElement.fromDom(node.childNodes[i]);\n\n        if (predicate(child_1)) {\n          return Optional.some(child_1);\n        }\n\n        var res = descend(node.childNodes[i]);\n\n        if (res.isSome()) {\n          return res;\n        }\n      }\n\n      return Optional.none();\n    };\n\n    return descend(scope.dom);\n  };\n\n  var ancestor$1 = function ancestor$1(scope, selector, isRoot) {\n    return ancestor$2(scope, function (e) {\n      return is$2(e, selector);\n    }, isRoot);\n  };\n\n  var child$1 = function child$1(scope, selector) {\n    return child$2(scope, function (e) {\n      return is$2(e, selector);\n    });\n  };\n\n  var descendant = function descendant(scope, selector) {\n    return one(selector, scope);\n  };\n\n  var closest$1 = function closest$1(scope, selector, isRoot) {\n    var is = function is(element, selector) {\n      return is$2(element, selector);\n    };\n\n    return ClosestOrAncestor(is, ancestor$1, scope, selector, isRoot);\n  };\n\n  var rawSet = function rawSet(dom, key, value) {\n    if (isString(value) || isBoolean(value) || isNumber(value)) {\n      dom.setAttribute(key, value + '');\n    } else {\n      console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n      throw new Error('Attribute value was not simple');\n    }\n  };\n\n  var set$2 = function set$2(element, key, value) {\n    rawSet(element.dom, key, value);\n  };\n\n  var setAll$1 = function setAll$1(element, attrs) {\n    var dom = element.dom;\n    each$1(attrs, function (v, k) {\n      rawSet(dom, k, v);\n    });\n  };\n\n  var setOptions = function setOptions(element, attrs) {\n    each$1(attrs, function (v, k) {\n      v.fold(function () {\n        remove$7(element, k);\n      }, function (value) {\n        rawSet(element.dom, k, value);\n      });\n    });\n  };\n\n  var get$b = function get$b(element, key) {\n    var v = element.dom.getAttribute(key);\n    return v === null ? undefined : v;\n  };\n\n  var getOpt = function getOpt(element, key) {\n    return Optional.from(get$b(element, key));\n  };\n\n  var remove$7 = function remove$7(element, key) {\n    element.dom.removeAttribute(key);\n  };\n\n  var clone$2 = function clone$2(element) {\n    return foldl(element.dom.attributes, function (acc, attr) {\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n  };\n\n  var is = function is(lhs, rhs, comparator) {\n    if (comparator === void 0) {\n      comparator = tripleEquals;\n    }\n\n    return lhs.exists(function (left) {\n      return comparator(left, rhs);\n    });\n  };\n\n  var cat = function cat(arr) {\n    var r = [];\n\n    var push = function push(x) {\n      r.push(x);\n    };\n\n    for (var i = 0; i < arr.length; i++) {\n      arr[i].each(push);\n    }\n\n    return r;\n  };\n\n  var lift2 = function lift2(oa, ob, f) {\n    return oa.isSome() && ob.isSome() ? Optional.some(f(oa.getOrDie(), ob.getOrDie())) : Optional.none();\n  };\n\n  var bindFrom = function bindFrom(a, f) {\n    return a !== undefined && a !== null ? f(a) : Optional.none();\n  };\n\n  var flatten = function flatten(oot) {\n    return oot.bind(identity);\n  };\n\n  var someIf = function someIf(b, a) {\n    return b ? Optional.some(a) : Optional.none();\n  };\n\n  var isSupported = function isSupported(dom) {\n    return dom.style !== undefined && isFunction(dom.style.getPropertyValue);\n  };\n\n  var internalSet = function internalSet(dom, property, value) {\n    if (!isString(value)) {\n      console.error('Invalid call to CSS.set. Property ', property, ':: Value ', value, ':: Element ', dom);\n      throw new Error('CSS value must be a string: ' + value);\n    }\n\n    if (isSupported(dom)) {\n      dom.style.setProperty(property, value);\n    }\n  };\n\n  var internalRemove = function internalRemove(dom, property) {\n    if (isSupported(dom)) {\n      dom.style.removeProperty(property);\n    }\n  };\n\n  var set$1 = function set$1(element, property, value) {\n    var dom = element.dom;\n    internalSet(dom, property, value);\n  };\n\n  var setAll = function setAll(element, css) {\n    var dom = element.dom;\n    each$1(css, function (v, k) {\n      internalSet(dom, k, v);\n    });\n  };\n\n  var get$a = function get$a(element, property) {\n    var dom = element.dom;\n    var styles = window.getComputedStyle(dom);\n    var r = styles.getPropertyValue(property);\n    return r === '' && !inBody(element) ? getUnsafeProperty(dom, property) : r;\n  };\n\n  var getUnsafeProperty = function getUnsafeProperty(dom, property) {\n    return isSupported(dom) ? dom.style.getPropertyValue(property) : '';\n  };\n\n  var getRaw$2 = function getRaw$2(element, property) {\n    var dom = element.dom;\n    var raw = getUnsafeProperty(dom, property);\n    return Optional.from(raw).filter(function (r) {\n      return r.length > 0;\n    });\n  };\n\n  var remove$6 = function remove$6(element, property) {\n    var dom = element.dom;\n    internalRemove(dom, property);\n\n    if (is(getOpt(element, 'style').map(trim), '')) {\n      remove$7(element, 'style');\n    }\n  };\n\n  var copy$2 = function copy$2(source, target) {\n    var sourceDom = source.dom;\n    var targetDom = target.dom;\n\n    if (isSupported(sourceDom) && isSupported(targetDom)) {\n      targetDom.style.cssText = sourceDom.style.cssText;\n    }\n  };\n\n  var getAttrValue = function getAttrValue(cell, name, fallback) {\n    if (fallback === void 0) {\n      fallback = 0;\n    }\n\n    return getOpt(cell, name).map(function (value) {\n      return parseInt(value, 10);\n    }).getOr(fallback);\n  };\n\n  var getSpan = function getSpan(cell, type) {\n    return getAttrValue(cell, type, 1);\n  };\n\n  var hasColspan = function hasColspan(cellOrCol) {\n    if (isTag('col')(cellOrCol)) {\n      return getAttrValue(cellOrCol, 'span', 1) > 1;\n    } else {\n      return getSpan(cellOrCol, 'colspan') > 1;\n    }\n  };\n\n  var hasRowspan = function hasRowspan(cell) {\n    return getSpan(cell, 'rowspan') > 1;\n  };\n\n  var getCssValue = function getCssValue(element, property) {\n    return parseInt(get$a(element, property), 10);\n  };\n\n  var minWidth = constant(10);\n  var minHeight = constant(10);\n\n  var firstLayer = function firstLayer(scope, selector) {\n    return filterFirstLayer(scope, selector, always);\n  };\n\n  var filterFirstLayer = function filterFirstLayer(scope, selector, predicate) {\n    return bind$2(children$3(scope), function (x) {\n      if (is$2(x, selector)) {\n        return predicate(x) ? [x] : [];\n      } else {\n        return filterFirstLayer(x, selector, predicate);\n      }\n    });\n  };\n\n  var lookup = function lookup(tags, element, isRoot) {\n    if (isRoot === void 0) {\n      isRoot = never;\n    }\n\n    if (isRoot(element)) {\n      return Optional.none();\n    }\n\n    if (contains$2(tags, name(element))) {\n      return Optional.some(element);\n    }\n\n    var isRootOrUpperTable = function isRootOrUpperTable(elm) {\n      return is$2(elm, 'table') || isRoot(elm);\n    };\n\n    return ancestor$1(element, tags.join(','), isRootOrUpperTable);\n  };\n\n  var cell = function cell(element, isRoot) {\n    return lookup(['td', 'th'], element, isRoot);\n  };\n\n  var cells$1 = function cells$1(ancestor) {\n    return firstLayer(ancestor, 'th,td');\n  };\n\n  var columns$1 = function columns$1(ancestor) {\n    if (is$2(ancestor, 'colgroup')) {\n      return children$1(ancestor, 'col');\n    } else {\n      return bind$2(columnGroups(ancestor), function (columnGroup) {\n        return children$1(columnGroup, 'col');\n      });\n    }\n  };\n\n  var table = function table(element, isRoot) {\n    return closest$1(element, 'table', isRoot);\n  };\n\n  var rows$1 = function rows$1(ancestor) {\n    return firstLayer(ancestor, 'tr');\n  };\n\n  var columnGroups = function columnGroups(ancestor) {\n    return table(ancestor).fold(constant([]), function (table) {\n      return children$1(table, 'colgroup');\n    });\n  };\n\n  var fromRowsOrColGroups = function fromRowsOrColGroups(elems, getSection) {\n    return map$1(elems, function (row) {\n      if (name(row) === 'colgroup') {\n        var cells = map$1(columns$1(row), function (column) {\n          var colspan = getAttrValue(column, 'span', 1);\n          return detail(column, 1, colspan);\n        });\n        return rowdetail(row, cells, 'colgroup');\n      } else {\n        var cells = map$1(cells$1(row), function (cell) {\n          var rowspan = getAttrValue(cell, 'rowspan', 1);\n          var colspan = getAttrValue(cell, 'colspan', 1);\n          return detail(cell, rowspan, colspan);\n        });\n        return rowdetail(row, cells, getSection(row));\n      }\n    });\n  };\n\n  var getParentSection = function getParentSection(group) {\n    return parent(group).map(function (parent) {\n      var parentName = name(parent);\n      return isValidSection(parentName) ? parentName : 'tbody';\n    }).getOr('tbody');\n  };\n\n  var fromTable$1 = function fromTable$1(table) {\n    var rows = rows$1(table);\n    var columnGroups$1 = columnGroups(table);\n\n    var elems = __spreadArray(__spreadArray([], columnGroups$1, true), rows, true);\n\n    return fromRowsOrColGroups(elems, getParentSection);\n  };\n\n  var fromPastedRows = function fromPastedRows(elems, section) {\n    return fromRowsOrColGroups(elems, function () {\n      return section;\n    });\n  };\n\n  var addCells = function addCells(gridRow, index, cells) {\n    var existingCells = gridRow.cells;\n    var before = existingCells.slice(0, index);\n    var after = existingCells.slice(index);\n    var newCells = before.concat(cells).concat(after);\n    return setCells(gridRow, newCells);\n  };\n\n  var addCell = function addCell(gridRow, index, cell) {\n    return addCells(gridRow, index, [cell]);\n  };\n\n  var mutateCell = function mutateCell(gridRow, index, cell) {\n    var cells = gridRow.cells;\n    cells[index] = cell;\n  };\n\n  var setCells = function setCells(gridRow, cells) {\n    return rowcells(gridRow.element, cells, gridRow.section, gridRow.isNew);\n  };\n\n  var mapCells = function mapCells(gridRow, f) {\n    var cells = gridRow.cells;\n    var r = map$1(cells, f);\n    return rowcells(gridRow.element, r, gridRow.section, gridRow.isNew);\n  };\n\n  var getCell = function getCell(gridRow, index) {\n    return gridRow.cells[index];\n  };\n\n  var getCellElement = function getCellElement(gridRow, index) {\n    return getCell(gridRow, index).element;\n  };\n\n  var cellLength = function cellLength(gridRow) {\n    return gridRow.cells.length;\n  };\n\n  var extractGridDetails = function extractGridDetails(grid) {\n    var result = partition(grid, function (row) {\n      return row.section === 'colgroup';\n    });\n    return {\n      rows: result.fail,\n      cols: result.pass\n    };\n  };\n\n  var clone$1 = function clone$1(gridRow, cloneRow, cloneCell) {\n    var newCells = map$1(gridRow.cells, cloneCell);\n    return rowcells(cloneRow(gridRow.element), newCells, gridRow.section, true);\n  };\n\n  var LOCKED_COL_ATTR = 'data-snooker-locked-cols';\n\n  var getLockedColumnsFromTable = function getLockedColumnsFromTable(table) {\n    return getOpt(table, LOCKED_COL_ATTR).bind(function (lockedColStr) {\n      return Optional.from(lockedColStr.match(/\\d+/g));\n    }).map(function (lockedCols) {\n      return mapToObject(lockedCols, always);\n    });\n  };\n\n  var getLockedColumnsFromGrid = function getLockedColumnsFromGrid(grid) {\n    var locked = foldl(extractGridDetails(grid).rows, function (acc, row) {\n      each$2(row.cells, function (cell, idx) {\n        if (cell.isLocked) {\n          acc[idx] = true;\n        }\n      });\n      return acc;\n    }, {});\n    var lockedArr = mapToArray(locked, function (_val, key) {\n      return parseInt(key, 10);\n    });\n    return sort$1(lockedArr);\n  };\n\n  var key = function key(row, column) {\n    return row + ',' + column;\n  };\n\n  var getAt = function getAt(warehouse, row, column) {\n    return Optional.from(warehouse.access[key(row, column)]);\n  };\n\n  var findItem = function findItem(warehouse, item, comparator) {\n    var filtered = filterItems(warehouse, function (detail) {\n      return comparator(item, detail.element);\n    });\n    return filtered.length > 0 ? Optional.some(filtered[0]) : Optional.none();\n  };\n\n  var filterItems = function filterItems(warehouse, predicate) {\n    var all = bind$2(warehouse.all, function (r) {\n      return r.cells;\n    });\n    return filter$2(all, predicate);\n  };\n\n  var generateColumns = function generateColumns(rowData) {\n    var columnsGroup = {};\n    var index = 0;\n    each$2(rowData.cells, function (column) {\n      var colspan = column.colspan;\n      range$1(colspan, function (columnIndex) {\n        var colIndex = index + columnIndex;\n        columnsGroup[colIndex] = columnext(column.element, colspan, colIndex);\n      });\n      index += colspan;\n    });\n    return columnsGroup;\n  };\n\n  var generate$1 = function generate$1(list) {\n    var access = {};\n    var cells = [];\n    var tableOpt = head(list).map(function (rowData) {\n      return rowData.element;\n    }).bind(table);\n    var lockedColumns = tableOpt.bind(getLockedColumnsFromTable).getOr({});\n    var maxRows = 0;\n    var maxColumns = 0;\n    var rowCount = 0;\n\n    var _a = partition(list, function (rowData) {\n      return rowData.section === 'colgroup';\n    }),\n        colgroupRows = _a.pass,\n        rows = _a.fail;\n\n    each$2(rows, function (rowData) {\n      var currentRow = [];\n      each$2(rowData.cells, function (rowCell) {\n        var start = 0;\n\n        while (access[key(rowCount, start)] !== undefined) {\n          start++;\n        }\n\n        var isLocked = hasNonNullableKey(lockedColumns, start.toString());\n        var current = extended(rowCell.element, rowCell.rowspan, rowCell.colspan, rowCount, start, isLocked);\n\n        for (var occupiedColumnPosition = 0; occupiedColumnPosition < rowCell.colspan; occupiedColumnPosition++) {\n          for (var occupiedRowPosition = 0; occupiedRowPosition < rowCell.rowspan; occupiedRowPosition++) {\n            var rowPosition = rowCount + occupiedRowPosition;\n            var columnPosition = start + occupiedColumnPosition;\n            var newpos = key(rowPosition, columnPosition);\n            access[newpos] = current;\n            maxColumns = Math.max(maxColumns, columnPosition + 1);\n          }\n        }\n\n        currentRow.push(current);\n      });\n      maxRows++;\n      cells.push(rowdetail(rowData.element, currentRow, rowData.section));\n      rowCount++;\n    });\n\n    var _b = last$2(colgroupRows).map(function (rowData) {\n      var columns = generateColumns(rowData);\n      var colgroup$1 = colgroup(rowData.element, values(columns));\n      return {\n        colgroups: [colgroup$1],\n        columns: columns\n      };\n    }).getOrThunk(function () {\n      return {\n        colgroups: [],\n        columns: {}\n      };\n    }),\n        columns = _b.columns,\n        colgroups = _b.colgroups;\n\n    var grid$1 = grid(maxRows, maxColumns);\n    return {\n      grid: grid$1,\n      access: access,\n      all: cells,\n      columns: columns,\n      colgroups: colgroups\n    };\n  };\n\n  var fromTable = function fromTable(table) {\n    var list = fromTable$1(table);\n    return generate$1(list);\n  };\n\n  var justCells = function justCells(warehouse) {\n    return bind$2(warehouse.all, function (w) {\n      return w.cells;\n    });\n  };\n\n  var justColumns = function justColumns(warehouse) {\n    return values(warehouse.columns);\n  };\n\n  var hasColumns = function hasColumns(warehouse) {\n    return keys(warehouse.columns).length > 0;\n  };\n\n  var getColumnAt = function getColumnAt(warehouse, columnIndex) {\n    return Optional.from(warehouse.columns[columnIndex]);\n  };\n\n  var Warehouse = {\n    fromTable: fromTable,\n    generate: generate$1,\n    getAt: getAt,\n    findItem: findItem,\n    filterItems: filterItems,\n    justCells: justCells,\n    justColumns: justColumns,\n    hasColumns: hasColumns,\n    getColumnAt: getColumnAt\n  };\n\n  var inSelection = function inSelection(bounds, detail) {\n    var leftEdge = detail.column;\n    var rightEdge = detail.column + detail.colspan - 1;\n    var topEdge = detail.row;\n    var bottomEdge = detail.row + detail.rowspan - 1;\n    return leftEdge <= bounds.finishCol && rightEdge >= bounds.startCol && topEdge <= bounds.finishRow && bottomEdge >= bounds.startRow;\n  };\n\n  var isWithin = function isWithin(bounds, detail) {\n    return detail.column >= bounds.startCol && detail.column + detail.colspan - 1 <= bounds.finishCol && detail.row >= bounds.startRow && detail.row + detail.rowspan - 1 <= bounds.finishRow;\n  };\n\n  var isRectangular = function isRectangular(warehouse, bounds) {\n    var isRect = true;\n    var detailIsWithin = curry(isWithin, bounds);\n\n    for (var i = bounds.startRow; i <= bounds.finishRow; i++) {\n      for (var j = bounds.startCol; j <= bounds.finishCol; j++) {\n        isRect = isRect && Warehouse.getAt(warehouse, i, j).exists(detailIsWithin);\n      }\n    }\n\n    return isRect ? Optional.some(bounds) : Optional.none();\n  };\n\n  var getBounds = function getBounds(detailA, detailB) {\n    return bounds(Math.min(detailA.row, detailB.row), Math.min(detailA.column, detailB.column), Math.max(detailA.row + detailA.rowspan - 1, detailB.row + detailB.rowspan - 1), Math.max(detailA.column + detailA.colspan - 1, detailB.column + detailB.colspan - 1));\n  };\n\n  var getAnyBox = function getAnyBox(warehouse, startCell, finishCell) {\n    var startCoords = Warehouse.findItem(warehouse, startCell, eq$1);\n    var finishCoords = Warehouse.findItem(warehouse, finishCell, eq$1);\n    return startCoords.bind(function (sc) {\n      return finishCoords.map(function (fc) {\n        return getBounds(sc, fc);\n      });\n    });\n  };\n\n  var getBox$1 = function getBox$1(warehouse, startCell, finishCell) {\n    return getAnyBox(warehouse, startCell, finishCell).bind(function (bounds) {\n      return isRectangular(warehouse, bounds);\n    });\n  };\n\n  var moveBy$1 = function moveBy$1(warehouse, cell, row, column) {\n    return Warehouse.findItem(warehouse, cell, eq$1).bind(function (detail) {\n      var startRow = row > 0 ? detail.row + detail.rowspan - 1 : detail.row;\n      var startCol = column > 0 ? detail.column + detail.colspan - 1 : detail.column;\n      var dest = Warehouse.getAt(warehouse, startRow + row, startCol + column);\n      return dest.map(function (d) {\n        return d.element;\n      });\n    });\n  };\n\n  var intercepts$1 = function intercepts$1(warehouse, start, finish) {\n    return getAnyBox(warehouse, start, finish).map(function (bounds) {\n      var inside = Warehouse.filterItems(warehouse, curry(inSelection, bounds));\n      return map$1(inside, function (detail) {\n        return detail.element;\n      });\n    });\n  };\n\n  var parentCell = function parentCell(warehouse, innerCell) {\n    var isContainedBy = function isContainedBy(c1, c2) {\n      return contains(c2, c1);\n    };\n\n    return Warehouse.findItem(warehouse, innerCell, isContainedBy).map(function (detail) {\n      return detail.element;\n    });\n  };\n\n  var moveBy = function moveBy(cell, deltaRow, deltaColumn) {\n    return table(cell).bind(function (table) {\n      var warehouse = getWarehouse(table);\n      return moveBy$1(warehouse, cell, deltaRow, deltaColumn);\n    });\n  };\n\n  var intercepts = function intercepts(table, first, last) {\n    var warehouse = getWarehouse(table);\n    return intercepts$1(warehouse, first, last);\n  };\n\n  var nestedIntercepts = function nestedIntercepts(table, first, firstTable, last, lastTable) {\n    var warehouse = getWarehouse(table);\n    var optStartCell = eq$1(table, firstTable) ? Optional.some(first) : parentCell(warehouse, first);\n    var optLastCell = eq$1(table, lastTable) ? Optional.some(last) : parentCell(warehouse, last);\n    return optStartCell.bind(function (startCell) {\n      return optLastCell.bind(function (lastCell) {\n        return intercepts$1(warehouse, startCell, lastCell);\n      });\n    });\n  };\n\n  var getBox = function getBox(table, first, last) {\n    var warehouse = getWarehouse(table);\n    return getBox$1(warehouse, first, last);\n  };\n\n  var getWarehouse = Warehouse.fromTable;\n\n  var before$4 = function before$4(marker, element) {\n    var parent$1 = parent(marker);\n    parent$1.each(function (v) {\n      v.dom.insertBefore(element.dom, marker.dom);\n    });\n  };\n\n  var after$5 = function after$5(marker, element) {\n    var sibling = nextSibling(marker);\n    sibling.fold(function () {\n      var parent$1 = parent(marker);\n      parent$1.each(function (v) {\n        append$1(v, element);\n      });\n    }, function (v) {\n      before$4(v, element);\n    });\n  };\n\n  var prepend = function prepend(parent, element) {\n    var firstChild$1 = firstChild(parent);\n    firstChild$1.fold(function () {\n      append$1(parent, element);\n    }, function (v) {\n      parent.dom.insertBefore(element.dom, v.dom);\n    });\n  };\n\n  var append$1 = function append$1(parent, element) {\n    parent.dom.appendChild(element.dom);\n  };\n\n  var appendAt = function appendAt(parent, element, index) {\n    child$3(parent, index).fold(function () {\n      append$1(parent, element);\n    }, function (v) {\n      before$4(v, element);\n    });\n  };\n\n  var wrap = function wrap(element, wrapper) {\n    before$4(element, wrapper);\n    append$1(wrapper, element);\n  };\n\n  var before$3 = function before$3(marker, elements) {\n    each$2(elements, function (x) {\n      before$4(marker, x);\n    });\n  };\n\n  var after$4 = function after$4(marker, elements) {\n    each$2(elements, function (x, i) {\n      var e = i === 0 ? marker : elements[i - 1];\n      after$5(e, x);\n    });\n  };\n\n  var append = function append(parent, elements) {\n    each$2(elements, function (x) {\n      append$1(parent, x);\n    });\n  };\n\n  var empty = function empty(element) {\n    element.dom.textContent = '';\n    each$2(children$3(element), function (rogue) {\n      remove$5(rogue);\n    });\n  };\n\n  var remove$5 = function remove$5(element) {\n    var dom = element.dom;\n\n    if (dom.parentNode !== null) {\n      dom.parentNode.removeChild(dom);\n    }\n  };\n\n  var unwrap = function unwrap(wrapper) {\n    var children = children$3(wrapper);\n\n    if (children.length > 0) {\n      before$3(wrapper, children);\n    }\n\n    remove$5(wrapper);\n  };\n\n  var NodeValue = function NodeValue(is, name) {\n    var get = function get(element) {\n      if (!is(element)) {\n        throw new Error('Can only get ' + name + ' value of a ' + name + ' node');\n      }\n\n      return getOption(element).getOr('');\n    };\n\n    var getOption = function getOption(element) {\n      return is(element) ? Optional.from(element.dom.nodeValue) : Optional.none();\n    };\n\n    var set = function set(element, value) {\n      if (!is(element)) {\n        throw new Error('Can only set raw ' + name + ' value of a ' + name + ' node');\n      }\n\n      element.dom.nodeValue = value;\n    };\n\n    return {\n      get: get,\n      getOption: getOption,\n      set: set\n    };\n  };\n\n  var api$2 = NodeValue(isText, 'text');\n\n  var get$9 = function get$9(element) {\n    return api$2.get(element);\n  };\n\n  var getOption = function getOption(element) {\n    return api$2.getOption(element);\n  };\n\n  var set = function set(element, value) {\n    return api$2.set(element, value);\n  };\n\n  var TagBoundaries = ['body', 'p', 'div', 'article', 'aside', 'figcaption', 'figure', 'footer', 'header', 'nav', 'section', 'ol', 'ul', 'li', 'table', 'thead', 'tbody', 'tfoot', 'caption', 'tr', 'td', 'th', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'pre', 'address'];\n\n  function DomUniverse() {\n    var clone = function clone(element) {\n      return SugarElement.fromDom(element.dom.cloneNode(false));\n    };\n\n    var document = function document(element) {\n      return documentOrOwner(element).dom;\n    };\n\n    var isBoundary = function isBoundary(element) {\n      if (!isElement(element)) {\n        return false;\n      }\n\n      if (name(element) === 'body') {\n        return true;\n      }\n\n      return contains$2(TagBoundaries, name(element));\n    };\n\n    var isEmptyTag = function isEmptyTag(element) {\n      if (!isElement(element)) {\n        return false;\n      }\n\n      return contains$2(['br', 'img', 'hr', 'input'], name(element));\n    };\n\n    var isNonEditable = function isNonEditable(element) {\n      return isElement(element) && get$b(element, 'contenteditable') === 'false';\n    };\n\n    var comparePosition = function comparePosition(element, other) {\n      return element.dom.compareDocumentPosition(other.dom);\n    };\n\n    var copyAttributesTo = function copyAttributesTo(source, destination) {\n      var as = clone$2(source);\n      setAll$1(destination, as);\n    };\n\n    var isSpecial = function isSpecial(element) {\n      var tag = name(element);\n      return contains$2(['script', 'noscript', 'iframe', 'noframes', 'noembed', 'title', 'style', 'textarea', 'xmp'], tag);\n    };\n\n    var getLanguage = function getLanguage(element) {\n      return isElement(element) ? getOpt(element, 'lang') : Optional.none();\n    };\n\n    return {\n      up: constant({\n        selector: ancestor$1,\n        closest: closest$1,\n        predicate: ancestor$2,\n        all: parents\n      }),\n      down: constant({\n        selector: descendants,\n        predicate: descendants$1\n      }),\n      styles: constant({\n        get: get$a,\n        getRaw: getRaw$2,\n        set: set$1,\n        remove: remove$6\n      }),\n      attrs: constant({\n        get: get$b,\n        set: set$2,\n        remove: remove$7,\n        copyTo: copyAttributesTo\n      }),\n      insert: constant({\n        before: before$4,\n        after: after$5,\n        afterAll: after$4,\n        append: append$1,\n        appendAll: append,\n        prepend: prepend,\n        wrap: wrap\n      }),\n      remove: constant({\n        unwrap: unwrap,\n        remove: remove$5\n      }),\n      create: constant({\n        nu: SugarElement.fromTag,\n        clone: clone,\n        text: SugarElement.fromText\n      }),\n      query: constant({\n        comparePosition: comparePosition,\n        prevSibling: prevSibling,\n        nextSibling: nextSibling\n      }),\n      property: constant({\n        children: children$3,\n        name: name,\n        parent: parent,\n        document: document,\n        isText: isText,\n        isComment: isComment,\n        isElement: isElement,\n        isSpecial: isSpecial,\n        getLanguage: getLanguage,\n        getText: get$9,\n        setText: set,\n        isBoundary: isBoundary,\n        isEmptyTag: isEmptyTag,\n        isNonEditable: isNonEditable\n      }),\n      eq: eq$1,\n      is: is$1\n    };\n  }\n\n  var all = function all(universe, look, elements, f) {\n    var head = elements[0];\n    var tail = elements.slice(1);\n    return f(universe, look, head, tail);\n  };\n\n  var oneAll = function oneAll(universe, look, elements) {\n    return elements.length > 0 ? all(universe, look, elements, unsafeOne) : Optional.none();\n  };\n\n  var unsafeOne = function unsafeOne(universe, look, head, tail) {\n    var start = look(universe, head);\n    return foldr(tail, function (b, a) {\n      var current = look(universe, a);\n      return commonElement(universe, b, current);\n    }, start);\n  };\n\n  var commonElement = function commonElement(universe, start, end) {\n    return start.bind(function (s) {\n      return end.filter(curry(universe.eq, s));\n    });\n  };\n\n  var eq = function eq(universe, item) {\n    return curry(universe.eq, item);\n  };\n\n  var ancestors$2 = function ancestors$2(universe, start, end, isRoot) {\n    if (isRoot === void 0) {\n      isRoot = never;\n    }\n\n    var ps1 = [start].concat(universe.up().all(start));\n    var ps2 = [end].concat(universe.up().all(end));\n\n    var prune = function prune(path) {\n      var index = findIndex(path, isRoot);\n      return index.fold(function () {\n        return path;\n      }, function (ind) {\n        return path.slice(0, ind + 1);\n      });\n    };\n\n    var pruned1 = prune(ps1);\n    var pruned2 = prune(ps2);\n    var shared = find$1(pruned1, function (x) {\n      return exists(pruned2, eq(universe, x));\n    });\n    return {\n      firstpath: pruned1,\n      secondpath: pruned2,\n      shared: shared\n    };\n  };\n\n  var sharedOne$1 = oneAll;\n  var ancestors$1 = ancestors$2;\n  var universe$3 = DomUniverse();\n\n  var sharedOne = function sharedOne(look, elements) {\n    return sharedOne$1(universe$3, function (_universe, element) {\n      return look(element);\n    }, elements);\n  };\n\n  var ancestors = function ancestors(start, finish, isRoot) {\n    return ancestors$1(universe$3, start, finish, isRoot);\n  };\n\n  var lookupTable = function lookupTable(container) {\n    return ancestor$1(container, 'table');\n  };\n\n  var identify = function identify(start, finish, isRoot) {\n    var getIsRoot = function getIsRoot(rootTable) {\n      return function (element) {\n        return isRoot !== undefined && isRoot(element) || eq$1(element, rootTable);\n      };\n    };\n\n    if (eq$1(start, finish)) {\n      return Optional.some({\n        boxes: Optional.some([start]),\n        start: start,\n        finish: finish\n      });\n    } else {\n      return lookupTable(start).bind(function (startTable) {\n        return lookupTable(finish).bind(function (finishTable) {\n          if (eq$1(startTable, finishTable)) {\n            return Optional.some({\n              boxes: intercepts(startTable, start, finish),\n              start: start,\n              finish: finish\n            });\n          } else if (contains(startTable, finishTable)) {\n            var ancestorCells = ancestors$3(finish, 'td,th', getIsRoot(startTable));\n            var finishCell = ancestorCells.length > 0 ? ancestorCells[ancestorCells.length - 1] : finish;\n            return Optional.some({\n              boxes: nestedIntercepts(startTable, start, startTable, finish, finishTable),\n              start: start,\n              finish: finishCell\n            });\n          } else if (contains(finishTable, startTable)) {\n            var ancestorCells = ancestors$3(start, 'td,th', getIsRoot(finishTable));\n            var startCell = ancestorCells.length > 0 ? ancestorCells[ancestorCells.length - 1] : start;\n            return Optional.some({\n              boxes: nestedIntercepts(finishTable, start, startTable, finish, finishTable),\n              start: start,\n              finish: startCell\n            });\n          } else {\n            return ancestors(start, finish).shared.bind(function (lca) {\n              return closest$1(lca, 'table', isRoot).bind(function (lcaTable) {\n                var finishAncestorCells = ancestors$3(finish, 'td,th', getIsRoot(lcaTable));\n                var finishCell = finishAncestorCells.length > 0 ? finishAncestorCells[finishAncestorCells.length - 1] : finish;\n                var startAncestorCells = ancestors$3(start, 'td,th', getIsRoot(lcaTable));\n                var startCell = startAncestorCells.length > 0 ? startAncestorCells[startAncestorCells.length - 1] : start;\n                return Optional.some({\n                  boxes: nestedIntercepts(lcaTable, start, startTable, finish, finishTable),\n                  start: startCell,\n                  finish: finishCell\n                });\n              });\n            });\n          }\n        });\n      });\n    }\n  };\n\n  var retrieve$1 = function retrieve$1(container, selector) {\n    var sels = descendants(container, selector);\n    return sels.length > 0 ? Optional.some(sels) : Optional.none();\n  };\n\n  var getLast = function getLast(boxes, lastSelectedSelector) {\n    return find$1(boxes, function (box) {\n      return is$2(box, lastSelectedSelector);\n    });\n  };\n\n  var getEdges = function getEdges(container, firstSelectedSelector, lastSelectedSelector) {\n    return descendant(container, firstSelectedSelector).bind(function (first) {\n      return descendant(container, lastSelectedSelector).bind(function (last) {\n        return sharedOne(lookupTable, [first, last]).map(function (table) {\n          return {\n            first: first,\n            last: last,\n            table: table\n          };\n        });\n      });\n    });\n  };\n\n  var expandTo = function expandTo(finish, firstSelectedSelector) {\n    return ancestor$1(finish, 'table').bind(function (table) {\n      return descendant(table, firstSelectedSelector).bind(function (start) {\n        return identify(start, finish).bind(function (identified) {\n          return identified.boxes.map(function (boxes) {\n            return {\n              boxes: boxes,\n              start: identified.start,\n              finish: identified.finish\n            };\n          });\n        });\n      });\n    });\n  };\n\n  var shiftSelection = function shiftSelection(boxes, deltaRow, deltaColumn, firstSelectedSelector, lastSelectedSelector) {\n    return getLast(boxes, lastSelectedSelector).bind(function (last) {\n      return moveBy(last, deltaRow, deltaColumn).bind(function (finish) {\n        return expandTo(finish, firstSelectedSelector);\n      });\n    });\n  };\n\n  var retrieve = function retrieve(container, selector) {\n    return retrieve$1(container, selector);\n  };\n\n  var retrieveBox = function retrieveBox(container, firstSelectedSelector, lastSelectedSelector) {\n    return getEdges(container, firstSelectedSelector, lastSelectedSelector).bind(function (edges) {\n      var isRoot = function isRoot(ancestor) {\n        return eq$1(container, ancestor);\n      };\n\n      var sectionSelector = 'thead,tfoot,tbody,table';\n      var firstAncestor = ancestor$1(edges.first, sectionSelector, isRoot);\n      var lastAncestor = ancestor$1(edges.last, sectionSelector, isRoot);\n      return firstAncestor.bind(function (fA) {\n        return lastAncestor.bind(function (lA) {\n          return eq$1(fA, lA) ? getBox(edges.table, edges.first, edges.last) : Optional.none();\n        });\n      });\n    });\n  };\n\n  var generate = function generate(cases) {\n    if (!isArray(cases)) {\n      throw new Error('cases must be an array');\n    }\n\n    if (cases.length === 0) {\n      throw new Error('there must be at least one case');\n    }\n\n    var constructors = [];\n    var adt = {};\n    each$2(cases, function (acase, count) {\n      var keys$1 = keys(acase);\n\n      if (keys$1.length !== 1) {\n        throw new Error('one and only one name per case');\n      }\n\n      var key = keys$1[0];\n      var value = acase[key];\n\n      if (adt[key] !== undefined) {\n        throw new Error('duplicate key detected:' + key);\n      } else if (key === 'cata') {\n        throw new Error('cannot have a case named cata (sorry)');\n      } else if (!isArray(value)) {\n        throw new Error('case arguments must be an array');\n      }\n\n      constructors.push(key);\n\n      adt[key] = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var argLength = args.length;\n\n        if (argLength !== value.length) {\n          throw new Error('Wrong number of arguments to case ' + key + '. Expected ' + value.length + ' (' + value + '), got ' + argLength);\n        }\n\n        var match = function match(branches) {\n          var branchKeys = keys(branches);\n\n          if (constructors.length !== branchKeys.length) {\n            throw new Error('Wrong number of arguments to match. Expected: ' + constructors.join(',') + '\\nActual: ' + branchKeys.join(','));\n          }\n\n          var allReqd = forall(constructors, function (reqKey) {\n            return contains$2(branchKeys, reqKey);\n          });\n\n          if (!allReqd) {\n            throw new Error('Not all branches were specified when using match. Specified: ' + branchKeys.join(', ') + '\\nRequired: ' + constructors.join(', '));\n          }\n\n          return branches[key].apply(null, args);\n        };\n\n        return {\n          fold: function fold() {\n            var foldArgs = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              foldArgs[_i] = arguments[_i];\n            }\n\n            if (foldArgs.length !== cases.length) {\n              throw new Error('Wrong number of arguments to fold. Expected ' + cases.length + ', got ' + foldArgs.length);\n            }\n\n            var target = foldArgs[count];\n            return target.apply(null, args);\n          },\n          match: match,\n          log: function log(label) {\n            console.log(label, {\n              constructors: constructors,\n              constructor: key,\n              params: args\n            });\n          }\n        };\n      };\n    });\n    return adt;\n  };\n\n  var Adt = {\n    generate: generate\n  };\n  var type = Adt.generate([{\n    none: []\n  }, {\n    multiple: ['elements']\n  }, {\n    single: ['element']\n  }]);\n\n  var cata$2 = function cata$2(subject, onNone, onMultiple, onSingle) {\n    return subject.fold(onNone, onMultiple, onSingle);\n  };\n\n  var none$1 = type.none;\n  var multiple = type.multiple;\n  var single = type.single;\n\n  var Selections = function Selections(lazyRoot, getStart, selectedSelector) {\n    var get = function get() {\n      return retrieve(lazyRoot(), selectedSelector).fold(function () {\n        return getStart().fold(none$1, single);\n      }, function (cells) {\n        return multiple(cells);\n      });\n    };\n\n    return {\n      get: get\n    };\n  };\n\n  var global$3 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n  var clone = function clone(original, isDeep) {\n    return SugarElement.fromDom(original.dom.cloneNode(isDeep));\n  };\n\n  var shallow = function shallow(original) {\n    return clone(original, false);\n  };\n\n  var deep = function deep(original) {\n    return clone(original, true);\n  };\n\n  var shallowAs = function shallowAs(original, tag) {\n    var nu = SugarElement.fromTag(tag);\n    var attributes = clone$2(original);\n    setAll$1(nu, attributes);\n    return nu;\n  };\n\n  var copy$1 = function copy$1(original, tag) {\n    var nu = shallowAs(original, tag);\n    var cloneChildren = children$3(deep(original));\n    append(nu, cloneChildren);\n    return nu;\n  };\n\n  var mutate$1 = function mutate$1(original, tag) {\n    var nu = shallowAs(original, tag);\n    before$4(original, nu);\n    var children = children$3(original);\n    append(nu, children);\n    remove$5(original);\n    return nu;\n  };\n\n  var Dimension = function Dimension(name, getOffset) {\n    var set = function set(element, h) {\n      if (!isNumber(h) && !h.match(/^[0-9]+$/)) {\n        throw new Error(name + '.set accepts only positive integer values. Value was ' + h);\n      }\n\n      var dom = element.dom;\n\n      if (isSupported(dom)) {\n        dom.style[name] = h + 'px';\n      }\n    };\n\n    var get = function get(element) {\n      var r = getOffset(element);\n\n      if (r <= 0 || r === null) {\n        var css = get$a(element, name);\n        return parseFloat(css) || 0;\n      }\n\n      return r;\n    };\n\n    var getOuter = get;\n\n    var aggregate = function aggregate(element, properties) {\n      return foldl(properties, function (acc, property) {\n        var val = get$a(element, property);\n        var value = val === undefined ? 0 : parseInt(val, 10);\n        return isNaN(value) ? acc : acc + value;\n      }, 0);\n    };\n\n    var max = function max(element, value, properties) {\n      var cumulativeInclusions = aggregate(element, properties);\n      var absoluteMax = value > cumulativeInclusions ? value - cumulativeInclusions : 0;\n      return absoluteMax;\n    };\n\n    return {\n      set: set,\n      get: get,\n      getOuter: getOuter,\n      aggregate: aggregate,\n      max: max\n    };\n  };\n\n  var needManualCalc = function needManualCalc() {\n    var browser = detect$3().browser;\n    return browser.isIE() || browser.isEdge();\n  };\n\n  var toNumber = function toNumber(px, fallback) {\n    return toFloat(px).getOr(fallback);\n  };\n\n  var getProp = function getProp(element, name, fallback) {\n    return toNumber(get$a(element, name), fallback);\n  };\n\n  var getBoxSizing = function getBoxSizing(element) {\n    return get$a(element, 'box-sizing');\n  };\n\n  var calcContentBoxSize = function calcContentBoxSize(element, size, upper, lower) {\n    var paddingUpper = getProp(element, 'padding-' + upper, 0);\n    var paddingLower = getProp(element, 'padding-' + lower, 0);\n    var borderUpper = getProp(element, 'border-' + upper + '-width', 0);\n    var borderLower = getProp(element, 'border-' + lower + '-width', 0);\n    return size - paddingUpper - paddingLower - borderUpper - borderLower;\n  };\n\n  var getCalculatedHeight = function getCalculatedHeight(element, boxSizing) {\n    var dom = element.dom;\n    var height = dom.getBoundingClientRect().height || dom.offsetHeight;\n    return boxSizing === 'border-box' ? height : calcContentBoxSize(element, height, 'top', 'bottom');\n  };\n\n  var getCalculatedWidth = function getCalculatedWidth(element, boxSizing) {\n    var dom = element.dom;\n    var width = dom.getBoundingClientRect().width || dom.offsetWidth;\n    return boxSizing === 'border-box' ? width : calcContentBoxSize(element, width, 'left', 'right');\n  };\n\n  var getHeight$1 = function getHeight$1(element) {\n    return needManualCalc() ? getCalculatedHeight(element, getBoxSizing(element)) : getProp(element, 'height', element.dom.offsetHeight);\n  };\n\n  var getWidth = function getWidth(element) {\n    return needManualCalc() ? getCalculatedWidth(element, getBoxSizing(element)) : getProp(element, 'width', element.dom.offsetWidth);\n  };\n\n  var getInnerWidth = function getInnerWidth(element) {\n    return getCalculatedWidth(element, 'content-box');\n  };\n\n  var api$1 = Dimension('width', function (element) {\n    return element.dom.offsetWidth;\n  });\n\n  var get$8 = function get$8(element) {\n    return api$1.get(element);\n  };\n\n  var getOuter$2 = function getOuter$2(element) {\n    return api$1.getOuter(element);\n  };\n\n  var getInner = getInnerWidth;\n  var getRuntime$1 = getWidth;\n\n  var columns = function columns(warehouse, isValidCell) {\n    if (isValidCell === void 0) {\n      isValidCell = always;\n    }\n\n    var grid = warehouse.grid;\n    var cols = range$1(grid.columns, identity);\n    var rowsArr = range$1(grid.rows, identity);\n    return map$1(cols, function (col) {\n      var getBlock = function getBlock() {\n        return bind$2(rowsArr, function (r) {\n          return Warehouse.getAt(warehouse, r, col).filter(function (detail) {\n            return detail.column === col;\n          }).toArray();\n        });\n      };\n\n      var isValid = function isValid(detail) {\n        return detail.colspan === 1 && isValidCell(detail.element);\n      };\n\n      var getFallback = function getFallback() {\n        return Warehouse.getAt(warehouse, 0, col);\n      };\n\n      return decide(getBlock, isValid, getFallback);\n    });\n  };\n\n  var decide = function decide(getBlock, isValid, getFallback) {\n    var inBlock = getBlock();\n    var validInBlock = find$1(inBlock, isValid);\n    var detailOption = validInBlock.orThunk(function () {\n      return Optional.from(inBlock[0]).orThunk(getFallback);\n    });\n    return detailOption.map(function (detail) {\n      return detail.element;\n    });\n  };\n\n  var rows = function rows(warehouse) {\n    var grid = warehouse.grid;\n    var rowsArr = range$1(grid.rows, identity);\n    var cols = range$1(grid.columns, identity);\n    return map$1(rowsArr, function (row) {\n      var getBlock = function getBlock() {\n        return bind$2(cols, function (c) {\n          return Warehouse.getAt(warehouse, row, c).filter(function (detail) {\n            return detail.row === row;\n          }).fold(constant([]), function (detail) {\n            return [detail];\n          });\n        });\n      };\n\n      var isSingle = function isSingle(detail) {\n        return detail.rowspan === 1;\n      };\n\n      var getFallback = function getFallback() {\n        return Warehouse.getAt(warehouse, row, 0);\n      };\n\n      return decide(getBlock, isSingle, getFallback);\n    });\n  };\n\n  var deduce = function deduce(xs, index) {\n    if (index < 0 || index >= xs.length - 1) {\n      return Optional.none();\n    }\n\n    var current = xs[index].fold(function () {\n      var rest = reverse(xs.slice(0, index));\n      return findMap(rest, function (a, i) {\n        return a.map(function (aa) {\n          return {\n            value: aa,\n            delta: i + 1\n          };\n        });\n      });\n    }, function (c) {\n      return Optional.some({\n        value: c,\n        delta: 0\n      });\n    });\n    var next = xs[index + 1].fold(function () {\n      var rest = xs.slice(index + 1);\n      return findMap(rest, function (a, i) {\n        return a.map(function (aa) {\n          return {\n            value: aa,\n            delta: i + 1\n          };\n        });\n      });\n    }, function (n) {\n      return Optional.some({\n        value: n,\n        delta: 1\n      });\n    });\n    return current.bind(function (c) {\n      return next.map(function (n) {\n        var extras = n.delta + c.delta;\n        return Math.abs(n.value - c.value) / extras;\n      });\n    });\n  };\n\n  var onDirection = function onDirection(isLtr, isRtl) {\n    return function (element) {\n      return getDirection(element) === 'rtl' ? isRtl : isLtr;\n    };\n  };\n\n  var getDirection = function getDirection(element) {\n    return get$a(element, 'direction') === 'rtl' ? 'rtl' : 'ltr';\n  };\n\n  var api = Dimension('height', function (element) {\n    var dom = element.dom;\n    return inBody(element) ? dom.getBoundingClientRect().height : dom.offsetHeight;\n  });\n\n  var get$7 = function get$7(element) {\n    return api.get(element);\n  };\n\n  var getOuter$1 = function getOuter$1(element) {\n    return api.getOuter(element);\n  };\n\n  var getRuntime = getHeight$1;\n\n  var r = function r(left, top) {\n    var translate = function translate(x, y) {\n      return r(left + x, top + y);\n    };\n\n    return {\n      left: left,\n      top: top,\n      translate: translate\n    };\n  };\n\n  var SugarPosition = r;\n\n  var boxPosition = function boxPosition(dom) {\n    var box = dom.getBoundingClientRect();\n    return SugarPosition(box.left, box.top);\n  };\n\n  var firstDefinedOrZero = function firstDefinedOrZero(a, b) {\n    if (a !== undefined) {\n      return a;\n    } else {\n      return b !== undefined ? b : 0;\n    }\n  };\n\n  var absolute = function absolute(element) {\n    var doc = element.dom.ownerDocument;\n    var body = doc.body;\n    var win = doc.defaultView;\n    var html = doc.documentElement;\n\n    if (body === element.dom) {\n      return SugarPosition(body.offsetLeft, body.offsetTop);\n    }\n\n    var scrollTop = firstDefinedOrZero(win === null || win === void 0 ? void 0 : win.pageYOffset, html.scrollTop);\n    var scrollLeft = firstDefinedOrZero(win === null || win === void 0 ? void 0 : win.pageXOffset, html.scrollLeft);\n    var clientTop = firstDefinedOrZero(html.clientTop, body.clientTop);\n    var clientLeft = firstDefinedOrZero(html.clientLeft, body.clientLeft);\n    return viewport(element).translate(scrollLeft - clientLeft, scrollTop - clientTop);\n  };\n\n  var viewport = function viewport(element) {\n    var dom = element.dom;\n    var doc = dom.ownerDocument;\n    var body = doc.body;\n\n    if (body === dom) {\n      return SugarPosition(body.offsetLeft, body.offsetTop);\n    }\n\n    if (!inBody(element)) {\n      return SugarPosition(0, 0);\n    }\n\n    return boxPosition(dom);\n  };\n\n  var rowInfo = function rowInfo(row, y) {\n    return {\n      row: row,\n      y: y\n    };\n  };\n\n  var colInfo = function colInfo(col, x) {\n    return {\n      col: col,\n      x: x\n    };\n  };\n\n  var rtlEdge = function rtlEdge(cell) {\n    var pos = absolute(cell);\n    return pos.left + getOuter$2(cell);\n  };\n\n  var ltrEdge = function ltrEdge(cell) {\n    return absolute(cell).left;\n  };\n\n  var getLeftEdge = function getLeftEdge(index, cell) {\n    return colInfo(index, ltrEdge(cell));\n  };\n\n  var getRightEdge = function getRightEdge(index, cell) {\n    return colInfo(index, rtlEdge(cell));\n  };\n\n  var getTop$1 = function getTop$1(cell) {\n    return absolute(cell).top;\n  };\n\n  var getTopEdge = function getTopEdge(index, cell) {\n    return rowInfo(index, getTop$1(cell));\n  };\n\n  var getBottomEdge = function getBottomEdge(index, cell) {\n    return rowInfo(index, getTop$1(cell) + getOuter$1(cell));\n  };\n\n  var findPositions = function findPositions(getInnerEdge, getOuterEdge, array) {\n    if (array.length === 0) {\n      return [];\n    }\n\n    var lines = map$1(array.slice(1), function (cellOption, index) {\n      return cellOption.map(function (cell) {\n        return getInnerEdge(index, cell);\n      });\n    });\n    var lastLine = array[array.length - 1].map(function (cell) {\n      return getOuterEdge(array.length - 1, cell);\n    });\n    return lines.concat([lastLine]);\n  };\n\n  var negate = function negate(step) {\n    return -step;\n  };\n\n  var height = {\n    delta: identity,\n    positions: function positions(optElements) {\n      return findPositions(getTopEdge, getBottomEdge, optElements);\n    },\n    edge: getTop$1\n  };\n  var ltr$1 = {\n    delta: identity,\n    edge: ltrEdge,\n    positions: function positions(optElements) {\n      return findPositions(getLeftEdge, getRightEdge, optElements);\n    }\n  };\n  var rtl$1 = {\n    delta: negate,\n    edge: rtlEdge,\n    positions: function positions(optElements) {\n      return findPositions(getRightEdge, getLeftEdge, optElements);\n    }\n  };\n  var detect$2 = onDirection(ltr$1, rtl$1);\n  var width = {\n    delta: function delta(amount, table) {\n      return detect$2(table).delta(amount, table);\n    },\n    positions: function positions(cols, table) {\n      return detect$2(table).positions(cols, table);\n    },\n    edge: function edge(cell) {\n      return detect$2(cell).edge(cell);\n    }\n  };\n  var units = {\n    unsupportedLength: ['em', 'ex', 'cap', 'ch', 'ic', 'rem', 'lh', 'rlh', 'vw', 'vh', 'vi', 'vb', 'vmin', 'vmax', 'cm', 'mm', 'Q', 'in', 'pc', 'pt', 'px'],\n    fixed: ['px', 'pt'],\n    relative: ['%'],\n    empty: ['']\n  };\n\n  var pattern = function () {\n    var decimalDigits = '[0-9]+';\n    var signedInteger = '[+-]?' + decimalDigits;\n    var exponentPart = '[eE]' + signedInteger;\n    var dot = '\\\\.';\n\n    var opt = function opt(input) {\n      return '(?:' + input + ')?';\n    };\n\n    var unsignedDecimalLiteral = ['Infinity', decimalDigits + dot + opt(decimalDigits) + opt(exponentPart), dot + decimalDigits + opt(exponentPart), decimalDigits + opt(exponentPart)].join('|');\n\n    var _float = '[+-]?(?:' + unsignedDecimalLiteral + ')';\n\n    return new RegExp('^(' + _float + ')(.*)$');\n  }();\n\n  var isUnit = function isUnit(unit, accepted) {\n    return exists(accepted, function (acc) {\n      return exists(units[acc], function (check) {\n        return unit === check;\n      });\n    });\n  };\n\n  var parse = function parse(input, accepted) {\n    var match = Optional.from(pattern.exec(input));\n    return match.bind(function (array) {\n      var value = Number(array[1]);\n      var unitRaw = array[2];\n\n      if (isUnit(unitRaw, accepted)) {\n        return Optional.some({\n          value: value,\n          unit: unitRaw\n        });\n      } else {\n        return Optional.none();\n      }\n    });\n  };\n\n  var rPercentageBasedSizeRegex = /(\\d+(\\.\\d+)?)%/;\n  var rPixelBasedSizeRegex = /(\\d+(\\.\\d+)?)px|em/;\n  var isCol$2 = isTag('col');\n\n  var getPercentSize = function getPercentSize(elm, outerGetter, innerGetter) {\n    var relativeParent = parentElement(elm).getOrThunk(function () {\n      return getBody$1(owner(elm));\n    });\n    return outerGetter(elm) / innerGetter(relativeParent) * 100;\n  };\n\n  var setPixelWidth = function setPixelWidth(cell, amount) {\n    set$1(cell, 'width', amount + 'px');\n  };\n\n  var setPercentageWidth = function setPercentageWidth(cell, amount) {\n    set$1(cell, 'width', amount + '%');\n  };\n\n  var setHeight = function setHeight(cell, amount) {\n    set$1(cell, 'height', amount + 'px');\n  };\n\n  var getHeightValue = function getHeightValue(cell) {\n    return getRuntime(cell) + 'px';\n  };\n\n  var convert = function convert(cell, number, getter, setter) {\n    var newSize = table(cell).map(function (table) {\n      var total = getter(table);\n      return Math.floor(number / 100 * total);\n    }).getOr(number);\n    setter(cell, newSize);\n    return newSize;\n  };\n\n  var normalizePixelSize = function normalizePixelSize(value, cell, getter, setter) {\n    var number = parseFloat(value);\n    return endsWith(value, '%') && name(cell) !== 'table' ? convert(cell, number, getter, setter) : number;\n  };\n\n  var getTotalHeight = function getTotalHeight(cell) {\n    var value = getHeightValue(cell);\n\n    if (!value) {\n      return get$7(cell);\n    }\n\n    return normalizePixelSize(value, cell, get$7, setHeight);\n  };\n\n  var get$6 = function get$6(cell, type, f) {\n    var v = f(cell);\n    var span = getSpan(cell, type);\n    return v / span;\n  };\n\n  var getRaw$1 = function getRaw$1(element, prop) {\n    return getRaw$2(element, prop).orThunk(function () {\n      return getOpt(element, prop).map(function (val) {\n        return val + 'px';\n      });\n    });\n  };\n\n  var getRawWidth$1 = function getRawWidth$1(element) {\n    return getRaw$1(element, 'width');\n  };\n\n  var getRawHeight = function getRawHeight(element) {\n    return getRaw$1(element, 'height');\n  };\n\n  var getPercentageWidth = function getPercentageWidth(cell) {\n    return getPercentSize(cell, get$8, getInner);\n  };\n\n  var getPixelWidth$1 = function getPixelWidth$1(cell) {\n    return isCol$2(cell) ? get$8(cell) : getRuntime$1(cell);\n  };\n\n  var getHeight = function getHeight(cell) {\n    return get$6(cell, 'rowspan', getTotalHeight);\n  };\n\n  var getGenericWidth = function getGenericWidth(cell) {\n    var width = getRawWidth$1(cell);\n    return width.bind(function (w) {\n      return parse(w, ['fixed', 'relative', 'empty']);\n    });\n  };\n\n  var setGenericWidth = function setGenericWidth(cell, amount, unit) {\n    set$1(cell, 'width', amount + unit);\n  };\n\n  var getPixelTableWidth = function getPixelTableWidth(table) {\n    return get$8(table) + 'px';\n  };\n\n  var getPercentTableWidth = function getPercentTableWidth(table) {\n    return getPercentSize(table, get$8, getInner) + '%';\n  };\n\n  var isPercentSizing$1 = function isPercentSizing$1(table) {\n    return getRawWidth$1(table).exists(function (size) {\n      return rPercentageBasedSizeRegex.test(size);\n    });\n  };\n\n  var isPixelSizing$1 = function isPixelSizing$1(table) {\n    return getRawWidth$1(table).exists(function (size) {\n      return rPixelBasedSizeRegex.test(size);\n    });\n  };\n\n  var isNoneSizing$1 = function isNoneSizing$1(table) {\n    return getRawWidth$1(table).isNone();\n  };\n\n  var percentageBasedSizeRegex = constant(rPercentageBasedSizeRegex);\n  var isCol$1 = isTag('col');\n\n  var getRawW = function getRawW(cell) {\n    return getRawWidth$1(cell).getOrThunk(function () {\n      return getPixelWidth$1(cell) + 'px';\n    });\n  };\n\n  var getRawH = function getRawH(cell) {\n    return getRawHeight(cell).getOrThunk(function () {\n      return getHeight(cell) + 'px';\n    });\n  };\n\n  var justCols = function justCols(warehouse) {\n    return map$1(Warehouse.justColumns(warehouse), function (column) {\n      return Optional.from(column.element);\n    });\n  };\n\n  var isValidColumn = function isValidColumn(cell) {\n    var browser = detect$3().browser;\n    var supportsColWidths = browser.isChrome() || browser.isFirefox();\n    return isCol$1(cell) ? supportsColWidths : true;\n  };\n\n  var getDimension = function getDimension(cellOpt, index, backups, filter, getter, fallback) {\n    return cellOpt.filter(filter).fold(function () {\n      return fallback(deduce(backups, index));\n    }, function (cell) {\n      return getter(cell);\n    });\n  };\n\n  var getWidthFrom = function getWidthFrom(warehouse, table, getWidth, fallback) {\n    var columnCells = columns(warehouse);\n    var columns$1 = Warehouse.hasColumns(warehouse) ? justCols(warehouse) : columnCells;\n    var backups = [Optional.some(width.edge(table))].concat(map$1(width.positions(columnCells, table), function (pos) {\n      return pos.map(function (p) {\n        return p.x;\n      });\n    }));\n    var colFilter = not(hasColspan);\n    return map$1(columns$1, function (cellOption, c) {\n      return getDimension(cellOption, c, backups, colFilter, function (column) {\n        if (isValidColumn(column)) {\n          return getWidth(column);\n        } else {\n          var cell = bindFrom(columnCells[c], identity);\n          return getDimension(cell, c, backups, colFilter, function (cell) {\n            return fallback(Optional.some(get$8(cell)));\n          }, fallback);\n        }\n      }, fallback);\n    });\n  };\n\n  var getDeduced = function getDeduced(deduced) {\n    return deduced.map(function (d) {\n      return d + 'px';\n    }).getOr('');\n  };\n\n  var getRawWidths = function getRawWidths(warehouse, table) {\n    return getWidthFrom(warehouse, table, getRawW, getDeduced);\n  };\n\n  var getPercentageWidths = function getPercentageWidths(warehouse, table, tableSize) {\n    return getWidthFrom(warehouse, table, getPercentageWidth, function (deduced) {\n      return deduced.fold(function () {\n        return tableSize.minCellWidth();\n      }, function (cellWidth) {\n        return cellWidth / tableSize.pixelWidth() * 100;\n      });\n    });\n  };\n\n  var getPixelWidths = function getPixelWidths(warehouse, table, tableSize) {\n    return getWidthFrom(warehouse, table, getPixelWidth$1, function (deduced) {\n      return deduced.getOrThunk(tableSize.minCellWidth);\n    });\n  };\n\n  var getHeightFrom = function getHeightFrom(warehouse, table, direction, getHeight, fallback) {\n    var rows$1 = rows(warehouse);\n    var backups = [Optional.some(direction.edge(table))].concat(map$1(direction.positions(rows$1, table), function (pos) {\n      return pos.map(function (p) {\n        return p.y;\n      });\n    }));\n    return map$1(rows$1, function (cellOption, c) {\n      return getDimension(cellOption, c, backups, not(hasRowspan), getHeight, fallback);\n    });\n  };\n\n  var getPixelHeights = function getPixelHeights(warehouse, table, direction) {\n    return getHeightFrom(warehouse, table, direction, getHeight, function (deduced) {\n      return deduced.getOrThunk(minHeight);\n    });\n  };\n\n  var getRawHeights = function getRawHeights(warehouse, table, direction) {\n    return getHeightFrom(warehouse, table, direction, getRawH, getDeduced);\n  };\n\n  var widthLookup = function widthLookup(table, getter) {\n    return function () {\n      if (inBody(table)) {\n        return getter(table);\n      } else {\n        return parseFloat(getRaw$2(table, 'width').getOr('0'));\n      }\n    };\n  };\n\n  var noneSize = function noneSize(table) {\n    var getWidth = widthLookup(table, get$8);\n    var zero = constant(0);\n\n    var getWidths = function getWidths(warehouse, tableSize) {\n      return getPixelWidths(warehouse, table, tableSize);\n    };\n\n    return {\n      width: getWidth,\n      pixelWidth: getWidth,\n      getWidths: getWidths,\n      getCellDelta: zero,\n      singleColumnWidth: constant([0]),\n      minCellWidth: zero,\n      setElementWidth: noop,\n      adjustTableWidth: noop,\n      isRelative: true,\n      label: 'none'\n    };\n  };\n\n  var percentageSize = function percentageSize(table) {\n    var getFloatWidth = widthLookup(table, function (elem) {\n      return parseFloat(getPercentTableWidth(elem));\n    });\n    var getWidth = widthLookup(table, get$8);\n\n    var getCellDelta = function getCellDelta(delta) {\n      return delta / getWidth() * 100;\n    };\n\n    var singleColumnWidth = function singleColumnWidth(w, _delta) {\n      return [100 - w];\n    };\n\n    var minCellWidth = function minCellWidth() {\n      return minWidth() / getWidth() * 100;\n    };\n\n    var adjustTableWidth = function adjustTableWidth(delta) {\n      var currentWidth = getFloatWidth();\n      var change = delta / 100 * currentWidth;\n      var newWidth = currentWidth + change;\n      setPercentageWidth(table, newWidth);\n    };\n\n    var getWidths = function getWidths(warehouse, tableSize) {\n      return getPercentageWidths(warehouse, table, tableSize);\n    };\n\n    return {\n      width: getFloatWidth,\n      pixelWidth: getWidth,\n      getWidths: getWidths,\n      getCellDelta: getCellDelta,\n      singleColumnWidth: singleColumnWidth,\n      minCellWidth: minCellWidth,\n      setElementWidth: setPercentageWidth,\n      adjustTableWidth: adjustTableWidth,\n      isRelative: true,\n      label: 'percent'\n    };\n  };\n\n  var pixelSize = function pixelSize(table) {\n    var getWidth = widthLookup(table, get$8);\n    var getCellDelta = identity;\n\n    var singleColumnWidth = function singleColumnWidth(w, delta) {\n      var newNext = Math.max(minWidth(), w + delta);\n      return [newNext - w];\n    };\n\n    var adjustTableWidth = function adjustTableWidth(delta) {\n      var newWidth = getWidth() + delta;\n      setPixelWidth(table, newWidth);\n    };\n\n    var getWidths = function getWidths(warehouse, tableSize) {\n      return getPixelWidths(warehouse, table, tableSize);\n    };\n\n    return {\n      width: getWidth,\n      pixelWidth: getWidth,\n      getWidths: getWidths,\n      getCellDelta: getCellDelta,\n      singleColumnWidth: singleColumnWidth,\n      minCellWidth: minWidth,\n      setElementWidth: setPixelWidth,\n      adjustTableWidth: adjustTableWidth,\n      isRelative: false,\n      label: 'pixel'\n    };\n  };\n\n  var chooseSize = function chooseSize(element, width) {\n    var percentMatch = percentageBasedSizeRegex().exec(width);\n\n    if (percentMatch !== null) {\n      return percentageSize(element);\n    } else {\n      return pixelSize(element);\n    }\n  };\n\n  var getTableSize = function getTableSize(table) {\n    var width = getRawWidth$1(table);\n    return width.fold(function () {\n      return noneSize(table);\n    }, function (w) {\n      return chooseSize(table, w);\n    });\n  };\n\n  var TableSize = {\n    getTableSize: getTableSize,\n    pixelSize: pixelSize,\n    percentageSize: percentageSize,\n    noneSize: noneSize\n  };\n\n  var statsStruct = function statsStruct(minRow, minCol, maxRow, maxCol, allCells, selectedCells) {\n    return {\n      minRow: minRow,\n      minCol: minCol,\n      maxRow: maxRow,\n      maxCol: maxCol,\n      allCells: allCells,\n      selectedCells: selectedCells\n    };\n  };\n\n  var findSelectedStats = function findSelectedStats(house, isSelected) {\n    var totalColumns = house.grid.columns;\n    var totalRows = house.grid.rows;\n    var minRow = totalRows;\n    var minCol = totalColumns;\n    var maxRow = 0;\n    var maxCol = 0;\n    var allCells = [];\n    var selectedCells = [];\n    each$1(house.access, function (detail) {\n      allCells.push(detail);\n\n      if (isSelected(detail)) {\n        selectedCells.push(detail);\n        var startRow = detail.row;\n        var endRow = startRow + detail.rowspan - 1;\n        var startCol = detail.column;\n        var endCol = startCol + detail.colspan - 1;\n\n        if (startRow < minRow) {\n          minRow = startRow;\n        } else if (endRow > maxRow) {\n          maxRow = endRow;\n        }\n\n        if (startCol < minCol) {\n          minCol = startCol;\n        } else if (endCol > maxCol) {\n          maxCol = endCol;\n        }\n      }\n    });\n    return statsStruct(minRow, minCol, maxRow, maxCol, allCells, selectedCells);\n  };\n\n  var makeCell = function makeCell(list, seenSelected, rowIndex) {\n    var row = list[rowIndex].element;\n    var td = SugarElement.fromTag('td');\n    append$1(td, SugarElement.fromTag('br'));\n    var f = seenSelected ? append$1 : prepend;\n    f(row, td);\n  };\n\n  var fillInGaps = function fillInGaps(list, house, stats, isSelected) {\n    var totalColumns = house.grid.columns;\n    var totalRows = house.grid.rows;\n\n    for (var i = 0; i < totalRows; i++) {\n      var seenSelected = false;\n\n      for (var j = 0; j < totalColumns; j++) {\n        if (!(i < stats.minRow || i > stats.maxRow || j < stats.minCol || j > stats.maxCol)) {\n          var needCell = Warehouse.getAt(house, i, j).filter(isSelected).isNone();\n\n          if (needCell) {\n            makeCell(list, seenSelected, i);\n          } else {\n            seenSelected = true;\n          }\n        }\n      }\n    }\n  };\n\n  var clean = function clean(replica, stats, house, widthDelta) {\n    each$1(house.columns, function (col) {\n      if (col.column < stats.minCol || col.column > stats.maxCol) {\n        remove$5(col.element);\n      }\n    });\n    var emptyRows = filter$2(firstLayer(replica, 'tr'), function (row) {\n      return row.dom.childElementCount === 0;\n    });\n    each$2(emptyRows, remove$5);\n\n    if (stats.minCol === stats.maxCol || stats.minRow === stats.maxRow) {\n      each$2(firstLayer(replica, 'th,td'), function (cell) {\n        remove$7(cell, 'rowspan');\n        remove$7(cell, 'colspan');\n      });\n    }\n\n    remove$7(replica, LOCKED_COL_ATTR);\n    remove$7(replica, 'data-snooker-col-series');\n    var tableSize = TableSize.getTableSize(replica);\n    tableSize.adjustTableWidth(widthDelta);\n  };\n\n  var getTableWidthDelta = function getTableWidthDelta(table, warehouse, tableSize, stats) {\n    if (stats.minCol === 0 && warehouse.grid.columns === stats.maxCol + 1) {\n      return 0;\n    }\n\n    var colWidths = getPixelWidths(warehouse, table, tableSize);\n    var allColsWidth = foldl(colWidths, function (acc, width) {\n      return acc + width;\n    }, 0);\n    var selectedColsWidth = foldl(colWidths.slice(stats.minCol, stats.maxCol + 1), function (acc, width) {\n      return acc + width;\n    }, 0);\n    var newWidth = selectedColsWidth / allColsWidth * tableSize.pixelWidth();\n    var delta = newWidth - tableSize.pixelWidth();\n    return tableSize.getCellDelta(delta);\n  };\n\n  var extract$1 = function extract$1(table, selectedSelector) {\n    var isSelected = function isSelected(detail) {\n      return is$2(detail.element, selectedSelector);\n    };\n\n    var replica = deep(table);\n    var list = fromTable$1(replica);\n    var tableSize = TableSize.getTableSize(table);\n    var replicaHouse = Warehouse.generate(list);\n    var replicaStats = findSelectedStats(replicaHouse, isSelected);\n    var selector = 'th:not(' + selectedSelector + ')' + ',td:not(' + selectedSelector + ')';\n    var unselectedCells = filterFirstLayer(replica, 'th,td', function (cell) {\n      return is$2(cell, selector);\n    });\n    each$2(unselectedCells, remove$5);\n    fillInGaps(list, replicaHouse, replicaStats, isSelected);\n    var house = Warehouse.fromTable(table);\n    var widthDelta = getTableWidthDelta(table, house, tableSize, replicaStats);\n    clean(replica, replicaStats, replicaHouse, widthDelta);\n    return replica;\n  };\n\n  var nbsp = '\\xA0';\n\n  var getEnd = function getEnd(element) {\n    return name(element) === 'img' ? 1 : getOption(element).fold(function () {\n      return children$3(element).length;\n    }, function (v) {\n      return v.length;\n    });\n  };\n\n  var isTextNodeWithCursorPosition = function isTextNodeWithCursorPosition(el) {\n    return getOption(el).filter(function (text) {\n      return text.trim().length !== 0 || text.indexOf(nbsp) > -1;\n    }).isSome();\n  };\n\n  var elementsWithCursorPosition = ['img', 'br'];\n\n  var isCursorPosition = function isCursorPosition(elem) {\n    var hasCursorPosition = isTextNodeWithCursorPosition(elem);\n    return hasCursorPosition || contains$2(elementsWithCursorPosition, name(elem));\n  };\n\n  var first = function first(element) {\n    return descendant$1(element, isCursorPosition);\n  };\n\n  var last$1 = function last$1(element) {\n    return descendantRtl(element, isCursorPosition);\n  };\n\n  var descendantRtl = function descendantRtl(scope, predicate) {\n    var descend = function descend(element) {\n      var children = children$3(element);\n\n      for (var i = children.length - 1; i >= 0; i--) {\n        var child = children[i];\n\n        if (predicate(child)) {\n          return Optional.some(child);\n        }\n\n        var res = descend(child);\n\n        if (res.isSome()) {\n          return res;\n        }\n      }\n\n      return Optional.none();\n    };\n\n    return descend(scope);\n  };\n\n  var transferableAttributes = {\n    scope: ['row', 'col']\n  };\n\n  var createCell = function createCell(doc) {\n    return function () {\n      var td = SugarElement.fromTag('td', doc.dom);\n      append$1(td, SugarElement.fromTag('br', doc.dom));\n      return td;\n    };\n  };\n\n  var createCol = function createCol(doc) {\n    return function () {\n      return SugarElement.fromTag('col', doc.dom);\n    };\n  };\n\n  var createColgroup = function createColgroup(doc) {\n    return function () {\n      return SugarElement.fromTag('colgroup', doc.dom);\n    };\n  };\n\n  var createRow$1 = function createRow$1(doc) {\n    return function () {\n      return SugarElement.fromTag('tr', doc.dom);\n    };\n  };\n\n  var replace$1 = function replace$1(cell, tag, attrs) {\n    var replica = copy$1(cell, tag);\n    each$1(attrs, function (v, k) {\n      if (v === null) {\n        remove$7(replica, k);\n      } else {\n        set$2(replica, k, v);\n      }\n    });\n    return replica;\n  };\n\n  var pasteReplace = function pasteReplace(cell) {\n    return cell;\n  };\n\n  var cloneFormats = function cloneFormats(oldCell, newCell, formats) {\n    var first$1 = first(oldCell);\n    return first$1.map(function (firstText) {\n      var formatSelector = formats.join(',');\n      var parents = ancestors$3(firstText, formatSelector, function (element) {\n        return eq$1(element, oldCell);\n      });\n      return foldr(parents, function (last, parent) {\n        var clonedFormat = shallow(parent);\n        remove$7(clonedFormat, 'contenteditable');\n        append$1(last, clonedFormat);\n        return clonedFormat;\n      }, newCell);\n    }).getOr(newCell);\n  };\n\n  var cloneAppropriateAttributes = function cloneAppropriateAttributes(original, clone) {\n    each$1(transferableAttributes, function (validAttributes, attributeName) {\n      return getOpt(original, attributeName).filter(function (attribute) {\n        return contains$2(validAttributes, attribute);\n      }).each(function (attribute) {\n        return set$2(clone, attributeName, attribute);\n      });\n    });\n  };\n\n  var cellOperations = function cellOperations(mutate, doc, formatsToClone) {\n    var cloneCss = function cloneCss(prev, clone) {\n      copy$2(prev.element, clone);\n      remove$6(clone, 'height');\n\n      if (prev.colspan !== 1) {\n        remove$6(clone, 'width');\n      }\n    };\n\n    var newCell = function newCell(prev) {\n      var td = SugarElement.fromTag(name(prev.element), doc.dom);\n      var formats = formatsToClone.getOr(['strong', 'em', 'b', 'i', 'span', 'font', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'div']);\n      var lastNode = formats.length > 0 ? cloneFormats(prev.element, td, formats) : td;\n      append$1(lastNode, SugarElement.fromTag('br'));\n      cloneCss(prev, td);\n      cloneAppropriateAttributes(prev.element, td);\n      mutate(prev.element, td);\n      return td;\n    };\n\n    var newCol = function newCol(prev) {\n      var col = SugarElement.fromTag(name(prev.element), doc.dom);\n      cloneCss(prev, col);\n      mutate(prev.element, col);\n      return col;\n    };\n\n    return {\n      col: newCol,\n      colgroup: createColgroup(doc),\n      row: createRow$1(doc),\n      cell: newCell,\n      replace: replace$1,\n      colGap: createCol(doc),\n      gap: createCell(doc)\n    };\n  };\n\n  var paste$1 = function paste$1(doc) {\n    return {\n      col: createCol(doc),\n      colgroup: createColgroup(doc),\n      row: createRow$1(doc),\n      cell: createCell(doc),\n      replace: pasteReplace,\n      colGap: createCol(doc),\n      gap: createCell(doc)\n    };\n  };\n\n  var fromHtml = function fromHtml(html, scope) {\n    var doc = scope || document;\n    var div = doc.createElement('div');\n    div.innerHTML = html;\n    return children$3(SugarElement.fromDom(div));\n  };\n\n  var fromDom = function fromDom(nodes) {\n    return map$1(nodes, SugarElement.fromDom);\n  };\n\n  var getNodeName = function getNodeName(elm) {\n    return elm.nodeName.toLowerCase();\n  };\n\n  var getBody = function getBody(editor) {\n    return SugarElement.fromDom(editor.getBody());\n  };\n\n  var getPixelWidth = function getPixelWidth(elm) {\n    return elm.getBoundingClientRect().width;\n  };\n\n  var getPixelHeight = function getPixelHeight(elm) {\n    return elm.getBoundingClientRect().height;\n  };\n\n  var getIsRoot = function getIsRoot(editor) {\n    return function (element) {\n      return eq$1(element, getBody(editor));\n    };\n  };\n\n  var removePxSuffix = function removePxSuffix(size) {\n    return size ? size.replace(/px$/, '') : '';\n  };\n\n  var addPxSuffix = function addPxSuffix(size) {\n    return /^\\d+(\\.\\d+)?$/.test(size) ? size + 'px' : size;\n  };\n\n  var removeDataStyle = function removeDataStyle(table) {\n    remove$7(table, 'data-mce-style');\n\n    var removeStyleAttribute = function removeStyleAttribute(element) {\n      return remove$7(element, 'data-mce-style');\n    };\n\n    each$2(cells$1(table), removeStyleAttribute);\n    each$2(columns$1(table), removeStyleAttribute);\n    each$2(rows$1(table), removeStyleAttribute);\n  };\n\n  var getRawWidth = function getRawWidth(editor, elm) {\n    var raw = editor.dom.getStyle(elm, 'width') || editor.dom.getAttrib(elm, 'width');\n    return Optional.from(raw).filter(isNotEmpty);\n  };\n\n  var isPercentage$1 = function isPercentage$1(value) {\n    return /^(\\d+(\\.\\d+)?)%$/.test(value);\n  };\n\n  var isPixel = function isPixel(value) {\n    return /^(\\d+(\\.\\d+)?)px$/.test(value);\n  };\n\n  var getSelectionStart = function getSelectionStart(editor) {\n    return SugarElement.fromDom(editor.selection.getStart());\n  };\n\n  var getSelectionEnd = function getSelectionEnd(editor) {\n    return SugarElement.fromDom(editor.selection.getEnd());\n  };\n\n  var selection = function selection(selections) {\n    return cata$2(selections.get(), constant([]), identity, pure);\n  };\n\n  var unmergable = function unmergable(selections) {\n    var hasSpan = function hasSpan(elem, type) {\n      return getOpt(elem, type).exists(function (span) {\n        return parseInt(span, 10) > 1;\n      });\n    };\n\n    var hasRowOrColSpan = function hasRowOrColSpan(elem) {\n      return hasSpan(elem, 'rowspan') || hasSpan(elem, 'colspan');\n    };\n\n    var candidates = selection(selections);\n    return candidates.length > 0 && forall(candidates, hasRowOrColSpan) ? Optional.some(candidates) : Optional.none();\n  };\n\n  var mergable = function mergable(table, selections, ephemera) {\n    return cata$2(selections.get(), Optional.none, function (cells) {\n      if (cells.length <= 1) {\n        return Optional.none();\n      } else {\n        return retrieveBox(table, ephemera.firstSelectedSelector, ephemera.lastSelectedSelector).map(function (bounds) {\n          return {\n            bounds: bounds,\n            cells: cells\n          };\n        });\n      }\n    }, Optional.none);\n  };\n\n  var strSelected = 'data-mce-selected';\n  var strSelectedSelector = 'td[' + strSelected + '],th[' + strSelected + ']';\n  var strAttributeSelector = '[' + strSelected + ']';\n  var strFirstSelected = 'data-mce-first-selected';\n  var strFirstSelectedSelector = 'td[' + strFirstSelected + '],th[' + strFirstSelected + ']';\n  var strLastSelected = 'data-mce-last-selected';\n  var strLastSelectedSelector = 'td[' + strLastSelected + '],th[' + strLastSelected + ']';\n  var attributeSelector = strAttributeSelector;\n  var ephemera = {\n    selected: strSelected,\n    selectedSelector: strSelectedSelector,\n    firstSelected: strFirstSelected,\n    firstSelectedSelector: strFirstSelectedSelector,\n    lastSelected: strLastSelected,\n    lastSelectedSelector: strLastSelectedSelector\n  };\n\n  var noMenu = function noMenu(cell) {\n    return {\n      element: cell,\n      mergable: Optional.none(),\n      unmergable: Optional.none(),\n      selection: [cell]\n    };\n  };\n\n  var forMenu = function forMenu(selections, table, cell) {\n    return {\n      element: cell,\n      mergable: mergable(table, selections, ephemera),\n      unmergable: unmergable(selections),\n      selection: selection(selections)\n    };\n  };\n\n  var paste = function paste(element, clipboard, generators) {\n    return {\n      element: element,\n      clipboard: clipboard,\n      generators: generators\n    };\n  };\n\n  var pasteRows = function pasteRows(selections, cell, clipboard, generators) {\n    return {\n      selection: selection(selections),\n      clipboard: clipboard,\n      generators: generators\n    };\n  };\n\n  var getSelectionCellFallback = function getSelectionCellFallback(element) {\n    return table(element).bind(function (table) {\n      return retrieve(table, ephemera.firstSelectedSelector);\n    }).fold(constant(element), function (cells) {\n      return cells[0];\n    });\n  };\n\n  var getSelectionFromSelector = function getSelectionFromSelector(selector) {\n    return function (initCell, isRoot) {\n      var cellName = name(initCell);\n      var cell = cellName === 'col' || cellName === 'colgroup' ? getSelectionCellFallback(initCell) : initCell;\n      return closest$1(cell, selector, isRoot);\n    };\n  };\n\n  var getSelectionCellOrCaption = getSelectionFromSelector('th,td,caption');\n  var getSelectionCell = getSelectionFromSelector('th,td');\n\n  var getCellsFromSelection = function getCellsFromSelection(selections) {\n    return selection(selections);\n  };\n\n  var getRowsFromSelection = function getRowsFromSelection(selected, selector) {\n    var cellOpt = getSelectionCell(selected);\n    var rowsOpt = cellOpt.bind(function (cell) {\n      return table(cell);\n    }).map(function (table) {\n      return rows$1(table);\n    });\n    return lift2(cellOpt, rowsOpt, function (cell, rows) {\n      return filter$2(rows, function (row) {\n        return exists(fromDom(row.dom.cells), function (rowCell) {\n          return get$b(rowCell, selector) === '1' || eq$1(rowCell, cell);\n        });\n      });\n    }).getOr([]);\n  };\n\n  var extractSelected = function extractSelected(cells) {\n    return table(cells[0]).map(function (table) {\n      var replica = extract$1(table, attributeSelector);\n      removeDataStyle(replica);\n      return [replica];\n    });\n  };\n\n  var serializeElements = function serializeElements(editor, elements) {\n    return map$1(elements, function (elm) {\n      return editor.selection.serializer.serialize(elm.dom, {});\n    }).join('');\n  };\n\n  var getTextContent = function getTextContent(elements) {\n    return map$1(elements, function (element) {\n      return element.dom.innerText;\n    }).join('');\n  };\n\n  var registerEvents = function registerEvents(editor, selections, actions) {\n    editor.on('BeforeGetContent', function (e) {\n      var multiCellContext = function multiCellContext(cells) {\n        e.preventDefault();\n        extractSelected(cells).each(function (elements) {\n          e.content = e.format === 'text' ? getTextContent(elements) : serializeElements(editor, elements);\n        });\n      };\n\n      if (e.selection === true) {\n        cata$2(selections.get(), noop, multiCellContext, noop);\n      }\n    });\n    editor.on('BeforeSetContent', function (e) {\n      if (e.selection === true && e.paste === true) {\n        var selectedCells = getCellsFromSelection(selections);\n        head(selectedCells).each(function (cell) {\n          table(cell).each(function (table) {\n            var elements = filter$2(fromHtml(e.content), function (content) {\n              return name(content) !== 'meta';\n            });\n            var isTable = isTag('table');\n\n            if (elements.length === 1 && isTable(elements[0])) {\n              e.preventDefault();\n              var doc = SugarElement.fromDom(editor.getDoc());\n              var generators = paste$1(doc);\n              var targets = paste(cell, elements[0], generators);\n              actions.pasteCells(table, targets).each(function () {\n                editor.focus();\n              });\n            }\n          });\n        });\n      }\n    });\n  };\n\n  var adt$7 = Adt.generate([{\n    none: []\n  }, {\n    only: ['index']\n  }, {\n    left: ['index', 'next']\n  }, {\n    middle: ['prev', 'index', 'next']\n  }, {\n    right: ['prev', 'index']\n  }]);\n\n  var ColumnContext = _assign({}, adt$7);\n\n  var neighbours = function neighbours(input, index) {\n    if (input.length === 0) {\n      return ColumnContext.none();\n    }\n\n    if (input.length === 1) {\n      return ColumnContext.only(0);\n    }\n\n    if (index === 0) {\n      return ColumnContext.left(0, 1);\n    }\n\n    if (index === input.length - 1) {\n      return ColumnContext.right(index - 1, index);\n    }\n\n    if (index > 0 && index < input.length - 1) {\n      return ColumnContext.middle(index - 1, index, index + 1);\n    }\n\n    return ColumnContext.none();\n  };\n\n  var determine = function determine(input, column, step, tableSize, resize) {\n    var result = input.slice(0);\n    var context = neighbours(input, column);\n    var onNone = constant(map$1(result, constant(0)));\n\n    var onOnly = function onOnly(index) {\n      return tableSize.singleColumnWidth(result[index], step);\n    };\n\n    var onLeft = function onLeft(index, next) {\n      return resize.calcLeftEdgeDeltas(result, index, next, step, tableSize.minCellWidth(), tableSize.isRelative);\n    };\n\n    var onMiddle = function onMiddle(prev, index, next) {\n      return resize.calcMiddleDeltas(result, prev, index, next, step, tableSize.minCellWidth(), tableSize.isRelative);\n    };\n\n    var onRight = function onRight(prev, index) {\n      return resize.calcRightEdgeDeltas(result, prev, index, step, tableSize.minCellWidth(), tableSize.isRelative);\n    };\n\n    return context.fold(onNone, onOnly, onLeft, onMiddle, onRight);\n  };\n\n  var total = function total(start, end, measures) {\n    var r = 0;\n\n    for (var i = start; i < end; i++) {\n      r += measures[i] !== undefined ? measures[i] : 0;\n    }\n\n    return r;\n  };\n\n  var recalculateWidthForCells = function recalculateWidthForCells(warehouse, widths) {\n    var all = Warehouse.justCells(warehouse);\n    return map$1(all, function (cell) {\n      var width = total(cell.column, cell.column + cell.colspan, widths);\n      return {\n        element: cell.element,\n        width: width,\n        colspan: cell.colspan\n      };\n    });\n  };\n\n  var recalculateWidthForColumns = function recalculateWidthForColumns(warehouse, widths) {\n    var groups = Warehouse.justColumns(warehouse);\n    return map$1(groups, function (column, index) {\n      return {\n        element: column.element,\n        width: widths[index],\n        colspan: column.colspan\n      };\n    });\n  };\n\n  var recalculateHeightForCells = function recalculateHeightForCells(warehouse, heights) {\n    var all = Warehouse.justCells(warehouse);\n    return map$1(all, function (cell) {\n      var height = total(cell.row, cell.row + cell.rowspan, heights);\n      return {\n        element: cell.element,\n        height: height,\n        rowspan: cell.rowspan\n      };\n    });\n  };\n\n  var matchRowHeight = function matchRowHeight(warehouse, heights) {\n    return map$1(warehouse.all, function (row, i) {\n      return {\n        element: row.element,\n        height: heights[i]\n      };\n    });\n  };\n\n  var sumUp = function sumUp(newSize) {\n    return foldr(newSize, function (b, a) {\n      return b + a;\n    }, 0);\n  };\n\n  var recalculate = function recalculate(warehouse, widths) {\n    if (Warehouse.hasColumns(warehouse)) {\n      return recalculateWidthForColumns(warehouse, widths);\n    } else {\n      return recalculateWidthForCells(warehouse, widths);\n    }\n  };\n\n  var recalculateAndApply = function recalculateAndApply(warehouse, widths, tableSize) {\n    var newSizes = recalculate(warehouse, widths);\n    each$2(newSizes, function (cell) {\n      tableSize.setElementWidth(cell.element, cell.width);\n    });\n  };\n\n  var adjustWidth = function adjustWidth(table, delta, index, resizing, tableSize) {\n    var warehouse = Warehouse.fromTable(table);\n    var step = tableSize.getCellDelta(delta);\n    var widths = tableSize.getWidths(warehouse, tableSize);\n    var isLastColumn = index === warehouse.grid.columns - 1;\n    var clampedStep = resizing.clampTableDelta(widths, index, step, tableSize.minCellWidth(), isLastColumn);\n    var deltas = determine(widths, index, clampedStep, tableSize, resizing);\n    var newWidths = map$1(deltas, function (dx, i) {\n      return dx + widths[i];\n    });\n    recalculateAndApply(warehouse, newWidths, tableSize);\n    resizing.resizeTable(tableSize.adjustTableWidth, clampedStep, isLastColumn);\n  };\n\n  var adjustHeight = function adjustHeight(table, delta, index, direction) {\n    var warehouse = Warehouse.fromTable(table);\n    var heights = getPixelHeights(warehouse, table, direction);\n    var newHeights = map$1(heights, function (dy, i) {\n      return index === i ? Math.max(delta + dy, minHeight()) : dy;\n    });\n    var newCellSizes = recalculateHeightForCells(warehouse, newHeights);\n    var newRowSizes = matchRowHeight(warehouse, newHeights);\n    each$2(newRowSizes, function (row) {\n      setHeight(row.element, row.height);\n    });\n    each$2(newCellSizes, function (cell) {\n      setHeight(cell.element, cell.height);\n    });\n    var total = sumUp(newHeights);\n    setHeight(table, total);\n  };\n\n  var adjustAndRedistributeWidths$1 = function adjustAndRedistributeWidths$1(_table, list, details, tableSize, resizeBehaviour) {\n    var warehouse = Warehouse.generate(list);\n    var sizes = tableSize.getWidths(warehouse, tableSize);\n    var tablePixelWidth = tableSize.pixelWidth();\n\n    var _a = resizeBehaviour.calcRedestributedWidths(sizes, tablePixelWidth, details.pixelDelta, tableSize.isRelative),\n        newSizes = _a.newSizes,\n        delta = _a.delta;\n\n    recalculateAndApply(warehouse, newSizes, tableSize);\n    tableSize.adjustTableWidth(delta);\n  };\n\n  var adjustWidthTo = function adjustWidthTo(_table, list, _info, tableSize) {\n    var warehouse = Warehouse.generate(list);\n    var widths = tableSize.getWidths(warehouse, tableSize);\n    recalculateAndApply(warehouse, widths, tableSize);\n  };\n\n  var zero = function zero(array) {\n    return map$1(array, constant(0));\n  };\n\n  var surround = function surround(sizes, startIndex, endIndex, results, f) {\n    return f(sizes.slice(0, startIndex)).concat(results).concat(f(sizes.slice(endIndex)));\n  };\n\n  var clampDeltaHelper = function clampDeltaHelper(predicate) {\n    return function (sizes, index, delta, minCellSize) {\n      if (!predicate(delta)) {\n        return delta;\n      } else {\n        var newSize = Math.max(minCellSize, sizes[index] - Math.abs(delta));\n        var diff = Math.abs(newSize - sizes[index]);\n        return delta >= 0 ? diff : -diff;\n      }\n    };\n  };\n\n  var clampNegativeDelta = clampDeltaHelper(function (delta) {\n    return delta < 0;\n  });\n  var clampDelta = clampDeltaHelper(always);\n\n  var resizeTable = function resizeTable() {\n    var calcFixedDeltas = function calcFixedDeltas(sizes, index, next, delta, minCellSize) {\n      var clampedDelta = clampNegativeDelta(sizes, index, delta, minCellSize);\n      return surround(sizes, index, next + 1, [clampedDelta, 0], zero);\n    };\n\n    var calcRelativeDeltas = function calcRelativeDeltas(sizes, index, delta, minCellSize) {\n      var ratio = (100 + delta) / 100;\n      var newThis = Math.max(minCellSize, (sizes[index] + delta) / ratio);\n      return map$1(sizes, function (size, idx) {\n        var newSize = idx === index ? newThis : size / ratio;\n        return newSize - size;\n      });\n    };\n\n    var calcLeftEdgeDeltas = function calcLeftEdgeDeltas(sizes, index, next, delta, minCellSize, isRelative) {\n      if (isRelative) {\n        return calcRelativeDeltas(sizes, index, delta, minCellSize);\n      } else {\n        return calcFixedDeltas(sizes, index, next, delta, minCellSize);\n      }\n    };\n\n    var calcMiddleDeltas = function calcMiddleDeltas(sizes, _prev, index, next, delta, minCellSize, isRelative) {\n      return calcLeftEdgeDeltas(sizes, index, next, delta, minCellSize, isRelative);\n    };\n\n    var resizeTable = function resizeTable(resizer, delta) {\n      return resizer(delta);\n    };\n\n    var calcRightEdgeDeltas = function calcRightEdgeDeltas(sizes, _prev, index, delta, minCellSize, isRelative) {\n      if (isRelative) {\n        return calcRelativeDeltas(sizes, index, delta, minCellSize);\n      } else {\n        var clampedDelta = clampNegativeDelta(sizes, index, delta, minCellSize);\n        return zero(sizes.slice(0, index)).concat([clampedDelta]);\n      }\n    };\n\n    var calcRedestributedWidths = function calcRedestributedWidths(sizes, totalWidth, pixelDelta, isRelative) {\n      if (isRelative) {\n        var tableWidth = totalWidth + pixelDelta;\n        var ratio_1 = tableWidth / totalWidth;\n        var newSizes = map$1(sizes, function (size) {\n          return size / ratio_1;\n        });\n        return {\n          delta: ratio_1 * 100 - 100,\n          newSizes: newSizes\n        };\n      } else {\n        return {\n          delta: pixelDelta,\n          newSizes: sizes\n        };\n      }\n    };\n\n    return {\n      resizeTable: resizeTable,\n      clampTableDelta: clampNegativeDelta,\n      calcLeftEdgeDeltas: calcLeftEdgeDeltas,\n      calcMiddleDeltas: calcMiddleDeltas,\n      calcRightEdgeDeltas: calcRightEdgeDeltas,\n      calcRedestributedWidths: calcRedestributedWidths\n    };\n  };\n\n  var preserveTable = function preserveTable() {\n    var calcLeftEdgeDeltas = function calcLeftEdgeDeltas(sizes, index, next, delta, minCellSize) {\n      var idx = delta >= 0 ? next : index;\n      var clampedDelta = clampDelta(sizes, idx, delta, minCellSize);\n      return surround(sizes, index, next + 1, [clampedDelta, -clampedDelta], zero);\n    };\n\n    var calcMiddleDeltas = function calcMiddleDeltas(sizes, _prev, index, next, delta, minCellSize) {\n      return calcLeftEdgeDeltas(sizes, index, next, delta, minCellSize);\n    };\n\n    var resizeTable = function resizeTable(resizer, delta, isLastColumn) {\n      if (isLastColumn) {\n        resizer(delta);\n      }\n    };\n\n    var calcRightEdgeDeltas = function calcRightEdgeDeltas(sizes, _prev, _index, delta, _minCellSize, isRelative) {\n      if (isRelative) {\n        return zero(sizes);\n      } else {\n        var diff = delta / sizes.length;\n        return map$1(sizes, constant(diff));\n      }\n    };\n\n    var clampTableDelta = function clampTableDelta(sizes, index, delta, minCellSize, isLastColumn) {\n      if (isLastColumn) {\n        if (delta >= 0) {\n          return delta;\n        } else {\n          var maxDelta = foldl(sizes, function (a, b) {\n            return a + b - minCellSize;\n          }, 0);\n          return Math.max(-maxDelta, delta);\n        }\n      } else {\n        return clampNegativeDelta(sizes, index, delta, minCellSize);\n      }\n    };\n\n    var calcRedestributedWidths = function calcRedestributedWidths(sizes, _totalWidth, _pixelDelta, _isRelative) {\n      return {\n        delta: 0,\n        newSizes: sizes\n      };\n    };\n\n    return {\n      resizeTable: resizeTable,\n      clampTableDelta: clampTableDelta,\n      calcLeftEdgeDeltas: calcLeftEdgeDeltas,\n      calcMiddleDeltas: calcMiddleDeltas,\n      calcRightEdgeDeltas: calcRightEdgeDeltas,\n      calcRedestributedWidths: calcRedestributedWidths\n    };\n  };\n\n  var only = function only(element, isResizable) {\n    var parent = Optional.from(element.dom.documentElement).map(SugarElement.fromDom).getOr(element);\n    return {\n      parent: constant(parent),\n      view: constant(element),\n      origin: constant(SugarPosition(0, 0)),\n      isResizable: isResizable\n    };\n  };\n\n  var detached = function detached(editable, chrome, isResizable) {\n    var origin = function origin() {\n      return absolute(chrome);\n    };\n\n    return {\n      parent: constant(chrome),\n      view: constant(editable),\n      origin: origin,\n      isResizable: isResizable\n    };\n  };\n\n  var body = function body(editable, chrome, isResizable) {\n    return {\n      parent: constant(chrome),\n      view: constant(editable),\n      origin: constant(SugarPosition(0, 0)),\n      isResizable: isResizable\n    };\n  };\n\n  var ResizeWire = {\n    only: only,\n    detached: detached,\n    body: body\n  };\n  var adt$6 = Adt.generate([{\n    invalid: ['raw']\n  }, {\n    pixels: ['value']\n  }, {\n    percent: ['value']\n  }]);\n\n  var validateFor = function validateFor(suffix, type, value) {\n    var rawAmount = value.substring(0, value.length - suffix.length);\n    var amount = parseFloat(rawAmount);\n    return rawAmount === amount.toString() ? type(amount) : adt$6.invalid(value);\n  };\n\n  var from = function from(value) {\n    if (endsWith(value, '%')) {\n      return validateFor('%', adt$6.percent, value);\n    }\n\n    if (endsWith(value, 'px')) {\n      return validateFor('px', adt$6.pixels, value);\n    }\n\n    return adt$6.invalid(value);\n  };\n\n  var Size = _assign(_assign({}, adt$6), {\n    from: from\n  });\n\n  var redistributeToPercent = function redistributeToPercent(widths, totalWidth) {\n    return map$1(widths, function (w) {\n      var colType = Size.from(w);\n      return colType.fold(function () {\n        return w;\n      }, function (px) {\n        var ratio = px / totalWidth * 100;\n        return ratio + '%';\n      }, function (pc) {\n        return pc + '%';\n      });\n    });\n  };\n\n  var redistributeToPx = function redistributeToPx(widths, totalWidth, newTotalWidth) {\n    var scale = newTotalWidth / totalWidth;\n    return map$1(widths, function (w) {\n      var colType = Size.from(w);\n      return colType.fold(function () {\n        return w;\n      }, function (px) {\n        return px * scale + 'px';\n      }, function (pc) {\n        return pc / 100 * newTotalWidth + 'px';\n      });\n    });\n  };\n\n  var redistributeEmpty = function redistributeEmpty(newWidthType, columns) {\n    var f = newWidthType.fold(function () {\n      return constant('');\n    }, function (pixels) {\n      var num = pixels / columns;\n      return constant(num + 'px');\n    }, function () {\n      var num = 100 / columns;\n      return constant(num + '%');\n    });\n    return range$1(columns, f);\n  };\n\n  var redistributeValues = function redistributeValues(newWidthType, widths, totalWidth) {\n    return newWidthType.fold(function () {\n      return widths;\n    }, function (px) {\n      return redistributeToPx(widths, totalWidth, px);\n    }, function (_pc) {\n      return redistributeToPercent(widths, totalWidth);\n    });\n  };\n\n  var redistribute$1 = function redistribute$1(widths, totalWidth, newWidth) {\n    var newType = Size.from(newWidth);\n    var floats = forall(widths, function (s) {\n      return s === '0px';\n    }) ? redistributeEmpty(newType, widths.length) : redistributeValues(newType, widths, totalWidth);\n    return normalize(floats);\n  };\n\n  var sum = function sum(values, fallback) {\n    if (values.length === 0) {\n      return fallback;\n    }\n\n    return foldr(values, function (rest, v) {\n      return Size.from(v).fold(constant(0), identity, identity) + rest;\n    }, 0);\n  };\n\n  var roundDown = function roundDown(num, unit) {\n    var floored = Math.floor(num);\n    return {\n      value: floored + unit,\n      remainder: num - floored\n    };\n  };\n\n  var add$3 = function add$3(value, amount) {\n    return Size.from(value).fold(constant(value), function (px) {\n      return px + amount + 'px';\n    }, function (pc) {\n      return pc + amount + '%';\n    });\n  };\n\n  var normalize = function normalize(values) {\n    if (values.length === 0) {\n      return values;\n    }\n\n    var scan = foldr(values, function (rest, value) {\n      var info = Size.from(value).fold(function () {\n        return {\n          value: value,\n          remainder: 0\n        };\n      }, function (num) {\n        return roundDown(num, 'px');\n      }, function (num) {\n        return {\n          value: num + '%',\n          remainder: 0\n        };\n      });\n      return {\n        output: [info.value].concat(rest.output),\n        remainder: rest.remainder + info.remainder\n      };\n    }, {\n      output: [],\n      remainder: 0\n    });\n    var r = scan.output;\n    return r.slice(0, r.length - 1).concat([add$3(r[r.length - 1], Math.round(scan.remainder))]);\n  };\n\n  var validate = Size.from;\n\n  var redistributeToW = function redistributeToW(newWidths, cells, unit) {\n    each$2(cells, function (cell) {\n      var widths = newWidths.slice(cell.column, cell.colspan + cell.column);\n      var w = sum(widths, minWidth());\n      set$1(cell.element, 'width', w + unit);\n    });\n  };\n\n  var redistributeToColumns = function redistributeToColumns(newWidths, columns, unit) {\n    each$2(columns, function (column, index) {\n      var width = sum([newWidths[index]], minWidth());\n      set$1(column.element, 'width', width + unit);\n    });\n  };\n\n  var redistributeToH = function redistributeToH(newHeights, rows, cells, unit) {\n    each$2(cells, function (cell) {\n      var heights = newHeights.slice(cell.row, cell.rowspan + cell.row);\n      var h = sum(heights, minHeight());\n      set$1(cell.element, 'height', h + unit);\n    });\n    each$2(rows, function (row, i) {\n      set$1(row.element, 'height', newHeights[i]);\n    });\n  };\n\n  var getUnit = function getUnit(newSize) {\n    return validate(newSize).fold(constant('px'), constant('px'), constant('%'));\n  };\n\n  var redistribute = function redistribute(table, optWidth, optHeight) {\n    var warehouse = Warehouse.fromTable(table);\n    var rows = warehouse.all;\n    var cells = Warehouse.justCells(warehouse);\n    var columns = Warehouse.justColumns(warehouse);\n    optWidth.each(function (newWidth) {\n      var widthUnit = getUnit(newWidth);\n      var totalWidth = get$8(table);\n      var oldWidths = getRawWidths(warehouse, table);\n      var nuWidths = redistribute$1(oldWidths, totalWidth, newWidth);\n\n      if (Warehouse.hasColumns(warehouse)) {\n        redistributeToColumns(nuWidths, columns, widthUnit);\n      } else {\n        redistributeToW(nuWidths, cells, widthUnit);\n      }\n\n      set$1(table, 'width', newWidth);\n    });\n    optHeight.each(function (newHeight) {\n      var hUnit = getUnit(newHeight);\n      var totalHeight = get$7(table);\n      var oldHeights = getRawHeights(warehouse, table, height);\n      var nuHeights = redistribute$1(oldHeights, totalHeight, newHeight);\n      redistributeToH(nuHeights, rows, cells, hUnit);\n      set$1(table, 'height', newHeight);\n    });\n  };\n\n  var isPercentSizing = isPercentSizing$1;\n  var isPixelSizing = isPixelSizing$1;\n  var isNoneSizing = isNoneSizing$1;\n\n  var getGridSize = function getGridSize(table) {\n    var warehouse = Warehouse.fromTable(table);\n    return warehouse.grid;\n  };\n\n  var Event = function Event(fields) {\n    var handlers = [];\n\n    var bind = function bind(handler) {\n      if (handler === undefined) {\n        throw new Error('Event bind error: undefined handler');\n      }\n\n      handlers.push(handler);\n    };\n\n    var unbind = function unbind(handler) {\n      handlers = filter$2(handlers, function (h) {\n        return h !== handler;\n      });\n    };\n\n    var trigger = function trigger() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var event = {};\n      each$2(fields, function (name, i) {\n        event[name] = args[i];\n      });\n      each$2(handlers, function (handler) {\n        handler(event);\n      });\n    };\n\n    return {\n      bind: bind,\n      unbind: unbind,\n      trigger: trigger\n    };\n  };\n\n  var create$4 = function create$4(typeDefs) {\n    var registry = map(typeDefs, function (event) {\n      return {\n        bind: event.bind,\n        unbind: event.unbind\n      };\n    });\n    var trigger = map(typeDefs, function (event) {\n      return event.trigger;\n    });\n    return {\n      registry: registry,\n      trigger: trigger\n    };\n  };\n\n  var last = function last(fn, rate) {\n    var timer = null;\n\n    var cancel = function cancel() {\n      if (!isNull(timer)) {\n        clearTimeout(timer);\n        timer = null;\n      }\n    };\n\n    var throttle = function throttle() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      cancel();\n      timer = setTimeout(function () {\n        timer = null;\n        fn.apply(null, args);\n      }, rate);\n    };\n\n    return {\n      cancel: cancel,\n      throttle: throttle\n    };\n  };\n\n  var sort = function sort(arr) {\n    return arr.slice(0).sort();\n  };\n\n  var reqMessage = function reqMessage(required, keys) {\n    throw new Error('All required keys (' + sort(required).join(', ') + ') were not specified. Specified keys were: ' + sort(keys).join(', ') + '.');\n  };\n\n  var unsuppMessage = function unsuppMessage(unsupported) {\n    throw new Error('Unsupported keys for object: ' + sort(unsupported).join(', '));\n  };\n\n  var validateStrArr = function validateStrArr(label, array) {\n    if (!isArray(array)) {\n      throw new Error('The ' + label + ' fields must be an array. Was: ' + array + '.');\n    }\n\n    each$2(array, function (a) {\n      if (!isString(a)) {\n        throw new Error('The value ' + a + ' in the ' + label + ' fields was not a string.');\n      }\n    });\n  };\n\n  var invalidTypeMessage = function invalidTypeMessage(incorrect, type) {\n    throw new Error('All values need to be of type: ' + type + '. Keys (' + sort(incorrect).join(', ') + ') were not.');\n  };\n\n  var checkDupes = function checkDupes(everything) {\n    var sorted = sort(everything);\n    var dupe = find$1(sorted, function (s, i) {\n      return i < sorted.length - 1 && s === sorted[i + 1];\n    });\n    dupe.each(function (d) {\n      throw new Error('The field: ' + d + ' occurs more than once in the combined fields: [' + sorted.join(', ') + '].');\n    });\n  };\n\n  var base = function base(handleUnsupported, required) {\n    return baseWith(handleUnsupported, required, {\n      validate: isFunction,\n      label: 'function'\n    });\n  };\n\n  var baseWith = function baseWith(handleUnsupported, required, pred) {\n    if (required.length === 0) {\n      throw new Error('You must specify at least one required field.');\n    }\n\n    validateStrArr('required', required);\n    checkDupes(required);\n    return function (obj) {\n      var keys$1 = keys(obj);\n      var allReqd = forall(required, function (req) {\n        return contains$2(keys$1, req);\n      });\n\n      if (!allReqd) {\n        reqMessage(required, keys$1);\n      }\n\n      handleUnsupported(required, keys$1);\n      var invalidKeys = filter$2(required, function (key) {\n        return !pred.validate(obj[key], key);\n      });\n\n      if (invalidKeys.length > 0) {\n        invalidTypeMessage(invalidKeys, pred.label);\n      }\n\n      return obj;\n    };\n  };\n\n  var handleExact = function handleExact(required, keys) {\n    var unsupported = filter$2(keys, function (key) {\n      return !contains$2(required, key);\n    });\n\n    if (unsupported.length > 0) {\n      unsuppMessage(unsupported);\n    }\n  };\n\n  var exactly = function exactly(required) {\n    return base(handleExact, required);\n  };\n\n  var DragMode = exactly(['compare', 'extract', 'mutate', 'sink']);\n  var DragSink = exactly(['element', 'start', 'stop', 'destroy']);\n  var DragApi = exactly(['forceDrop', 'drop', 'move', 'delayDrop']);\n\n  var InDrag = function InDrag() {\n    var previous = Optional.none();\n\n    var reset = function reset() {\n      previous = Optional.none();\n    };\n\n    var update = function update(mode, nu) {\n      var result = previous.map(function (old) {\n        return mode.compare(old, nu);\n      });\n      previous = Optional.some(nu);\n      return result;\n    };\n\n    var onEvent = function onEvent(event, mode) {\n      var dataOption = mode.extract(event);\n      dataOption.each(function (data) {\n        var offset = update(mode, data);\n        offset.each(function (d) {\n          events.trigger.move(d);\n        });\n      });\n    };\n\n    var events = create$4({\n      move: Event(['info'])\n    });\n    return {\n      onEvent: onEvent,\n      reset: reset,\n      events: events.registry\n    };\n  };\n\n  var NoDrag = function NoDrag() {\n    var events = create$4({\n      move: Event(['info'])\n    });\n    return {\n      onEvent: noop,\n      reset: noop,\n      events: events.registry\n    };\n  };\n\n  var Movement = function Movement() {\n    var noDragState = NoDrag();\n    var inDragState = InDrag();\n    var dragState = noDragState;\n\n    var on = function on() {\n      dragState.reset();\n      dragState = inDragState;\n    };\n\n    var off = function off() {\n      dragState.reset();\n      dragState = noDragState;\n    };\n\n    var onEvent = function onEvent(event, mode) {\n      dragState.onEvent(event, mode);\n    };\n\n    var isOn = function isOn() {\n      return dragState === inDragState;\n    };\n\n    return {\n      on: on,\n      off: off,\n      isOn: isOn,\n      onEvent: onEvent,\n      events: inDragState.events\n    };\n  };\n\n  var setup = function setup(mutation, mode, settings) {\n    var active = false;\n    var events = create$4({\n      start: Event([]),\n      stop: Event([])\n    });\n    var movement = Movement();\n\n    var drop = function drop() {\n      sink.stop();\n\n      if (movement.isOn()) {\n        movement.off();\n        events.trigger.stop();\n      }\n    };\n\n    var throttledDrop = last(drop, 200);\n\n    var go = function go(parent) {\n      sink.start(parent);\n      movement.on();\n      events.trigger.start();\n    };\n\n    var mousemove = function mousemove(event) {\n      throttledDrop.cancel();\n      movement.onEvent(event, mode);\n    };\n\n    movement.events.move.bind(function (event) {\n      mode.mutate(mutation, event.info);\n    });\n\n    var on = function on() {\n      active = true;\n    };\n\n    var off = function off() {\n      active = false;\n    };\n\n    var runIfActive = function runIfActive(f) {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        if (active) {\n          f.apply(null, args);\n        }\n      };\n    };\n\n    var sink = mode.sink(DragApi({\n      forceDrop: drop,\n      drop: runIfActive(drop),\n      move: runIfActive(mousemove),\n      delayDrop: runIfActive(throttledDrop.throttle)\n    }), settings);\n\n    var destroy = function destroy() {\n      sink.destroy();\n    };\n\n    return {\n      element: sink.element,\n      go: go,\n      on: on,\n      off: off,\n      destroy: destroy,\n      events: events.registry\n    };\n  };\n\n  var mkEvent = function mkEvent(target, x, y, stop, prevent, kill, raw) {\n    return {\n      target: target,\n      x: x,\n      y: y,\n      stop: stop,\n      prevent: prevent,\n      kill: kill,\n      raw: raw\n    };\n  };\n\n  var fromRawEvent$1 = function fromRawEvent$1(rawEvent) {\n    var target = SugarElement.fromDom(getOriginalEventTarget(rawEvent).getOr(rawEvent.target));\n\n    var stop = function stop() {\n      return rawEvent.stopPropagation();\n    };\n\n    var prevent = function prevent() {\n      return rawEvent.preventDefault();\n    };\n\n    var kill = compose(prevent, stop);\n    return mkEvent(target, rawEvent.clientX, rawEvent.clientY, stop, prevent, kill, rawEvent);\n  };\n\n  var handle$2 = function handle$2(filter, handler) {\n    return function (rawEvent) {\n      if (filter(rawEvent)) {\n        handler(fromRawEvent$1(rawEvent));\n      }\n    };\n  };\n\n  var binder = function binder(element, event, filter, handler, useCapture) {\n    var wrapped = handle$2(filter, handler);\n    element.dom.addEventListener(event, wrapped, useCapture);\n    return {\n      unbind: curry(unbind, element, event, wrapped, useCapture)\n    };\n  };\n\n  var bind$1 = function bind$1(element, event, filter, handler) {\n    return binder(element, event, filter, handler, false);\n  };\n\n  var unbind = function unbind(element, event, handler, useCapture) {\n    element.dom.removeEventListener(event, handler, useCapture);\n  };\n\n  var filter = always;\n\n  var bind = function bind(element, event, handler) {\n    return bind$1(element, event, filter, handler);\n  };\n\n  var fromRawEvent = fromRawEvent$1;\n\n  var read = function read(element, attr) {\n    var value = get$b(element, attr);\n    return value === undefined || value === '' ? [] : value.split(' ');\n  };\n\n  var add$2 = function add$2(element, attr, id) {\n    var old = read(element, attr);\n    var nu = old.concat([id]);\n    set$2(element, attr, nu.join(' '));\n    return true;\n  };\n\n  var remove$4 = function remove$4(element, attr, id) {\n    var nu = filter$2(read(element, attr), function (v) {\n      return v !== id;\n    });\n\n    if (nu.length > 0) {\n      set$2(element, attr, nu.join(' '));\n    } else {\n      remove$7(element, attr);\n    }\n\n    return false;\n  };\n\n  var supports = function supports(element) {\n    return element.dom.classList !== undefined;\n  };\n\n  var get$5 = function get$5(element) {\n    return read(element, 'class');\n  };\n\n  var add$1 = function add$1(element, clazz) {\n    return add$2(element, 'class', clazz);\n  };\n\n  var remove$3 = function remove$3(element, clazz) {\n    return remove$4(element, 'class', clazz);\n  };\n\n  var add = function add(element, clazz) {\n    if (supports(element)) {\n      element.dom.classList.add(clazz);\n    } else {\n      add$1(element, clazz);\n    }\n  };\n\n  var cleanClass = function cleanClass(element) {\n    var classList = supports(element) ? element.dom.classList : get$5(element);\n\n    if (classList.length === 0) {\n      remove$7(element, 'class');\n    }\n  };\n\n  var remove$2 = function remove$2(element, clazz) {\n    if (supports(element)) {\n      var classList = element.dom.classList;\n      classList.remove(clazz);\n    } else {\n      remove$3(element, clazz);\n    }\n\n    cleanClass(element);\n  };\n\n  var has = function has(element, clazz) {\n    return supports(element) && element.dom.classList.contains(clazz);\n  };\n\n  var css = function css(namespace) {\n    var dashNamespace = namespace.replace(/\\./g, '-');\n\n    var resolve = function resolve(str) {\n      return dashNamespace + '-' + str;\n    };\n\n    return {\n      resolve: resolve\n    };\n  };\n\n  var styles$1 = css('ephox-dragster');\n  var resolve$1 = styles$1.resolve;\n\n  var Blocker = function Blocker(options) {\n    var settings = _assign({\n      layerClass: resolve$1('blocker')\n    }, options);\n\n    var div = SugarElement.fromTag('div');\n    set$2(div, 'role', 'presentation');\n    setAll(div, {\n      position: 'fixed',\n      left: '0px',\n      top: '0px',\n      width: '100%',\n      height: '100%'\n    });\n    add(div, resolve$1('blocker'));\n    add(div, settings.layerClass);\n    var element = constant(div);\n\n    var destroy = function destroy() {\n      remove$5(div);\n    };\n\n    return {\n      element: element,\n      destroy: destroy\n    };\n  };\n\n  var compare = function compare(old, nu) {\n    return SugarPosition(nu.left - old.left, nu.top - old.top);\n  };\n\n  var extract = function extract(event) {\n    return Optional.some(SugarPosition(event.x, event.y));\n  };\n\n  var mutate = function mutate(mutation, info) {\n    mutation.mutate(info.left, info.top);\n  };\n\n  var sink = function sink(dragApi, settings) {\n    var blocker = Blocker(settings);\n    var mdown = bind(blocker.element(), 'mousedown', dragApi.forceDrop);\n    var mup = bind(blocker.element(), 'mouseup', dragApi.drop);\n    var mmove = bind(blocker.element(), 'mousemove', dragApi.move);\n    var mout = bind(blocker.element(), 'mouseout', dragApi.delayDrop);\n\n    var destroy = function destroy() {\n      blocker.destroy();\n      mup.unbind();\n      mmove.unbind();\n      mout.unbind();\n      mdown.unbind();\n    };\n\n    var start = function start(parent) {\n      append$1(parent, blocker.element());\n    };\n\n    var stop = function stop() {\n      remove$5(blocker.element());\n    };\n\n    return DragSink({\n      element: blocker.element,\n      start: start,\n      stop: stop,\n      destroy: destroy\n    });\n  };\n\n  var MouseDrag = DragMode({\n    compare: compare,\n    extract: extract,\n    sink: sink,\n    mutate: mutate\n  });\n\n  var transform$1 = function transform$1(mutation, settings) {\n    if (settings === void 0) {\n      settings = {};\n    }\n\n    var mode = settings.mode !== undefined ? settings.mode : MouseDrag;\n    return setup(mutation, mode, settings);\n  };\n\n  var closest = function closest(target) {\n    return closest$1(target, '[contenteditable]');\n  };\n\n  var isEditable$1 = function isEditable$1(element, assumeEditable) {\n    if (assumeEditable === void 0) {\n      assumeEditable = false;\n    }\n\n    if (!detect$3().browser.isIE() && inBody(element)) {\n      return element.dom.isContentEditable;\n    } else {\n      return closest(element).fold(constant(assumeEditable), function (editable) {\n        return getRaw(editable) === 'true';\n      });\n    }\n  };\n\n  var getRaw = function getRaw(element) {\n    return element.dom.contentEditable;\n  };\n\n  var styles = css('ephox-snooker');\n  var resolve = styles.resolve;\n\n  var Mutation = function Mutation() {\n    var events = create$4({\n      drag: Event(['xDelta', 'yDelta'])\n    });\n\n    var mutate = function mutate(x, y) {\n      events.trigger.drag(x, y);\n    };\n\n    return {\n      mutate: mutate,\n      events: events.registry\n    };\n  };\n\n  var BarMutation = function BarMutation() {\n    var events = create$4({\n      drag: Event(['xDelta', 'yDelta', 'target'])\n    });\n    var target = Optional.none();\n    var delegate = Mutation();\n    delegate.events.drag.bind(function (event) {\n      target.each(function (t) {\n        events.trigger.drag(event.xDelta, event.yDelta, t);\n      });\n    });\n\n    var assign = function assign(t) {\n      target = Optional.some(t);\n    };\n\n    var get = function get() {\n      return target;\n    };\n\n    return {\n      assign: assign,\n      get: get,\n      mutate: delegate.mutate,\n      events: events.registry\n    };\n  };\n\n  var col = function col(column, x, y, w, h) {\n    var bar = SugarElement.fromTag('div');\n    setAll(bar, {\n      position: 'absolute',\n      left: x - w / 2 + 'px',\n      top: y + 'px',\n      height: h + 'px',\n      width: w + 'px'\n    });\n    setAll$1(bar, {\n      'data-column': column,\n      'role': 'presentation'\n    });\n    return bar;\n  };\n\n  var row = function row(r, x, y, w, h) {\n    var bar = SugarElement.fromTag('div');\n    setAll(bar, {\n      position: 'absolute',\n      left: x + 'px',\n      top: y - h / 2 + 'px',\n      height: h + 'px',\n      width: w + 'px'\n    });\n    setAll$1(bar, {\n      'data-row': r,\n      'role': 'presentation'\n    });\n    return bar;\n  };\n\n  var resizeBar = resolve('resizer-bar');\n  var resizeRowBar = resolve('resizer-rows');\n  var resizeColBar = resolve('resizer-cols');\n  var BAR_THICKNESS = 7;\n\n  var resizableRows = function resizableRows(warehouse, isResizable) {\n    return bind$2(warehouse.all, function (row, i) {\n      return isResizable(row.element) ? [i] : [];\n    });\n  };\n\n  var resizableColumns = function resizableColumns(warehouse, isResizable) {\n    var resizableCols = [];\n    range$1(warehouse.grid.columns, function (index) {\n      var colElmOpt = Warehouse.getColumnAt(warehouse, index).map(function (col) {\n        return col.element;\n      });\n\n      if (colElmOpt.forall(isResizable)) {\n        resizableCols.push(index);\n      }\n    });\n    return filter$2(resizableCols, function (colIndex) {\n      var columnCells = Warehouse.filterItems(warehouse, function (cell) {\n        return cell.column === colIndex;\n      });\n      return forall(columnCells, function (cell) {\n        return isResizable(cell.element);\n      });\n    });\n  };\n\n  var destroy = function destroy(wire) {\n    var previous = descendants(wire.parent(), '.' + resizeBar);\n    each$2(previous, remove$5);\n  };\n\n  var drawBar = function drawBar(wire, positions, create) {\n    var origin = wire.origin();\n    each$2(positions, function (cpOption) {\n      cpOption.each(function (cp) {\n        var bar = create(origin, cp);\n        add(bar, resizeBar);\n        append$1(wire.parent(), bar);\n      });\n    });\n  };\n\n  var refreshCol = function refreshCol(wire, colPositions, position, tableHeight) {\n    drawBar(wire, colPositions, function (origin, cp) {\n      var colBar = col(cp.col, cp.x - origin.left, position.top - origin.top, BAR_THICKNESS, tableHeight);\n      add(colBar, resizeColBar);\n      return colBar;\n    });\n  };\n\n  var refreshRow = function refreshRow(wire, rowPositions, position, tableWidth) {\n    drawBar(wire, rowPositions, function (origin, cp) {\n      var rowBar = row(cp.row, position.left - origin.left, cp.y - origin.top, tableWidth, BAR_THICKNESS);\n      add(rowBar, resizeRowBar);\n      return rowBar;\n    });\n  };\n\n  var refreshGrid = function refreshGrid(warhouse, wire, table, rows, cols) {\n    var position = absolute(table);\n    var isResizable = wire.isResizable;\n    var rowPositions = rows.length > 0 ? height.positions(rows, table) : [];\n    var resizableRowBars = rowPositions.length > 0 ? resizableRows(warhouse, isResizable) : [];\n    var resizableRowPositions = filter$2(rowPositions, function (_pos, i) {\n      return exists(resizableRowBars, function (barIndex) {\n        return i === barIndex;\n      });\n    });\n    refreshRow(wire, resizableRowPositions, position, getOuter$2(table));\n    var colPositions = cols.length > 0 ? width.positions(cols, table) : [];\n    var resizableColBars = colPositions.length > 0 ? resizableColumns(warhouse, isResizable) : [];\n    var resizableColPositions = filter$2(colPositions, function (_pos, i) {\n      return exists(resizableColBars, function (barIndex) {\n        return i === barIndex;\n      });\n    });\n    refreshCol(wire, resizableColPositions, position, getOuter$1(table));\n  };\n\n  var refresh = function refresh(wire, table) {\n    destroy(wire);\n\n    if (wire.isResizable(table)) {\n      var warehouse = Warehouse.fromTable(table);\n      var rows$1 = rows(warehouse);\n      var cols = columns(warehouse);\n      refreshGrid(warehouse, wire, table, rows$1, cols);\n    }\n  };\n\n  var each = function each(wire, f) {\n    var bars = descendants(wire.parent(), '.' + resizeBar);\n    each$2(bars, f);\n  };\n\n  var hide = function hide(wire) {\n    each(wire, function (bar) {\n      set$1(bar, 'display', 'none');\n    });\n  };\n\n  var show = function show(wire) {\n    each(wire, function (bar) {\n      set$1(bar, 'display', 'block');\n    });\n  };\n\n  var isRowBar = function isRowBar(element) {\n    return has(element, resizeRowBar);\n  };\n\n  var isColBar = function isColBar(element) {\n    return has(element, resizeColBar);\n  };\n\n  var resizeBarDragging = resolve('resizer-bar-dragging');\n\n  var BarManager = function BarManager(wire) {\n    var mutation = BarMutation();\n    var resizing = transform$1(mutation, {});\n    var hoverTable = Optional.none();\n\n    var getResizer = function getResizer(element, type) {\n      return Optional.from(get$b(element, type));\n    };\n\n    mutation.events.drag.bind(function (event) {\n      getResizer(event.target, 'data-row').each(function (_dataRow) {\n        var currentRow = getCssValue(event.target, 'top');\n        set$1(event.target, 'top', currentRow + event.yDelta + 'px');\n      });\n      getResizer(event.target, 'data-column').each(function (_dataCol) {\n        var currentCol = getCssValue(event.target, 'left');\n        set$1(event.target, 'left', currentCol + event.xDelta + 'px');\n      });\n    });\n\n    var getDelta = function getDelta(target, dir) {\n      var newX = getCssValue(target, dir);\n      var oldX = getAttrValue(target, 'data-initial-' + dir, 0);\n      return newX - oldX;\n    };\n\n    resizing.events.stop.bind(function () {\n      mutation.get().each(function (target) {\n        hoverTable.each(function (table) {\n          getResizer(target, 'data-row').each(function (row) {\n            var delta = getDelta(target, 'top');\n            remove$7(target, 'data-initial-top');\n            events.trigger.adjustHeight(table, delta, parseInt(row, 10));\n          });\n          getResizer(target, 'data-column').each(function (column) {\n            var delta = getDelta(target, 'left');\n            remove$7(target, 'data-initial-left');\n            events.trigger.adjustWidth(table, delta, parseInt(column, 10));\n          });\n          refresh(wire, table);\n        });\n      });\n    });\n\n    var handler = function handler(target, dir) {\n      events.trigger.startAdjust();\n      mutation.assign(target);\n      set$2(target, 'data-initial-' + dir, getCssValue(target, dir));\n      add(target, resizeBarDragging);\n      set$1(target, 'opacity', '0.2');\n      resizing.go(wire.parent());\n    };\n\n    var mousedown = bind(wire.parent(), 'mousedown', function (event) {\n      if (isRowBar(event.target)) {\n        handler(event.target, 'top');\n      }\n\n      if (isColBar(event.target)) {\n        handler(event.target, 'left');\n      }\n    });\n\n    var isRoot = function isRoot(e) {\n      return eq$1(e, wire.view());\n    };\n\n    var findClosestEditableTable = function findClosestEditableTable(target) {\n      return closest$1(target, 'table', isRoot).filter(isEditable$1);\n    };\n\n    var mouseover = bind(wire.view(), 'mouseover', function (event) {\n      findClosestEditableTable(event.target).fold(function () {\n        if (inBody(event.target)) {\n          destroy(wire);\n        }\n      }, function (table) {\n        hoverTable = Optional.some(table);\n        refresh(wire, table);\n      });\n    });\n\n    var destroy$1 = function destroy$1() {\n      mousedown.unbind();\n      mouseover.unbind();\n      resizing.destroy();\n      destroy(wire);\n    };\n\n    var refresh$1 = function refresh$1(tbl) {\n      refresh(wire, tbl);\n    };\n\n    var events = create$4({\n      adjustHeight: Event(['table', 'delta', 'row']),\n      adjustWidth: Event(['table', 'delta', 'column']),\n      startAdjust: Event([])\n    });\n    return {\n      destroy: destroy$1,\n      refresh: refresh$1,\n      on: resizing.on,\n      off: resizing.off,\n      hideBars: curry(hide, wire),\n      showBars: curry(show, wire),\n      events: events.registry\n    };\n  };\n\n  var create$3 = function create$3(wire, resizing, lazySizing) {\n    var hdirection = height;\n    var vdirection = width;\n    var manager = BarManager(wire);\n    var events = create$4({\n      beforeResize: Event(['table', 'type']),\n      afterResize: Event(['table', 'type']),\n      startDrag: Event([])\n    });\n    manager.events.adjustHeight.bind(function (event) {\n      var table = event.table;\n      events.trigger.beforeResize(table, 'row');\n      var delta = hdirection.delta(event.delta, table);\n      adjustHeight(table, delta, event.row, hdirection);\n      events.trigger.afterResize(table, 'row');\n    });\n    manager.events.startAdjust.bind(function (_event) {\n      events.trigger.startDrag();\n    });\n    manager.events.adjustWidth.bind(function (event) {\n      var table = event.table;\n      events.trigger.beforeResize(table, 'col');\n      var delta = vdirection.delta(event.delta, table);\n      var tableSize = lazySizing(table);\n      adjustWidth(table, delta, event.column, resizing, tableSize);\n      events.trigger.afterResize(table, 'col');\n    });\n    return {\n      on: manager.on,\n      off: manager.off,\n      hideBars: manager.hideBars,\n      showBars: manager.showBars,\n      destroy: manager.destroy,\n      events: events.registry\n    };\n  };\n\n  var TableResize = {\n    create: create$3\n  };\n\n  var fireNewRow = function fireNewRow(editor, row) {\n    return editor.fire('newrow', {\n      node: row\n    });\n  };\n\n  var fireNewCell = function fireNewCell(editor, cell) {\n    return editor.fire('newcell', {\n      node: cell\n    });\n  };\n\n  var fireObjectResizeStart = function fireObjectResizeStart(editor, target, width, height, origin) {\n    editor.fire('ObjectResizeStart', {\n      target: target,\n      width: width,\n      height: height,\n      origin: origin\n    });\n  };\n\n  var fireObjectResized = function fireObjectResized(editor, target, width, height, origin) {\n    editor.fire('ObjectResized', {\n      target: target,\n      width: width,\n      height: height,\n      origin: origin\n    });\n  };\n\n  var fireTableSelectionChange = function fireTableSelectionChange(editor, cells, start, finish, otherCells) {\n    editor.fire('TableSelectionChange', {\n      cells: cells,\n      start: start,\n      finish: finish,\n      otherCells: otherCells\n    });\n  };\n\n  var fireTableSelectionClear = function fireTableSelectionClear(editor) {\n    editor.fire('TableSelectionClear');\n  };\n\n  var fireTableModified = function fireTableModified(editor, table, data) {\n    editor.fire('TableModified', _assign(_assign({}, data), {\n      table: table\n    }));\n  };\n\n  var styleModified = {\n    structure: false,\n    style: true\n  };\n  var structureModified = {\n    structure: true,\n    style: false\n  };\n  var styleAndStructureModified = {\n    structure: true,\n    style: true\n  };\n  var defaultTableToolbar = 'tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol';\n  var defaultStyles = {\n    'border-collapse': 'collapse',\n    'width': '100%'\n  };\n  var defaultCellBorderWidths = range$1(5, function (i) {\n    var size = i + 1 + 'px';\n    return {\n      title: size,\n      value: size\n    };\n  });\n  var defaultCellBorderStyles = map$1(['Solid', 'Dotted', 'Dashed', 'Double', 'Groove', 'Ridge', 'Inset', 'Outset', 'None', 'Hidden'], function (type) {\n    return {\n      title: type,\n      value: type.toLowerCase()\n    };\n  });\n\n  var determineDefaultStyles = function determineDefaultStyles(editor) {\n    var _a;\n\n    if (isPixelsForced(editor)) {\n      var dom = editor.dom;\n      var parentBlock = (_a = dom.getParent(editor.selection.getStart(), dom.isBlock)) !== null && _a !== void 0 ? _a : editor.getBody();\n      var contentWidth = getInner(SugarElement.fromDom(parentBlock));\n      return _assign(_assign({}, defaultStyles), {\n        width: contentWidth + 'px'\n      });\n    } else if (isResponsiveForced(editor)) {\n      return filter$1(defaultStyles, function (_value, key) {\n        return key !== 'width';\n      });\n    } else {\n      return defaultStyles;\n    }\n  };\n\n  var defaultAttributes = {\n    border: '1'\n  };\n  var defaultColumnResizingBehaviour = 'preservetable';\n\n  var getTableSizingMode = function getTableSizingMode(editor) {\n    return editor.getParam('table_sizing_mode', 'auto');\n  };\n\n  var getTableResponseWidth = function getTableResponseWidth(editor) {\n    return editor.getParam('table_responsive_width');\n  };\n\n  var getTableBorderWidths = function getTableBorderWidths(editor) {\n    return editor.getParam('table_border_widths', defaultCellBorderWidths, 'array');\n  };\n\n  var getTableBorderStyles = function getTableBorderStyles(editor) {\n    return editor.getParam('table_border_styles', defaultCellBorderStyles, 'array');\n  };\n\n  var getDefaultAttributes = function getDefaultAttributes(editor) {\n    return editor.getParam('table_default_attributes', defaultAttributes, 'object');\n  };\n\n  var getDefaultStyles = function getDefaultStyles(editor) {\n    return editor.getParam('table_default_styles', determineDefaultStyles(editor), 'object');\n  };\n\n  var hasTableResizeBars = function hasTableResizeBars(editor) {\n    return editor.getParam('table_resize_bars', true, 'boolean');\n  };\n\n  var hasTabNavigation = function hasTabNavigation(editor) {\n    return editor.getParam('table_tab_navigation', true, 'boolean');\n  };\n\n  var hasAdvancedCellTab = function hasAdvancedCellTab(editor) {\n    return editor.getParam('table_cell_advtab', true, 'boolean');\n  };\n\n  var hasAdvancedRowTab = function hasAdvancedRowTab(editor) {\n    return editor.getParam('table_row_advtab', true, 'boolean');\n  };\n\n  var hasAdvancedTableTab = function hasAdvancedTableTab(editor) {\n    return editor.getParam('table_advtab', true, 'boolean');\n  };\n\n  var hasAppearanceOptions = function hasAppearanceOptions(editor) {\n    return editor.getParam('table_appearance_options', true, 'boolean');\n  };\n\n  var hasTableGrid = function hasTableGrid(editor) {\n    return editor.getParam('table_grid', true, 'boolean');\n  };\n\n  var shouldStyleWithCss = function shouldStyleWithCss(editor) {\n    return editor.getParam('table_style_by_css', false, 'boolean');\n  };\n\n  var getCellClassList = function getCellClassList(editor) {\n    return editor.getParam('table_cell_class_list', [], 'array');\n  };\n\n  var getRowClassList = function getRowClassList(editor) {\n    return editor.getParam('table_row_class_list', [], 'array');\n  };\n\n  var getTableClassList = function getTableClassList(editor) {\n    return editor.getParam('table_class_list', [], 'array');\n  };\n\n  var isPercentagesForced = function isPercentagesForced(editor) {\n    return getTableSizingMode(editor) === 'relative' || getTableResponseWidth(editor) === true;\n  };\n\n  var isPixelsForced = function isPixelsForced(editor) {\n    return getTableSizingMode(editor) === 'fixed' || getTableResponseWidth(editor) === false;\n  };\n\n  var isResponsiveForced = function isResponsiveForced(editor) {\n    return getTableSizingMode(editor) === 'responsive';\n  };\n\n  var getToolbar = function getToolbar(editor) {\n    return editor.getParam('table_toolbar', defaultTableToolbar);\n  };\n\n  var useColumnGroup = function useColumnGroup(editor) {\n    return editor.getParam('table_use_colgroups', false, 'boolean');\n  };\n\n  var getTableHeaderType = function getTableHeaderType(editor) {\n    var defaultValue = 'section';\n    var value = editor.getParam('table_header_type', defaultValue, 'string');\n    var validValues = ['section', 'cells', 'sectionCells', 'auto'];\n\n    if (!contains$2(validValues, value)) {\n      return defaultValue;\n    } else {\n      return value;\n    }\n  };\n\n  var getColumnResizingBehaviour = function getColumnResizingBehaviour(editor) {\n    var validModes = ['preservetable', 'resizetable'];\n    var givenMode = editor.getParam('table_column_resizing', defaultColumnResizingBehaviour, 'string');\n    return find$1(validModes, function (mode) {\n      return mode === givenMode;\n    }).getOr(defaultColumnResizingBehaviour);\n  };\n\n  var isPreserveTableColumnResizing = function isPreserveTableColumnResizing(editor) {\n    return getColumnResizingBehaviour(editor) === 'preservetable';\n  };\n\n  var isResizeTableColumnResizing = function isResizeTableColumnResizing(editor) {\n    return getColumnResizingBehaviour(editor) === 'resizetable';\n  };\n\n  var getCloneElements = function getCloneElements(editor) {\n    var cloneElements = editor.getParam('table_clone_elements');\n\n    if (isString(cloneElements)) {\n      return Optional.some(cloneElements.split(/[ ,]/));\n    } else if (Array.isArray(cloneElements)) {\n      return Optional.some(cloneElements);\n    } else {\n      return Optional.none();\n    }\n  };\n\n  var hasObjectResizing = function hasObjectResizing(editor) {\n    var objectResizing = editor.getParam('object_resizing', true);\n    return isString(objectResizing) ? objectResizing === 'table' : objectResizing;\n  };\n\n  var getTableBackgroundColorMap = function getTableBackgroundColorMap(editor) {\n    return editor.getParam('table_background_color_map', [], 'array');\n  };\n\n  var getTableBorderColorMap = function getTableBorderColorMap(editor) {\n    return editor.getParam('table_border_color_map', [], 'array');\n  };\n\n  var get$4 = function get$4(editor, table) {\n    if (isPercentagesForced(editor)) {\n      return TableSize.percentageSize(table);\n    } else if (isPixelsForced(editor)) {\n      return TableSize.pixelSize(table);\n    } else {\n      return TableSize.getTableSize(table);\n    }\n  };\n\n  var cleanupLegacyAttributes = function cleanupLegacyAttributes(element) {\n    remove$7(element, 'width');\n  };\n\n  var convertToPercentSize = function convertToPercentSize(table) {\n    var newWidth = getPercentTableWidth(table);\n    redistribute(table, Optional.some(newWidth), Optional.none());\n    cleanupLegacyAttributes(table);\n  };\n\n  var convertToPixelSize = function convertToPixelSize(table) {\n    var newWidth = getPixelTableWidth(table);\n    redistribute(table, Optional.some(newWidth), Optional.none());\n    cleanupLegacyAttributes(table);\n  };\n\n  var convertToNoneSize = function convertToNoneSize(table) {\n    remove$6(table, 'width');\n    var columns = columns$1(table);\n    var rowElements = columns.length > 0 ? columns : cells$1(table);\n    each$2(rowElements, function (cell) {\n      remove$6(cell, 'width');\n      cleanupLegacyAttributes(cell);\n    });\n    cleanupLegacyAttributes(table);\n  };\n\n  var enforcePercentage = convertToPercentSize;\n  var enforcePixels = convertToPixelSize;\n  var enforceNone = convertToNoneSize;\n\n  var syncPixels = function syncPixels(table) {\n    var warehouse = Warehouse.fromTable(table);\n\n    if (!Warehouse.hasColumns(warehouse)) {\n      each$2(cells$1(table), function (cell) {\n        var computedWidth = get$a(cell, 'width');\n        set$1(cell, 'width', computedWidth);\n        remove$7(cell, 'width');\n      });\n    }\n  };\n\n  var createContainer = function createContainer() {\n    var container = SugarElement.fromTag('div');\n    setAll(container, {\n      position: 'static',\n      height: '0',\n      width: '0',\n      padding: '0',\n      margin: '0',\n      border: '0'\n    });\n    append$1(body$1(), container);\n    return container;\n  };\n\n  var get$3 = function get$3(editor, isResizable) {\n    return editor.inline ? ResizeWire.body(getBody(editor), createContainer(), isResizable) : ResizeWire.only(SugarElement.fromDom(editor.getDoc()), isResizable);\n  };\n\n  var remove$1 = function remove$1(editor, wire) {\n    if (editor.inline) {\n      remove$5(wire.parent());\n    }\n  };\n\n  var barResizerPrefix = 'bar-';\n\n  var isResizable = function isResizable(elm) {\n    return get$b(elm, 'data-mce-resize') !== 'false';\n  };\n\n  var getResizeHandler = function getResizeHandler(editor) {\n    var selectionRng = Optional.none();\n    var resize = Optional.none();\n    var wire = Optional.none();\n    var startW;\n    var startRawW;\n\n    var isTable = function isTable(elm) {\n      return elm.nodeName === 'TABLE';\n    };\n\n    var lazyResize = function lazyResize() {\n      return resize;\n    };\n\n    var lazyWire = function lazyWire() {\n      return wire.getOr(ResizeWire.only(SugarElement.fromDom(editor.getBody()), isResizable));\n    };\n\n    var lazySizing = function lazySizing(table) {\n      return get$4(editor, table);\n    };\n\n    var lazyResizingBehaviour = function lazyResizingBehaviour() {\n      return isPreserveTableColumnResizing(editor) ? preserveTable() : resizeTable();\n    };\n\n    var getNumColumns = function getNumColumns(table) {\n      return getGridSize(table).columns;\n    };\n\n    var afterCornerResize = function afterCornerResize(table, origin, width) {\n      var isRightEdgeResize = endsWith(origin, 'e');\n\n      if (startRawW === '') {\n        enforcePercentage(table);\n      }\n\n      if (width !== startW && startRawW !== '') {\n        set$1(table, 'width', startRawW);\n        var resizing = lazyResizingBehaviour();\n        var tableSize = lazySizing(table);\n        var col = isPreserveTableColumnResizing(editor) || isRightEdgeResize ? getNumColumns(table) - 1 : 0;\n        adjustWidth(table, width - startW, col, resizing, tableSize);\n      } else if (isPercentage$1(startRawW)) {\n        var percentW = parseFloat(startRawW.replace('%', ''));\n        var targetPercentW = width * percentW / startW;\n        set$1(table, 'width', targetPercentW + '%');\n      }\n\n      if (isPixel(startRawW)) {\n        syncPixels(table);\n      }\n    };\n\n    var destroy = function destroy() {\n      resize.each(function (sz) {\n        sz.destroy();\n      });\n      wire.each(function (w) {\n        remove$1(editor, w);\n      });\n    };\n\n    editor.on('init', function () {\n      var rawWire = get$3(editor, isResizable);\n      wire = Optional.some(rawWire);\n\n      if (hasObjectResizing(editor) && hasTableResizeBars(editor)) {\n        var resizing = lazyResizingBehaviour();\n        var sz = TableResize.create(rawWire, resizing, lazySizing);\n        sz.on();\n        sz.events.startDrag.bind(function (_event) {\n          selectionRng = Optional.some(editor.selection.getRng());\n        });\n        sz.events.beforeResize.bind(function (event) {\n          var rawTable = event.table.dom;\n          fireObjectResizeStart(editor, rawTable, getPixelWidth(rawTable), getPixelHeight(rawTable), barResizerPrefix + event.type);\n        });\n        sz.events.afterResize.bind(function (event) {\n          var table = event.table;\n          var rawTable = table.dom;\n          removeDataStyle(table);\n          selectionRng.each(function (rng) {\n            editor.selection.setRng(rng);\n            editor.focus();\n          });\n          fireObjectResized(editor, rawTable, getPixelWidth(rawTable), getPixelHeight(rawTable), barResizerPrefix + event.type);\n          editor.undoManager.add();\n        });\n        resize = Optional.some(sz);\n      }\n    });\n    editor.on('ObjectResizeStart', function (e) {\n      var targetElm = e.target;\n\n      if (isTable(targetElm)) {\n        var table = SugarElement.fromDom(targetElm);\n        each$2(editor.dom.select('.mce-clonedresizable'), function (clone) {\n          editor.dom.addClass(clone, 'mce-' + getColumnResizingBehaviour(editor) + '-columns');\n        });\n\n        if (!isPixelSizing(table) && isPixelsForced(editor)) {\n          enforcePixels(table);\n        } else if (!isPercentSizing(table) && isPercentagesForced(editor)) {\n          enforcePercentage(table);\n        }\n\n        if (isNoneSizing(table) && startsWith(e.origin, barResizerPrefix)) {\n          enforcePercentage(table);\n        }\n\n        startW = e.width;\n        startRawW = isResponsiveForced(editor) ? '' : getRawWidth(editor, targetElm).getOr('');\n      }\n    });\n    editor.on('ObjectResized', function (e) {\n      var targetElm = e.target;\n\n      if (isTable(targetElm)) {\n        var table = SugarElement.fromDom(targetElm);\n        var origin_1 = e.origin;\n\n        if (startsWith(origin_1, 'corner-')) {\n          afterCornerResize(table, origin_1, e.width);\n        }\n\n        removeDataStyle(table);\n        fireTableModified(editor, table.dom, styleModified);\n      }\n    });\n    editor.on('SwitchMode', function () {\n      lazyResize().each(function (resize) {\n        if (editor.mode.isReadOnly()) {\n          resize.hideBars();\n        } else {\n          resize.showBars();\n        }\n      });\n    });\n    return {\n      lazyResize: lazyResize,\n      lazyWire: lazyWire,\n      destroy: destroy\n    };\n  };\n\n  var point = function point(element, offset) {\n    return {\n      element: element,\n      offset: offset\n    };\n  };\n\n  var scan$1 = function scan$1(universe, element, direction) {\n    if (universe.property().isText(element) && universe.property().getText(element).trim().length === 0 || universe.property().isComment(element)) {\n      return direction(element).bind(function (elem) {\n        return scan$1(universe, elem, direction).orThunk(function () {\n          return Optional.some(elem);\n        });\n      });\n    } else {\n      return Optional.none();\n    }\n  };\n\n  var toEnd = function toEnd(universe, element) {\n    if (universe.property().isText(element)) {\n      return universe.property().getText(element).length;\n    }\n\n    var children = universe.property().children(element);\n    return children.length;\n  };\n\n  var freefallRtl$2 = function freefallRtl$2(universe, element) {\n    var candidate = scan$1(universe, element, universe.query().prevSibling).getOr(element);\n\n    if (universe.property().isText(candidate)) {\n      return point(candidate, toEnd(universe, candidate));\n    }\n\n    var children = universe.property().children(candidate);\n    return children.length > 0 ? freefallRtl$2(universe, children[children.length - 1]) : point(candidate, toEnd(universe, candidate));\n  };\n\n  var freefallRtl$1 = freefallRtl$2;\n  var universe$2 = DomUniverse();\n\n  var freefallRtl = function freefallRtl(element) {\n    return freefallRtl$1(universe$2, element);\n  };\n\n  var halve = function halve(main, other) {\n    var colspan = getSpan(main, 'colspan');\n\n    if (colspan === 1) {\n      var width = getGenericWidth(main);\n      width.each(function (w) {\n        var newWidth = w.value / 2;\n        setGenericWidth(main, newWidth, w.unit);\n        setGenericWidth(other, newWidth, w.unit);\n      });\n    }\n  };\n\n  var isHeaderCell = isTag('th');\n\n  var isHeaderCells = function isHeaderCells(cells) {\n    return forall(cells, function (cell) {\n      return isHeaderCell(cell.element);\n    });\n  };\n\n  var getRowHeaderType = function getRowHeaderType(isHeaderRow, isHeaderCells) {\n    if (isHeaderRow && isHeaderCells) {\n      return 'sectionCells';\n    } else if (isHeaderRow) {\n      return 'section';\n    } else {\n      return 'cells';\n    }\n  };\n\n  var getRowType$1 = function getRowType$1(row) {\n    var isHeaderRow = row.section === 'thead';\n    var isHeaderCells = is(findCommonCellType(row.cells), 'th');\n\n    if (isHeaderRow || isHeaderCells) {\n      return {\n        type: 'header',\n        subType: getRowHeaderType(isHeaderRow, isHeaderCells)\n      };\n    } else if (row.section === 'tfoot') {\n      return {\n        type: 'footer'\n      };\n    } else {\n      return {\n        type: 'body'\n      };\n    }\n  };\n\n  var findCommonCellType = function findCommonCellType(cells) {\n    var headerCells = filter$2(cells, function (cell) {\n      return isHeaderCell(cell.element);\n    });\n\n    if (headerCells.length === 0) {\n      return Optional.some('td');\n    } else if (headerCells.length === cells.length) {\n      return Optional.some('th');\n    } else {\n      return Optional.none();\n    }\n  };\n\n  var findCommonRowType = function findCommonRowType(rows) {\n    var rowTypes = map$1(rows, function (row) {\n      return getRowType$1(row).type;\n    });\n    var hasHeader = contains$2(rowTypes, 'header');\n    var hasFooter = contains$2(rowTypes, 'footer');\n\n    if (!hasHeader && !hasFooter) {\n      return Optional.some('body');\n    } else {\n      var hasBody = contains$2(rowTypes, 'body');\n\n      if (hasHeader && !hasBody && !hasFooter) {\n        return Optional.some('header');\n      } else if (!hasHeader && !hasBody && hasFooter) {\n        return Optional.some('footer');\n      } else {\n        return Optional.none();\n      }\n    }\n  };\n\n  var findTableRowHeaderType = function findTableRowHeaderType(warehouse) {\n    return findMap(warehouse.all, function (row) {\n      var rowType = getRowType$1(row);\n      return rowType.type === 'header' ? Optional.from(rowType.subType) : Optional.none();\n    });\n  };\n\n  var transformCell = function transformCell(cell, comparator, substitution) {\n    return elementnew(substitution(cell.element, comparator), true, cell.isLocked);\n  };\n\n  var _transformRow = function transformRow(row, section) {\n    return row.section !== section ? rowcells(row.element, row.cells, section, row.isNew) : row;\n  };\n\n  var section = function section() {\n    return {\n      transformRow: _transformRow,\n      transformCell: function transformCell(cell, comparator, substitution) {\n        var newCell = substitution(cell.element, comparator);\n        var fixedCell = name(newCell) !== 'td' ? mutate$1(newCell, 'td') : newCell;\n        return elementnew(fixedCell, cell.isNew, cell.isLocked);\n      }\n    };\n  };\n\n  var sectionCells = function sectionCells() {\n    return {\n      transformRow: _transformRow,\n      transformCell: transformCell\n    };\n  };\n\n  var cells = function cells() {\n    return {\n      transformRow: function transformRow(row, section) {\n        var newSection = section === 'thead' ? 'tbody' : section;\n        return _transformRow(row, newSection);\n      },\n      transformCell: transformCell\n    };\n  };\n\n  var fallback = function fallback() {\n    return {\n      transformRow: identity,\n      transformCell: transformCell\n    };\n  };\n\n  var getTableSectionType = function getTableSectionType(table, fallback) {\n    var warehouse = Warehouse.fromTable(table);\n    var type = findTableRowHeaderType(warehouse).getOr(fallback);\n\n    switch (type) {\n      case 'section':\n        return section();\n\n      case 'sectionCells':\n        return sectionCells();\n\n      case 'cells':\n        return cells();\n    }\n  };\n\n  var TableSection = {\n    getTableSectionType: getTableSectionType,\n    section: section,\n    sectionCells: sectionCells,\n    cells: cells,\n    fallback: fallback\n  };\n\n  var setIfNot = function setIfNot(element, property, value, ignore) {\n    if (value === ignore) {\n      remove$7(element, property);\n    } else {\n      set$2(element, property, value);\n    }\n  };\n\n  var insert$1 = function insert$1(table, selector, element) {\n    last$2(children$1(table, selector)).fold(function () {\n      return prepend(table, element);\n    }, function (child) {\n      return after$5(child, element);\n    });\n  };\n\n  var generateSection = function generateSection(table, sectionName) {\n    var section = child$1(table, sectionName).getOrThunk(function () {\n      var newSection = SugarElement.fromTag(sectionName, owner(table).dom);\n\n      if (sectionName === 'thead') {\n        insert$1(table, 'caption,colgroup', newSection);\n      } else if (sectionName === 'colgroup') {\n        insert$1(table, 'caption', newSection);\n      } else {\n        append$1(table, newSection);\n      }\n\n      return newSection;\n    });\n    empty(section);\n    return section;\n  };\n\n  var render$1 = function render$1(table, grid) {\n    var newRows = [];\n    var newCells = [];\n\n    var syncRows = function syncRows(gridSection) {\n      return map$1(gridSection, function (row) {\n        if (row.isNew) {\n          newRows.push(row.element);\n        }\n\n        var tr = row.element;\n        empty(tr);\n        each$2(row.cells, function (cell) {\n          if (cell.isNew) {\n            newCells.push(cell.element);\n          }\n\n          setIfNot(cell.element, 'colspan', cell.colspan, 1);\n          setIfNot(cell.element, 'rowspan', cell.rowspan, 1);\n          append$1(tr, cell.element);\n        });\n        return tr;\n      });\n    };\n\n    var syncColGroup = function syncColGroup(gridSection) {\n      return bind$2(gridSection, function (colGroup) {\n        return map$1(colGroup.cells, function (col) {\n          setIfNot(col.element, 'span', col.colspan, 1);\n          return col.element;\n        });\n      });\n    };\n\n    var renderSection = function renderSection(gridSection, sectionName) {\n      var section = generateSection(table, sectionName);\n      var sync = sectionName === 'colgroup' ? syncColGroup : syncRows;\n      var sectionElems = sync(gridSection);\n      append(section, sectionElems);\n    };\n\n    var removeSection = function removeSection(sectionName) {\n      child$1(table, sectionName).each(remove$5);\n    };\n\n    var renderOrRemoveSection = function renderOrRemoveSection(gridSection, sectionName) {\n      if (gridSection.length > 0) {\n        renderSection(gridSection, sectionName);\n      } else {\n        removeSection(sectionName);\n      }\n    };\n\n    var headSection = [];\n    var bodySection = [];\n    var footSection = [];\n    var columnGroupsSection = [];\n    each$2(grid, function (row) {\n      switch (row.section) {\n        case 'thead':\n          headSection.push(row);\n          break;\n\n        case 'tbody':\n          bodySection.push(row);\n          break;\n\n        case 'tfoot':\n          footSection.push(row);\n          break;\n\n        case 'colgroup':\n          columnGroupsSection.push(row);\n          break;\n      }\n    });\n    renderOrRemoveSection(columnGroupsSection, 'colgroup');\n    renderOrRemoveSection(headSection, 'thead');\n    renderOrRemoveSection(bodySection, 'tbody');\n    renderOrRemoveSection(footSection, 'tfoot');\n    return {\n      newRows: newRows,\n      newCells: newCells\n    };\n  };\n\n  var copy = function copy(grid) {\n    return map$1(grid, function (row) {\n      var tr = shallow(row.element);\n      each$2(row.cells, function (cell) {\n        var clonedCell = deep(cell.element);\n        setIfNot(clonedCell, 'colspan', cell.colspan, 1);\n        setIfNot(clonedCell, 'rowspan', cell.rowspan, 1);\n        append$1(tr, clonedCell);\n      });\n      return tr;\n    });\n  };\n\n  var getColumn = function getColumn(grid, index) {\n    return map$1(grid, function (row) {\n      return getCell(row, index);\n    });\n  };\n\n  var getRow = function getRow(grid, index) {\n    return grid[index];\n  };\n\n  var findDiff = function findDiff(xs, comp) {\n    if (xs.length === 0) {\n      return 0;\n    }\n\n    var first = xs[0];\n    var index = findIndex(xs, function (x) {\n      return !comp(first.element, x.element);\n    });\n    return index.getOr(xs.length);\n  };\n\n  var subgrid = function subgrid(grid, row, column, comparator) {\n    var gridRow = getRow(grid, row);\n    var isColRow = gridRow.section === 'colgroup';\n    var colspan = findDiff(gridRow.cells.slice(column), comparator);\n    var rowspan = isColRow ? 1 : findDiff(getColumn(grid.slice(row), column), comparator);\n    return {\n      colspan: colspan,\n      rowspan: rowspan\n    };\n  };\n\n  var toDetails = function toDetails(grid, comparator) {\n    var seen = map$1(grid, function (row) {\n      return map$1(row.cells, never);\n    });\n\n    var updateSeen = function updateSeen(rowIndex, columnIndex, rowspan, colspan) {\n      for (var row = rowIndex; row < rowIndex + rowspan; row++) {\n        for (var column = columnIndex; column < columnIndex + colspan; column++) {\n          seen[row][column] = true;\n        }\n      }\n    };\n\n    return map$1(grid, function (row, rowIndex) {\n      var details = bind$2(row.cells, function (cell, columnIndex) {\n        if (seen[rowIndex][columnIndex] === false) {\n          var result = subgrid(grid, rowIndex, columnIndex, comparator);\n          updateSeen(rowIndex, columnIndex, result.rowspan, result.colspan);\n          return [detailnew(cell.element, result.rowspan, result.colspan, cell.isNew)];\n        } else {\n          return [];\n        }\n      });\n      return rowdetailnew(row.element, details, row.section, row.isNew);\n    });\n  };\n\n  var toGrid = function toGrid(warehouse, generators, isNew) {\n    var grid = [];\n    each$2(warehouse.colgroups, function (colgroup) {\n      var colgroupCols = [];\n\n      for (var columnIndex = 0; columnIndex < warehouse.grid.columns; columnIndex++) {\n        var element = Warehouse.getColumnAt(warehouse, columnIndex).map(function (column) {\n          return elementnew(column.element, isNew, false);\n        }).getOrThunk(function () {\n          return elementnew(generators.colGap(), true, false);\n        });\n        colgroupCols.push(element);\n      }\n\n      grid.push(rowcells(colgroup.element, colgroupCols, 'colgroup', isNew));\n    });\n\n    for (var rowIndex = 0; rowIndex < warehouse.grid.rows; rowIndex++) {\n      var rowCells = [];\n\n      for (var columnIndex = 0; columnIndex < warehouse.grid.columns; columnIndex++) {\n        var element = Warehouse.getAt(warehouse, rowIndex, columnIndex).map(function (item) {\n          return elementnew(item.element, isNew, item.isLocked);\n        }).getOrThunk(function () {\n          return elementnew(generators.gap(), true, false);\n        });\n        rowCells.push(element);\n      }\n\n      var rowDetail = warehouse.all[rowIndex];\n      var row = rowcells(rowDetail.element, rowCells, rowDetail.section, isNew);\n      grid.push(row);\n    }\n\n    return grid;\n  };\n\n  var fromWarehouse = function fromWarehouse(warehouse, generators) {\n    return toGrid(warehouse, generators, false);\n  };\n\n  var toDetailList = function toDetailList(grid) {\n    return toDetails(grid, eq$1);\n  };\n\n  var findInWarehouse = function findInWarehouse(warehouse, element) {\n    return findMap(warehouse.all, function (r) {\n      return find$1(r.cells, function (e) {\n        return eq$1(element, e.element);\n      });\n    });\n  };\n\n  var extractCells = function extractCells(warehouse, target, predicate) {\n    var details = map$1(target.selection, function (cell$1) {\n      return cell(cell$1).bind(function (lc) {\n        return findInWarehouse(warehouse, lc);\n      }).filter(predicate);\n    });\n    var cells = cat(details);\n    return someIf(cells.length > 0, cells);\n  };\n\n  var run = function run(operation, extract, adjustment, postAction, genWrappers) {\n    return function (wire, table, target, generators, behaviours) {\n      var warehouse = Warehouse.fromTable(table);\n      var tableSection = Optional.from(behaviours === null || behaviours === void 0 ? void 0 : behaviours.section).getOrThunk(TableSection.fallback);\n      var output = extract(warehouse, target).map(function (info) {\n        var model = fromWarehouse(warehouse, generators);\n        var result = operation(model, info, eq$1, genWrappers(generators), tableSection);\n        var lockedColumns = getLockedColumnsFromGrid(result.grid);\n        var grid = toDetailList(result.grid);\n        return {\n          info: info,\n          grid: grid,\n          cursor: result.cursor,\n          lockedColumns: lockedColumns\n        };\n      });\n      return output.bind(function (out) {\n        var newElements = render$1(table, out.grid);\n        var tableSizing = Optional.from(behaviours === null || behaviours === void 0 ? void 0 : behaviours.sizing).getOrThunk(function () {\n          return TableSize.getTableSize(table);\n        });\n        var resizing = Optional.from(behaviours === null || behaviours === void 0 ? void 0 : behaviours.resize).getOrThunk(preserveTable);\n        adjustment(table, out.grid, out.info, {\n          sizing: tableSizing,\n          resize: resizing,\n          section: tableSection\n        });\n        postAction(table);\n        refresh(wire, table);\n        remove$7(table, LOCKED_COL_ATTR);\n\n        if (out.lockedColumns.length > 0) {\n          set$2(table, LOCKED_COL_ATTR, out.lockedColumns.join(','));\n        }\n\n        return Optional.some({\n          cursor: out.cursor,\n          newRows: newElements.newRows,\n          newCells: newElements.newCells\n        });\n      });\n    };\n  };\n\n  var onPaste = function onPaste(warehouse, target) {\n    return cell(target.element).bind(function (cell) {\n      return findInWarehouse(warehouse, cell).map(function (details) {\n        var value = _assign(_assign({}, details), {\n          generators: target.generators,\n          clipboard: target.clipboard\n        });\n\n        return value;\n      });\n    });\n  };\n\n  var onPasteByEditor = function onPasteByEditor(warehouse, target) {\n    return extractCells(warehouse, target, always).map(function (cells) {\n      return {\n        cells: cells,\n        generators: target.generators,\n        clipboard: target.clipboard\n      };\n    });\n  };\n\n  var onMergable = function onMergable(_warehouse, target) {\n    return target.mergable;\n  };\n\n  var onUnmergable = function onUnmergable(_warehouse, target) {\n    return target.unmergable;\n  };\n\n  var onCells = function onCells(warehouse, target) {\n    return extractCells(warehouse, target, always);\n  };\n\n  var onUnlockedCells = function onUnlockedCells(warehouse, target) {\n    return extractCells(warehouse, target, function (detail) {\n      return !detail.isLocked;\n    });\n  };\n\n  var isUnlockedTableCell = function isUnlockedTableCell(warehouse, cell) {\n    return findInWarehouse(warehouse, cell).exists(function (detail) {\n      return !detail.isLocked;\n    });\n  };\n\n  var allUnlocked = function allUnlocked(warehouse, cells) {\n    return forall(cells, function (cell) {\n      return isUnlockedTableCell(warehouse, cell);\n    });\n  };\n\n  var onUnlockedMergable = function onUnlockedMergable(warehouse, target) {\n    return onMergable(warehouse, target).filter(function (mergeable) {\n      return allUnlocked(warehouse, mergeable.cells);\n    });\n  };\n\n  var onUnlockedUnmergable = function onUnlockedUnmergable(warehouse, target) {\n    return onUnmergable(warehouse, target).filter(function (cells) {\n      return allUnlocked(warehouse, cells);\n    });\n  };\n\n  var merge$2 = function merge$2(grid, bounds, comparator, substitution) {\n    var rows = extractGridDetails(grid).rows;\n\n    if (rows.length === 0) {\n      return grid;\n    }\n\n    for (var i = bounds.startRow; i <= bounds.finishRow; i++) {\n      for (var j = bounds.startCol; j <= bounds.finishCol; j++) {\n        var row = rows[i];\n        var isLocked = getCell(row, j).isLocked;\n        mutateCell(row, j, elementnew(substitution(), false, isLocked));\n      }\n    }\n\n    return grid;\n  };\n\n  var unmerge = function unmerge(grid, target, comparator, substitution) {\n    var rows = extractGridDetails(grid).rows;\n    var first = true;\n\n    for (var i = 0; i < rows.length; i++) {\n      for (var j = 0; j < cellLength(rows[0]); j++) {\n        var row = rows[i];\n        var currentCell = getCell(row, j);\n        var currentCellElm = currentCell.element;\n        var isToReplace = comparator(currentCellElm, target);\n\n        if (isToReplace === true && first === false) {\n          mutateCell(row, j, elementnew(substitution(), true, currentCell.isLocked));\n        } else if (isToReplace === true) {\n          first = false;\n        }\n      }\n    }\n\n    return grid;\n  };\n\n  var uniqueCells = function uniqueCells(row, comparator) {\n    return foldl(row, function (rest, cell) {\n      return exists(rest, function (currentCell) {\n        return comparator(currentCell.element, cell.element);\n      }) ? rest : rest.concat([cell]);\n    }, []);\n  };\n\n  var splitCols = function splitCols(grid, index, comparator, substitution) {\n    if (index > 0 && index < grid[0].cells.length) {\n      each$2(grid, function (row) {\n        var prevCell = row.cells[index - 1];\n        var current = row.cells[index];\n        var isToReplace = comparator(current.element, prevCell.element);\n\n        if (isToReplace) {\n          mutateCell(row, index, elementnew(substitution(), true, current.isLocked));\n        }\n      });\n    }\n\n    return grid;\n  };\n\n  var splitRows = function splitRows(grid, index, comparator, substitution) {\n    var rows = extractGridDetails(grid).rows;\n\n    if (index > 0 && index < rows.length) {\n      var rowPrevCells = rows[index - 1].cells;\n      var cells = uniqueCells(rowPrevCells, comparator);\n      each$2(cells, function (cell) {\n        var replacement = Optional.none();\n\n        for (var i = index; i < rows.length; i++) {\n          var _loop_1 = function _loop_1(j) {\n            var row = rows[i];\n            var current = getCell(row, j);\n            var isToReplace = comparator(current.element, cell.element);\n\n            if (isToReplace) {\n              if (replacement.isNone()) {\n                replacement = Optional.some(substitution());\n              }\n\n              replacement.each(function (sub) {\n                mutateCell(row, j, elementnew(sub, true, current.isLocked));\n              });\n            }\n          };\n\n          for (var j = 0; j < cellLength(rows[0]); j++) {\n            _loop_1(j);\n          }\n        }\n      });\n    }\n\n    return grid;\n  };\n\n  var value$1 = function value$1(o) {\n    var or = function or(_opt) {\n      return value$1(o);\n    };\n\n    var orThunk = function orThunk(_f) {\n      return value$1(o);\n    };\n\n    var map = function map(f) {\n      return value$1(f(o));\n    };\n\n    var mapError = function mapError(_f) {\n      return value$1(o);\n    };\n\n    var each = function each(f) {\n      f(o);\n    };\n\n    var bind = function bind(f) {\n      return f(o);\n    };\n\n    var fold = function fold(_, onValue) {\n      return onValue(o);\n    };\n\n    var exists = function exists(f) {\n      return f(o);\n    };\n\n    var forall = function forall(f) {\n      return f(o);\n    };\n\n    var toOptional = function toOptional() {\n      return Optional.some(o);\n    };\n\n    return {\n      isValue: always,\n      isError: never,\n      getOr: constant(o),\n      getOrThunk: constant(o),\n      getOrDie: constant(o),\n      or: or,\n      orThunk: orThunk,\n      fold: fold,\n      map: map,\n      mapError: mapError,\n      each: each,\n      bind: bind,\n      exists: exists,\n      forall: forall,\n      toOptional: toOptional\n    };\n  };\n\n  var error = function error(message) {\n    var getOrThunk = function getOrThunk(f) {\n      return f();\n    };\n\n    var getOrDie = function getOrDie() {\n      return die(String(message))();\n    };\n\n    var or = identity;\n\n    var orThunk = function orThunk(f) {\n      return f();\n    };\n\n    var map = function map(_f) {\n      return error(message);\n    };\n\n    var mapError = function mapError(f) {\n      return error(f(message));\n    };\n\n    var bind = function bind(_f) {\n      return error(message);\n    };\n\n    var fold = function fold(onError, _) {\n      return onError(message);\n    };\n\n    return {\n      isValue: never,\n      isError: always,\n      getOr: identity,\n      getOrThunk: getOrThunk,\n      getOrDie: getOrDie,\n      or: or,\n      orThunk: orThunk,\n      fold: fold,\n      map: map,\n      mapError: mapError,\n      each: noop,\n      bind: bind,\n      exists: never,\n      forall: always,\n      toOptional: Optional.none\n    };\n  };\n\n  var fromOption = function fromOption(opt, err) {\n    return opt.fold(function () {\n      return error(err);\n    }, value$1);\n  };\n\n  var Result = {\n    value: value$1,\n    error: error,\n    fromOption: fromOption\n  };\n\n  var measure = function measure(startAddress, gridA, gridB) {\n    if (startAddress.row >= gridA.length || startAddress.column > cellLength(gridA[0])) {\n      return Result.error('invalid start address out of table bounds, row: ' + startAddress.row + ', column: ' + startAddress.column);\n    }\n\n    var rowRemainder = gridA.slice(startAddress.row);\n    var colRemainder = rowRemainder[0].cells.slice(startAddress.column);\n    var colRequired = cellLength(gridB[0]);\n    var rowRequired = gridB.length;\n    return Result.value({\n      rowDelta: rowRemainder.length - rowRequired,\n      colDelta: colRemainder.length - colRequired\n    });\n  };\n\n  var measureWidth = function measureWidth(gridA, gridB) {\n    var colLengthA = cellLength(gridA[0]);\n    var colLengthB = cellLength(gridB[0]);\n    return {\n      rowDelta: 0,\n      colDelta: colLengthA - colLengthB\n    };\n  };\n\n  var measureHeight = function measureHeight(gridA, gridB) {\n    var rowLengthA = gridA.length;\n    var rowLengthB = gridB.length;\n    return {\n      rowDelta: rowLengthA - rowLengthB,\n      colDelta: 0\n    };\n  };\n\n  var generateElements = function generateElements(amount, row, generators, isLocked) {\n    var generator = row.section === 'colgroup' ? generators.col : generators.cell;\n    return range$1(amount, function (idx) {\n      return elementnew(generator(), true, isLocked(idx));\n    });\n  };\n\n  var rowFill = function rowFill(grid, amount, generators, lockedColumns) {\n    var exampleRow = grid[grid.length - 1];\n    return grid.concat(range$1(amount, function () {\n      var generator = exampleRow.section === 'colgroup' ? generators.colgroup : generators.row;\n      var row = clone$1(exampleRow, generator, identity);\n      var elements = generateElements(row.cells.length, row, generators, function (idx) {\n        return has$1(lockedColumns, idx.toString());\n      });\n      return setCells(row, elements);\n    }));\n  };\n\n  var colFill = function colFill(grid, amount, generators, startIndex) {\n    return map$1(grid, function (row) {\n      var newChildren = generateElements(amount, row, generators, never);\n      return addCells(row, startIndex, newChildren);\n    });\n  };\n\n  var lockedColFill = function lockedColFill(grid, generators, lockedColumns) {\n    return map$1(grid, function (row) {\n      return foldl(lockedColumns, function (acc, colNum) {\n        var newChild = generateElements(1, row, generators, always)[0];\n        return addCell(acc, colNum, newChild);\n      }, row);\n    });\n  };\n\n  var tailor = function tailor(gridA, delta, generators) {\n    var fillCols = delta.colDelta < 0 ? colFill : identity;\n    var fillRows = delta.rowDelta < 0 ? rowFill : identity;\n    var lockedColumns = getLockedColumnsFromGrid(gridA);\n    var gridWidth = cellLength(gridA[0]);\n    var isLastColLocked = exists(lockedColumns, function (locked) {\n      return locked === gridWidth - 1;\n    });\n    var modifiedCols = fillCols(gridA, Math.abs(delta.colDelta), generators, isLastColLocked ? gridWidth - 1 : gridWidth);\n    var newLockedColumns = getLockedColumnsFromGrid(modifiedCols);\n    return fillRows(modifiedCols, Math.abs(delta.rowDelta), generators, mapToObject(newLockedColumns, always));\n  };\n\n  var isSpanning = function isSpanning(grid, row, col, comparator) {\n    var candidate = getCell(grid[row], col);\n    var matching = curry(comparator, candidate.element);\n    var currentRow = grid[row];\n    return grid.length > 1 && cellLength(currentRow) > 1 && (col > 0 && matching(getCellElement(currentRow, col - 1)) || col < currentRow.cells.length - 1 && matching(getCellElement(currentRow, col + 1)) || row > 0 && matching(getCellElement(grid[row - 1], col)) || row < grid.length - 1 && matching(getCellElement(grid[row + 1], col)));\n  };\n\n  var mergeTables = function mergeTables(startAddress, gridA, gridB, generator, comparator, lockedColumns) {\n    var startRow = startAddress.row;\n    var startCol = startAddress.column;\n    var mergeHeight = gridB.length;\n    var mergeWidth = cellLength(gridB[0]);\n    var endRow = startRow + mergeHeight;\n    var endCol = startCol + mergeWidth + lockedColumns.length;\n    var lockedColumnObj = mapToObject(lockedColumns, always);\n\n    for (var r = startRow; r < endRow; r++) {\n      var skippedCol = 0;\n\n      for (var c = startCol; c < endCol; c++) {\n        if (lockedColumnObj[c]) {\n          skippedCol++;\n          continue;\n        }\n\n        if (isSpanning(gridA, r, c, comparator)) {\n          unmerge(gridA, getCellElement(gridA[r], c), comparator, generator.cell);\n        }\n\n        var gridBColIndex = c - startCol - skippedCol;\n        var newCell = getCell(gridB[r - startRow], gridBColIndex);\n        var newCellElm = newCell.element;\n        var replacement = generator.replace(newCellElm);\n        mutateCell(gridA[r], c, elementnew(replacement, true, newCell.isLocked));\n      }\n    }\n\n    return gridA;\n  };\n\n  var getValidStartAddress = function getValidStartAddress(currentStartAddress, grid, lockedColumns) {\n    var gridColLength = cellLength(grid[0]);\n    var adjustedRowAddress = extractGridDetails(grid).cols.length + currentStartAddress.row;\n    var possibleColAddresses = range$1(gridColLength - currentStartAddress.column, function (num) {\n      return num + currentStartAddress.column;\n    });\n    var validColAddress = find$1(possibleColAddresses, function (num) {\n      return forall(lockedColumns, function (col) {\n        return col !== num;\n      });\n    }).getOr(gridColLength - 1);\n    return {\n      row: adjustedRowAddress,\n      column: validColAddress\n    };\n  };\n\n  var getLockedColumnsWithinBounds = function getLockedColumnsWithinBounds(startAddress, grid, lockedColumns) {\n    return filter$2(lockedColumns, function (colNum) {\n      return colNum >= startAddress.column && colNum <= cellLength(grid[0]) + startAddress.column;\n    });\n  };\n\n  var merge$1 = function merge$1(startAddress, gridA, gridB, generator, comparator) {\n    var lockedColumns = getLockedColumnsFromGrid(gridA);\n    var validStartAddress = getValidStartAddress(startAddress, gridA, lockedColumns);\n    var gridBRows = extractGridDetails(gridB).rows;\n    var lockedColumnsWithinBounds = getLockedColumnsWithinBounds(validStartAddress, gridBRows, lockedColumns);\n    var result = measure(validStartAddress, gridA, gridBRows);\n    return result.map(function (diff) {\n      var delta = _assign(_assign({}, diff), {\n        colDelta: diff.colDelta - lockedColumnsWithinBounds.length\n      });\n\n      var fittedGrid = tailor(gridA, delta, generator);\n      var newLockedColumns = getLockedColumnsFromGrid(fittedGrid);\n      var newLockedColumnsWithinBounds = getLockedColumnsWithinBounds(validStartAddress, gridBRows, newLockedColumns);\n      return mergeTables(validStartAddress, fittedGrid, gridBRows, generator, comparator, newLockedColumnsWithinBounds);\n    });\n  };\n\n  var insertCols = function insertCols(index, gridA, gridB, generator, comparator) {\n    splitCols(gridA, index, comparator, generator.cell);\n    var delta = measureHeight(gridB, gridA);\n    var fittedNewGrid = tailor(gridB, delta, generator);\n    var secondDelta = measureHeight(gridA, fittedNewGrid);\n    var fittedOldGrid = tailor(gridA, secondDelta, generator);\n    return map$1(fittedOldGrid, function (gridRow, i) {\n      return addCells(gridRow, index, fittedNewGrid[i].cells);\n    });\n  };\n\n  var insertRows = function insertRows(index, gridA, gridB, generator, comparator) {\n    splitRows(gridA, index, comparator, generator.cell);\n    var locked = getLockedColumnsFromGrid(gridA);\n    var diff = measureWidth(gridA, gridB);\n\n    var delta = _assign(_assign({}, diff), {\n      colDelta: diff.colDelta - locked.length\n    });\n\n    var fittedOldGrid = tailor(gridA, delta, generator);\n\n    var _a = extractGridDetails(fittedOldGrid),\n        oldCols = _a.cols,\n        oldRows = _a.rows;\n\n    var newLocked = getLockedColumnsFromGrid(fittedOldGrid);\n    var secondDiff = measureWidth(gridB, gridA);\n\n    var secondDelta = _assign(_assign({}, secondDiff), {\n      colDelta: secondDiff.colDelta + newLocked.length\n    });\n\n    var fittedGridB = lockedColFill(gridB, generator, newLocked);\n    var fittedNewGrid = tailor(fittedGridB, secondDelta, generator);\n    return oldCols.concat(oldRows.slice(0, index)).concat(fittedNewGrid).concat(oldRows.slice(index, oldRows.length));\n  };\n\n  var cloneRow = function cloneRow(row, cloneCell, comparator, substitution) {\n    return clone$1(row, function (elem) {\n      return substitution(elem, comparator);\n    }, cloneCell);\n  };\n\n  var insertRowAt = function insertRowAt(grid, index, example, comparator, substitution) {\n    var _a = extractGridDetails(grid),\n        rows = _a.rows,\n        cols = _a.cols;\n\n    var before = rows.slice(0, index);\n    var after = rows.slice(index);\n    var newRow = cloneRow(rows[example], function (ex, c) {\n      var withinSpan = index > 0 && index < rows.length && comparator(getCellElement(rows[index - 1], c), getCellElement(rows[index], c));\n      var ret = withinSpan ? getCell(rows[index], c) : elementnew(substitution(ex.element, comparator), true, ex.isLocked);\n      return ret;\n    }, comparator, substitution);\n    return cols.concat(before).concat([newRow]).concat(after);\n  };\n\n  var getElementFor = function getElementFor(row, column, section, withinSpan, example, comparator, substitution) {\n    if (section === 'colgroup' || !withinSpan) {\n      var cell = getCell(row, example);\n      return elementnew(substitution(cell.element, comparator), true, false);\n    } else {\n      return getCell(row, column);\n    }\n  };\n\n  var insertColumnAt = function insertColumnAt(grid, index, example, comparator, substitution) {\n    return map$1(grid, function (row) {\n      var withinSpan = index > 0 && index < cellLength(row) && comparator(getCellElement(row, index - 1), getCellElement(row, index));\n      var sub = getElementFor(row, index, row.section, withinSpan, example, comparator, substitution);\n      return addCell(row, index, sub);\n    });\n  };\n\n  var deleteColumnsAt = function deleteColumnsAt(grid, columns) {\n    return bind$2(grid, function (row) {\n      var existingCells = row.cells;\n      var cells = foldr(columns, function (acc, column) {\n        return column >= 0 && column < acc.length ? acc.slice(0, column).concat(acc.slice(column + 1)) : acc;\n      }, existingCells);\n      return cells.length > 0 ? [rowcells(row.element, cells, row.section, row.isNew)] : [];\n    });\n  };\n\n  var deleteRowsAt = function deleteRowsAt(grid, start, finish) {\n    var _a = extractGridDetails(grid),\n        rows = _a.rows,\n        cols = _a.cols;\n\n    return cols.concat(rows.slice(0, start)).concat(rows.slice(finish + 1));\n  };\n\n  var notInStartRow = function notInStartRow(grid, rowIndex, colIndex, comparator) {\n    return getCellElement(grid[rowIndex], colIndex) !== undefined && rowIndex > 0 && comparator(getCellElement(grid[rowIndex - 1], colIndex), getCellElement(grid[rowIndex], colIndex));\n  };\n\n  var notInStartColumn = function notInStartColumn(row, index, comparator) {\n    return index > 0 && comparator(getCellElement(row, index - 1), getCellElement(row, index));\n  };\n\n  var isDuplicatedCell = function isDuplicatedCell(grid, rowIndex, colIndex, comparator) {\n    return notInStartRow(grid, rowIndex, colIndex, comparator) || notInStartColumn(grid[rowIndex], colIndex, comparator);\n  };\n\n  var rowReplacerPredicate = function rowReplacerPredicate(targetRow, columnHeaders) {\n    var entireTableIsHeader = forall(columnHeaders, identity) && isHeaderCells(targetRow.cells);\n    return entireTableIsHeader ? always : function (cell, _rowIndex, colIndex) {\n      var type = name(cell.element);\n      return !(type === 'th' && columnHeaders[colIndex]);\n    };\n  };\n\n  var columnReplacePredicate = function columnReplacePredicate(targetColumn, rowHeaders) {\n    var entireTableIsHeader = forall(rowHeaders, identity) && isHeaderCells(targetColumn);\n    return entireTableIsHeader ? always : function (cell, rowIndex, _colIndex) {\n      var type = name(cell.element);\n      return !(type === 'th' && rowHeaders[rowIndex]);\n    };\n  };\n\n  var determineScope = function determineScope(applyScope, element, newScope, isInHeader) {\n    var hasSpan = function hasSpan(scope) {\n      return scope === 'row' ? hasRowspan(element) : hasColspan(element);\n    };\n\n    var getScope = function getScope(scope) {\n      return hasSpan(scope) ? scope + 'group' : scope;\n    };\n\n    if (applyScope) {\n      return isHeaderCell(element) ? getScope(newScope) : null;\n    } else if (isInHeader && isHeaderCell(element)) {\n      var oppositeScope = newScope === 'row' ? 'col' : 'row';\n      return getScope(oppositeScope);\n    } else {\n      return null;\n    }\n  };\n\n  var rowScopeGenerator = function rowScopeGenerator(applyScope, columnHeaders) {\n    return function (cell, rowIndex, columnIndex) {\n      return Optional.some(determineScope(applyScope, cell.element, 'col', columnHeaders[columnIndex]));\n    };\n  };\n\n  var columnScopeGenerator = function columnScopeGenerator(applyScope, rowHeaders) {\n    return function (cell, rowIndex) {\n      return Optional.some(determineScope(applyScope, cell.element, 'row', rowHeaders[rowIndex]));\n    };\n  };\n\n  var replace = function replace(cell, comparator, substitute) {\n    return elementnew(substitute(cell.element, comparator), true, cell.isLocked);\n  };\n\n  var replaceIn = function replaceIn(grid, targets, comparator, substitute, replacer, genScope, shouldReplace) {\n    var isTarget = function isTarget(cell) {\n      return exists(targets, function (target) {\n        return comparator(cell.element, target.element);\n      });\n    };\n\n    return map$1(grid, function (row, rowIndex) {\n      return mapCells(row, function (cell, colIndex) {\n        if (isTarget(cell)) {\n          var newCell_1 = shouldReplace(cell, rowIndex, colIndex) ? replacer(cell, comparator, substitute) : cell;\n          genScope(newCell_1, rowIndex, colIndex).each(function (scope) {\n            setOptions(newCell_1.element, {\n              scope: Optional.from(scope)\n            });\n          });\n          return newCell_1;\n        } else {\n          return cell;\n        }\n      });\n    });\n  };\n\n  var getColumnCells = function getColumnCells(rows, columnIndex, comparator) {\n    return bind$2(rows, function (row, i) {\n      return isDuplicatedCell(rows, i, columnIndex, comparator) ? [] : [getCell(row, columnIndex)];\n    });\n  };\n\n  var getRowCells = function getRowCells(rows, rowIndex, comparator) {\n    var targetRow = rows[rowIndex];\n    return bind$2(targetRow.cells, function (item, i) {\n      return isDuplicatedCell(rows, rowIndex, i, comparator) ? [] : [item];\n    });\n  };\n\n  var replaceColumns = function replaceColumns(grid, indexes, applyScope, comparator, substitution) {\n    var rows = extractGridDetails(grid).rows;\n    var targets = bind$2(indexes, function (index) {\n      return getColumnCells(rows, index, comparator);\n    });\n    var rowHeaders = map$1(grid, function (row) {\n      return isHeaderCells(row.cells);\n    });\n    var shouldReplaceCell = columnReplacePredicate(targets, rowHeaders);\n    var scopeGenerator = columnScopeGenerator(applyScope, rowHeaders);\n    return replaceIn(grid, targets, comparator, substitution, replace, scopeGenerator, shouldReplaceCell);\n  };\n\n  var replaceRows = function replaceRows(grid, indexes, section, applyScope, comparator, substitution, tableSection) {\n    var _a = extractGridDetails(grid),\n        cols = _a.cols,\n        rows = _a.rows;\n\n    var targetRow = rows[indexes[0]];\n    var targets = bind$2(indexes, function (index) {\n      return getRowCells(rows, index, comparator);\n    });\n    var columnHeaders = map$1(targetRow.cells, function (_cell, index) {\n      return isHeaderCells(getColumnCells(rows, index, comparator));\n    });\n\n    var newRows = __spreadArray([], rows, true);\n\n    each$2(indexes, function (index) {\n      newRows[index] = tableSection.transformRow(rows[index], section);\n    });\n    var newGrid = cols.concat(newRows);\n    var shouldReplaceCell = rowReplacerPredicate(targetRow, columnHeaders);\n    var scopeGenerator = rowScopeGenerator(applyScope, columnHeaders);\n    return replaceIn(newGrid, targets, comparator, substitution, tableSection.transformCell, scopeGenerator, shouldReplaceCell);\n  };\n\n  var replaceCells = function replaceCells(grid, details, comparator, substitution) {\n    var rows = extractGridDetails(grid).rows;\n    var targetCells = map$1(details, function (detail) {\n      return getCell(rows[detail.row], detail.column);\n    });\n    return replaceIn(grid, targetCells, comparator, substitution, replace, Optional.none, always);\n  };\n\n  var uniqueColumns = function uniqueColumns(details) {\n    var uniqueCheck = function uniqueCheck(rest, detail) {\n      var columnExists = exists(rest, function (currentDetail) {\n        return currentDetail.column === detail.column;\n      });\n      return columnExists ? rest : rest.concat([detail]);\n    };\n\n    return foldl(details, uniqueCheck, []).sort(function (detailA, detailB) {\n      return detailA.column - detailB.column;\n    });\n  };\n\n  var isCol = isTag('col');\n  var isColgroup = isTag('colgroup');\n\n  var isRow$1 = function isRow$1(element) {\n    return name(element) === 'tr' || isColgroup(element);\n  };\n\n  var elementToData = function elementToData(element) {\n    var colspan = getAttrValue(element, 'colspan', 1);\n    var rowspan = getAttrValue(element, 'rowspan', 1);\n    return {\n      element: element,\n      colspan: colspan,\n      rowspan: rowspan\n    };\n  };\n\n  var modification = function modification(generators, toData) {\n    if (toData === void 0) {\n      toData = elementToData;\n    }\n\n    var nuCell = function nuCell(data) {\n      return isCol(data.element) ? generators.col(data) : generators.cell(data);\n    };\n\n    var nuRow = function nuRow(data) {\n      return isColgroup(data.element) ? generators.colgroup(data) : generators.row(data);\n    };\n\n    var add = function add(element) {\n      if (isRow$1(element)) {\n        return nuRow({\n          element: element\n        });\n      } else {\n        var replacement = nuCell(toData(element));\n        recent = Optional.some({\n          item: element,\n          replacement: replacement\n        });\n        return replacement;\n      }\n    };\n\n    var recent = Optional.none();\n\n    var getOrInit = function getOrInit(element, comparator) {\n      return recent.fold(function () {\n        return add(element);\n      }, function (p) {\n        return comparator(element, p.item) ? p.replacement : add(element);\n      });\n    };\n\n    return {\n      getOrInit: getOrInit\n    };\n  };\n\n  var transform = function transform(tag) {\n    return function (generators) {\n      var list = [];\n\n      var find = function find(element, comparator) {\n        return find$1(list, function (x) {\n          return comparator(x.item, element);\n        });\n      };\n\n      var makeNew = function makeNew(element) {\n        var attrs = tag === 'td' ? {\n          scope: null\n        } : {};\n        var cell = generators.replace(element, tag, attrs);\n        list.push({\n          item: element,\n          sub: cell\n        });\n        return cell;\n      };\n\n      var replaceOrInit = function replaceOrInit(element, comparator) {\n        if (isRow$1(element) || isCol(element)) {\n          return element;\n        } else {\n          return find(element, comparator).fold(function () {\n            return makeNew(element);\n          }, function (p) {\n            return comparator(element, p.item) ? p.sub : makeNew(element);\n          });\n        }\n      };\n\n      return {\n        replaceOrInit: replaceOrInit\n      };\n    };\n  };\n\n  var getScopeAttribute = function getScopeAttribute(cell) {\n    return getOpt(cell, 'scope').map(function (attribute) {\n      return attribute.substr(0, 3);\n    });\n  };\n\n  var merging = function merging(generators) {\n    var unmerge = function unmerge(cell) {\n      var scope = getScopeAttribute(cell);\n      scope.each(function (attribute) {\n        return set$2(cell, 'scope', attribute);\n      });\n      return function () {\n        var raw = generators.cell({\n          element: cell,\n          colspan: 1,\n          rowspan: 1\n        });\n        remove$6(raw, 'width');\n        remove$6(cell, 'width');\n        scope.each(function (attribute) {\n          return set$2(raw, 'scope', attribute);\n        });\n        return raw;\n      };\n    };\n\n    var merge = function merge(cells) {\n      var getScopeProperty = function getScopeProperty() {\n        var stringAttributes = cat(map$1(cells, getScopeAttribute));\n\n        if (stringAttributes.length === 0) {\n          return Optional.none();\n        } else {\n          var baseScope_1 = stringAttributes[0];\n          var scopes_1 = ['row', 'col'];\n          var isMixed = exists(stringAttributes, function (attribute) {\n            return attribute !== baseScope_1 && contains$2(scopes_1, attribute);\n          });\n          return isMixed ? Optional.none() : Optional.from(baseScope_1);\n        }\n      };\n\n      remove$6(cells[0], 'width');\n      getScopeProperty().fold(function () {\n        return remove$7(cells[0], 'scope');\n      }, function (attribute) {\n        return set$2(cells[0], 'scope', attribute + 'group');\n      });\n      return constant(cells[0]);\n    };\n\n    return {\n      unmerge: unmerge,\n      merge: merge\n    };\n  };\n\n  var Generators = {\n    modification: modification,\n    transform: transform,\n    merging: merging\n  };\n  var blockList = ['body', 'p', 'div', 'article', 'aside', 'figcaption', 'figure', 'footer', 'header', 'nav', 'section', 'ol', 'ul', 'table', 'thead', 'tfoot', 'tbody', 'caption', 'tr', 'td', 'th', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'pre', 'address'];\n\n  var isList$1 = function isList$1(universe, item) {\n    var tagName = universe.property().name(item);\n    return contains$2(['ol', 'ul'], tagName);\n  };\n\n  var isBlock$1 = function isBlock$1(universe, item) {\n    var tagName = universe.property().name(item);\n    return contains$2(blockList, tagName);\n  };\n\n  var isEmptyTag$1 = function isEmptyTag$1(universe, item) {\n    return contains$2(['br', 'img', 'hr', 'input'], universe.property().name(item));\n  };\n\n  var universe$1 = DomUniverse();\n\n  var isBlock = function isBlock(element) {\n    return isBlock$1(universe$1, element);\n  };\n\n  var isList = function isList(element) {\n    return isList$1(universe$1, element);\n  };\n\n  var isEmptyTag = function isEmptyTag(element) {\n    return isEmptyTag$1(universe$1, element);\n  };\n\n  var merge = function merge(cells) {\n    var isBr = function isBr(el) {\n      return name(el) === 'br';\n    };\n\n    var advancedBr = function advancedBr(children) {\n      return forall(children, function (c) {\n        return isBr(c) || isText(c) && get$9(c).trim().length === 0;\n      });\n    };\n\n    var isListItem = function isListItem(el) {\n      return name(el) === 'li' || ancestor$2(el, isList).isSome();\n    };\n\n    var siblingIsBlock = function siblingIsBlock(el) {\n      return nextSibling(el).map(function (rightSibling) {\n        if (isBlock(rightSibling)) {\n          return true;\n        }\n\n        if (isEmptyTag(rightSibling)) {\n          return name(rightSibling) === 'img' ? false : true;\n        }\n\n        return false;\n      }).getOr(false);\n    };\n\n    var markCell = function markCell(cell) {\n      return last$1(cell).bind(function (rightEdge) {\n        var rightSiblingIsBlock = siblingIsBlock(rightEdge);\n        return parent(rightEdge).map(function (parent) {\n          return rightSiblingIsBlock === true || isListItem(parent) || isBr(rightEdge) || isBlock(parent) && !eq$1(cell, parent) ? [] : [SugarElement.fromTag('br')];\n        });\n      }).getOr([]);\n    };\n\n    var markContent = function markContent() {\n      var content = bind$2(cells, function (cell) {\n        var children = children$3(cell);\n        return advancedBr(children) ? [] : children.concat(markCell(cell));\n      });\n      return content.length === 0 ? [SugarElement.fromTag('br')] : content;\n    };\n\n    var contents = markContent();\n    empty(cells[0]);\n    append(cells[0], contents);\n  };\n\n  var isEditable = function isEditable(elem) {\n    return isEditable$1(elem, true);\n  };\n\n  var prune = function prune(table) {\n    var cells = cells$1(table);\n\n    if (cells.length === 0) {\n      remove$5(table);\n    }\n  };\n\n  var outcome = function outcome(grid, cursor) {\n    return {\n      grid: grid,\n      cursor: cursor\n    };\n  };\n\n  var findEditableCursorPosition = function findEditableCursorPosition(rows) {\n    return findMap(rows, function (row) {\n      return findMap(row.cells, function (cell) {\n        var elem = cell.element;\n        return someIf(isEditable(elem), elem);\n      });\n    });\n  };\n\n  var elementFromGrid = function elementFromGrid(grid, row, column) {\n    var _a, _b;\n\n    var rows = extractGridDetails(grid).rows;\n    return Optional.from((_b = (_a = rows[row]) === null || _a === void 0 ? void 0 : _a.cells[column]) === null || _b === void 0 ? void 0 : _b.element).filter(isEditable).orThunk(function () {\n      return findEditableCursorPosition(rows);\n    });\n  };\n\n  var bundle = function bundle(grid, row, column) {\n    var cursorElement = elementFromGrid(grid, row, column);\n    return outcome(grid, cursorElement);\n  };\n\n  var uniqueRows = function uniqueRows(details) {\n    var rowCompilation = function rowCompilation(rest, detail) {\n      var rowExists = exists(rest, function (currentDetail) {\n        return currentDetail.row === detail.row;\n      });\n      return rowExists ? rest : rest.concat([detail]);\n    };\n\n    return foldl(details, rowCompilation, []).sort(function (detailA, detailB) {\n      return detailA.row - detailB.row;\n    });\n  };\n\n  var opInsertRowsBefore = function opInsertRowsBefore(grid, details, comparator, genWrappers) {\n    var targetIndex = details[0].row;\n    var rows = uniqueRows(details);\n    var newGrid = foldr(rows, function (acc, row) {\n      var newG = insertRowAt(acc.grid, targetIndex, row.row + acc.delta, comparator, genWrappers.getOrInit);\n      return {\n        grid: newG,\n        delta: acc.delta + 1\n      };\n    }, {\n      grid: grid,\n      delta: 0\n    }).grid;\n    return bundle(newGrid, targetIndex, details[0].column);\n  };\n\n  var opInsertRowsAfter = function opInsertRowsAfter(grid, details, comparator, genWrappers) {\n    var rows = uniqueRows(details);\n    var target = rows[rows.length - 1];\n    var targetIndex = target.row + target.rowspan;\n    var newGrid = foldr(rows, function (newG, row) {\n      return insertRowAt(newG, targetIndex, row.row, comparator, genWrappers.getOrInit);\n    }, grid);\n    return bundle(newGrid, targetIndex, details[0].column);\n  };\n\n  var opInsertColumnsBefore = function opInsertColumnsBefore(grid, extractDetail, comparator, genWrappers) {\n    var details = extractDetail.details;\n    var columns = uniqueColumns(details);\n    var targetIndex = columns[0].column;\n    var newGrid = foldr(columns, function (acc, col) {\n      var newG = insertColumnAt(acc.grid, targetIndex, col.column + acc.delta, comparator, genWrappers.getOrInit);\n      return {\n        grid: newG,\n        delta: acc.delta + 1\n      };\n    }, {\n      grid: grid,\n      delta: 0\n    }).grid;\n    return bundle(newGrid, details[0].row, targetIndex);\n  };\n\n  var opInsertColumnsAfter = function opInsertColumnsAfter(grid, extractDetail, comparator, genWrappers) {\n    var details = extractDetail.details;\n    var target = details[details.length - 1];\n    var targetIndex = target.column + target.colspan;\n    var columns = uniqueColumns(details);\n    var newGrid = foldr(columns, function (newG, col) {\n      return insertColumnAt(newG, targetIndex, col.column, comparator, genWrappers.getOrInit);\n    }, grid);\n    return bundle(newGrid, details[0].row, targetIndex);\n  };\n\n  var opMakeColumnsHeader = function opMakeColumnsHeader(initialGrid, details, comparator, genWrappers) {\n    var columns = uniqueColumns(details);\n    var columnIndexes = map$1(columns, function (detail) {\n      return detail.column;\n    });\n    var newGrid = replaceColumns(initialGrid, columnIndexes, true, comparator, genWrappers.replaceOrInit);\n    return bundle(newGrid, details[0].row, details[0].column);\n  };\n\n  var opMakeCellsHeader = function opMakeCellsHeader(initialGrid, details, comparator, genWrappers) {\n    var newGrid = replaceCells(initialGrid, details, comparator, genWrappers.replaceOrInit);\n    return bundle(newGrid, details[0].row, details[0].column);\n  };\n\n  var opUnmakeColumnsHeader = function opUnmakeColumnsHeader(initialGrid, details, comparator, genWrappers) {\n    var columns = uniqueColumns(details);\n    var columnIndexes = map$1(columns, function (detail) {\n      return detail.column;\n    });\n    var newGrid = replaceColumns(initialGrid, columnIndexes, false, comparator, genWrappers.replaceOrInit);\n    return bundle(newGrid, details[0].row, details[0].column);\n  };\n\n  var opUnmakeCellsHeader = function opUnmakeCellsHeader(initialGrid, details, comparator, genWrappers) {\n    var newGrid = replaceCells(initialGrid, details, comparator, genWrappers.replaceOrInit);\n    return bundle(newGrid, details[0].row, details[0].column);\n  };\n\n  var makeRowsSection = function makeRowsSection(section, applyScope) {\n    return function (initialGrid, details, comparator, genWrappers, tableSection) {\n      var rows = uniqueRows(details);\n      var rowIndexes = map$1(rows, function (detail) {\n        return detail.row;\n      });\n      var newGrid = replaceRows(initialGrid, rowIndexes, section, applyScope, comparator, genWrappers.replaceOrInit, tableSection);\n      return bundle(newGrid, details[0].row, details[0].column);\n    };\n  };\n\n  var opMakeRowsHeader = makeRowsSection('thead', true);\n  var opMakeRowsBody = makeRowsSection('tbody', false);\n  var opMakeRowsFooter = makeRowsSection('tfoot', false);\n\n  var opEraseColumns = function opEraseColumns(grid, extractDetail, _comparator, _genWrappers) {\n    var columns = uniqueColumns(extractDetail.details);\n    var newGrid = deleteColumnsAt(grid, map$1(columns, function (column) {\n      return column.column;\n    }));\n    var maxColIndex = newGrid.length > 0 ? newGrid[0].cells.length - 1 : 0;\n    return bundle(newGrid, columns[0].row, Math.min(columns[0].column, maxColIndex));\n  };\n\n  var opEraseRows = function opEraseRows(grid, details, _comparator, _genWrappers) {\n    var rows = uniqueRows(details);\n    var newGrid = deleteRowsAt(grid, rows[0].row, rows[rows.length - 1].row);\n    var maxRowIndex = newGrid.length > 0 ? newGrid.length - 1 : 0;\n    return bundle(newGrid, Math.min(details[0].row, maxRowIndex), details[0].column);\n  };\n\n  var opMergeCells = function opMergeCells(grid, mergable, comparator, genWrappers) {\n    var cells = mergable.cells;\n    merge(cells);\n    var newGrid = merge$2(grid, mergable.bounds, comparator, genWrappers.merge(cells));\n    return outcome(newGrid, Optional.from(cells[0]));\n  };\n\n  var opUnmergeCells = function opUnmergeCells(grid, unmergable, comparator, genWrappers) {\n    var unmerge$1 = function unmerge$1(b, cell) {\n      return unmerge(b, cell, comparator, genWrappers.unmerge(cell));\n    };\n\n    var newGrid = foldr(unmergable, unmerge$1, grid);\n    return outcome(newGrid, Optional.from(unmergable[0]));\n  };\n\n  var opPasteCells = function opPasteCells(grid, pasteDetails, comparator, _genWrappers) {\n    var gridify = function gridify(table, generators) {\n      var wh = Warehouse.fromTable(table);\n      return toGrid(wh, generators, true);\n    };\n\n    var gridB = gridify(pasteDetails.clipboard, pasteDetails.generators);\n    var startAddress = address(pasteDetails.row, pasteDetails.column);\n    var mergedGrid = merge$1(startAddress, grid, gridB, pasteDetails.generators, comparator);\n    return mergedGrid.fold(function () {\n      return outcome(grid, Optional.some(pasteDetails.element));\n    }, function (newGrid) {\n      return bundle(newGrid, pasteDetails.row, pasteDetails.column);\n    });\n  };\n\n  var gridifyRows = function gridifyRows(rows, generators, context) {\n    var pasteDetails = fromPastedRows(rows, context.section);\n    var wh = Warehouse.generate(pasteDetails);\n    return toGrid(wh, generators, true);\n  };\n\n  var opPasteColsBefore = function opPasteColsBefore(grid, pasteDetails, comparator, _genWrappers) {\n    var rows = extractGridDetails(grid).rows;\n    var index = pasteDetails.cells[0].column;\n    var context = rows[pasteDetails.cells[0].row];\n    var gridB = gridifyRows(pasteDetails.clipboard, pasteDetails.generators, context);\n    var mergedGrid = insertCols(index, grid, gridB, pasteDetails.generators, comparator);\n    return bundle(mergedGrid, pasteDetails.cells[0].row, pasteDetails.cells[0].column);\n  };\n\n  var opPasteColsAfter = function opPasteColsAfter(grid, pasteDetails, comparator, _genWrappers) {\n    var rows = extractGridDetails(grid).rows;\n    var index = pasteDetails.cells[pasteDetails.cells.length - 1].column + pasteDetails.cells[pasteDetails.cells.length - 1].colspan;\n    var context = rows[pasteDetails.cells[0].row];\n    var gridB = gridifyRows(pasteDetails.clipboard, pasteDetails.generators, context);\n    var mergedGrid = insertCols(index, grid, gridB, pasteDetails.generators, comparator);\n    return bundle(mergedGrid, pasteDetails.cells[0].row, pasteDetails.cells[0].column);\n  };\n\n  var opPasteRowsBefore = function opPasteRowsBefore(grid, pasteDetails, comparator, _genWrappers) {\n    var rows = extractGridDetails(grid).rows;\n    var index = pasteDetails.cells[0].row;\n    var context = rows[index];\n    var gridB = gridifyRows(pasteDetails.clipboard, pasteDetails.generators, context);\n    var mergedGrid = insertRows(index, grid, gridB, pasteDetails.generators, comparator);\n    return bundle(mergedGrid, pasteDetails.cells[0].row, pasteDetails.cells[0].column);\n  };\n\n  var opPasteRowsAfter = function opPasteRowsAfter(grid, pasteDetails, comparator, _genWrappers) {\n    var rows = extractGridDetails(grid).rows;\n    var index = pasteDetails.cells[pasteDetails.cells.length - 1].row + pasteDetails.cells[pasteDetails.cells.length - 1].rowspan;\n    var context = rows[pasteDetails.cells[0].row];\n    var gridB = gridifyRows(pasteDetails.clipboard, pasteDetails.generators, context);\n    var mergedGrid = insertRows(index, grid, gridB, pasteDetails.generators, comparator);\n    return bundle(mergedGrid, pasteDetails.cells[0].row, pasteDetails.cells[0].column);\n  };\n\n  var opGetColumnsType = function opGetColumnsType(table, target) {\n    var house = Warehouse.fromTable(table);\n    var details = onCells(house, target);\n    return details.bind(function (selectedCells) {\n      var lastSelectedCell = selectedCells[selectedCells.length - 1];\n      var minColRange = selectedCells[0].column;\n      var maxColRange = lastSelectedCell.column + lastSelectedCell.colspan;\n      var selectedColumnCells = flatten$1(map$1(house.all, function (row) {\n        return filter$2(row.cells, function (cell) {\n          return cell.column >= minColRange && cell.column < maxColRange;\n        });\n      }));\n      return findCommonCellType(selectedColumnCells);\n    }).getOr('');\n  };\n\n  var opGetCellsType = function opGetCellsType(table, target) {\n    var house = Warehouse.fromTable(table);\n    var details = onCells(house, target);\n    return details.bind(findCommonCellType).getOr('');\n  };\n\n  var opGetRowsType = function opGetRowsType(table, target) {\n    var house = Warehouse.fromTable(table);\n    var details = onCells(house, target);\n    return details.bind(function (selectedCells) {\n      var lastSelectedCell = selectedCells[selectedCells.length - 1];\n      var minRowRange = selectedCells[0].row;\n      var maxRowRange = lastSelectedCell.row + lastSelectedCell.rowspan;\n      var selectedRows = house.all.slice(minRowRange, maxRowRange);\n      return findCommonRowType(selectedRows);\n    }).getOr('');\n  };\n\n  var resize = function resize(table, list, details, behaviours) {\n    return adjustWidthTo(table, list, details, behaviours.sizing);\n  };\n\n  var adjustAndRedistributeWidths = function adjustAndRedistributeWidths(table, list, details, behaviours) {\n    return adjustAndRedistributeWidths$1(table, list, details, behaviours.sizing, behaviours.resize);\n  };\n\n  var firstColumnIsLocked = function firstColumnIsLocked(_warehouse, details) {\n    return exists(details, function (detail) {\n      return detail.column === 0 && detail.isLocked;\n    });\n  };\n\n  var lastColumnIsLocked = function lastColumnIsLocked(warehouse, details) {\n    return exists(details, function (detail) {\n      return detail.column + detail.colspan >= warehouse.grid.columns && detail.isLocked;\n    });\n  };\n\n  var getColumnsWidth = function getColumnsWidth(warehouse, details) {\n    var columns$1 = columns(warehouse);\n    var uniqueCols = uniqueColumns(details);\n    return foldl(uniqueCols, function (acc, detail) {\n      var column = columns$1[detail.column];\n      var colWidth = column.map(getOuter$2).getOr(0);\n      return acc + colWidth;\n    }, 0);\n  };\n\n  var insertColumnsExtractor = function insertColumnsExtractor(before) {\n    return function (warehouse, target) {\n      return onCells(warehouse, target).filter(function (details) {\n        var checkLocked = before ? firstColumnIsLocked : lastColumnIsLocked;\n        return !checkLocked(warehouse, details);\n      }).map(function (details) {\n        return {\n          details: details,\n          pixelDelta: getColumnsWidth(warehouse, details)\n        };\n      });\n    };\n  };\n\n  var eraseColumnsExtractor = function eraseColumnsExtractor(warehouse, target) {\n    return onUnlockedCells(warehouse, target).map(function (details) {\n      return {\n        details: details,\n        pixelDelta: -getColumnsWidth(warehouse, details)\n      };\n    });\n  };\n\n  var pasteColumnsExtractor = function pasteColumnsExtractor(before) {\n    return function (warehouse, target) {\n      return onPasteByEditor(warehouse, target).filter(function (details) {\n        var checkLocked = before ? firstColumnIsLocked : lastColumnIsLocked;\n        return !checkLocked(warehouse, details.cells);\n      });\n    };\n  };\n\n  var headerCellGenerator = Generators.transform('th');\n  var bodyCellGenerator = Generators.transform('td');\n  var insertRowsBefore = run(opInsertRowsBefore, onCells, noop, noop, Generators.modification);\n  var insertRowsAfter = run(opInsertRowsAfter, onCells, noop, noop, Generators.modification);\n  var insertColumnsBefore = run(opInsertColumnsBefore, insertColumnsExtractor(true), adjustAndRedistributeWidths, noop, Generators.modification);\n  var insertColumnsAfter = run(opInsertColumnsAfter, insertColumnsExtractor(false), adjustAndRedistributeWidths, noop, Generators.modification);\n  var eraseColumns = run(opEraseColumns, eraseColumnsExtractor, adjustAndRedistributeWidths, prune, Generators.modification);\n  var eraseRows = run(opEraseRows, onCells, noop, prune, Generators.modification);\n  var makeColumnsHeader = run(opMakeColumnsHeader, onUnlockedCells, noop, noop, headerCellGenerator);\n  var unmakeColumnsHeader = run(opUnmakeColumnsHeader, onUnlockedCells, noop, noop, bodyCellGenerator);\n  var makeRowsHeader = run(opMakeRowsHeader, onUnlockedCells, noop, noop, headerCellGenerator);\n  var makeRowsBody = run(opMakeRowsBody, onUnlockedCells, noop, noop, bodyCellGenerator);\n  var makeRowsFooter = run(opMakeRowsFooter, onUnlockedCells, noop, noop, bodyCellGenerator);\n  var makeCellsHeader = run(opMakeCellsHeader, onUnlockedCells, noop, noop, headerCellGenerator);\n  var unmakeCellsHeader = run(opUnmakeCellsHeader, onUnlockedCells, noop, noop, bodyCellGenerator);\n  var mergeCells = run(opMergeCells, onUnlockedMergable, resize, noop, Generators.merging);\n  var unmergeCells = run(opUnmergeCells, onUnlockedUnmergable, resize, noop, Generators.merging);\n  var pasteCells = run(opPasteCells, onPaste, resize, noop, Generators.modification);\n  var pasteColsBefore = run(opPasteColsBefore, pasteColumnsExtractor(true), noop, noop, Generators.modification);\n  var pasteColsAfter = run(opPasteColsAfter, pasteColumnsExtractor(false), noop, noop, Generators.modification);\n  var pasteRowsBefore = run(opPasteRowsBefore, onPasteByEditor, noop, noop, Generators.modification);\n  var pasteRowsAfter = run(opPasteRowsAfter, onPasteByEditor, noop, noop, Generators.modification);\n  var getColumnsType = opGetColumnsType;\n  var getCellsType = opGetCellsType;\n  var getRowsType = opGetRowsType;\n\n  var TableActions = function TableActions(editor, cellSelection, lazyWire) {\n    var isTableBody = function isTableBody(editor) {\n      return name(getBody(editor)) === 'table';\n    };\n\n    var lastRowGuard = function lastRowGuard(table) {\n      return isTableBody(editor) === false || getGridSize(table).rows > 1;\n    };\n\n    var lastColumnGuard = function lastColumnGuard(table) {\n      return isTableBody(editor) === false || getGridSize(table).columns > 1;\n    };\n\n    var cloneFormats = getCloneElements(editor);\n    var colMutationOp = isResizeTableColumnResizing(editor) ? noop : halve;\n\n    var getTableSectionType = function getTableSectionType(table) {\n      switch (getTableHeaderType(editor)) {\n        case 'section':\n          return TableSection.section();\n\n        case 'sectionCells':\n          return TableSection.sectionCells();\n\n        case 'cells':\n          return TableSection.cells();\n\n        default:\n          return TableSection.getTableSectionType(table, 'section');\n      }\n    };\n\n    var setSelectionFromAction = function setSelectionFromAction(table, result) {\n      return result.cursor.fold(function () {\n        var cells = cells$1(table);\n        return head(cells).filter(inBody).map(function (firstCell) {\n          cellSelection.clear(table);\n          var rng = editor.dom.createRng();\n          rng.selectNode(firstCell.dom);\n          editor.selection.setRng(rng);\n          set$2(firstCell, 'data-mce-selected', '1');\n          return rng;\n        });\n      }, function (cell) {\n        var des = freefallRtl(cell);\n        var rng = editor.dom.createRng();\n        rng.setStart(des.element.dom, des.offset);\n        rng.setEnd(des.element.dom, des.offset);\n        editor.selection.setRng(rng);\n        cellSelection.clear(table);\n        return Optional.some(rng);\n      });\n    };\n\n    var execute = function execute(operation, guard, mutate, lazyWire, effect) {\n      return function (table, target, noEvents) {\n        if (noEvents === void 0) {\n          noEvents = false;\n        }\n\n        removeDataStyle(table);\n        var wire = lazyWire();\n        var doc = SugarElement.fromDom(editor.getDoc());\n        var generators = cellOperations(mutate, doc, cloneFormats);\n        var behaviours = {\n          sizing: get$4(editor, table),\n          resize: isResizeTableColumnResizing(editor) ? resizeTable() : preserveTable(),\n          section: getTableSectionType(table)\n        };\n        return guard(table) ? operation(wire, table, target, generators, behaviours).bind(function (result) {\n          each$2(result.newRows, function (row) {\n            fireNewRow(editor, row.dom);\n          });\n          each$2(result.newCells, function (cell) {\n            fireNewCell(editor, cell.dom);\n          });\n          var range = setSelectionFromAction(table, result);\n\n          if (inBody(table)) {\n            removeDataStyle(table);\n\n            if (!noEvents) {\n              fireTableModified(editor, table.dom, effect);\n            }\n          }\n\n          return range.map(function (rng) {\n            return {\n              rng: rng,\n              effect: effect\n            };\n          });\n        }) : Optional.none();\n      };\n    };\n\n    var deleteRow = execute(eraseRows, lastRowGuard, noop, lazyWire, structureModified);\n    var deleteColumn = execute(eraseColumns, lastColumnGuard, noop, lazyWire, structureModified);\n    var insertRowsBefore$1 = execute(insertRowsBefore, always, noop, lazyWire, structureModified);\n    var insertRowsAfter$1 = execute(insertRowsAfter, always, noop, lazyWire, structureModified);\n    var insertColumnsBefore$1 = execute(insertColumnsBefore, always, colMutationOp, lazyWire, structureModified);\n    var insertColumnsAfter$1 = execute(insertColumnsAfter, always, colMutationOp, lazyWire, structureModified);\n    var mergeCells$1 = execute(mergeCells, always, noop, lazyWire, structureModified);\n    var unmergeCells$1 = execute(unmergeCells, always, noop, lazyWire, structureModified);\n    var pasteColsBefore$1 = execute(pasteColsBefore, always, noop, lazyWire, structureModified);\n    var pasteColsAfter$1 = execute(pasteColsAfter, always, noop, lazyWire, structureModified);\n    var pasteRowsBefore$1 = execute(pasteRowsBefore, always, noop, lazyWire, structureModified);\n    var pasteRowsAfter$1 = execute(pasteRowsAfter, always, noop, lazyWire, structureModified);\n    var pasteCells$1 = execute(pasteCells, always, noop, lazyWire, styleAndStructureModified);\n    var makeCellsHeader$1 = execute(makeCellsHeader, always, noop, lazyWire, structureModified);\n    var unmakeCellsHeader$1 = execute(unmakeCellsHeader, always, noop, lazyWire, structureModified);\n    var makeColumnsHeader$1 = execute(makeColumnsHeader, always, noop, lazyWire, structureModified);\n    var unmakeColumnsHeader$1 = execute(unmakeColumnsHeader, always, noop, lazyWire, structureModified);\n    var makeRowsHeader$1 = execute(makeRowsHeader, always, noop, lazyWire, structureModified);\n    var makeRowsBody$1 = execute(makeRowsBody, always, noop, lazyWire, structureModified);\n    var makeRowsFooter$1 = execute(makeRowsFooter, always, noop, lazyWire, structureModified);\n    var getTableCellType = getCellsType;\n    var getTableColType = getColumnsType;\n    var getTableRowType = getRowsType;\n    return {\n      deleteRow: deleteRow,\n      deleteColumn: deleteColumn,\n      insertRowsBefore: insertRowsBefore$1,\n      insertRowsAfter: insertRowsAfter$1,\n      insertColumnsBefore: insertColumnsBefore$1,\n      insertColumnsAfter: insertColumnsAfter$1,\n      mergeCells: mergeCells$1,\n      unmergeCells: unmergeCells$1,\n      pasteColsBefore: pasteColsBefore$1,\n      pasteColsAfter: pasteColsAfter$1,\n      pasteRowsBefore: pasteRowsBefore$1,\n      pasteRowsAfter: pasteRowsAfter$1,\n      pasteCells: pasteCells$1,\n      makeCellsHeader: makeCellsHeader$1,\n      unmakeCellsHeader: unmakeCellsHeader$1,\n      makeColumnsHeader: makeColumnsHeader$1,\n      unmakeColumnsHeader: unmakeColumnsHeader$1,\n      makeRowsHeader: makeRowsHeader$1,\n      makeRowsBody: makeRowsBody$1,\n      makeRowsFooter: makeRowsFooter$1,\n      getTableRowType: getTableRowType,\n      getTableCellType: getTableCellType,\n      getTableColType: getTableColType\n    };\n  };\n\n  var DefaultRenderOptions = {\n    styles: {\n      'border-collapse': 'collapse',\n      'width': '100%'\n    },\n    attributes: {\n      border: '1'\n    },\n    colGroups: false\n  };\n\n  var tableHeaderCell = function tableHeaderCell() {\n    return SugarElement.fromTag('th');\n  };\n\n  var tableCell = function tableCell() {\n    return SugarElement.fromTag('td');\n  };\n\n  var tableColumn = function tableColumn() {\n    return SugarElement.fromTag('col');\n  };\n\n  var createRow = function createRow(columns, rowHeaders, columnHeaders, rowIndex) {\n    var tr = SugarElement.fromTag('tr');\n\n    for (var j = 0; j < columns; j++) {\n      var td = rowIndex < rowHeaders || j < columnHeaders ? tableHeaderCell() : tableCell();\n\n      if (j < columnHeaders) {\n        set$2(td, 'scope', 'row');\n      }\n\n      if (rowIndex < rowHeaders) {\n        set$2(td, 'scope', 'col');\n      }\n\n      append$1(td, SugarElement.fromTag('br'));\n      append$1(tr, td);\n    }\n\n    return tr;\n  };\n\n  var createGroupRow = function createGroupRow(columns) {\n    var columnGroup = SugarElement.fromTag('colgroup');\n    range$1(columns, function () {\n      return append$1(columnGroup, tableColumn());\n    });\n    return columnGroup;\n  };\n\n  var createRows = function createRows(rows, columns, rowHeaders, columnHeaders) {\n    return range$1(rows, function (r) {\n      return createRow(columns, rowHeaders, columnHeaders, r);\n    });\n  };\n\n  var render = function render(rows, columns, rowHeaders, columnHeaders, headerType, renderOpts) {\n    if (renderOpts === void 0) {\n      renderOpts = DefaultRenderOptions;\n    }\n\n    var table = SugarElement.fromTag('table');\n    var rowHeadersGoInThead = headerType !== 'cells';\n    setAll(table, renderOpts.styles);\n    setAll$1(table, renderOpts.attributes);\n\n    if (renderOpts.colGroups) {\n      append$1(table, createGroupRow(columns));\n    }\n\n    var actualRowHeaders = Math.min(rows, rowHeaders);\n\n    if (rowHeadersGoInThead && rowHeaders > 0) {\n      var thead = SugarElement.fromTag('thead');\n      append$1(table, thead);\n      var theadRowHeaders = headerType === 'sectionCells' ? actualRowHeaders : 0;\n      var theadRows = createRows(rowHeaders, columns, theadRowHeaders, columnHeaders);\n      append(thead, theadRows);\n    }\n\n    var tbody = SugarElement.fromTag('tbody');\n    append$1(table, tbody);\n    var numRows = rowHeadersGoInThead ? rows - actualRowHeaders : rows;\n    var numRowHeaders = rowHeadersGoInThead ? 0 : rowHeaders;\n    var tbodyRows = createRows(numRows, columns, numRowHeaders, columnHeaders);\n    append(tbody, tbodyRows);\n    return table;\n  };\n\n  var get$2 = function get$2(element) {\n    return element.dom.innerHTML;\n  };\n\n  var getOuter = function getOuter(element) {\n    var container = SugarElement.fromTag('div');\n    var clone = SugarElement.fromDom(element.dom.cloneNode(true));\n    append$1(container, clone);\n    return get$2(container);\n  };\n\n  var placeCaretInCell = function placeCaretInCell(editor, cell) {\n    editor.selection.select(cell.dom, true);\n    editor.selection.collapse(true);\n  };\n\n  var selectFirstCellInTable = function selectFirstCellInTable(editor, tableElm) {\n    descendant(tableElm, 'td,th').each(curry(placeCaretInCell, editor));\n  };\n\n  var fireEvents = function fireEvents(editor, table) {\n    each$2(descendants(table, 'tr'), function (row) {\n      fireNewRow(editor, row.dom);\n      each$2(descendants(row, 'th,td'), function (cell) {\n        fireNewCell(editor, cell.dom);\n      });\n    });\n  };\n\n  var isPercentage = function isPercentage(width) {\n    return isString(width) && width.indexOf('%') !== -1;\n  };\n\n  var insert = function insert(editor, columns, rows, colHeaders, rowHeaders) {\n    var defaultStyles = getDefaultStyles(editor);\n    var options = {\n      styles: defaultStyles,\n      attributes: getDefaultAttributes(editor),\n      colGroups: useColumnGroup(editor)\n    };\n    editor.undoManager.ignore(function () {\n      var table = render(rows, columns, rowHeaders, colHeaders, getTableHeaderType(editor), options);\n      set$2(table, 'data-mce-id', '__mce');\n      var html = getOuter(table);\n      editor.insertContent(html);\n      editor.addVisual();\n    });\n    return descendant(getBody(editor), 'table[data-mce-id=\"__mce\"]').map(function (table) {\n      if (isPixelsForced(editor)) {\n        enforcePixels(table);\n      } else if (isResponsiveForced(editor)) {\n        enforceNone(table);\n      } else if (isPercentagesForced(editor) || isPercentage(defaultStyles.width)) {\n        enforcePercentage(table);\n      }\n\n      removeDataStyle(table);\n      remove$7(table, 'data-mce-id');\n      fireEvents(editor, table);\n      selectFirstCellInTable(editor, table);\n      return table.dom;\n    }).getOr(null);\n  };\n\n  var insertTableWithDataValidation = function insertTableWithDataValidation(editor, rows, columns, options, errorMsg) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var checkInput = function checkInput(val) {\n      return isNumber(val) && val > 0;\n    };\n\n    if (checkInput(rows) && checkInput(columns)) {\n      var headerRows = options.headerRows || 0;\n      var headerColumns = options.headerColumns || 0;\n      return insert(editor, columns, rows, headerColumns, headerRows);\n    } else {\n      console.error(errorMsg);\n      return null;\n    }\n  };\n\n  var getClipboardElements = function getClipboardElements(getClipboard) {\n    return function () {\n      return getClipboard().fold(function () {\n        return [];\n      }, function (elems) {\n        return map$1(elems, function (e) {\n          return e.dom;\n        });\n      });\n    };\n  };\n\n  var setClipboardElements = function setClipboardElements(setClipboard) {\n    return function (elems) {\n      var elmsOpt = elems.length > 0 ? Optional.some(fromDom(elems)) : Optional.none();\n      setClipboard(elmsOpt);\n    };\n  };\n\n  var insertTable = function insertTable(editor) {\n    return function (columns, rows, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var table = insertTableWithDataValidation(editor, rows, columns, options, 'Invalid values for insertTable - rows and columns values are required to insert a table.');\n      editor.undoManager.add();\n      return table;\n    };\n  };\n\n  var getApi = function getApi(editor, clipboard, resizeHandler, selectionTargets) {\n    return {\n      insertTable: insertTable(editor),\n      setClipboardRows: setClipboardElements(clipboard.setRows),\n      getClipboardRows: getClipboardElements(clipboard.getRows),\n      setClipboardCols: setClipboardElements(clipboard.setColumns),\n      getClipboardCols: getClipboardElements(clipboard.getColumns),\n      resizeHandler: resizeHandler,\n      selectionTargets: selectionTargets\n    };\n  };\n\n  var constrainSpan = function constrainSpan(element, property, value) {\n    var currentColspan = getAttrValue(element, property, 1);\n\n    if (value === 1 || currentColspan <= 1) {\n      remove$7(element, property);\n    } else {\n      set$2(element, property, Math.min(value, currentColspan));\n    }\n  };\n\n  var generateColGroup = function generateColGroup(house, minColRange, maxColRange) {\n    if (Warehouse.hasColumns(house)) {\n      var colsToCopy = filter$2(Warehouse.justColumns(house), function (col) {\n        return col.column >= minColRange && col.column < maxColRange;\n      });\n      var copiedCols = map$1(colsToCopy, function (c) {\n        var clonedCol = deep(c.element);\n        constrainSpan(clonedCol, 'span', maxColRange - minColRange);\n        return clonedCol;\n      });\n      var fakeColgroup = SugarElement.fromTag('colgroup');\n      append(fakeColgroup, copiedCols);\n      return [fakeColgroup];\n    } else {\n      return [];\n    }\n  };\n\n  var generateRows = function generateRows(house, minColRange, maxColRange) {\n    return map$1(house.all, function (row) {\n      var cellsToCopy = filter$2(row.cells, function (cell) {\n        return cell.column >= minColRange && cell.column < maxColRange;\n      });\n      var copiedCells = map$1(cellsToCopy, function (cell) {\n        var clonedCell = deep(cell.element);\n        constrainSpan(clonedCell, 'colspan', maxColRange - minColRange);\n        return clonedCell;\n      });\n      var fakeTR = SugarElement.fromTag('tr');\n      append(fakeTR, copiedCells);\n      return fakeTR;\n    });\n  };\n\n  var copyCols = function copyCols(table, target) {\n    var house = Warehouse.fromTable(table);\n    var details = onUnlockedCells(house, target);\n    return details.map(function (selectedCells) {\n      var lastSelectedCell = selectedCells[selectedCells.length - 1];\n      var minColRange = selectedCells[0].column;\n      var maxColRange = lastSelectedCell.column + lastSelectedCell.colspan;\n      var fakeColGroups = generateColGroup(house, minColRange, maxColRange);\n      var fakeRows = generateRows(house, minColRange, maxColRange);\n      return __spreadArray(__spreadArray([], fakeColGroups, true), fakeRows, true);\n    });\n  };\n\n  var copyRows = function copyRows(table, target, generators) {\n    var warehouse = Warehouse.fromTable(table);\n    var details = onCells(warehouse, target);\n    return details.bind(function (selectedCells) {\n      var grid = toGrid(warehouse, generators, false);\n      var rows = extractGridDetails(grid).rows;\n      var slicedGrid = rows.slice(selectedCells[0].row, selectedCells[selectedCells.length - 1].row + selectedCells[selectedCells.length - 1].rowspan);\n      var filteredGrid = bind$2(slicedGrid, function (row) {\n        var newCells = filter$2(row.cells, function (cell) {\n          return !cell.isLocked;\n        });\n        return newCells.length > 0 ? [_assign(_assign({}, row), {\n          cells: newCells\n        })] : [];\n      });\n      var slicedDetails = toDetailList(filteredGrid);\n      return someIf(slicedDetails.length > 0, slicedDetails);\n    }).map(function (slicedDetails) {\n      return copy(slicedDetails);\n    });\n  };\n\n  var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n  var getTDTHOverallStyle = function getTDTHOverallStyle(dom, elm, name) {\n    var cells = dom.select('td,th', elm);\n    var firstChildStyle;\n\n    var checkChildren = function checkChildren(firstChildStyle, elms) {\n      for (var i = 0; i < elms.length; i++) {\n        var currentStyle = dom.getStyle(elms[i], name);\n\n        if (typeof firstChildStyle === 'undefined') {\n          firstChildStyle = currentStyle;\n        }\n\n        if (firstChildStyle !== currentStyle) {\n          return '';\n        }\n      }\n\n      return firstChildStyle;\n    };\n\n    return checkChildren(firstChildStyle, cells);\n  };\n\n  var applyAlign = function applyAlign(editor, elm, name) {\n    if (name) {\n      editor.formatter.apply('align' + name, {}, elm);\n    }\n  };\n\n  var applyVAlign = function applyVAlign(editor, elm, name) {\n    if (name) {\n      editor.formatter.apply('valign' + name, {}, elm);\n    }\n  };\n\n  var unApplyAlign = function unApplyAlign(editor, elm) {\n    global$2.each('left center right'.split(' '), function (name) {\n      editor.formatter.remove('align' + name, {}, elm);\n    });\n  };\n\n  var unApplyVAlign = function unApplyVAlign(editor, elm) {\n    global$2.each('top middle bottom'.split(' '), function (name) {\n      editor.formatter.remove('valign' + name, {}, elm);\n    });\n  };\n\n  var verticalAlignValues = [{\n    text: 'None',\n    value: ''\n  }, {\n    text: 'Top',\n    value: 'top'\n  }, {\n    text: 'Middle',\n    value: 'middle'\n  }, {\n    text: 'Bottom',\n    value: 'bottom'\n  }];\n\n  var hexColour = function hexColour(value) {\n    return {\n      value: value\n    };\n  };\n\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  var longformRegex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n\n  var isHexString = function isHexString(hex) {\n    return shorthandRegex.test(hex) || longformRegex.test(hex);\n  };\n\n  var normalizeHex = function normalizeHex(hex) {\n    return removeLeading(hex, '#').toUpperCase();\n  };\n\n  var fromString$1 = function fromString$1(hex) {\n    return isHexString(hex) ? Optional.some({\n      value: normalizeHex(hex)\n    }) : Optional.none();\n  };\n\n  var toHex = function toHex(component) {\n    var hex = component.toString(16);\n    return (hex.length === 1 ? '0' + hex : hex).toUpperCase();\n  };\n\n  var fromRgba = function fromRgba(rgbaColour) {\n    var value = toHex(rgbaColour.red) + toHex(rgbaColour.green) + toHex(rgbaColour.blue);\n    return hexColour(value);\n  };\n\n  var rgbRegex = /^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/;\n  var rgbaRegex = /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+),\\s*(\\d?(?:\\.\\d+)?)\\)/;\n\n  var rgbaColour = function rgbaColour(red, green, blue, alpha) {\n    return {\n      red: red,\n      green: green,\n      blue: blue,\n      alpha: alpha\n    };\n  };\n\n  var fromStringValues = function fromStringValues(red, green, blue, alpha) {\n    var r = parseInt(red, 10);\n    var g = parseInt(green, 10);\n    var b = parseInt(blue, 10);\n    var a = parseFloat(alpha);\n    return rgbaColour(r, g, b, a);\n  };\n\n  var fromString = function fromString(rgbaString) {\n    if (rgbaString === 'transparent') {\n      return Optional.some(rgbaColour(0, 0, 0, 0));\n    }\n\n    var rgbMatch = rgbRegex.exec(rgbaString);\n\n    if (rgbMatch !== null) {\n      return Optional.some(fromStringValues(rgbMatch[1], rgbMatch[2], rgbMatch[3], '1'));\n    }\n\n    var rgbaMatch = rgbaRegex.exec(rgbaString);\n\n    if (rgbaMatch !== null) {\n      return Optional.some(fromStringValues(rgbaMatch[1], rgbaMatch[2], rgbaMatch[3], rgbaMatch[4]));\n    }\n\n    return Optional.none();\n  };\n\n  var anyToHex = function anyToHex(color) {\n    return fromString$1(color).orThunk(function () {\n      return fromString(color).map(fromRgba);\n    }).getOrThunk(function () {\n      var canvas = document.createElement('canvas');\n      canvas.height = 1;\n      canvas.width = 1;\n      var canvasContext = canvas.getContext('2d');\n      canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n      canvasContext.fillStyle = '#FFFFFF';\n      canvasContext.fillStyle = color;\n      canvasContext.fillRect(0, 0, 1, 1);\n      var rgba = canvasContext.getImageData(0, 0, 1, 1).data;\n      var r = rgba[0];\n      var g = rgba[1];\n      var b = rgba[2];\n      var a = rgba[3];\n      return fromRgba(rgbaColour(r, g, b, a));\n    });\n  };\n\n  var Cell = function Cell(initial) {\n    var value = initial;\n\n    var get = function get() {\n      return value;\n    };\n\n    var set = function set(v) {\n      value = v;\n    };\n\n    return {\n      get: get,\n      set: set\n    };\n  };\n\n  var singleton = function singleton(doRevoke) {\n    var subject = Cell(Optional.none());\n\n    var revoke = function revoke() {\n      return subject.get().each(doRevoke);\n    };\n\n    var clear = function clear() {\n      revoke();\n      subject.set(Optional.none());\n    };\n\n    var isSet = function isSet() {\n      return subject.get().isSome();\n    };\n\n    var get = function get() {\n      return subject.get();\n    };\n\n    var set = function set(s) {\n      revoke();\n      subject.set(Optional.some(s));\n    };\n\n    return {\n      clear: clear,\n      isSet: isSet,\n      get: get,\n      set: set\n    };\n  };\n\n  var unbindable = function unbindable() {\n    return singleton(function (s) {\n      return s.unbind();\n    });\n  };\n\n  var value = function value() {\n    var subject = singleton(noop);\n\n    var on = function on(f) {\n      return subject.get().each(f);\n    };\n\n    return _assign(_assign({}, subject), {\n      on: on\n    });\n  };\n\n  var onSetupToggle = function onSetupToggle(editor, selections, formatName, formatValue) {\n    return function (api) {\n      var boundCallback = unbindable();\n      var isNone = isEmpty$1(formatValue);\n\n      var init = function init() {\n        var selectedCells = getCellsFromSelection(selections);\n\n        var checkNode = function checkNode(cell) {\n          return editor.formatter.match(formatName, {\n            value: formatValue\n          }, cell.dom, isNone);\n        };\n\n        if (isNone) {\n          api.setActive(!exists(selectedCells, checkNode));\n          boundCallback.set(editor.formatter.formatChanged(formatName, function (match) {\n            return api.setActive(!match);\n          }, true));\n        } else {\n          api.setActive(forall(selectedCells, checkNode));\n          boundCallback.set(editor.formatter.formatChanged(formatName, api.setActive, false, {\n            value: formatValue\n          }));\n        }\n      };\n\n      editor.initialized ? init() : editor.on('init', init);\n      return boundCallback.clear;\n    };\n  };\n\n  var isListGroup = function isListGroup(item) {\n    return hasNonNullableKey(item, 'menu');\n  };\n\n  var buildListItems = function buildListItems(items) {\n    return map$1(items, function (item) {\n      var text = item.text || item.title;\n\n      if (isListGroup(item)) {\n        return {\n          text: text,\n          items: buildListItems(item.menu)\n        };\n      } else {\n        return {\n          text: text,\n          value: item.value\n        };\n      }\n    });\n  };\n\n  var buildMenuItems = function buildMenuItems(editor, selections, items, format, _onAction) {\n    return map$1(items, function (item) {\n      var text = item.text || item.title;\n\n      if (isListGroup(item)) {\n        return {\n          type: 'nestedmenuitem',\n          text: text,\n          getSubmenuItems: function getSubmenuItems() {\n            return buildMenuItems(editor, selections, item.menu, format, _onAction);\n          }\n        };\n      } else {\n        return {\n          text: text,\n          type: 'togglemenuitem',\n          onAction: function onAction() {\n            return _onAction(item.value);\n          },\n          onSetup: onSetupToggle(editor, selections, format, item.value)\n        };\n      }\n    });\n  };\n\n  var applyTableCellStyle = function applyTableCellStyle(editor, style) {\n    return function (value) {\n      var _a;\n\n      editor.execCommand('mceTableApplyCellStyle', false, (_a = {}, _a[style] = value, _a));\n    };\n  };\n\n  var filterNoneItem = function filterNoneItem(list) {\n    return bind$2(list, function (item) {\n      if (isListGroup(item)) {\n        return [_assign(_assign({}, item), {\n          menu: filterNoneItem(item.menu)\n        })];\n      } else {\n        return isNotEmpty(item.value) ? [item] : [];\n      }\n    });\n  };\n\n  var generateMenuItemsCallback = function generateMenuItemsCallback(editor, selections, items, format, onAction) {\n    return function (callback) {\n      return callback(buildMenuItems(editor, selections, items, format, onAction));\n    };\n  };\n\n  var buildColorMenu = function buildColorMenu(editor, colorList, style) {\n    var colorMap = map$1(colorList, function (entry) {\n      return {\n        text: entry.title,\n        value: '#' + anyToHex(entry.value).value,\n        type: 'choiceitem'\n      };\n    });\n    return [{\n      type: 'fancymenuitem',\n      fancytype: 'colorswatch',\n      initData: {\n        colors: colorMap.length > 0 ? colorMap : undefined,\n        allowCustomColors: false\n      },\n      onAction: function onAction(data) {\n        var _a;\n\n        var value = data.value === 'remove' ? '' : data.value;\n        editor.execCommand('mceTableApplyCellStyle', false, (_a = {}, _a[style] = value, _a));\n      }\n    }];\n  };\n\n  var changeRowHeader = function changeRowHeader(editor) {\n    return function () {\n      var currentType = editor.queryCommandValue('mceTableRowType');\n      var newType = currentType === 'header' ? 'body' : 'header';\n      editor.execCommand('mceTableRowType', false, {\n        type: newType\n      });\n    };\n  };\n\n  var changeColumnHeader = function changeColumnHeader(editor) {\n    return function () {\n      var currentType = editor.queryCommandValue('mceTableColType');\n      var newType = currentType === 'th' ? 'td' : 'th';\n      editor.execCommand('mceTableColType', false, {\n        type: newType\n      });\n    };\n  };\n\n  var getClassList$1 = function getClassList$1(editor) {\n    var classes = buildListItems(getCellClassList(editor));\n\n    if (classes.length > 0) {\n      return Optional.some({\n        name: 'class',\n        type: 'listbox',\n        label: 'Class',\n        items: classes\n      });\n    }\n\n    return Optional.none();\n  };\n\n  var children = [{\n    name: 'width',\n    type: 'input',\n    label: 'Width'\n  }, {\n    name: 'height',\n    type: 'input',\n    label: 'Height'\n  }, {\n    name: 'celltype',\n    type: 'listbox',\n    label: 'Cell type',\n    items: [{\n      text: 'Cell',\n      value: 'td'\n    }, {\n      text: 'Header cell',\n      value: 'th'\n    }]\n  }, {\n    name: 'scope',\n    type: 'listbox',\n    label: 'Scope',\n    items: [{\n      text: 'None',\n      value: ''\n    }, {\n      text: 'Row',\n      value: 'row'\n    }, {\n      text: 'Column',\n      value: 'col'\n    }, {\n      text: 'Row group',\n      value: 'rowgroup'\n    }, {\n      text: 'Column group',\n      value: 'colgroup'\n    }]\n  }, {\n    name: 'halign',\n    type: 'listbox',\n    label: 'Horizontal align',\n    items: [{\n      text: 'None',\n      value: ''\n    }, {\n      text: 'Left',\n      value: 'left'\n    }, {\n      text: 'Center',\n      value: 'center'\n    }, {\n      text: 'Right',\n      value: 'right'\n    }]\n  }, {\n    name: 'valign',\n    type: 'listbox',\n    label: 'Vertical align',\n    items: verticalAlignValues\n  }];\n\n  var getItems$2 = function getItems$2(editor) {\n    return children.concat(getClassList$1(editor).toArray());\n  };\n\n  var getAdvancedTab = function getAdvancedTab(editor, dialogName) {\n    var emptyBorderStyle = [{\n      text: 'Select...',\n      value: ''\n    }];\n    var advTabItems = [{\n      name: 'borderstyle',\n      type: 'listbox',\n      label: 'Border style',\n      items: emptyBorderStyle.concat(buildListItems(getTableBorderStyles(editor)))\n    }, {\n      name: 'bordercolor',\n      type: 'colorinput',\n      label: 'Border color'\n    }, {\n      name: 'backgroundcolor',\n      type: 'colorinput',\n      label: 'Background color'\n    }];\n    var borderWidth = {\n      name: 'borderwidth',\n      type: 'input',\n      label: 'Border width'\n    };\n    var items = dialogName === 'cell' ? [borderWidth].concat(advTabItems) : advTabItems;\n    return {\n      title: 'Advanced',\n      name: 'advanced',\n      items: items\n    };\n  };\n\n  var modifiers = function modifiers(testTruthy) {\n    return function (editor, node) {\n      var dom = editor.dom;\n\n      var setAttrib = function setAttrib(attr, value) {\n        if (!testTruthy || value) {\n          dom.setAttrib(node, attr, value);\n        }\n      };\n\n      var setStyle = function setStyle(prop, value) {\n        if (!testTruthy || value) {\n          dom.setStyle(node, prop, value);\n        }\n      };\n\n      var setFormat = function setFormat(formatName, value) {\n        if (!testTruthy || value) {\n          if (value === '') {\n            editor.formatter.remove(formatName, {\n              value: null\n            }, node, true);\n          } else {\n            editor.formatter.apply(formatName, {\n              value: value\n            }, node);\n          }\n        }\n      };\n\n      return {\n        setAttrib: setAttrib,\n        setStyle: setStyle,\n        setFormat: setFormat\n      };\n    };\n  };\n\n  var DomModifier = {\n    normal: modifiers(false),\n    ifTruthy: modifiers(true)\n  };\n\n  var rgbToHex = function rgbToHex(dom) {\n    return function (value) {\n      return startsWith(value, 'rgb') ? dom.toHex(value) : value;\n    };\n  };\n\n  var extractAdvancedStyles = function extractAdvancedStyles(dom, elm) {\n    var element = SugarElement.fromDom(elm);\n    return {\n      borderwidth: getRaw$2(element, 'border-width').getOr(''),\n      borderstyle: getRaw$2(element, 'border-style').getOr(''),\n      bordercolor: getRaw$2(element, 'border-color').map(rgbToHex(dom)).getOr(''),\n      backgroundcolor: getRaw$2(element, 'background-color').map(rgbToHex(dom)).getOr('')\n    };\n  };\n\n  var getSharedValues = function getSharedValues(data) {\n    var baseData = data[0];\n    var comparisonData = data.slice(1);\n    each$2(comparisonData, function (items) {\n      each$2(keys(baseData), function (key) {\n        each$1(items, function (itemValue, itemKey) {\n          var comparisonValue = baseData[key];\n\n          if (comparisonValue !== '' && key === itemKey) {\n            if (comparisonValue !== itemValue) {\n              baseData[key] = '';\n            }\n          }\n        });\n      });\n    });\n    return baseData;\n  };\n\n  var getAlignment = function getAlignment(formats, formatName, editor, elm) {\n    return find$1(formats, function (name) {\n      return !isUndefined(editor.formatter.matchNode(elm, formatName + name));\n    }).getOr('');\n  };\n\n  var getHAlignment = curry(getAlignment, ['left', 'center', 'right'], 'align');\n  var getVAlignment = curry(getAlignment, ['top', 'middle', 'bottom'], 'valign');\n\n  var extractDataFromSettings = function extractDataFromSettings(editor, hasAdvTableTab) {\n    var style = getDefaultStyles(editor);\n    var attrs = getDefaultAttributes(editor);\n\n    var extractAdvancedStyleData = function extractAdvancedStyleData(dom) {\n      return {\n        borderstyle: get$c(style, 'border-style').getOr(''),\n        bordercolor: rgbToHex(dom)(get$c(style, 'border-color').getOr('')),\n        backgroundcolor: rgbToHex(dom)(get$c(style, 'background-color').getOr(''))\n      };\n    };\n\n    var defaultData = {\n      height: '',\n      width: '100%',\n      cellspacing: '',\n      cellpadding: '',\n      caption: false,\n      \"class\": '',\n      align: '',\n      border: ''\n    };\n\n    var getBorder = function getBorder() {\n      var borderWidth = style['border-width'];\n\n      if (shouldStyleWithCss(editor) && borderWidth) {\n        return {\n          border: borderWidth\n        };\n      }\n\n      return get$c(attrs, 'border').fold(function () {\n        return {};\n      }, function (border) {\n        return {\n          border: border\n        };\n      });\n    };\n\n    var advStyle = hasAdvTableTab ? extractAdvancedStyleData(editor.dom) : {};\n\n    var getCellPaddingCellSpacing = function getCellPaddingCellSpacing() {\n      var spacing = get$c(style, 'border-spacing').or(get$c(attrs, 'cellspacing')).fold(function () {\n        return {};\n      }, function (cellspacing) {\n        return {\n          cellspacing: cellspacing\n        };\n      });\n      var padding = get$c(style, 'border-padding').or(get$c(attrs, 'cellpadding')).fold(function () {\n        return {};\n      }, function (cellpadding) {\n        return {\n          cellpadding: cellpadding\n        };\n      });\n      return _assign(_assign({}, spacing), padding);\n    };\n\n    var data = _assign(_assign(_assign(_assign(_assign(_assign({}, defaultData), style), attrs), advStyle), getBorder()), getCellPaddingCellSpacing());\n\n    return data;\n  };\n\n  var getRowType = function getRowType(elm) {\n    return table(SugarElement.fromDom(elm)).map(function (table) {\n      var target = {\n        selection: fromDom(elm.cells)\n      };\n      return getRowsType(table, target);\n    }).getOr('');\n  };\n\n  var extractDataFromTableElement = function extractDataFromTableElement(editor, elm, hasAdvTableTab) {\n    var getBorder = function getBorder(dom, elm) {\n      var optBorderWidth = getRaw$2(SugarElement.fromDom(elm), 'border-width');\n\n      if (shouldStyleWithCss(editor) && optBorderWidth.isSome()) {\n        return optBorderWidth.getOr('');\n      }\n\n      return dom.getAttrib(elm, 'border') || getTDTHOverallStyle(editor.dom, elm, 'border-width') || getTDTHOverallStyle(editor.dom, elm, 'border');\n    };\n\n    var dom = editor.dom;\n    var cellspacing = shouldStyleWithCss(editor) ? dom.getStyle(elm, 'border-spacing') || dom.getAttrib(elm, 'cellspacing') : dom.getAttrib(elm, 'cellspacing') || dom.getStyle(elm, 'border-spacing');\n    var cellpadding = shouldStyleWithCss(editor) ? getTDTHOverallStyle(dom, elm, 'padding') || dom.getAttrib(elm, 'cellpadding') : dom.getAttrib(elm, 'cellpadding') || getTDTHOverallStyle(dom, elm, 'padding');\n    return _assign({\n      width: dom.getStyle(elm, 'width') || dom.getAttrib(elm, 'width'),\n      height: dom.getStyle(elm, 'height') || dom.getAttrib(elm, 'height'),\n      cellspacing: cellspacing,\n      cellpadding: cellpadding,\n      border: getBorder(dom, elm),\n      caption: !!dom.select('caption', elm)[0],\n      \"class\": dom.getAttrib(elm, 'class', ''),\n      align: getHAlignment(editor, elm)\n    }, hasAdvTableTab ? extractAdvancedStyles(dom, elm) : {});\n  };\n\n  var extractDataFromRowElement = function extractDataFromRowElement(editor, elm, hasAdvancedRowTab) {\n    var dom = editor.dom;\n    return _assign({\n      height: dom.getStyle(elm, 'height') || dom.getAttrib(elm, 'height'),\n      \"class\": dom.getAttrib(elm, 'class', ''),\n      type: getRowType(elm),\n      align: getHAlignment(editor, elm)\n    }, hasAdvancedRowTab ? extractAdvancedStyles(dom, elm) : {});\n  };\n\n  var extractDataFromCellElement = function extractDataFromCellElement(editor, cell, hasAdvancedCellTab, column) {\n    var dom = editor.dom;\n    var colElm = column.getOr(cell);\n\n    var getStyle = function getStyle(element, style) {\n      return dom.getStyle(element, style) || dom.getAttrib(element, style);\n    };\n\n    return _assign({\n      width: getStyle(colElm, 'width'),\n      height: getStyle(cell, 'height'),\n      scope: dom.getAttrib(cell, 'scope'),\n      celltype: getNodeName(cell),\n      \"class\": dom.getAttrib(cell, 'class', ''),\n      halign: getHAlignment(editor, cell),\n      valign: getVAlignment(editor, cell)\n    }, hasAdvancedCellTab ? extractAdvancedStyles(dom, cell) : {});\n  };\n\n  var getSelectedCells = function getSelectedCells(table, cells) {\n    var warehouse = Warehouse.fromTable(table);\n    var allCells = Warehouse.justCells(warehouse);\n    var filtered = filter$2(allCells, function (cellA) {\n      return exists(cells, function (cellB) {\n        return eq$1(cellA.element, cellB);\n      });\n    });\n    return map$1(filtered, function (cell) {\n      return {\n        element: cell.element.dom,\n        column: Warehouse.getColumnAt(warehouse, cell.column).map(function (col) {\n          return col.element.dom;\n        })\n      };\n    });\n  };\n\n  var updateSimpleProps$1 = function updateSimpleProps$1(modifier, colModifier, data) {\n    modifier.setAttrib('scope', data.scope);\n    modifier.setAttrib('class', data[\"class\"]);\n    modifier.setStyle('height', addPxSuffix(data.height));\n    colModifier.setStyle('width', addPxSuffix(data.width));\n  };\n\n  var updateAdvancedProps$1 = function updateAdvancedProps$1(modifier, data) {\n    modifier.setFormat('tablecellbackgroundcolor', data.backgroundcolor);\n    modifier.setFormat('tablecellbordercolor', data.bordercolor);\n    modifier.setFormat('tablecellborderstyle', data.borderstyle);\n    modifier.setFormat('tablecellborderwidth', addPxSuffix(data.borderwidth));\n  };\n\n  var applyStyleData$1 = function applyStyleData$1(editor, cells, data) {\n    var isSingleCell = cells.length === 1;\n    each$2(cells, function (item) {\n      var cellElm = item.element;\n      var modifier = isSingleCell ? DomModifier.normal(editor, cellElm) : DomModifier.ifTruthy(editor, cellElm);\n      var colModifier = item.column.map(function (col) {\n        return isSingleCell ? DomModifier.normal(editor, col) : DomModifier.ifTruthy(editor, col);\n      }).getOr(modifier);\n      updateSimpleProps$1(modifier, colModifier, data);\n\n      if (hasAdvancedCellTab(editor)) {\n        updateAdvancedProps$1(modifier, data);\n      }\n\n      if (isSingleCell) {\n        unApplyAlign(editor, cellElm);\n        unApplyVAlign(editor, cellElm);\n      }\n\n      if (data.halign) {\n        applyAlign(editor, cellElm, data.halign);\n      }\n\n      if (data.valign) {\n        applyVAlign(editor, cellElm, data.valign);\n      }\n    });\n  };\n\n  var applyStructureData$1 = function applyStructureData$1(editor, data) {\n    editor.execCommand('mceTableCellType', false, {\n      type: data.celltype,\n      no_events: true\n    });\n  };\n\n  var applyCellData = function applyCellData(editor, cells, oldData, data) {\n    var modifiedData = filter$1(data, function (value, key) {\n      return oldData[key] !== value;\n    });\n\n    if (size(modifiedData) > 0 && cells.length >= 1) {\n      table(cells[0]).each(function (table) {\n        var selectedCells = getSelectedCells(table, cells);\n        var styleModified = size(filter$1(modifiedData, function (_value, key) {\n          return key !== 'scope' && key !== 'celltype';\n        })) > 0;\n        var structureModified = has$1(modifiedData, 'celltype');\n\n        if (styleModified || has$1(modifiedData, 'scope')) {\n          applyStyleData$1(editor, selectedCells, data);\n        }\n\n        if (structureModified) {\n          applyStructureData$1(editor, data);\n        }\n\n        fireTableModified(editor, table.dom, {\n          structure: structureModified,\n          style: styleModified\n        });\n      });\n    }\n  };\n\n  var onSubmitCellForm = function onSubmitCellForm(editor, cells, oldData, api) {\n    var data = api.getData();\n    api.close();\n    editor.undoManager.transact(function () {\n      applyCellData(editor, cells, oldData, data);\n      editor.focus();\n    });\n  };\n\n  var getData = function getData(editor, cells) {\n    var cellsData = table(cells[0]).map(function (table) {\n      return map$1(getSelectedCells(table, cells), function (item) {\n        return extractDataFromCellElement(editor, item.element, hasAdvancedCellTab(editor), item.column);\n      });\n    });\n    return getSharedValues(cellsData.getOrDie());\n  };\n\n  var open$2 = function open$2(editor, selections) {\n    var cells = getCellsFromSelection(selections);\n\n    if (cells.length === 0) {\n      return;\n    }\n\n    var data = getData(editor, cells);\n    var dialogTabPanel = {\n      type: 'tabpanel',\n      tabs: [{\n        title: 'General',\n        name: 'general',\n        items: getItems$2(editor)\n      }, getAdvancedTab(editor, 'cell')]\n    };\n    var dialogPanel = {\n      type: 'panel',\n      items: [{\n        type: 'grid',\n        columns: 2,\n        items: getItems$2(editor)\n      }]\n    };\n    editor.windowManager.open({\n      title: 'Cell Properties',\n      size: 'normal',\n      body: hasAdvancedCellTab(editor) ? dialogTabPanel : dialogPanel,\n      buttons: [{\n        type: 'cancel',\n        name: 'cancel',\n        text: 'Cancel'\n      }, {\n        type: 'submit',\n        name: 'save',\n        text: 'Save',\n        primary: true\n      }],\n      initialData: data,\n      onSubmit: curry(onSubmitCellForm, editor, cells, data)\n    });\n  };\n\n  var getClassList = function getClassList(editor) {\n    var classes = buildListItems(getRowClassList(editor));\n\n    if (classes.length > 0) {\n      return Optional.some({\n        name: 'class',\n        type: 'listbox',\n        label: 'Class',\n        items: classes\n      });\n    }\n\n    return Optional.none();\n  };\n\n  var formChildren = [{\n    type: 'listbox',\n    name: 'type',\n    label: 'Row type',\n    items: [{\n      text: 'Header',\n      value: 'header'\n    }, {\n      text: 'Body',\n      value: 'body'\n    }, {\n      text: 'Footer',\n      value: 'footer'\n    }]\n  }, {\n    type: 'listbox',\n    name: 'align',\n    label: 'Alignment',\n    items: [{\n      text: 'None',\n      value: ''\n    }, {\n      text: 'Left',\n      value: 'left'\n    }, {\n      text: 'Center',\n      value: 'center'\n    }, {\n      text: 'Right',\n      value: 'right'\n    }]\n  }, {\n    label: 'Height',\n    name: 'height',\n    type: 'input'\n  }];\n\n  var getItems$1 = function getItems$1(editor) {\n    return formChildren.concat(getClassList(editor).toArray());\n  };\n\n  var updateSimpleProps = function updateSimpleProps(modifier, data) {\n    modifier.setAttrib('class', data[\"class\"]);\n    modifier.setStyle('height', addPxSuffix(data.height));\n  };\n\n  var updateAdvancedProps = function updateAdvancedProps(modifier, data) {\n    modifier.setStyle('background-color', data.backgroundcolor);\n    modifier.setStyle('border-color', data.bordercolor);\n    modifier.setStyle('border-style', data.borderstyle);\n  };\n\n  var applyStyleData = function applyStyleData(editor, rows, data, oldData) {\n    var isSingleRow = rows.length === 1;\n    each$2(rows, function (rowElm) {\n      var modifier = isSingleRow ? DomModifier.normal(editor, rowElm) : DomModifier.ifTruthy(editor, rowElm);\n      updateSimpleProps(modifier, data);\n\n      if (hasAdvancedRowTab(editor)) {\n        updateAdvancedProps(modifier, data);\n      }\n\n      if (data.align !== oldData.align) {\n        unApplyAlign(editor, rowElm);\n        applyAlign(editor, rowElm, data.align);\n      }\n    });\n  };\n\n  var applyStructureData = function applyStructureData(editor, data) {\n    editor.execCommand('mceTableRowType', false, {\n      type: data.type,\n      no_events: true\n    });\n  };\n\n  var applyRowData = function applyRowData(editor, rows, oldData, data) {\n    var modifiedData = filter$1(data, function (value, key) {\n      return oldData[key] !== value;\n    });\n\n    if (size(modifiedData) > 0) {\n      var typeModified_1 = has$1(modifiedData, 'type');\n      var styleModified_1 = typeModified_1 ? size(modifiedData) > 1 : true;\n\n      if (styleModified_1) {\n        applyStyleData(editor, rows, data, oldData);\n      }\n\n      if (typeModified_1) {\n        applyStructureData(editor, data);\n      }\n\n      table(SugarElement.fromDom(rows[0])).each(function (table) {\n        return fireTableModified(editor, table.dom, {\n          structure: typeModified_1,\n          style: styleModified_1\n        });\n      });\n    }\n  };\n\n  var onSubmitRowForm = function onSubmitRowForm(editor, rows, oldData, api) {\n    var data = api.getData();\n    api.close();\n    editor.undoManager.transact(function () {\n      applyRowData(editor, rows, oldData, data);\n      editor.focus();\n    });\n  };\n\n  var open$1 = function open$1(editor) {\n    var rows = getRowsFromSelection(getSelectionStart(editor), ephemera.selected);\n\n    if (rows.length === 0) {\n      return;\n    }\n\n    var rowsData = map$1(rows, function (rowElm) {\n      return extractDataFromRowElement(editor, rowElm.dom, hasAdvancedRowTab(editor));\n    });\n    var data = getSharedValues(rowsData);\n    var dialogTabPanel = {\n      type: 'tabpanel',\n      tabs: [{\n        title: 'General',\n        name: 'general',\n        items: getItems$1(editor)\n      }, getAdvancedTab(editor, 'row')]\n    };\n    var dialogPanel = {\n      type: 'panel',\n      items: [{\n        type: 'grid',\n        columns: 2,\n        items: getItems$1(editor)\n      }]\n    };\n    editor.windowManager.open({\n      title: 'Row Properties',\n      size: 'normal',\n      body: hasAdvancedRowTab(editor) ? dialogTabPanel : dialogPanel,\n      buttons: [{\n        type: 'cancel',\n        name: 'cancel',\n        text: 'Cancel'\n      }, {\n        type: 'submit',\n        name: 'save',\n        text: 'Save',\n        primary: true\n      }],\n      initialData: data,\n      onSubmit: curry(onSubmitRowForm, editor, map$1(rows, function (r) {\n        return r.dom;\n      }), data)\n    });\n  };\n\n  var getItems = function getItems(editor, classes, insertNewTable) {\n    var rowColCountItems = !insertNewTable ? [] : [{\n      type: 'input',\n      name: 'cols',\n      label: 'Cols',\n      inputMode: 'numeric'\n    }, {\n      type: 'input',\n      name: 'rows',\n      label: 'Rows',\n      inputMode: 'numeric'\n    }];\n    var alwaysItems = [{\n      type: 'input',\n      name: 'width',\n      label: 'Width'\n    }, {\n      type: 'input',\n      name: 'height',\n      label: 'Height'\n    }];\n    var appearanceItems = hasAppearanceOptions(editor) ? [{\n      type: 'input',\n      name: 'cellspacing',\n      label: 'Cell spacing',\n      inputMode: 'numeric'\n    }, {\n      type: 'input',\n      name: 'cellpadding',\n      label: 'Cell padding',\n      inputMode: 'numeric'\n    }, {\n      type: 'input',\n      name: 'border',\n      label: 'Border width'\n    }, {\n      type: 'label',\n      label: 'Caption',\n      items: [{\n        type: 'checkbox',\n        name: 'caption',\n        label: 'Show caption'\n      }]\n    }] : [];\n    var alignmentItem = [{\n      type: 'listbox',\n      name: 'align',\n      label: 'Alignment',\n      items: [{\n        text: 'None',\n        value: ''\n      }, {\n        text: 'Left',\n        value: 'left'\n      }, {\n        text: 'Center',\n        value: 'center'\n      }, {\n        text: 'Right',\n        value: 'right'\n      }]\n    }];\n    var classListItem = classes.length > 0 ? [{\n      type: 'listbox',\n      name: 'class',\n      label: 'Class',\n      items: classes\n    }] : [];\n    return rowColCountItems.concat(alwaysItems).concat(appearanceItems).concat(alignmentItem).concat(classListItem);\n  };\n\n  var styleTDTH = function styleTDTH(dom, elm, name, value) {\n    if (elm.tagName === 'TD' || elm.tagName === 'TH') {\n      if (isString(name)) {\n        dom.setStyle(elm, name, value);\n      } else {\n        dom.setStyle(elm, name);\n      }\n    } else {\n      if (elm.children) {\n        for (var i = 0; i < elm.children.length; i++) {\n          styleTDTH(dom, elm.children[i], name, value);\n        }\n      }\n    }\n  };\n\n  var applyDataToElement = function applyDataToElement(editor, tableElm, data) {\n    var dom = editor.dom;\n    var attrs = {};\n    var styles = {};\n    attrs[\"class\"] = data[\"class\"];\n    styles.height = addPxSuffix(data.height);\n\n    if (dom.getAttrib(tableElm, 'width') && !shouldStyleWithCss(editor)) {\n      attrs.width = removePxSuffix(data.width);\n    } else {\n      styles.width = addPxSuffix(data.width);\n    }\n\n    if (shouldStyleWithCss(editor)) {\n      styles['border-width'] = addPxSuffix(data.border);\n      styles['border-spacing'] = addPxSuffix(data.cellspacing);\n    } else {\n      attrs.border = data.border;\n      attrs.cellpadding = data.cellpadding;\n      attrs.cellspacing = data.cellspacing;\n    }\n\n    if (shouldStyleWithCss(editor) && tableElm.children) {\n      for (var i = 0; i < tableElm.children.length; i++) {\n        styleTDTH(dom, tableElm.children[i], {\n          'border-width': addPxSuffix(data.border),\n          'padding': addPxSuffix(data.cellpadding)\n        });\n\n        if (hasAdvancedTableTab(editor)) {\n          styleTDTH(dom, tableElm.children[i], {\n            'border-color': data.bordercolor\n          });\n        }\n      }\n    }\n\n    if (hasAdvancedTableTab(editor)) {\n      styles['background-color'] = data.backgroundcolor;\n      styles['border-color'] = data.bordercolor;\n      styles['border-style'] = data.borderstyle;\n    }\n\n    attrs.style = dom.serializeStyle(_assign(_assign({}, getDefaultStyles(editor)), styles));\n    dom.setAttribs(tableElm, _assign(_assign({}, getDefaultAttributes(editor)), attrs));\n  };\n\n  var onSubmitTableForm = function onSubmitTableForm(editor, tableElm, oldData, api) {\n    var dom = editor.dom;\n    var data = api.getData();\n    var modifiedData = filter$1(data, function (value, key) {\n      return oldData[key] !== value;\n    });\n    api.close();\n\n    if (data[\"class\"] === '') {\n      delete data[\"class\"];\n    }\n\n    editor.undoManager.transact(function () {\n      if (!tableElm) {\n        var cols = parseInt(data.cols, 10) || 1;\n        var rows = parseInt(data.rows, 10) || 1;\n        tableElm = insert(editor, cols, rows, 0, 0);\n      }\n\n      if (size(modifiedData) > 0) {\n        applyDataToElement(editor, tableElm, data);\n        var captionElm = dom.select('caption', tableElm)[0];\n\n        if (captionElm && !data.caption || !captionElm && data.caption) {\n          editor.execCommand('mceTableToggleCaption');\n        }\n\n        if (data.align === '') {\n          unApplyAlign(editor, tableElm);\n        } else {\n          applyAlign(editor, tableElm, data.align);\n        }\n      }\n\n      editor.focus();\n      editor.addVisual();\n\n      if (size(modifiedData) > 0) {\n        var captionModified = has$1(modifiedData, 'caption');\n        var styleModified = captionModified ? size(modifiedData) > 1 : true;\n        fireTableModified(editor, tableElm, {\n          structure: captionModified,\n          style: styleModified\n        });\n      }\n    });\n  };\n\n  var open = function open(editor, insertNewTable) {\n    var dom = editor.dom;\n    var tableElm;\n    var data = extractDataFromSettings(editor, hasAdvancedTableTab(editor));\n\n    if (insertNewTable === false) {\n      tableElm = dom.getParent(editor.selection.getStart(), 'table', editor.getBody());\n\n      if (tableElm) {\n        data = extractDataFromTableElement(editor, tableElm, hasAdvancedTableTab(editor));\n      } else {\n        if (hasAdvancedTableTab(editor)) {\n          data.borderstyle = '';\n          data.bordercolor = '';\n          data.backgroundcolor = '';\n        }\n      }\n    } else {\n      data.cols = '1';\n      data.rows = '1';\n\n      if (hasAdvancedTableTab(editor)) {\n        data.borderstyle = '';\n        data.bordercolor = '';\n        data.backgroundcolor = '';\n      }\n    }\n\n    var classes = buildListItems(getTableClassList(editor));\n\n    if (classes.length > 0) {\n      if (data[\"class\"]) {\n        data[\"class\"] = data[\"class\"].replace(/\\s*mce\\-item\\-table\\s*/g, '');\n      }\n    }\n\n    var generalPanel = {\n      type: 'grid',\n      columns: 2,\n      items: getItems(editor, classes, insertNewTable)\n    };\n\n    var nonAdvancedForm = function nonAdvancedForm() {\n      return {\n        type: 'panel',\n        items: [generalPanel]\n      };\n    };\n\n    var advancedForm = function advancedForm() {\n      return {\n        type: 'tabpanel',\n        tabs: [{\n          title: 'General',\n          name: 'general',\n          items: [generalPanel]\n        }, getAdvancedTab(editor, 'table')]\n      };\n    };\n\n    var dialogBody = hasAdvancedTableTab(editor) ? advancedForm() : nonAdvancedForm();\n    editor.windowManager.open({\n      title: 'Table Properties',\n      size: 'normal',\n      body: dialogBody,\n      onSubmit: curry(onSubmitTableForm, editor, tableElm, data),\n      buttons: [{\n        type: 'cancel',\n        name: 'cancel',\n        text: 'Cancel'\n      }, {\n        type: 'submit',\n        name: 'save',\n        text: 'Save',\n        primary: true\n      }],\n      initialData: data\n    });\n  };\n\n  var getSelectionStartCellOrCaption = function getSelectionStartCellOrCaption(editor) {\n    return getSelectionCellOrCaption(getSelectionStart(editor), getIsRoot(editor));\n  };\n\n  var getSelectionStartCell = function getSelectionStartCell(editor) {\n    return getSelectionCell(getSelectionStart(editor), getIsRoot(editor));\n  };\n\n  var registerCommands = function registerCommands(editor, actions, cellSelection, selections, clipboard) {\n    var isRoot = getIsRoot(editor);\n\n    var eraseTable = function eraseTable() {\n      return getSelectionStartCellOrCaption(editor).each(function (cellOrCaption) {\n        table(cellOrCaption, isRoot).filter(not(isRoot)).each(function (table) {\n          var cursor = SugarElement.fromText('');\n          after$5(table, cursor);\n          remove$5(table);\n\n          if (editor.dom.isEmpty(editor.getBody())) {\n            editor.setContent('');\n            editor.selection.setCursorLocation();\n          } else {\n            var rng = editor.dom.createRng();\n            rng.setStart(cursor.dom, 0);\n            rng.setEnd(cursor.dom, 0);\n            editor.selection.setRng(rng);\n            editor.nodeChanged();\n          }\n        });\n      });\n    };\n\n    var setSizingMode = function setSizingMode(sizing) {\n      return getSelectionStartCellOrCaption(editor).each(function (cellOrCaption) {\n        var isForcedSizing = isResponsiveForced(editor) || isPixelsForced(editor) || isPercentagesForced(editor);\n\n        if (!isForcedSizing) {\n          table(cellOrCaption, isRoot).each(function (table) {\n            if (sizing === 'relative' && !isPercentSizing(table)) {\n              enforcePercentage(table);\n            } else if (sizing === 'fixed' && !isPixelSizing(table)) {\n              enforcePixels(table);\n            } else if (sizing === 'responsive' && !isNoneSizing(table)) {\n              enforceNone(table);\n            }\n\n            removeDataStyle(table);\n            fireTableModified(editor, table.dom, structureModified);\n          });\n        }\n      });\n    };\n\n    var getTableFromCell = function getTableFromCell(cell) {\n      return table(cell, isRoot);\n    };\n\n    var performActionOnSelection = function performActionOnSelection(action) {\n      return getSelectionStartCell(editor).bind(function (cell) {\n        return getTableFromCell(cell).map(function (table) {\n          return action(table, cell);\n        });\n      });\n    };\n\n    var toggleTableClass = function toggleTableClass(_ui, clazz) {\n      performActionOnSelection(function (table) {\n        editor.formatter.toggle('tableclass', {\n          value: clazz\n        }, table.dom);\n        fireTableModified(editor, table.dom, styleModified);\n      });\n    };\n\n    var toggleTableCellClass = function toggleTableCellClass(_ui, clazz) {\n      performActionOnSelection(function (table) {\n        var selectedCells = getCellsFromSelection(selections);\n        var allHaveClass = forall(selectedCells, function (cell) {\n          return editor.formatter.match('tablecellclass', {\n            value: clazz\n          }, cell.dom);\n        });\n        var formatterAction = allHaveClass ? editor.formatter.remove : editor.formatter.apply;\n        each$2(selectedCells, function (cell) {\n          return formatterAction('tablecellclass', {\n            value: clazz\n          }, cell.dom);\n        });\n        fireTableModified(editor, table.dom, styleModified);\n      });\n    };\n\n    var toggleCaption = function toggleCaption() {\n      getSelectionStartCellOrCaption(editor).each(function (cellOrCaption) {\n        table(cellOrCaption, isRoot).each(function (table) {\n          child$1(table, 'caption').fold(function () {\n            var caption = SugarElement.fromTag('caption');\n            append$1(caption, SugarElement.fromText('Caption'));\n            appendAt(table, caption, 0);\n            editor.selection.setCursorLocation(caption.dom, 0);\n          }, function (caption) {\n            if (isTag('caption')(cellOrCaption)) {\n              one('td', table).each(function (td) {\n                return editor.selection.setCursorLocation(td.dom, 0);\n              });\n            }\n\n            remove$5(caption);\n          });\n          fireTableModified(editor, table.dom, structureModified);\n        });\n      });\n    };\n\n    var postExecute = function postExecute(_data) {\n      editor.focus();\n    };\n\n    var actOnSelection = function actOnSelection(execute, noEvents) {\n      if (noEvents === void 0) {\n        noEvents = false;\n      }\n\n      return performActionOnSelection(function (table, startCell) {\n        var targets = forMenu(selections, table, startCell);\n        execute(table, targets, noEvents).each(postExecute);\n      });\n    };\n\n    var copyRowSelection = function copyRowSelection() {\n      return performActionOnSelection(function (table, startCell) {\n        var targets = forMenu(selections, table, startCell);\n        var generators = cellOperations(noop, SugarElement.fromDom(editor.getDoc()), Optional.none());\n        return copyRows(table, targets, generators);\n      });\n    };\n\n    var copyColSelection = function copyColSelection() {\n      return performActionOnSelection(function (table, startCell) {\n        var targets = forMenu(selections, table, startCell);\n        return copyCols(table, targets);\n      });\n    };\n\n    var pasteOnSelection = function pasteOnSelection(execute, getRows) {\n      return getRows().each(function (rows) {\n        var clonedRows = map$1(rows, function (row) {\n          return deep(row);\n        });\n        performActionOnSelection(function (table, startCell) {\n          var generators = paste$1(SugarElement.fromDom(editor.getDoc()));\n          var targets = pasteRows(selections, startCell, clonedRows, generators);\n          execute(table, targets).each(postExecute);\n        });\n      });\n    };\n\n    var actOnType = function actOnType(getAction) {\n      return function (_ui, args) {\n        return get$c(args, 'type').each(function (type) {\n          actOnSelection(getAction(type), args.no_events);\n        });\n      };\n    };\n\n    each$1({\n      mceTableSplitCells: function mceTableSplitCells() {\n        return actOnSelection(actions.unmergeCells);\n      },\n      mceTableMergeCells: function mceTableMergeCells() {\n        return actOnSelection(actions.mergeCells);\n      },\n      mceTableInsertRowBefore: function mceTableInsertRowBefore() {\n        return actOnSelection(actions.insertRowsBefore);\n      },\n      mceTableInsertRowAfter: function mceTableInsertRowAfter() {\n        return actOnSelection(actions.insertRowsAfter);\n      },\n      mceTableInsertColBefore: function mceTableInsertColBefore() {\n        return actOnSelection(actions.insertColumnsBefore);\n      },\n      mceTableInsertColAfter: function mceTableInsertColAfter() {\n        return actOnSelection(actions.insertColumnsAfter);\n      },\n      mceTableDeleteCol: function mceTableDeleteCol() {\n        return actOnSelection(actions.deleteColumn);\n      },\n      mceTableDeleteRow: function mceTableDeleteRow() {\n        return actOnSelection(actions.deleteRow);\n      },\n      mceTableCutCol: function mceTableCutCol() {\n        return copyColSelection().each(function (selection) {\n          clipboard.setColumns(selection);\n          actOnSelection(actions.deleteColumn);\n        });\n      },\n      mceTableCutRow: function mceTableCutRow() {\n        return copyRowSelection().each(function (selection) {\n          clipboard.setRows(selection);\n          actOnSelection(actions.deleteRow);\n        });\n      },\n      mceTableCopyCol: function mceTableCopyCol() {\n        return copyColSelection().each(function (selection) {\n          return clipboard.setColumns(selection);\n        });\n      },\n      mceTableCopyRow: function mceTableCopyRow() {\n        return copyRowSelection().each(function (selection) {\n          return clipboard.setRows(selection);\n        });\n      },\n      mceTablePasteColBefore: function mceTablePasteColBefore() {\n        return pasteOnSelection(actions.pasteColsBefore, clipboard.getColumns);\n      },\n      mceTablePasteColAfter: function mceTablePasteColAfter() {\n        return pasteOnSelection(actions.pasteColsAfter, clipboard.getColumns);\n      },\n      mceTablePasteRowBefore: function mceTablePasteRowBefore() {\n        return pasteOnSelection(actions.pasteRowsBefore, clipboard.getRows);\n      },\n      mceTablePasteRowAfter: function mceTablePasteRowAfter() {\n        return pasteOnSelection(actions.pasteRowsAfter, clipboard.getRows);\n      },\n      mceTableDelete: eraseTable,\n      mceTableCellToggleClass: toggleTableCellClass,\n      mceTableToggleClass: toggleTableClass,\n      mceTableToggleCaption: toggleCaption,\n      mceTableSizingMode: function mceTableSizingMode(_ui, sizing) {\n        return setSizingMode(sizing);\n      },\n      mceTableCellType: actOnType(function (type) {\n        return type === 'th' ? actions.makeCellsHeader : actions.unmakeCellsHeader;\n      }),\n      mceTableColType: actOnType(function (type) {\n        return type === 'th' ? actions.makeColumnsHeader : actions.unmakeColumnsHeader;\n      }),\n      mceTableRowType: actOnType(function (type) {\n        switch (type) {\n          case 'header':\n            return actions.makeRowsHeader;\n\n          case 'footer':\n            return actions.makeRowsFooter;\n\n          default:\n            return actions.makeRowsBody;\n        }\n      })\n    }, function (func, name) {\n      return editor.addCommand(name, func);\n    });\n    each$1({\n      mceTableProps: curry(open, editor, false),\n      mceTableRowProps: curry(open$1, editor),\n      mceTableCellProps: curry(open$2, editor, selections)\n    }, function (func, name) {\n      return editor.addCommand(name, function () {\n        return func();\n      });\n    });\n    editor.addCommand('mceInsertTable', function (_ui, args) {\n      if (isObject(args) && keys(args).length > 0) {\n        insertTableWithDataValidation(editor, args.rows, args.columns, args.options, 'Invalid values for mceInsertTable - rows and columns values are required to insert a table.');\n      } else {\n        open(editor, true);\n      }\n    });\n    editor.addCommand('mceTableApplyCellStyle', function (_ui, args) {\n      var getFormatName = function getFormatName(style) {\n        return 'tablecell' + style.toLowerCase().replace('-', '');\n      };\n\n      if (!isObject(args)) {\n        return;\n      }\n\n      var cells = getCellsFromSelection(selections);\n\n      if (cells.length === 0) {\n        return;\n      }\n\n      var validArgs = filter$1(args, function (value, style) {\n        return editor.formatter.has(getFormatName(style)) && isString(value);\n      });\n\n      if (isEmpty(validArgs)) {\n        return;\n      }\n\n      each$1(validArgs, function (value, style) {\n        each$2(cells, function (cell) {\n          DomModifier.normal(editor, cell.dom).setFormat(getFormatName(style), value);\n        });\n      });\n      getTableFromCell(cells[0]).each(function (table) {\n        return fireTableModified(editor, table.dom, styleModified);\n      });\n    });\n  };\n\n  var registerQueryCommands = function registerQueryCommands(editor, actions, selections) {\n    var isRoot = getIsRoot(editor);\n\n    var lookupOnSelection = function lookupOnSelection(action) {\n      return getSelectionCell(getSelectionStart(editor)).bind(function (cell) {\n        return table(cell, isRoot).map(function (table) {\n          var targets = forMenu(selections, table, cell);\n          return action(table, targets);\n        });\n      }).getOr('');\n    };\n\n    each$1({\n      mceTableRowType: function mceTableRowType() {\n        return lookupOnSelection(actions.getTableRowType);\n      },\n      mceTableCellType: function mceTableCellType() {\n        return lookupOnSelection(actions.getTableCellType);\n      },\n      mceTableColType: function mceTableColType() {\n        return lookupOnSelection(actions.getTableColType);\n      }\n    }, function (func, name) {\n      return editor.addQueryValueHandler(name, func);\n    });\n  };\n\n  var Clipboard = function Clipboard() {\n    var rows = value();\n    var cols = value();\n    return {\n      getRows: rows.get,\n      setRows: function setRows(r) {\n        r.fold(rows.clear, rows.set);\n        cols.clear();\n      },\n      clearRows: rows.clear,\n      getColumns: cols.get,\n      setColumns: function setColumns(c) {\n        c.fold(cols.clear, cols.set);\n        rows.clear();\n      },\n      clearColumns: cols.clear\n    };\n  };\n\n  var genericBase = {\n    remove_similar: true,\n    inherit: false\n  };\n\n  var cellBase = _assign({\n    selector: 'td,th'\n  }, genericBase);\n\n  var cellFormats = {\n    tablecellbackgroundcolor: _assign({\n      styles: {\n        backgroundColor: '%value'\n      }\n    }, cellBase),\n    tablecellverticalalign: _assign({\n      styles: {\n        'vertical-align': '%value'\n      }\n    }, cellBase),\n    tablecellbordercolor: _assign({\n      styles: {\n        borderColor: '%value'\n      }\n    }, cellBase),\n    tablecellclass: _assign({\n      classes: ['%value']\n    }, cellBase),\n    tableclass: _assign({\n      selector: 'table',\n      classes: ['%value']\n    }, genericBase),\n    tablecellborderstyle: _assign({\n      styles: {\n        borderStyle: '%value'\n      }\n    }, cellBase),\n    tablecellborderwidth: _assign({\n      styles: {\n        borderWidth: '%value'\n      }\n    }, cellBase)\n  };\n\n  var registerFormats = function registerFormats(editor) {\n    editor.formatter.register(cellFormats);\n  };\n\n  var adt$5 = Adt.generate([{\n    none: ['current']\n  }, {\n    first: ['current']\n  }, {\n    middle: ['current', 'target']\n  }, {\n    last: ['current']\n  }]);\n\n  var none = function none(current) {\n    if (current === void 0) {\n      current = undefined;\n    }\n\n    return adt$5.none(current);\n  };\n\n  var CellLocation = _assign(_assign({}, adt$5), {\n    none: none\n  });\n\n  var walk = function walk(all, current, index, direction, isEligible) {\n    if (isEligible === void 0) {\n      isEligible = always;\n    }\n\n    var forwards = direction === 1;\n\n    if (!forwards && index <= 0) {\n      return CellLocation.first(all[0]);\n    } else if (forwards && index >= all.length - 1) {\n      return CellLocation.last(all[all.length - 1]);\n    } else {\n      var newIndex = index + direction;\n      var elem = all[newIndex];\n      return isEligible(elem) ? CellLocation.middle(current, elem) : walk(all, current, newIndex, direction, isEligible);\n    }\n  };\n\n  var detect$1 = function detect$1(current, isRoot) {\n    return table(current, isRoot).bind(function (table) {\n      var all = cells$1(table);\n      var index = findIndex(all, function (x) {\n        return eq$1(current, x);\n      });\n      return index.map(function (index) {\n        return {\n          index: index,\n          all: all\n        };\n      });\n    });\n  };\n\n  var next = function next(current, isEligible, isRoot) {\n    var detection = detect$1(current, isRoot);\n    return detection.fold(function () {\n      return CellLocation.none(current);\n    }, function (info) {\n      return walk(info.all, current, info.index, 1, isEligible);\n    });\n  };\n\n  var prev = function prev(current, isEligible, isRoot) {\n    var detection = detect$1(current, isRoot);\n    return detection.fold(function () {\n      return CellLocation.none();\n    }, function (info) {\n      return walk(info.all, current, info.index, -1, isEligible);\n    });\n  };\n\n  var create$2 = function create$2(start, soffset, finish, foffset) {\n    return {\n      start: start,\n      soffset: soffset,\n      finish: finish,\n      foffset: foffset\n    };\n  };\n\n  var SimRange = {\n    create: create$2\n  };\n  var adt$4 = Adt.generate([{\n    before: ['element']\n  }, {\n    on: ['element', 'offset']\n  }, {\n    after: ['element']\n  }]);\n\n  var cata$1 = function cata$1(subject, onBefore, onOn, onAfter) {\n    return subject.fold(onBefore, onOn, onAfter);\n  };\n\n  var getStart$1 = function getStart$1(situ) {\n    return situ.fold(identity, identity, identity);\n  };\n\n  var before$2 = adt$4.before;\n  var on = adt$4.on;\n  var after$3 = adt$4.after;\n  var Situ = {\n    before: before$2,\n    on: on,\n    after: after$3,\n    cata: cata$1,\n    getStart: getStart$1\n  };\n  var adt$3 = Adt.generate([{\n    domRange: ['rng']\n  }, {\n    relative: ['startSitu', 'finishSitu']\n  }, {\n    exact: ['start', 'soffset', 'finish', 'foffset']\n  }]);\n\n  var exactFromRange = function exactFromRange(simRange) {\n    return adt$3.exact(simRange.start, simRange.soffset, simRange.finish, simRange.foffset);\n  };\n\n  var getStart = function getStart(selection) {\n    return selection.match({\n      domRange: function domRange(rng) {\n        return SugarElement.fromDom(rng.startContainer);\n      },\n      relative: function relative(startSitu, _finishSitu) {\n        return Situ.getStart(startSitu);\n      },\n      exact: function exact(start, _soffset, _finish, _foffset) {\n        return start;\n      }\n    });\n  };\n\n  var domRange = adt$3.domRange;\n  var relative = adt$3.relative;\n  var exact = adt$3.exact;\n\n  var getWin = function getWin(selection) {\n    var start = getStart(selection);\n    return defaultView(start);\n  };\n\n  var range = SimRange.create;\n  var SimSelection = {\n    domRange: domRange,\n    relative: relative,\n    exact: exact,\n    exactFromRange: exactFromRange,\n    getWin: getWin,\n    range: range\n  };\n\n  var selectNode = function selectNode(win, element) {\n    var rng = win.document.createRange();\n    rng.selectNode(element.dom);\n    return rng;\n  };\n\n  var selectNodeContents = function selectNodeContents(win, element) {\n    var rng = win.document.createRange();\n    selectNodeContentsUsing(rng, element);\n    return rng;\n  };\n\n  var selectNodeContentsUsing = function selectNodeContentsUsing(rng, element) {\n    return rng.selectNodeContents(element.dom);\n  };\n\n  var setStart = function setStart(rng, situ) {\n    situ.fold(function (e) {\n      rng.setStartBefore(e.dom);\n    }, function (e, o) {\n      rng.setStart(e.dom, o);\n    }, function (e) {\n      rng.setStartAfter(e.dom);\n    });\n  };\n\n  var setFinish = function setFinish(rng, situ) {\n    situ.fold(function (e) {\n      rng.setEndBefore(e.dom);\n    }, function (e, o) {\n      rng.setEnd(e.dom, o);\n    }, function (e) {\n      rng.setEndAfter(e.dom);\n    });\n  };\n\n  var relativeToNative = function relativeToNative(win, startSitu, finishSitu) {\n    var range = win.document.createRange();\n    setStart(range, startSitu);\n    setFinish(range, finishSitu);\n    return range;\n  };\n\n  var exactToNative = function exactToNative(win, start, soffset, finish, foffset) {\n    var rng = win.document.createRange();\n    rng.setStart(start.dom, soffset);\n    rng.setEnd(finish.dom, foffset);\n    return rng;\n  };\n\n  var toRect = function toRect(rect) {\n    return {\n      left: rect.left,\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      width: rect.width,\n      height: rect.height\n    };\n  };\n\n  var getFirstRect$1 = function getFirstRect$1(rng) {\n    var rects = rng.getClientRects();\n    var rect = rects.length > 0 ? rects[0] : rng.getBoundingClientRect();\n    return rect.width > 0 || rect.height > 0 ? Optional.some(rect).map(toRect) : Optional.none();\n  };\n\n  var adt$2 = Adt.generate([{\n    ltr: ['start', 'soffset', 'finish', 'foffset']\n  }, {\n    rtl: ['start', 'soffset', 'finish', 'foffset']\n  }]);\n\n  var fromRange = function fromRange(win, type, range) {\n    return type(SugarElement.fromDom(range.startContainer), range.startOffset, SugarElement.fromDom(range.endContainer), range.endOffset);\n  };\n\n  var getRanges = function getRanges(win, selection) {\n    return selection.match({\n      domRange: function domRange(rng) {\n        return {\n          ltr: constant(rng),\n          rtl: Optional.none\n        };\n      },\n      relative: function relative(startSitu, finishSitu) {\n        return {\n          ltr: cached(function () {\n            return relativeToNative(win, startSitu, finishSitu);\n          }),\n          rtl: cached(function () {\n            return Optional.some(relativeToNative(win, finishSitu, startSitu));\n          })\n        };\n      },\n      exact: function exact(start, soffset, finish, foffset) {\n        return {\n          ltr: cached(function () {\n            return exactToNative(win, start, soffset, finish, foffset);\n          }),\n          rtl: cached(function () {\n            return Optional.some(exactToNative(win, finish, foffset, start, soffset));\n          })\n        };\n      }\n    });\n  };\n\n  var doDiagnose = function doDiagnose(win, ranges) {\n    var rng = ranges.ltr();\n\n    if (rng.collapsed) {\n      var reversed = ranges.rtl().filter(function (rev) {\n        return rev.collapsed === false;\n      });\n      return reversed.map(function (rev) {\n        return adt$2.rtl(SugarElement.fromDom(rev.endContainer), rev.endOffset, SugarElement.fromDom(rev.startContainer), rev.startOffset);\n      }).getOrThunk(function () {\n        return fromRange(win, adt$2.ltr, rng);\n      });\n    } else {\n      return fromRange(win, adt$2.ltr, rng);\n    }\n  };\n\n  var diagnose = function diagnose(win, selection) {\n    var ranges = getRanges(win, selection);\n    return doDiagnose(win, ranges);\n  };\n\n  var asLtrRange = function asLtrRange(win, selection) {\n    var diagnosis = diagnose(win, selection);\n    return diagnosis.match({\n      ltr: function ltr(start, soffset, finish, foffset) {\n        var rng = win.document.createRange();\n        rng.setStart(start.dom, soffset);\n        rng.setEnd(finish.dom, foffset);\n        return rng;\n      },\n      rtl: function rtl(start, soffset, finish, foffset) {\n        var rng = win.document.createRange();\n        rng.setStart(finish.dom, foffset);\n        rng.setEnd(start.dom, soffset);\n        return rng;\n      }\n    });\n  };\n\n  adt$2.ltr;\n  adt$2.rtl;\n\n  var searchForPoint = function searchForPoint(rectForOffset, x, y, maxX, length) {\n    if (length === 0) {\n      return 0;\n    } else if (x === maxX) {\n      return length - 1;\n    }\n\n    var xDelta = maxX;\n\n    for (var i = 1; i < length; i++) {\n      var rect = rectForOffset(i);\n      var curDeltaX = Math.abs(x - rect.left);\n\n      if (y <= rect.bottom) {\n        if (y < rect.top || curDeltaX > xDelta) {\n          return i - 1;\n        } else {\n          xDelta = curDeltaX;\n        }\n      }\n    }\n\n    return 0;\n  };\n\n  var inRect = function inRect(rect, x, y) {\n    return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n  };\n\n  var locateOffset = function locateOffset(doc, textnode, x, y, rect) {\n    var rangeForOffset = function rangeForOffset(o) {\n      var r = doc.dom.createRange();\n      r.setStart(textnode.dom, o);\n      r.collapse(true);\n      return r;\n    };\n\n    var rectForOffset = function rectForOffset(o) {\n      var r = rangeForOffset(o);\n      return r.getBoundingClientRect();\n    };\n\n    var length = get$9(textnode).length;\n    var offset = searchForPoint(rectForOffset, x, y, rect.right, length);\n    return rangeForOffset(offset);\n  };\n\n  var locate$1 = function locate$1(doc, node, x, y) {\n    var r = doc.dom.createRange();\n    r.selectNode(node.dom);\n    var rects = r.getClientRects();\n    var foundRect = findMap(rects, function (rect) {\n      return inRect(rect, x, y) ? Optional.some(rect) : Optional.none();\n    });\n    return foundRect.map(function (rect) {\n      return locateOffset(doc, node, x, y, rect);\n    });\n  };\n\n  var searchInChildren = function searchInChildren(doc, node, x, y) {\n    var r = doc.dom.createRange();\n    var nodes = children$3(node);\n    return findMap(nodes, function (n) {\n      r.selectNode(n.dom);\n      return inRect(r.getBoundingClientRect(), x, y) ? locateNode(doc, n, x, y) : Optional.none();\n    });\n  };\n\n  var locateNode = function locateNode(doc, node, x, y) {\n    return isText(node) ? locate$1(doc, node, x, y) : searchInChildren(doc, node, x, y);\n  };\n\n  var locate = function locate(doc, node, x, y) {\n    var r = doc.dom.createRange();\n    r.selectNode(node.dom);\n    var rect = r.getBoundingClientRect();\n    var boundedX = Math.max(rect.left, Math.min(rect.right, x));\n    var boundedY = Math.max(rect.top, Math.min(rect.bottom, y));\n    return locateNode(doc, node, boundedX, boundedY);\n  };\n\n  var COLLAPSE_TO_LEFT = true;\n  var COLLAPSE_TO_RIGHT = false;\n\n  var getCollapseDirection = function getCollapseDirection(rect, x) {\n    return x - rect.left < rect.right - x ? COLLAPSE_TO_LEFT : COLLAPSE_TO_RIGHT;\n  };\n\n  var createCollapsedNode = function createCollapsedNode(doc, target, collapseDirection) {\n    var r = doc.dom.createRange();\n    r.selectNode(target.dom);\n    r.collapse(collapseDirection);\n    return r;\n  };\n\n  var locateInElement = function locateInElement(doc, node, x) {\n    var cursorRange = doc.dom.createRange();\n    cursorRange.selectNode(node.dom);\n    var rect = cursorRange.getBoundingClientRect();\n    var collapseDirection = getCollapseDirection(rect, x);\n    var f = collapseDirection === COLLAPSE_TO_LEFT ? first : last$1;\n    return f(node).map(function (target) {\n      return createCollapsedNode(doc, target, collapseDirection);\n    });\n  };\n\n  var locateInEmpty = function locateInEmpty(doc, node, x) {\n    var rect = node.dom.getBoundingClientRect();\n    var collapseDirection = getCollapseDirection(rect, x);\n    return Optional.some(createCollapsedNode(doc, node, collapseDirection));\n  };\n\n  var search = function search(doc, node, x) {\n    var f = children$3(node).length === 0 ? locateInEmpty : locateInElement;\n    return f(doc, node, x);\n  };\n\n  var caretPositionFromPoint = function caretPositionFromPoint(doc, x, y) {\n    var _a, _b;\n\n    return Optional.from((_b = (_a = doc.dom).caretPositionFromPoint) === null || _b === void 0 ? void 0 : _b.call(_a, x, y)).bind(function (pos) {\n      if (pos.offsetNode === null) {\n        return Optional.none();\n      }\n\n      var r = doc.dom.createRange();\n      r.setStart(pos.offsetNode, pos.offset);\n      r.collapse();\n      return Optional.some(r);\n    });\n  };\n\n  var caretRangeFromPoint = function caretRangeFromPoint(doc, x, y) {\n    var _a, _b;\n\n    return Optional.from((_b = (_a = doc.dom).caretRangeFromPoint) === null || _b === void 0 ? void 0 : _b.call(_a, x, y));\n  };\n\n  var searchTextNodes = function searchTextNodes(doc, node, x, y) {\n    var r = doc.dom.createRange();\n    r.selectNode(node.dom);\n    var rect = r.getBoundingClientRect();\n    var boundedX = Math.max(rect.left, Math.min(rect.right, x));\n    var boundedY = Math.max(rect.top, Math.min(rect.bottom, y));\n    return locate(doc, node, boundedX, boundedY);\n  };\n\n  var searchFromPoint = function searchFromPoint(doc, x, y) {\n    return SugarElement.fromPoint(doc, x, y).bind(function (elem) {\n      var fallback = function fallback() {\n        return search(doc, elem, x);\n      };\n\n      return children$3(elem).length === 0 ? fallback() : searchTextNodes(doc, elem, x, y).orThunk(fallback);\n    });\n  };\n\n  var availableSearch = function () {\n    if (document.caretPositionFromPoint) {\n      return caretPositionFromPoint;\n    } else if (document.caretRangeFromPoint) {\n      return caretRangeFromPoint;\n    } else {\n      return searchFromPoint;\n    }\n  }();\n\n  var fromPoint = function fromPoint(win, x, y) {\n    var doc = SugarElement.fromDom(win.document);\n    return availableSearch(doc, x, y).map(function (rng) {\n      return SimRange.create(SugarElement.fromDom(rng.startContainer), rng.startOffset, SugarElement.fromDom(rng.endContainer), rng.endOffset);\n    });\n  };\n\n  var beforeSpecial = function beforeSpecial(element, offset) {\n    var name$1 = name(element);\n\n    if ('input' === name$1) {\n      return Situ.after(element);\n    } else if (!contains$2(['br', 'img'], name$1)) {\n      return Situ.on(element, offset);\n    } else {\n      return offset === 0 ? Situ.before(element) : Situ.after(element);\n    }\n  };\n\n  var preprocessRelative = function preprocessRelative(startSitu, finishSitu) {\n    var start = startSitu.fold(Situ.before, beforeSpecial, Situ.after);\n    var finish = finishSitu.fold(Situ.before, beforeSpecial, Situ.after);\n    return SimSelection.relative(start, finish);\n  };\n\n  var preprocessExact = function preprocessExact(start, soffset, finish, foffset) {\n    var startSitu = beforeSpecial(start, soffset);\n    var finishSitu = beforeSpecial(finish, foffset);\n    return SimSelection.relative(startSitu, finishSitu);\n  };\n\n  var preprocess = function preprocess(selection) {\n    return selection.match({\n      domRange: function domRange(rng) {\n        var start = SugarElement.fromDom(rng.startContainer);\n        var finish = SugarElement.fromDom(rng.endContainer);\n        return preprocessExact(start, rng.startOffset, finish, rng.endOffset);\n      },\n      relative: preprocessRelative,\n      exact: preprocessExact\n    });\n  };\n\n  var makeRange = function makeRange(start, soffset, finish, foffset) {\n    var doc = owner(start);\n    var rng = doc.dom.createRange();\n    rng.setStart(start.dom, soffset);\n    rng.setEnd(finish.dom, foffset);\n    return rng;\n  };\n\n  var after$2 = function after$2(start, soffset, finish, foffset) {\n    var r = makeRange(start, soffset, finish, foffset);\n    var same = eq$1(start, finish) && soffset === foffset;\n    return r.collapsed && !same;\n  };\n\n  var getNativeSelection = function getNativeSelection(win) {\n    return Optional.from(win.getSelection());\n  };\n\n  var doSetNativeRange = function doSetNativeRange(win, rng) {\n    getNativeSelection(win).each(function (selection) {\n      selection.removeAllRanges();\n      selection.addRange(rng);\n    });\n  };\n\n  var doSetRange = function doSetRange(win, start, soffset, finish, foffset) {\n    var rng = exactToNative(win, start, soffset, finish, foffset);\n    doSetNativeRange(win, rng);\n  };\n\n  var setLegacyRtlRange = function setLegacyRtlRange(win, selection, start, soffset, finish, foffset) {\n    selection.collapse(start.dom, soffset);\n    selection.extend(finish.dom, foffset);\n  };\n\n  var setRangeFromRelative = function setRangeFromRelative(win, relative) {\n    return diagnose(win, relative).match({\n      ltr: function ltr(start, soffset, finish, foffset) {\n        doSetRange(win, start, soffset, finish, foffset);\n      },\n      rtl: function rtl(start, soffset, finish, foffset) {\n        getNativeSelection(win).each(function (selection) {\n          if (selection.setBaseAndExtent) {\n            selection.setBaseAndExtent(start.dom, soffset, finish.dom, foffset);\n          } else if (selection.extend) {\n            try {\n              setLegacyRtlRange(win, selection, start, soffset, finish, foffset);\n            } catch (e) {\n              doSetRange(win, finish, foffset, start, soffset);\n            }\n          } else {\n            doSetRange(win, finish, foffset, start, soffset);\n          }\n        });\n      }\n    });\n  };\n\n  var setExact = function setExact(win, start, soffset, finish, foffset) {\n    var relative = preprocessExact(start, soffset, finish, foffset);\n    setRangeFromRelative(win, relative);\n  };\n\n  var setRelative = function setRelative(win, startSitu, finishSitu) {\n    var relative = preprocessRelative(startSitu, finishSitu);\n    setRangeFromRelative(win, relative);\n  };\n\n  var toNative = function toNative(selection) {\n    var win = SimSelection.getWin(selection).dom;\n\n    var getDomRange = function getDomRange(start, soffset, finish, foffset) {\n      return exactToNative(win, start, soffset, finish, foffset);\n    };\n\n    var filtered = preprocess(selection);\n    return diagnose(win, filtered).match({\n      ltr: getDomRange,\n      rtl: getDomRange\n    });\n  };\n\n  var readRange = function readRange(selection) {\n    if (selection.rangeCount > 0) {\n      var firstRng = selection.getRangeAt(0);\n      var lastRng = selection.getRangeAt(selection.rangeCount - 1);\n      return Optional.some(SimRange.create(SugarElement.fromDom(firstRng.startContainer), firstRng.startOffset, SugarElement.fromDom(lastRng.endContainer), lastRng.endOffset));\n    } else {\n      return Optional.none();\n    }\n  };\n\n  var doGetExact = function doGetExact(selection) {\n    if (selection.anchorNode === null || selection.focusNode === null) {\n      return readRange(selection);\n    } else {\n      var anchor = SugarElement.fromDom(selection.anchorNode);\n      var focus_1 = SugarElement.fromDom(selection.focusNode);\n      return after$2(anchor, selection.anchorOffset, focus_1, selection.focusOffset) ? Optional.some(SimRange.create(anchor, selection.anchorOffset, focus_1, selection.focusOffset)) : readRange(selection);\n    }\n  };\n\n  var setToElement = function setToElement(win, element, selectNodeContents$1) {\n    if (selectNodeContents$1 === void 0) {\n      selectNodeContents$1 = true;\n    }\n\n    var rngGetter = selectNodeContents$1 ? selectNodeContents : selectNode;\n    var rng = rngGetter(win, element);\n    doSetNativeRange(win, rng);\n  };\n\n  var getExact = function getExact(win) {\n    return getNativeSelection(win).filter(function (sel) {\n      return sel.rangeCount > 0;\n    }).bind(doGetExact);\n  };\n\n  var get$1 = function get$1(win) {\n    return getExact(win).map(function (range) {\n      return SimSelection.exact(range.start, range.soffset, range.finish, range.foffset);\n    });\n  };\n\n  var getFirstRect = function getFirstRect(win, selection) {\n    var rng = asLtrRange(win, selection);\n    return getFirstRect$1(rng);\n  };\n\n  var getAtPoint = function getAtPoint(win, x, y) {\n    return fromPoint(win, x, y);\n  };\n\n  var clear = function clear(win) {\n    getNativeSelection(win).each(function (selection) {\n      return selection.removeAllRanges();\n    });\n  };\n\n  var global$1 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n  var forward = function forward(editor, isRoot, cell) {\n    return go$1(editor, isRoot, next(cell, isEditable$1));\n  };\n\n  var backward = function backward(editor, isRoot, cell) {\n    return go$1(editor, isRoot, prev(cell, isEditable$1));\n  };\n\n  var getCellFirstCursorPosition = function getCellFirstCursorPosition(editor, cell) {\n    var selection = SimSelection.exact(cell, 0, cell, 0);\n    return toNative(selection);\n  };\n\n  var go$1 = function go$1(editor, isRoot, cell) {\n    return cell.fold(Optional.none, Optional.none, function (current, next) {\n      return first(next).map(function (cell) {\n        return getCellFirstCursorPosition(editor, cell);\n      });\n    }, function (current) {\n      editor.execCommand('mceTableInsertRowAfter');\n      return forward(editor, isRoot, current);\n    });\n  };\n\n  var rootElements = ['table', 'li', 'dl'];\n\n  var handle$1 = function handle$1(event, editor, cellSelection) {\n    if (event.keyCode === global$1.TAB) {\n      var body_1 = getBody(editor);\n\n      var isRoot_1 = function isRoot_1(element) {\n        var name$1 = name(element);\n        return eq$1(element, body_1) || contains$2(rootElements, name$1);\n      };\n\n      var rng = editor.selection.getRng();\n      var container = SugarElement.fromDom(event.shiftKey ? rng.startContainer : rng.endContainer);\n      cell(container, isRoot_1).each(function (cell) {\n        event.preventDefault();\n        table(cell, isRoot_1).each(cellSelection.clear);\n        editor.selection.collapse(event.shiftKey);\n        var navigation = event.shiftKey ? backward : forward;\n        var rng = navigation(editor, isRoot_1, cell);\n        rng.each(function (range) {\n          editor.selection.setRng(range);\n        });\n      });\n    }\n  };\n\n  var create$1 = function create$1(selection, kill) {\n    return {\n      selection: selection,\n      kill: kill\n    };\n  };\n\n  var Response = {\n    create: create$1\n  };\n\n  var create = function create(start, soffset, finish, foffset) {\n    return {\n      start: Situ.on(start, soffset),\n      finish: Situ.on(finish, foffset)\n    };\n  };\n\n  var Situs = {\n    create: create\n  };\n\n  var convertToRange = function convertToRange(win, selection) {\n    var rng = asLtrRange(win, selection);\n    return SimRange.create(SugarElement.fromDom(rng.startContainer), rng.startOffset, SugarElement.fromDom(rng.endContainer), rng.endOffset);\n  };\n\n  var makeSitus = Situs.create;\n\n  var sync = function sync(container, isRoot, start, soffset, finish, foffset, selectRange) {\n    if (!(eq$1(start, finish) && soffset === foffset)) {\n      return closest$1(start, 'td,th', isRoot).bind(function (s) {\n        return closest$1(finish, 'td,th', isRoot).bind(function (f) {\n          return detect(container, isRoot, s, f, selectRange);\n        });\n      });\n    } else {\n      return Optional.none();\n    }\n  };\n\n  var detect = function detect(container, isRoot, start, finish, selectRange) {\n    if (!eq$1(start, finish)) {\n      return identify(start, finish, isRoot).bind(function (cellSel) {\n        var boxes = cellSel.boxes.getOr([]);\n\n        if (boxes.length > 1) {\n          selectRange(container, boxes, cellSel.start, cellSel.finish);\n          return Optional.some(Response.create(Optional.some(makeSitus(start, 0, start, getEnd(start))), true));\n        } else {\n          return Optional.none();\n        }\n      });\n    } else {\n      return Optional.none();\n    }\n  };\n\n  var update = function update(rows, columns, container, selected, annotations) {\n    var updateSelection = function updateSelection(newSels) {\n      annotations.clearBeforeUpdate(container);\n      annotations.selectRange(container, newSels.boxes, newSels.start, newSels.finish);\n      return newSels.boxes;\n    };\n\n    return shiftSelection(selected, rows, columns, annotations.firstSelectedSelector, annotations.lastSelectedSelector).map(updateSelection);\n  };\n\n  var traverse = function traverse(item, mode) {\n    return {\n      item: item,\n      mode: mode\n    };\n  };\n\n  var backtrack = function backtrack(universe, item, _direction, transition) {\n    if (transition === void 0) {\n      transition = sidestep;\n    }\n\n    return universe.property().parent(item).map(function (p) {\n      return traverse(p, transition);\n    });\n  };\n\n  var sidestep = function sidestep(universe, item, direction, transition) {\n    if (transition === void 0) {\n      transition = advance;\n    }\n\n    return direction.sibling(universe, item).map(function (p) {\n      return traverse(p, transition);\n    });\n  };\n\n  var advance = function advance(universe, item, direction, transition) {\n    if (transition === void 0) {\n      transition = advance;\n    }\n\n    var children = universe.property().children(item);\n    var result = direction.first(children);\n    return result.map(function (r) {\n      return traverse(r, transition);\n    });\n  };\n\n  var successors = [{\n    current: backtrack,\n    next: sidestep,\n    fallback: Optional.none()\n  }, {\n    current: sidestep,\n    next: advance,\n    fallback: Optional.some(backtrack)\n  }, {\n    current: advance,\n    next: advance,\n    fallback: Optional.some(sidestep)\n  }];\n\n  var go = function go(universe, item, mode, direction, rules) {\n    if (rules === void 0) {\n      rules = successors;\n    }\n\n    var ruleOpt = find$1(rules, function (succ) {\n      return succ.current === mode;\n    });\n    return ruleOpt.bind(function (rule) {\n      return rule.current(universe, item, direction, rule.next).orThunk(function () {\n        return rule.fallback.bind(function (fb) {\n          return go(universe, item, fb, direction);\n        });\n      });\n    });\n  };\n\n  var left$1 = function left$1() {\n    var sibling = function sibling(universe, item) {\n      return universe.query().prevSibling(item);\n    };\n\n    var first = function first(children) {\n      return children.length > 0 ? Optional.some(children[children.length - 1]) : Optional.none();\n    };\n\n    return {\n      sibling: sibling,\n      first: first\n    };\n  };\n\n  var right$1 = function right$1() {\n    var sibling = function sibling(universe, item) {\n      return universe.query().nextSibling(item);\n    };\n\n    var first = function first(children) {\n      return children.length > 0 ? Optional.some(children[0]) : Optional.none();\n    };\n\n    return {\n      sibling: sibling,\n      first: first\n    };\n  };\n\n  var Walkers = {\n    left: left$1,\n    right: right$1\n  };\n\n  var hone = function hone(universe, item, predicate, mode, direction, isRoot) {\n    var next = go(universe, item, mode, direction);\n    return next.bind(function (n) {\n      if (isRoot(n.item)) {\n        return Optional.none();\n      } else {\n        return predicate(n.item) ? Optional.some(n.item) : hone(universe, n.item, predicate, n.mode, direction, isRoot);\n      }\n    });\n  };\n\n  var left = function left(universe, item, predicate, isRoot) {\n    return hone(universe, item, predicate, sidestep, Walkers.left(), isRoot);\n  };\n\n  var right = function right(universe, item, predicate, isRoot) {\n    return hone(universe, item, predicate, sidestep, Walkers.right(), isRoot);\n  };\n\n  var isLeaf = function isLeaf(universe) {\n    return function (element) {\n      return universe.property().children(element).length === 0;\n    };\n  };\n\n  var before$1 = function before$1(universe, item, isRoot) {\n    return seekLeft$1(universe, item, isLeaf(universe), isRoot);\n  };\n\n  var after$1 = function after$1(universe, item, isRoot) {\n    return seekRight$1(universe, item, isLeaf(universe), isRoot);\n  };\n\n  var seekLeft$1 = left;\n  var seekRight$1 = right;\n  var universe = DomUniverse();\n\n  var before = function before(element, isRoot) {\n    return before$1(universe, element, isRoot);\n  };\n\n  var after = function after(element, isRoot) {\n    return after$1(universe, element, isRoot);\n  };\n\n  var seekLeft = function seekLeft(element, predicate, isRoot) {\n    return seekLeft$1(universe, element, predicate, isRoot);\n  };\n\n  var seekRight = function seekRight(element, predicate, isRoot) {\n    return seekRight$1(universe, element, predicate, isRoot);\n  };\n\n  var ancestor = function ancestor(scope, predicate, isRoot) {\n    return ancestor$2(scope, predicate, isRoot).isSome();\n  };\n\n  var adt$1 = Adt.generate([{\n    none: ['message']\n  }, {\n    success: []\n  }, {\n    failedUp: ['cell']\n  }, {\n    failedDown: ['cell']\n  }]);\n\n  var isOverlapping = function isOverlapping(bridge, before, after) {\n    var beforeBounds = bridge.getRect(before);\n    var afterBounds = bridge.getRect(after);\n    return afterBounds.right > beforeBounds.left && afterBounds.left < beforeBounds.right;\n  };\n\n  var isRow = function isRow(elem) {\n    return closest$1(elem, 'tr');\n  };\n\n  var verify = function verify(bridge, before, beforeOffset, after, afterOffset, failure, isRoot) {\n    return closest$1(after, 'td,th', isRoot).bind(function (afterCell) {\n      return closest$1(before, 'td,th', isRoot).map(function (beforeCell) {\n        if (!eq$1(afterCell, beforeCell)) {\n          return sharedOne(isRow, [afterCell, beforeCell]).fold(function () {\n            return isOverlapping(bridge, beforeCell, afterCell) ? adt$1.success() : failure(beforeCell);\n          }, function (_sharedRow) {\n            return failure(beforeCell);\n          });\n        } else {\n          return eq$1(after, afterCell) && getEnd(afterCell) === afterOffset ? failure(beforeCell) : adt$1.none('in same cell');\n        }\n      });\n    }).getOr(adt$1.none('default'));\n  };\n\n  var cata = function cata(subject, onNone, onSuccess, onFailedUp, onFailedDown) {\n    return subject.fold(onNone, onSuccess, onFailedUp, onFailedDown);\n  };\n\n  var BeforeAfter = _assign(_assign({}, adt$1), {\n    verify: verify,\n    cata: cata\n  });\n\n  var inParent = function inParent(parent, children, element, index) {\n    return {\n      parent: parent,\n      children: children,\n      element: element,\n      index: index\n    };\n  };\n\n  var indexInParent = function indexInParent(element) {\n    return parent(element).bind(function (parent) {\n      var children = children$3(parent);\n      return indexOf(children, element).map(function (index) {\n        return inParent(parent, children, element, index);\n      });\n    });\n  };\n\n  var indexOf = function indexOf(elements, element) {\n    return findIndex(elements, curry(eq$1, element));\n  };\n\n  var isBr = function isBr(elem) {\n    return name(elem) === 'br';\n  };\n\n  var gatherer = function gatherer(cand, gather, isRoot) {\n    return gather(cand, isRoot).bind(function (target) {\n      return isText(target) && get$9(target).trim().length === 0 ? gatherer(target, gather, isRoot) : Optional.some(target);\n    });\n  };\n\n  var handleBr = function handleBr(isRoot, element, direction) {\n    return direction.traverse(element).orThunk(function () {\n      return gatherer(element, direction.gather, isRoot);\n    }).map(direction.relative);\n  };\n\n  var findBr = function findBr(element, offset) {\n    return child$3(element, offset).filter(isBr).orThunk(function () {\n      return child$3(element, offset - 1).filter(isBr);\n    });\n  };\n\n  var handleParent = function handleParent(isRoot, element, offset, direction) {\n    return findBr(element, offset).bind(function (br) {\n      return direction.traverse(br).fold(function () {\n        return gatherer(br, direction.gather, isRoot).map(direction.relative);\n      }, function (adjacent) {\n        return indexInParent(adjacent).map(function (info) {\n          return Situ.on(info.parent, info.index);\n        });\n      });\n    });\n  };\n\n  var tryBr = function tryBr(isRoot, element, offset, direction) {\n    var target = isBr(element) ? handleBr(isRoot, element, direction) : handleParent(isRoot, element, offset, direction);\n    return target.map(function (tgt) {\n      return {\n        start: tgt,\n        finish: tgt\n      };\n    });\n  };\n\n  var process = function process(analysis) {\n    return BeforeAfter.cata(analysis, function (_message) {\n      return Optional.none();\n    }, function () {\n      return Optional.none();\n    }, function (cell) {\n      return Optional.some(point(cell, 0));\n    }, function (cell) {\n      return Optional.some(point(cell, getEnd(cell)));\n    });\n  };\n\n  var moveDown = function moveDown(caret, amount) {\n    return {\n      left: caret.left,\n      top: caret.top + amount,\n      right: caret.right,\n      bottom: caret.bottom + amount\n    };\n  };\n\n  var moveUp = function moveUp(caret, amount) {\n    return {\n      left: caret.left,\n      top: caret.top - amount,\n      right: caret.right,\n      bottom: caret.bottom - amount\n    };\n  };\n\n  var translate = function translate(caret, xDelta, yDelta) {\n    return {\n      left: caret.left + xDelta,\n      top: caret.top + yDelta,\n      right: caret.right + xDelta,\n      bottom: caret.bottom + yDelta\n    };\n  };\n\n  var getTop = function getTop(caret) {\n    return caret.top;\n  };\n\n  var getBottom = function getBottom(caret) {\n    return caret.bottom;\n  };\n\n  var getPartialBox = function getPartialBox(bridge, element, offset) {\n    if (offset >= 0 && offset < getEnd(element)) {\n      return bridge.getRangedRect(element, offset, element, offset + 1);\n    } else if (offset > 0) {\n      return bridge.getRangedRect(element, offset - 1, element, offset);\n    }\n\n    return Optional.none();\n  };\n\n  var toCaret = function toCaret(rect) {\n    return {\n      left: rect.left,\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom\n    };\n  };\n\n  var getElemBox = function getElemBox(bridge, element) {\n    return Optional.some(bridge.getRect(element));\n  };\n\n  var getBoxAt = function getBoxAt(bridge, element, offset) {\n    if (isElement(element)) {\n      return getElemBox(bridge, element).map(toCaret);\n    } else if (isText(element)) {\n      return getPartialBox(bridge, element, offset).map(toCaret);\n    } else {\n      return Optional.none();\n    }\n  };\n\n  var getEntireBox = function getEntireBox(bridge, element) {\n    if (isElement(element)) {\n      return getElemBox(bridge, element).map(toCaret);\n    } else if (isText(element)) {\n      return bridge.getRangedRect(element, 0, element, getEnd(element)).map(toCaret);\n    } else {\n      return Optional.none();\n    }\n  };\n\n  var JUMP_SIZE = 5;\n  var NUM_RETRIES = 100;\n  var adt = Adt.generate([{\n    none: []\n  }, {\n    retry: ['caret']\n  }]);\n\n  var isOutside = function isOutside(caret, box) {\n    return caret.left < box.left || Math.abs(box.right - caret.left) < 1 || caret.left > box.right;\n  };\n\n  var inOutsideBlock = function inOutsideBlock(bridge, element, caret) {\n    return closest$2(element, isBlock).fold(never, function (cell) {\n      return getEntireBox(bridge, cell).exists(function (box) {\n        return isOutside(caret, box);\n      });\n    });\n  };\n\n  var adjustDown = function adjustDown(bridge, element, guessBox, original, caret) {\n    var lowerCaret = moveDown(caret, JUMP_SIZE);\n\n    if (Math.abs(guessBox.bottom - original.bottom) < 1) {\n      return adt.retry(lowerCaret);\n    } else if (guessBox.top > caret.bottom) {\n      return adt.retry(lowerCaret);\n    } else if (guessBox.top === caret.bottom) {\n      return adt.retry(moveDown(caret, 1));\n    } else {\n      return inOutsideBlock(bridge, element, caret) ? adt.retry(translate(lowerCaret, JUMP_SIZE, 0)) : adt.none();\n    }\n  };\n\n  var adjustUp = function adjustUp(bridge, element, guessBox, original, caret) {\n    var higherCaret = moveUp(caret, JUMP_SIZE);\n\n    if (Math.abs(guessBox.top - original.top) < 1) {\n      return adt.retry(higherCaret);\n    } else if (guessBox.bottom < caret.top) {\n      return adt.retry(higherCaret);\n    } else if (guessBox.bottom === caret.top) {\n      return adt.retry(moveUp(caret, 1));\n    } else {\n      return inOutsideBlock(bridge, element, caret) ? adt.retry(translate(higherCaret, JUMP_SIZE, 0)) : adt.none();\n    }\n  };\n\n  var upMovement = {\n    point: getTop,\n    adjuster: adjustUp,\n    move: moveUp,\n    gather: before\n  };\n  var downMovement = {\n    point: getBottom,\n    adjuster: adjustDown,\n    move: moveDown,\n    gather: after\n  };\n\n  var isAtTable = function isAtTable(bridge, x, y) {\n    return bridge.elementFromPoint(x, y).filter(function (elm) {\n      return name(elm) === 'table';\n    }).isSome();\n  };\n\n  var adjustForTable = function adjustForTable(bridge, movement, original, caret, numRetries) {\n    return adjustTil(bridge, movement, original, movement.move(caret, JUMP_SIZE), numRetries);\n  };\n\n  var adjustTil = function adjustTil(bridge, movement, original, caret, numRetries) {\n    if (numRetries === 0) {\n      return Optional.some(caret);\n    }\n\n    if (isAtTable(bridge, caret.left, movement.point(caret))) {\n      return adjustForTable(bridge, movement, original, caret, numRetries - 1);\n    }\n\n    return bridge.situsFromPoint(caret.left, movement.point(caret)).bind(function (guess) {\n      return guess.start.fold(Optional.none, function (element) {\n        return getEntireBox(bridge, element).bind(function (guessBox) {\n          return movement.adjuster(bridge, element, guessBox, original, caret).fold(Optional.none, function (newCaret) {\n            return adjustTil(bridge, movement, original, newCaret, numRetries - 1);\n          });\n        }).orThunk(function () {\n          return Optional.some(caret);\n        });\n      }, Optional.none);\n    });\n  };\n\n  var ieTryDown = function ieTryDown(bridge, caret) {\n    return bridge.situsFromPoint(caret.left, caret.bottom + JUMP_SIZE);\n  };\n\n  var ieTryUp = function ieTryUp(bridge, caret) {\n    return bridge.situsFromPoint(caret.left, caret.top - JUMP_SIZE);\n  };\n\n  var checkScroll = function checkScroll(movement, adjusted, bridge) {\n    if (movement.point(adjusted) > bridge.getInnerHeight()) {\n      return Optional.some(movement.point(adjusted) - bridge.getInnerHeight());\n    } else if (movement.point(adjusted) < 0) {\n      return Optional.some(-movement.point(adjusted));\n    } else {\n      return Optional.none();\n    }\n  };\n\n  var retry = function retry(movement, bridge, caret) {\n    var moved = movement.move(caret, JUMP_SIZE);\n    var adjusted = adjustTil(bridge, movement, caret, moved, NUM_RETRIES).getOr(moved);\n    return checkScroll(movement, adjusted, bridge).fold(function () {\n      return bridge.situsFromPoint(adjusted.left, movement.point(adjusted));\n    }, function (delta) {\n      bridge.scrollBy(0, delta);\n      return bridge.situsFromPoint(adjusted.left, movement.point(adjusted) - delta);\n    });\n  };\n\n  var Retries = {\n    tryUp: curry(retry, upMovement),\n    tryDown: curry(retry, downMovement),\n    ieTryUp: ieTryUp,\n    ieTryDown: ieTryDown,\n    getJumpSize: constant(JUMP_SIZE)\n  };\n  var MAX_RETRIES = 20;\n\n  var findSpot = function findSpot(bridge, isRoot, direction) {\n    return bridge.getSelection().bind(function (sel) {\n      return tryBr(isRoot, sel.finish, sel.foffset, direction).fold(function () {\n        return Optional.some(point(sel.finish, sel.foffset));\n      }, function (brNeighbour) {\n        var range = bridge.fromSitus(brNeighbour);\n        var analysis = BeforeAfter.verify(bridge, sel.finish, sel.foffset, range.finish, range.foffset, direction.failure, isRoot);\n        return process(analysis);\n      });\n    });\n  };\n\n  var scan = function scan(bridge, isRoot, element, offset, direction, numRetries) {\n    if (numRetries === 0) {\n      return Optional.none();\n    }\n\n    return tryCursor(bridge, isRoot, element, offset, direction).bind(function (situs) {\n      var range = bridge.fromSitus(situs);\n      var analysis = BeforeAfter.verify(bridge, element, offset, range.finish, range.foffset, direction.failure, isRoot);\n      return BeforeAfter.cata(analysis, function () {\n        return Optional.none();\n      }, function () {\n        return Optional.some(situs);\n      }, function (cell) {\n        if (eq$1(element, cell) && offset === 0) {\n          return tryAgain(bridge, element, offset, moveUp, direction);\n        } else {\n          return scan(bridge, isRoot, cell, 0, direction, numRetries - 1);\n        }\n      }, function (cell) {\n        if (eq$1(element, cell) && offset === getEnd(cell)) {\n          return tryAgain(bridge, element, offset, moveDown, direction);\n        } else {\n          return scan(bridge, isRoot, cell, getEnd(cell), direction, numRetries - 1);\n        }\n      });\n    });\n  };\n\n  var tryAgain = function tryAgain(bridge, element, offset, move, direction) {\n    return getBoxAt(bridge, element, offset).bind(function (box) {\n      return tryAt(bridge, direction, move(box, Retries.getJumpSize()));\n    });\n  };\n\n  var tryAt = function tryAt(bridge, direction, box) {\n    var browser = detect$3().browser;\n\n    if (browser.isChrome() || browser.isSafari() || browser.isFirefox() || browser.isEdge()) {\n      return direction.otherRetry(bridge, box);\n    } else if (browser.isIE()) {\n      return direction.ieRetry(bridge, box);\n    } else {\n      return Optional.none();\n    }\n  };\n\n  var tryCursor = function tryCursor(bridge, isRoot, element, offset, direction) {\n    return getBoxAt(bridge, element, offset).bind(function (box) {\n      return tryAt(bridge, direction, box);\n    });\n  };\n\n  var handle = function handle(bridge, isRoot, direction) {\n    return findSpot(bridge, isRoot, direction).bind(function (spot) {\n      return scan(bridge, isRoot, spot.element, spot.offset, direction, MAX_RETRIES).map(bridge.fromSitus);\n    });\n  };\n\n  var inSameTable = function inSameTable(elem, table) {\n    return ancestor(elem, function (e) {\n      return parent(e).exists(function (p) {\n        return eq$1(p, table);\n      });\n    });\n  };\n\n  var simulate = function simulate(bridge, isRoot, direction, initial, anchor) {\n    return closest$1(initial, 'td,th', isRoot).bind(function (start) {\n      return closest$1(start, 'table', isRoot).bind(function (table) {\n        if (!inSameTable(anchor, table)) {\n          return Optional.none();\n        }\n\n        return handle(bridge, isRoot, direction).bind(function (range) {\n          return closest$1(range.finish, 'td,th', isRoot).map(function (finish) {\n            return {\n              start: start,\n              finish: finish,\n              range: range\n            };\n          });\n        });\n      });\n    });\n  };\n\n  var navigate = function navigate(bridge, isRoot, direction, initial, anchor, precheck) {\n    if (detect$3().browser.isIE()) {\n      return Optional.none();\n    } else {\n      return precheck(initial, isRoot).orThunk(function () {\n        return simulate(bridge, isRoot, direction, initial, anchor).map(function (info) {\n          var range = info.range;\n          return Response.create(Optional.some(makeSitus(range.start, range.soffset, range.finish, range.foffset)), true);\n        });\n      });\n    }\n  };\n\n  var firstUpCheck = function firstUpCheck(initial, isRoot) {\n    return closest$1(initial, 'tr', isRoot).bind(function (startRow) {\n      return closest$1(startRow, 'table', isRoot).bind(function (table) {\n        var rows = descendants(table, 'tr');\n\n        if (eq$1(startRow, rows[0])) {\n          return seekLeft(table, function (element) {\n            return last$1(element).isSome();\n          }, isRoot).map(function (last) {\n            var lastOffset = getEnd(last);\n            return Response.create(Optional.some(makeSitus(last, lastOffset, last, lastOffset)), true);\n          });\n        } else {\n          return Optional.none();\n        }\n      });\n    });\n  };\n\n  var lastDownCheck = function lastDownCheck(initial, isRoot) {\n    return closest$1(initial, 'tr', isRoot).bind(function (startRow) {\n      return closest$1(startRow, 'table', isRoot).bind(function (table) {\n        var rows = descendants(table, 'tr');\n\n        if (eq$1(startRow, rows[rows.length - 1])) {\n          return seekRight(table, function (element) {\n            return first(element).isSome();\n          }, isRoot).map(function (first) {\n            return Response.create(Optional.some(makeSitus(first, 0, first, 0)), true);\n          });\n        } else {\n          return Optional.none();\n        }\n      });\n    });\n  };\n\n  var select = function select(bridge, container, isRoot, direction, initial, anchor, selectRange) {\n    return simulate(bridge, isRoot, direction, initial, anchor).bind(function (info) {\n      return detect(container, isRoot, info.start, info.finish, selectRange);\n    });\n  };\n\n  var findCell = function findCell(target, isRoot) {\n    return closest$1(target, 'td,th', isRoot);\n  };\n\n  var MouseSelection = function MouseSelection(bridge, container, isRoot, annotations) {\n    var cursor = value();\n    var clearstate = cursor.clear;\n\n    var applySelection = function applySelection(event) {\n      cursor.on(function (start) {\n        annotations.clearBeforeUpdate(container);\n        findCell(event.target, isRoot).each(function (finish) {\n          identify(start, finish, isRoot).each(function (cellSel) {\n            var boxes = cellSel.boxes.getOr([]);\n\n            if (boxes.length === 1) {\n              var singleCell = boxes[0];\n              var isNonEditableCell = getRaw(singleCell) === 'false';\n              var isCellClosestContentEditable = is(closest(event.target), singleCell, eq$1);\n\n              if (isNonEditableCell && isCellClosestContentEditable) {\n                annotations.selectRange(container, boxes, singleCell, singleCell);\n                bridge.selectContents(singleCell);\n              }\n            } else if (boxes.length > 1) {\n              annotations.selectRange(container, boxes, cellSel.start, cellSel.finish);\n              bridge.selectContents(finish);\n            }\n          });\n        });\n      });\n    };\n\n    var mousedown = function mousedown(event) {\n      annotations.clear(container);\n      findCell(event.target, isRoot).each(cursor.set);\n    };\n\n    var mouseover = function mouseover(event) {\n      applySelection(event);\n    };\n\n    var mouseup = function mouseup(event) {\n      applySelection(event);\n      clearstate();\n    };\n\n    return {\n      clearstate: clearstate,\n      mousedown: mousedown,\n      mouseover: mouseover,\n      mouseup: mouseup\n    };\n  };\n\n  var down = {\n    traverse: nextSibling,\n    gather: after,\n    relative: Situ.before,\n    otherRetry: Retries.tryDown,\n    ieRetry: Retries.ieTryDown,\n    failure: BeforeAfter.failedDown\n  };\n  var up = {\n    traverse: prevSibling,\n    gather: before,\n    relative: Situ.before,\n    otherRetry: Retries.tryUp,\n    ieRetry: Retries.ieTryUp,\n    failure: BeforeAfter.failedUp\n  };\n\n  var isKey = function isKey(key) {\n    return function (keycode) {\n      return keycode === key;\n    };\n  };\n\n  var isUp = isKey(38);\n  var isDown = isKey(40);\n\n  var isNavigation = function isNavigation(keycode) {\n    return keycode >= 37 && keycode <= 40;\n  };\n\n  var ltr = {\n    isBackward: isKey(37),\n    isForward: isKey(39)\n  };\n  var rtl = {\n    isBackward: isKey(39),\n    isForward: isKey(37)\n  };\n\n  var get = function get(_DOC) {\n    var doc = _DOC !== undefined ? _DOC.dom : document;\n    var x = doc.body.scrollLeft || doc.documentElement.scrollLeft;\n    var y = doc.body.scrollTop || doc.documentElement.scrollTop;\n    return SugarPosition(x, y);\n  };\n\n  var by = function by(x, y, _DOC) {\n    var doc = _DOC !== undefined ? _DOC.dom : document;\n    var win = doc.defaultView;\n\n    if (win) {\n      win.scrollBy(x, y);\n    }\n  };\n\n  var WindowBridge = function WindowBridge(win) {\n    var elementFromPoint = function elementFromPoint(x, y) {\n      return SugarElement.fromPoint(SugarElement.fromDom(win.document), x, y);\n    };\n\n    var getRect = function getRect(element) {\n      return element.dom.getBoundingClientRect();\n    };\n\n    var getRangedRect = function getRangedRect(start, soffset, finish, foffset) {\n      var sel = SimSelection.exact(start, soffset, finish, foffset);\n      return getFirstRect(win, sel);\n    };\n\n    var getSelection = function getSelection() {\n      return get$1(win).map(function (exactAdt) {\n        return convertToRange(win, exactAdt);\n      });\n    };\n\n    var fromSitus = function fromSitus(situs) {\n      var relative = SimSelection.relative(situs.start, situs.finish);\n      return convertToRange(win, relative);\n    };\n\n    var situsFromPoint = function situsFromPoint(x, y) {\n      return getAtPoint(win, x, y).map(function (exact) {\n        return Situs.create(exact.start, exact.soffset, exact.finish, exact.foffset);\n      });\n    };\n\n    var clearSelection = function clearSelection() {\n      clear(win);\n    };\n\n    var collapseSelection = function collapseSelection(toStart) {\n      if (toStart === void 0) {\n        toStart = false;\n      }\n\n      get$1(win).each(function (sel) {\n        return sel.fold(function (rng) {\n          return rng.collapse(toStart);\n        }, function (startSitu, finishSitu) {\n          var situ = toStart ? startSitu : finishSitu;\n          setRelative(win, situ, situ);\n        }, function (start, soffset, finish, foffset) {\n          var node = toStart ? start : finish;\n          var offset = toStart ? soffset : foffset;\n          setExact(win, node, offset, node, offset);\n        });\n      });\n    };\n\n    var selectNode = function selectNode(element) {\n      setToElement(win, element, false);\n    };\n\n    var selectContents = function selectContents(element) {\n      setToElement(win, element);\n    };\n\n    var setSelection = function setSelection(sel) {\n      setExact(win, sel.start, sel.soffset, sel.finish, sel.foffset);\n    };\n\n    var setRelativeSelection = function setRelativeSelection(start, finish) {\n      setRelative(win, start, finish);\n    };\n\n    var getInnerHeight = function getInnerHeight() {\n      return win.innerHeight;\n    };\n\n    var getScrollY = function getScrollY() {\n      var pos = get(SugarElement.fromDom(win.document));\n      return pos.top;\n    };\n\n    var scrollBy = function scrollBy(x, y) {\n      by(x, y, SugarElement.fromDom(win.document));\n    };\n\n    return {\n      elementFromPoint: elementFromPoint,\n      getRect: getRect,\n      getRangedRect: getRangedRect,\n      getSelection: getSelection,\n      fromSitus: fromSitus,\n      situsFromPoint: situsFromPoint,\n      clearSelection: clearSelection,\n      collapseSelection: collapseSelection,\n      setSelection: setSelection,\n      setRelativeSelection: setRelativeSelection,\n      selectNode: selectNode,\n      selectContents: selectContents,\n      getInnerHeight: getInnerHeight,\n      getScrollY: getScrollY,\n      scrollBy: scrollBy\n    };\n  };\n\n  var rc = function rc(rows, cols) {\n    return {\n      rows: rows,\n      cols: cols\n    };\n  };\n\n  var mouse = function mouse(win, container, isRoot, annotations) {\n    var bridge = WindowBridge(win);\n    var handlers = MouseSelection(bridge, container, isRoot, annotations);\n    return {\n      clearstate: handlers.clearstate,\n      mousedown: handlers.mousedown,\n      mouseover: handlers.mouseover,\n      mouseup: handlers.mouseup\n    };\n  };\n\n  var keyboard = function keyboard(win, container, isRoot, annotations) {\n    var bridge = WindowBridge(win);\n\n    var clearToNavigate = function clearToNavigate() {\n      annotations.clear(container);\n      return Optional.none();\n    };\n\n    var keydown = function keydown(event, start, soffset, finish, foffset, direction) {\n      var realEvent = event.raw;\n      var keycode = realEvent.which;\n      var shiftKey = realEvent.shiftKey === true;\n      var handler = retrieve$1(container, annotations.selectedSelector).fold(function () {\n        if (isNavigation(keycode) && !shiftKey) {\n          annotations.clearBeforeUpdate(container);\n        }\n\n        if (isDown(keycode) && shiftKey) {\n          return curry(select, bridge, container, isRoot, down, finish, start, annotations.selectRange);\n        } else if (isUp(keycode) && shiftKey) {\n          return curry(select, bridge, container, isRoot, up, finish, start, annotations.selectRange);\n        } else if (isDown(keycode)) {\n          return curry(navigate, bridge, isRoot, down, finish, start, lastDownCheck);\n        } else if (isUp(keycode)) {\n          return curry(navigate, bridge, isRoot, up, finish, start, firstUpCheck);\n        } else {\n          return Optional.none;\n        }\n      }, function (selected) {\n        var update$1 = function update$1(attempts) {\n          return function () {\n            var navigation = findMap(attempts, function (delta) {\n              return update(delta.rows, delta.cols, container, selected, annotations);\n            });\n            return navigation.fold(function () {\n              return getEdges(container, annotations.firstSelectedSelector, annotations.lastSelectedSelector).map(function (edges) {\n                var relative = isDown(keycode) || direction.isForward(keycode) ? Situ.after : Situ.before;\n                bridge.setRelativeSelection(Situ.on(edges.first, 0), relative(edges.table));\n                annotations.clear(container);\n                return Response.create(Optional.none(), true);\n              });\n            }, function (_) {\n              return Optional.some(Response.create(Optional.none(), true));\n            });\n          };\n        };\n\n        if (isDown(keycode) && shiftKey) {\n          return update$1([rc(+1, 0)]);\n        } else if (isUp(keycode) && shiftKey) {\n          return update$1([rc(-1, 0)]);\n        } else if (direction.isBackward(keycode) && shiftKey) {\n          return update$1([rc(0, -1), rc(-1, 0)]);\n        } else if (direction.isForward(keycode) && shiftKey) {\n          return update$1([rc(0, +1), rc(+1, 0)]);\n        } else if (isNavigation(keycode) && !shiftKey) {\n          return clearToNavigate;\n        } else {\n          return Optional.none;\n        }\n      });\n      return handler();\n    };\n\n    var keyup = function keyup(event, start, soffset, finish, foffset) {\n      return retrieve$1(container, annotations.selectedSelector).fold(function () {\n        var realEvent = event.raw;\n        var keycode = realEvent.which;\n        var shiftKey = realEvent.shiftKey === true;\n\n        if (!shiftKey) {\n          return Optional.none();\n        }\n\n        if (isNavigation(keycode)) {\n          return sync(container, isRoot, start, soffset, finish, foffset, annotations.selectRange);\n        } else {\n          return Optional.none();\n        }\n      }, Optional.none);\n    };\n\n    return {\n      keydown: keydown,\n      keyup: keyup\n    };\n  };\n\n  var external = function external(win, container, isRoot, annotations) {\n    var bridge = WindowBridge(win);\n    return function (start, finish) {\n      annotations.clearBeforeUpdate(container);\n      identify(start, finish, isRoot).each(function (cellSel) {\n        var boxes = cellSel.boxes.getOr([]);\n        annotations.selectRange(container, boxes, cellSel.start, cellSel.finish);\n        bridge.selectContents(finish);\n        bridge.collapseSelection();\n      });\n    };\n  };\n\n  var remove = function remove(element, classes) {\n    each$2(classes, function (x) {\n      remove$2(element, x);\n    });\n  };\n\n  var addClass = function addClass(clazz) {\n    return function (element) {\n      add(element, clazz);\n    };\n  };\n\n  var removeClasses = function removeClasses(classes) {\n    return function (element) {\n      remove(element, classes);\n    };\n  };\n\n  var byClass = function byClass(ephemera) {\n    var addSelectionClass = addClass(ephemera.selected);\n    var removeSelectionClasses = removeClasses([ephemera.selected, ephemera.lastSelected, ephemera.firstSelected]);\n\n    var clear = function clear(container) {\n      var sels = descendants(container, ephemera.selectedSelector);\n      each$2(sels, removeSelectionClasses);\n    };\n\n    var selectRange = function selectRange(container, cells, start, finish) {\n      clear(container);\n      each$2(cells, addSelectionClass);\n      add(start, ephemera.firstSelected);\n      add(finish, ephemera.lastSelected);\n    };\n\n    return {\n      clearBeforeUpdate: clear,\n      clear: clear,\n      selectRange: selectRange,\n      selectedSelector: ephemera.selectedSelector,\n      firstSelectedSelector: ephemera.firstSelectedSelector,\n      lastSelectedSelector: ephemera.lastSelectedSelector\n    };\n  };\n\n  var byAttr = function byAttr(ephemera, onSelection, onClear) {\n    var removeSelectionAttributes = function removeSelectionAttributes(element) {\n      remove$7(element, ephemera.selected);\n      remove$7(element, ephemera.firstSelected);\n      remove$7(element, ephemera.lastSelected);\n    };\n\n    var addSelectionAttribute = function addSelectionAttribute(element) {\n      set$2(element, ephemera.selected, '1');\n    };\n\n    var clear = function clear(container) {\n      clearBeforeUpdate(container);\n      onClear();\n    };\n\n    var clearBeforeUpdate = function clearBeforeUpdate(container) {\n      var sels = descendants(container, ephemera.selectedSelector + ',' + ephemera.firstSelectedSelector + ',' + ephemera.lastSelectedSelector);\n      each$2(sels, removeSelectionAttributes);\n    };\n\n    var selectRange = function selectRange(container, cells, start, finish) {\n      clear(container);\n      each$2(cells, addSelectionAttribute);\n      set$2(start, ephemera.firstSelected, '1');\n      set$2(finish, ephemera.lastSelected, '1');\n      onSelection(cells, start, finish);\n    };\n\n    return {\n      clearBeforeUpdate: clearBeforeUpdate,\n      clear: clear,\n      selectRange: selectRange,\n      selectedSelector: ephemera.selectedSelector,\n      firstSelectedSelector: ephemera.firstSelectedSelector,\n      lastSelectedSelector: ephemera.lastSelectedSelector\n    };\n  };\n\n  var SelectionAnnotation = {\n    byClass: byClass,\n    byAttr: byAttr\n  };\n\n  var getUpOrLeftCells = function getUpOrLeftCells(grid, selectedCells) {\n    var upGrid = grid.slice(0, selectedCells[selectedCells.length - 1].row + 1);\n    var upDetails = toDetailList(upGrid);\n    return bind$2(upDetails, function (detail) {\n      var slicedCells = detail.cells.slice(0, selectedCells[selectedCells.length - 1].column + 1);\n      return map$1(slicedCells, function (cell) {\n        return cell.element;\n      });\n    });\n  };\n\n  var getDownOrRightCells = function getDownOrRightCells(grid, selectedCells) {\n    var downGrid = grid.slice(selectedCells[0].row + selectedCells[0].rowspan - 1, grid.length);\n    var downDetails = toDetailList(downGrid);\n    return bind$2(downDetails, function (detail) {\n      var slicedCells = detail.cells.slice(selectedCells[0].column + selectedCells[0].colspan - 1, detail.cells.length);\n      return map$1(slicedCells, function (cell) {\n        return cell.element;\n      });\n    });\n  };\n\n  var getOtherCells = function getOtherCells(table, target, generators) {\n    var warehouse = Warehouse.fromTable(table);\n    var details = onCells(warehouse, target);\n    return details.map(function (selectedCells) {\n      var grid = toGrid(warehouse, generators, false);\n      var upOrLeftCells = getUpOrLeftCells(grid, selectedCells);\n      var downOrRightCells = getDownOrRightCells(grid, selectedCells);\n      return {\n        upOrLeftCells: upOrLeftCells,\n        downOrRightCells: downOrRightCells\n      };\n    });\n  };\n\n  var global = tinymce.util.Tools.resolve('tinymce.Env');\n\n  var hasInternalTarget = function hasInternalTarget(e) {\n    return has(SugarElement.fromDom(e.target), 'ephox-snooker-resizer-bar') === false;\n  };\n\n  function CellSelection(editor, lazyResize, selectionTargets) {\n    var onSelection = function onSelection(cells, start, finish) {\n      selectionTargets.targets().each(function (targets) {\n        var tableOpt = table(start);\n        tableOpt.each(function (table) {\n          var cloneFormats = getCloneElements(editor);\n          var generators = cellOperations(noop, SugarElement.fromDom(editor.getDoc()), cloneFormats);\n          var otherCells = getOtherCells(table, targets, generators);\n          fireTableSelectionChange(editor, cells, start, finish, otherCells);\n        });\n      });\n    };\n\n    var onClear = function onClear() {\n      return fireTableSelectionClear(editor);\n    };\n\n    var annotations = SelectionAnnotation.byAttr(ephemera, onSelection, onClear);\n    editor.on('init', function (_e) {\n      var win = editor.getWin();\n      var body = getBody(editor);\n      var isRoot = getIsRoot(editor);\n\n      var syncSelection = function syncSelection() {\n        var sel = editor.selection;\n        var start = SugarElement.fromDom(sel.getStart());\n        var end = SugarElement.fromDom(sel.getEnd());\n        var shared = sharedOne(table, [start, end]);\n        shared.fold(function () {\n          return annotations.clear(body);\n        }, noop);\n      };\n\n      var mouseHandlers = mouse(win, body, isRoot, annotations);\n      var keyHandlers = keyboard(win, body, isRoot, annotations);\n      var external$1 = external(win, body, isRoot, annotations);\n\n      var hasShiftKey = function hasShiftKey(event) {\n        return event.raw.shiftKey === true;\n      };\n\n      editor.on('TableSelectorChange', function (e) {\n        return external$1(e.start, e.finish);\n      });\n\n      var handleResponse = function handleResponse(event, response) {\n        if (!hasShiftKey(event)) {\n          return;\n        }\n\n        if (response.kill) {\n          event.kill();\n        }\n\n        response.selection.each(function (ns) {\n          var relative = SimSelection.relative(ns.start, ns.finish);\n          var rng = asLtrRange(win, relative);\n          editor.selection.setRng(rng);\n        });\n      };\n\n      var keyup = function keyup(event) {\n        var wrappedEvent = fromRawEvent(event);\n\n        if (wrappedEvent.raw.shiftKey && isNavigation(wrappedEvent.raw.which)) {\n          var rng = editor.selection.getRng();\n          var start = SugarElement.fromDom(rng.startContainer);\n          var end = SugarElement.fromDom(rng.endContainer);\n          keyHandlers.keyup(wrappedEvent, start, rng.startOffset, end, rng.endOffset).each(function (response) {\n            handleResponse(wrappedEvent, response);\n          });\n        }\n      };\n\n      var keydown = function keydown(event) {\n        var wrappedEvent = fromRawEvent(event);\n        lazyResize().each(function (resize) {\n          return resize.hideBars();\n        });\n        var rng = editor.selection.getRng();\n        var start = SugarElement.fromDom(rng.startContainer);\n        var end = SugarElement.fromDom(rng.endContainer);\n        var direction = onDirection(ltr, rtl)(SugarElement.fromDom(editor.selection.getStart()));\n        keyHandlers.keydown(wrappedEvent, start, rng.startOffset, end, rng.endOffset, direction).each(function (response) {\n          handleResponse(wrappedEvent, response);\n        });\n        lazyResize().each(function (resize) {\n          return resize.showBars();\n        });\n      };\n\n      var isLeftMouse = function isLeftMouse(raw) {\n        return raw.button === 0;\n      };\n\n      var isLeftButtonPressed = function isLeftButtonPressed(raw) {\n        if (raw.buttons === undefined) {\n          return true;\n        }\n\n        if (global.browser.isEdge() && raw.buttons === 0) {\n          return true;\n        }\n\n        return (raw.buttons & 1) !== 0;\n      };\n\n      var dragStart = function dragStart(_e) {\n        mouseHandlers.clearstate();\n      };\n\n      var mouseDown = function mouseDown(e) {\n        if (isLeftMouse(e) && hasInternalTarget(e)) {\n          mouseHandlers.mousedown(fromRawEvent(e));\n        }\n      };\n\n      var mouseOver = function mouseOver(e) {\n        if (isLeftButtonPressed(e) && hasInternalTarget(e)) {\n          mouseHandlers.mouseover(fromRawEvent(e));\n        }\n      };\n\n      var mouseUp = function mouseUp(e) {\n        if (isLeftMouse(e) && hasInternalTarget(e)) {\n          mouseHandlers.mouseup(fromRawEvent(e));\n        }\n      };\n\n      var getDoubleTap = function getDoubleTap() {\n        var lastTarget = Cell(SugarElement.fromDom(body));\n        var lastTimeStamp = Cell(0);\n\n        var touchEnd = function touchEnd(t) {\n          var target = SugarElement.fromDom(t.target);\n\n          if (name(target) === 'td' || name(target) === 'th') {\n            var lT = lastTarget.get();\n            var lTS = lastTimeStamp.get();\n\n            if (eq$1(lT, target) && t.timeStamp - lTS < 300) {\n              t.preventDefault();\n              external$1(target, target);\n            }\n          }\n\n          lastTarget.set(target);\n          lastTimeStamp.set(t.timeStamp);\n        };\n\n        return {\n          touchEnd: touchEnd\n        };\n      };\n\n      var doubleTap = getDoubleTap();\n      editor.on('dragstart', dragStart);\n      editor.on('mousedown', mouseDown);\n      editor.on('mouseover', mouseOver);\n      editor.on('mouseup', mouseUp);\n      editor.on('touchend', doubleTap.touchEnd);\n      editor.on('keyup', keyup);\n      editor.on('keydown', keydown);\n      editor.on('NodeChange', syncSelection);\n    });\n    return {\n      clear: annotations.clear\n    };\n  }\n\n  var child = function child(scope, selector) {\n    return child$1(scope, selector).isSome();\n  };\n\n  var getSelectionTargets = function getSelectionTargets(editor, selections) {\n    var targets = Cell(Optional.none());\n    var changeHandlers = Cell([]);\n    var selectionDetails = Optional.none();\n    var isCaption = isTag('caption');\n\n    var isDisabledForSelection = function isDisabledForSelection(key) {\n      return selectionDetails.forall(function (details) {\n        return !details[key];\n      });\n    };\n\n    var getStart = function getStart() {\n      return getSelectionCellOrCaption(getSelectionStart(editor), getIsRoot(editor));\n    };\n\n    var getEnd = function getEnd() {\n      return getSelectionCellOrCaption(getSelectionEnd(editor), getIsRoot(editor));\n    };\n\n    var findTargets = function findTargets() {\n      return getStart().bind(function (startCellOrCaption) {\n        return flatten(lift2(table(startCellOrCaption), getEnd().bind(table), function (startTable, endTable) {\n          if (eq$1(startTable, endTable)) {\n            if (isCaption(startCellOrCaption)) {\n              return Optional.some(noMenu(startCellOrCaption));\n            } else {\n              return Optional.some(forMenu(selections, startTable, startCellOrCaption));\n            }\n          }\n\n          return Optional.none();\n        }));\n      });\n    };\n\n    var getExtractedDetails = function getExtractedDetails(targets) {\n      var tableOpt = table(targets.element);\n      return tableOpt.map(function (table) {\n        var warehouse = Warehouse.fromTable(table);\n        var selectedCells = onCells(warehouse, targets).getOr([]);\n        var locked = foldl(selectedCells, function (acc, cell) {\n          if (cell.isLocked) {\n            acc.onAny = true;\n\n            if (cell.column === 0) {\n              acc.onFirst = true;\n            } else if (cell.column + cell.colspan >= warehouse.grid.columns) {\n              acc.onLast = true;\n            }\n          }\n\n          return acc;\n        }, {\n          onAny: false,\n          onFirst: false,\n          onLast: false\n        });\n        return {\n          mergeable: onUnlockedMergable(warehouse, targets).isSome(),\n          unmergeable: onUnlockedUnmergable(warehouse, targets).isSome(),\n          locked: locked\n        };\n      });\n    };\n\n    var resetTargets = function resetTargets() {\n      targets.set(cached(findTargets)());\n      selectionDetails = targets.get().bind(getExtractedDetails);\n      each$2(changeHandlers.get(), function (handler) {\n        return handler();\n      });\n    };\n\n    var setupHandler = function setupHandler(handler) {\n      handler();\n      changeHandlers.set(changeHandlers.get().concat([handler]));\n      return function () {\n        changeHandlers.set(filter$2(changeHandlers.get(), function (h) {\n          return h !== handler;\n        }));\n      };\n    };\n\n    var onSetup = function onSetup(api, isDisabled) {\n      return setupHandler(function () {\n        return targets.get().fold(function () {\n          api.setDisabled(true);\n        }, function (targets) {\n          api.setDisabled(isDisabled(targets));\n        });\n      });\n    };\n\n    var onSetupWithToggle = function onSetupWithToggle(api, isDisabled, isActive) {\n      return setupHandler(function () {\n        return targets.get().fold(function () {\n          api.setDisabled(true);\n          api.setActive(false);\n        }, function (targets) {\n          api.setDisabled(isDisabled(targets));\n          api.setActive(isActive(targets));\n        });\n      });\n    };\n\n    var isDisabledFromLocked = function isDisabledFromLocked(lockedDisable) {\n      return selectionDetails.exists(function (details) {\n        return details.locked[lockedDisable];\n      });\n    };\n\n    var onSetupTable = function onSetupTable(api) {\n      return onSetup(api, function (_) {\n        return false;\n      });\n    };\n\n    var onSetupCellOrRow = function onSetupCellOrRow(api) {\n      return onSetup(api, function (targets) {\n        return isCaption(targets.element);\n      });\n    };\n\n    var onSetupColumn = function onSetupColumn(lockedDisable) {\n      return function (api) {\n        return onSetup(api, function (targets) {\n          return isCaption(targets.element) || isDisabledFromLocked(lockedDisable);\n        });\n      };\n    };\n\n    var onSetupPasteable = function onSetupPasteable(getClipboardData) {\n      return function (api) {\n        return onSetup(api, function (targets) {\n          return isCaption(targets.element) || getClipboardData().isNone();\n        });\n      };\n    };\n\n    var onSetupPasteableColumn = function onSetupPasteableColumn(getClipboardData, lockedDisable) {\n      return function (api) {\n        return onSetup(api, function (targets) {\n          return isCaption(targets.element) || getClipboardData().isNone() || isDisabledFromLocked(lockedDisable);\n        });\n      };\n    };\n\n    var onSetupMergeable = function onSetupMergeable(api) {\n      return onSetup(api, function (_targets) {\n        return isDisabledForSelection('mergeable');\n      });\n    };\n\n    var onSetupUnmergeable = function onSetupUnmergeable(api) {\n      return onSetup(api, function (_targets) {\n        return isDisabledForSelection('unmergeable');\n      });\n    };\n\n    var onSetupTableWithCaption = function onSetupTableWithCaption(api) {\n      return onSetupWithToggle(api, never, function (targets) {\n        var tableOpt = table(targets.element, getIsRoot(editor));\n        return tableOpt.exists(function (table) {\n          return child(table, 'caption');\n        });\n      });\n    };\n\n    var onSetupTableHeaders = function onSetupTableHeaders(command, headerType) {\n      return function (api) {\n        return onSetupWithToggle(api, function (targets) {\n          return isCaption(targets.element);\n        }, function () {\n          return editor.queryCommandValue(command) === headerType;\n        });\n      };\n    };\n\n    var onSetupTableRowHeaders = onSetupTableHeaders('mceTableRowType', 'header');\n    var onSetupTableColumnHeaders = onSetupTableHeaders('mceTableColType', 'th');\n    editor.on('NodeChange ExecCommand TableSelectorChange', resetTargets);\n    return {\n      onSetupTable: onSetupTable,\n      onSetupCellOrRow: onSetupCellOrRow,\n      onSetupColumn: onSetupColumn,\n      onSetupPasteable: onSetupPasteable,\n      onSetupPasteableColumn: onSetupPasteableColumn,\n      onSetupMergeable: onSetupMergeable,\n      onSetupUnmergeable: onSetupUnmergeable,\n      resetTargets: resetTargets,\n      onSetupTableWithCaption: onSetupTableWithCaption,\n      onSetupTableRowHeaders: onSetupTableRowHeaders,\n      onSetupTableColumnHeaders: onSetupTableColumnHeaders,\n      targets: targets.get\n    };\n  };\n\n  var addButtons = function addButtons(editor, selections, selectionTargets, clipboard) {\n    editor.ui.registry.addMenuButton('table', {\n      tooltip: 'Table',\n      icon: 'table',\n      fetch: function fetch(callback) {\n        return callback('inserttable | cell row column | advtablesort | tableprops deletetable');\n      }\n    });\n\n    var cmd = function cmd(command) {\n      return function () {\n        return editor.execCommand(command);\n      };\n    };\n\n    editor.ui.registry.addButton('tableprops', {\n      tooltip: 'Table properties',\n      onAction: cmd('mceTableProps'),\n      icon: 'table',\n      onSetup: selectionTargets.onSetupTable\n    });\n    editor.ui.registry.addButton('tabledelete', {\n      tooltip: 'Delete table',\n      onAction: cmd('mceTableDelete'),\n      icon: 'table-delete-table',\n      onSetup: selectionTargets.onSetupTable\n    });\n    editor.ui.registry.addButton('tablecellprops', {\n      tooltip: 'Cell properties',\n      onAction: cmd('mceTableCellProps'),\n      icon: 'table-cell-properties',\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addButton('tablemergecells', {\n      tooltip: 'Merge cells',\n      onAction: cmd('mceTableMergeCells'),\n      icon: 'table-merge-cells',\n      onSetup: selectionTargets.onSetupMergeable\n    });\n    editor.ui.registry.addButton('tablesplitcells', {\n      tooltip: 'Split cell',\n      onAction: cmd('mceTableSplitCells'),\n      icon: 'table-split-cells',\n      onSetup: selectionTargets.onSetupUnmergeable\n    });\n    editor.ui.registry.addButton('tableinsertrowbefore', {\n      tooltip: 'Insert row before',\n      onAction: cmd('mceTableInsertRowBefore'),\n      icon: 'table-insert-row-above',\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addButton('tableinsertrowafter', {\n      tooltip: 'Insert row after',\n      onAction: cmd('mceTableInsertRowAfter'),\n      icon: 'table-insert-row-after',\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addButton('tabledeleterow', {\n      tooltip: 'Delete row',\n      onAction: cmd('mceTableDeleteRow'),\n      icon: 'table-delete-row',\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addButton('tablerowprops', {\n      tooltip: 'Row properties',\n      onAction: cmd('mceTableRowProps'),\n      icon: 'table-row-properties',\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addButton('tableinsertcolbefore', {\n      tooltip: 'Insert column before',\n      onAction: cmd('mceTableInsertColBefore'),\n      icon: 'table-insert-column-before',\n      onSetup: selectionTargets.onSetupColumn('onFirst')\n    });\n    editor.ui.registry.addButton('tableinsertcolafter', {\n      tooltip: 'Insert column after',\n      onAction: cmd('mceTableInsertColAfter'),\n      icon: 'table-insert-column-after',\n      onSetup: selectionTargets.onSetupColumn('onLast')\n    });\n    editor.ui.registry.addButton('tabledeletecol', {\n      tooltip: 'Delete column',\n      onAction: cmd('mceTableDeleteCol'),\n      icon: 'table-delete-column',\n      onSetup: selectionTargets.onSetupColumn('onAny')\n    });\n    editor.ui.registry.addButton('tablecutrow', {\n      tooltip: 'Cut row',\n      icon: 'cut-row',\n      onAction: cmd('mceTableCutRow'),\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addButton('tablecopyrow', {\n      tooltip: 'Copy row',\n      icon: 'duplicate-row',\n      onAction: cmd('mceTableCopyRow'),\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addButton('tablepasterowbefore', {\n      tooltip: 'Paste row before',\n      icon: 'paste-row-before',\n      onAction: cmd('mceTablePasteRowBefore'),\n      onSetup: selectionTargets.onSetupPasteable(clipboard.getRows)\n    });\n    editor.ui.registry.addButton('tablepasterowafter', {\n      tooltip: 'Paste row after',\n      icon: 'paste-row-after',\n      onAction: cmd('mceTablePasteRowAfter'),\n      onSetup: selectionTargets.onSetupPasteable(clipboard.getRows)\n    });\n    editor.ui.registry.addButton('tablecutcol', {\n      tooltip: 'Cut column',\n      icon: 'cut-column',\n      onAction: cmd('mceTableCutCol'),\n      onSetup: selectionTargets.onSetupColumn('onAny')\n    });\n    editor.ui.registry.addButton('tablecopycol', {\n      tooltip: 'Copy column',\n      icon: 'duplicate-column',\n      onAction: cmd('mceTableCopyCol'),\n      onSetup: selectionTargets.onSetupColumn('onAny')\n    });\n    editor.ui.registry.addButton('tablepastecolbefore', {\n      tooltip: 'Paste column before',\n      icon: 'paste-column-before',\n      onAction: cmd('mceTablePasteColBefore'),\n      onSetup: selectionTargets.onSetupPasteableColumn(clipboard.getColumns, 'onFirst')\n    });\n    editor.ui.registry.addButton('tablepastecolafter', {\n      tooltip: 'Paste column after',\n      icon: 'paste-column-after',\n      onAction: cmd('mceTablePasteColAfter'),\n      onSetup: selectionTargets.onSetupPasteableColumn(clipboard.getColumns, 'onLast')\n    });\n    editor.ui.registry.addButton('tableinsertdialog', {\n      tooltip: 'Insert table',\n      onAction: cmd('mceInsertTable'),\n      icon: 'table'\n    });\n    var tableClassList = filterNoneItem(getTableClassList(editor));\n\n    if (tableClassList.length !== 0) {\n      editor.ui.registry.addMenuButton('tableclass', {\n        icon: 'table-classes',\n        tooltip: 'Table styles',\n        fetch: generateMenuItemsCallback(editor, selections, tableClassList, 'tableclass', function (value) {\n          return editor.execCommand('mceTableToggleClass', false, value);\n        }),\n        onSetup: selectionTargets.onSetupTable\n      });\n    }\n\n    var tableCellClassList = filterNoneItem(getCellClassList(editor));\n\n    if (tableCellClassList.length !== 0) {\n      editor.ui.registry.addMenuButton('tablecellclass', {\n        icon: 'table-cell-classes',\n        tooltip: 'Cell styles',\n        fetch: generateMenuItemsCallback(editor, selections, tableCellClassList, 'tablecellclass', function (value) {\n          return editor.execCommand('mceTableCellToggleClass', false, value);\n        }),\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n    }\n\n    editor.ui.registry.addMenuButton('tablecellvalign', {\n      icon: 'vertical-align',\n      tooltip: 'Vertical align',\n      fetch: generateMenuItemsCallback(editor, selections, verticalAlignValues, 'tablecellverticalalign', applyTableCellStyle(editor, 'vertical-align')),\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addMenuButton('tablecellborderwidth', {\n      icon: 'border-width',\n      tooltip: 'Border width',\n      fetch: generateMenuItemsCallback(editor, selections, getTableBorderWidths(editor), 'tablecellborderwidth', applyTableCellStyle(editor, 'border-width')),\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addMenuButton('tablecellborderstyle', {\n      icon: 'border-style',\n      tooltip: 'Border style',\n      fetch: generateMenuItemsCallback(editor, selections, getTableBorderStyles(editor), 'tablecellborderstyle', applyTableCellStyle(editor, 'border-style')),\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addToggleButton('tablecaption', {\n      tooltip: 'Table caption',\n      onAction: cmd('mceTableToggleCaption'),\n      icon: 'table-caption',\n      onSetup: selectionTargets.onSetupTableWithCaption\n    });\n    editor.ui.registry.addMenuButton('tablecellbackgroundcolor', {\n      icon: 'cell-background-color',\n      tooltip: 'Background color',\n      fetch: function fetch(callback) {\n        return callback(buildColorMenu(editor, getTableBackgroundColorMap(editor), 'background-color'));\n      },\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addMenuButton('tablecellbordercolor', {\n      icon: 'cell-border-color',\n      tooltip: 'Border color',\n      fetch: function fetch(callback) {\n        return callback(buildColorMenu(editor, getTableBorderColorMap(editor), 'border-color'));\n      },\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addToggleButton('tablerowheader', {\n      tooltip: 'Row header',\n      icon: 'table-top-header',\n      onAction: changeRowHeader(editor),\n      onSetup: selectionTargets.onSetupTableRowHeaders\n    });\n    editor.ui.registry.addToggleButton('tablecolheader', {\n      tooltip: 'Column header',\n      icon: 'table-left-header',\n      onAction: changeColumnHeader(editor),\n      onSetup: selectionTargets.onSetupTableColumnHeaders\n    });\n  };\n\n  var addToolbars = function addToolbars(editor) {\n    var isTable = function isTable(table) {\n      return editor.dom.is(table, 'table') && editor.getBody().contains(table);\n    };\n\n    var toolbar = getToolbar(editor);\n\n    if (toolbar.length > 0) {\n      editor.ui.registry.addContextToolbar('table', {\n        predicate: isTable,\n        items: toolbar,\n        scope: 'node',\n        position: 'node'\n      });\n    }\n  };\n\n  var addMenuItems = function addMenuItems(editor, selections, selectionTargets, clipboard) {\n    var cmd = function cmd(command) {\n      return function () {\n        return editor.execCommand(command);\n      };\n    };\n\n    var insertTableAction = function insertTableAction(data) {\n      editor.execCommand('mceInsertTable', false, {\n        rows: data.numRows,\n        columns: data.numColumns\n      });\n    };\n\n    var tableProperties = {\n      text: 'Table properties',\n      onSetup: selectionTargets.onSetupTable,\n      onAction: cmd('mceTableProps')\n    };\n    var deleteTable = {\n      text: 'Delete table',\n      icon: 'table-delete-table',\n      onSetup: selectionTargets.onSetupTable,\n      onAction: cmd('mceTableDelete')\n    };\n    editor.ui.registry.addMenuItem('tableinsertrowbefore', {\n      text: 'Insert row before',\n      icon: 'table-insert-row-above',\n      onAction: cmd('mceTableInsertRowBefore'),\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addMenuItem('tableinsertrowafter', {\n      text: 'Insert row after',\n      icon: 'table-insert-row-after',\n      onAction: cmd('mceTableInsertRowAfter'),\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addMenuItem('tabledeleterow', {\n      text: 'Delete row',\n      icon: 'table-delete-row',\n      onAction: cmd('mceTableDeleteRow'),\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addMenuItem('tablerowprops', {\n      text: 'Row properties',\n      icon: 'table-row-properties',\n      onAction: cmd('mceTableRowProps'),\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addMenuItem('tablecutrow', {\n      text: 'Cut row',\n      icon: 'cut-row',\n      onAction: cmd('mceTableCutRow'),\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addMenuItem('tablecopyrow', {\n      text: 'Copy row',\n      icon: 'duplicate-row',\n      onAction: cmd('mceTableCopyRow'),\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addMenuItem('tablepasterowbefore', {\n      text: 'Paste row before',\n      icon: 'paste-row-before',\n      onAction: cmd('mceTablePasteRowBefore'),\n      onSetup: selectionTargets.onSetupPasteable(clipboard.getRows)\n    });\n    editor.ui.registry.addMenuItem('tablepasterowafter', {\n      text: 'Paste row after',\n      icon: 'paste-row-after',\n      onAction: cmd('mceTablePasteRowAfter'),\n      onSetup: selectionTargets.onSetupPasteable(clipboard.getRows)\n    });\n    var row = {\n      type: 'nestedmenuitem',\n      text: 'Row',\n      getSubmenuItems: constant('tableinsertrowbefore tableinsertrowafter tabledeleterow tablerowprops | tablecutrow tablecopyrow tablepasterowbefore tablepasterowafter')\n    };\n    editor.ui.registry.addMenuItem('tableinsertcolumnbefore', {\n      text: 'Insert column before',\n      icon: 'table-insert-column-before',\n      onAction: cmd('mceTableInsertColBefore'),\n      onSetup: selectionTargets.onSetupColumn('onFirst')\n    });\n    editor.ui.registry.addMenuItem('tableinsertcolumnafter', {\n      text: 'Insert column after',\n      icon: 'table-insert-column-after',\n      onAction: cmd('mceTableInsertColAfter'),\n      onSetup: selectionTargets.onSetupColumn('onLast')\n    });\n    editor.ui.registry.addMenuItem('tabledeletecolumn', {\n      text: 'Delete column',\n      icon: 'table-delete-column',\n      onAction: cmd('mceTableDeleteCol'),\n      onSetup: selectionTargets.onSetupColumn('onAny')\n    });\n    editor.ui.registry.addMenuItem('tablecutcolumn', {\n      text: 'Cut column',\n      icon: 'cut-column',\n      onAction: cmd('mceTableCutCol'),\n      onSetup: selectionTargets.onSetupColumn('onAny')\n    });\n    editor.ui.registry.addMenuItem('tablecopycolumn', {\n      text: 'Copy column',\n      icon: 'duplicate-column',\n      onAction: cmd('mceTableCopyCol'),\n      onSetup: selectionTargets.onSetupColumn('onAny')\n    });\n    editor.ui.registry.addMenuItem('tablepastecolumnbefore', {\n      text: 'Paste column before',\n      icon: 'paste-column-before',\n      onAction: cmd('mceTablePasteColBefore'),\n      onSetup: selectionTargets.onSetupPasteableColumn(clipboard.getColumns, 'onFirst')\n    });\n    editor.ui.registry.addMenuItem('tablepastecolumnafter', {\n      text: 'Paste column after',\n      icon: 'paste-column-after',\n      onAction: cmd('mceTablePasteColAfter'),\n      onSetup: selectionTargets.onSetupPasteableColumn(clipboard.getColumns, 'onLast')\n    });\n    var column = {\n      type: 'nestedmenuitem',\n      text: 'Column',\n      getSubmenuItems: constant('tableinsertcolumnbefore tableinsertcolumnafter tabledeletecolumn | tablecutcolumn tablecopycolumn tablepastecolumnbefore tablepastecolumnafter')\n    };\n    editor.ui.registry.addMenuItem('tablecellprops', {\n      text: 'Cell properties',\n      icon: 'table-cell-properties',\n      onAction: cmd('mceTableCellProps'),\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addMenuItem('tablemergecells', {\n      text: 'Merge cells',\n      icon: 'table-merge-cells',\n      onAction: cmd('mceTableMergeCells'),\n      onSetup: selectionTargets.onSetupMergeable\n    });\n    editor.ui.registry.addMenuItem('tablesplitcells', {\n      text: 'Split cell',\n      icon: 'table-split-cells',\n      onAction: cmd('mceTableSplitCells'),\n      onSetup: selectionTargets.onSetupUnmergeable\n    });\n    var cell = {\n      type: 'nestedmenuitem',\n      text: 'Cell',\n      getSubmenuItems: constant('tablecellprops tablemergecells tablesplitcells')\n    };\n\n    if (hasTableGrid(editor) === false) {\n      editor.ui.registry.addMenuItem('inserttable', {\n        text: 'Table',\n        icon: 'table',\n        onAction: cmd('mceInsertTable')\n      });\n    } else {\n      editor.ui.registry.addNestedMenuItem('inserttable', {\n        text: 'Table',\n        icon: 'table',\n        getSubmenuItems: function getSubmenuItems() {\n          return [{\n            type: 'fancymenuitem',\n            fancytype: 'inserttable',\n            onAction: insertTableAction\n          }];\n        }\n      });\n    }\n\n    editor.ui.registry.addMenuItem('inserttabledialog', {\n      text: 'Insert table',\n      icon: 'table',\n      onAction: cmd('mceInsertTable')\n    });\n    editor.ui.registry.addMenuItem('tableprops', tableProperties);\n    editor.ui.registry.addMenuItem('deletetable', deleteTable);\n    editor.ui.registry.addNestedMenuItem('row', row);\n    editor.ui.registry.addNestedMenuItem('column', column);\n    editor.ui.registry.addNestedMenuItem('cell', cell);\n    editor.ui.registry.addContextMenu('table', {\n      update: function update() {\n        selectionTargets.resetTargets();\n        return selectionTargets.targets().fold(constant(''), function (targets) {\n          if (name(targets.element) === 'caption') {\n            return 'tableprops deletetable';\n          } else {\n            return 'cell row column | advtablesort | tableprops deletetable';\n          }\n        });\n      }\n    });\n    var tableClassList = filterNoneItem(getTableClassList(editor));\n\n    if (tableClassList.length !== 0) {\n      editor.ui.registry.addNestedMenuItem('tableclass', {\n        icon: 'table-classes',\n        text: 'Table styles',\n        getSubmenuItems: function getSubmenuItems() {\n          return buildMenuItems(editor, selections, tableClassList, 'tableclass', function (value) {\n            return editor.execCommand('mceTableToggleClass', false, value);\n          });\n        },\n        onSetup: selectionTargets.onSetupTable\n      });\n    }\n\n    var tableCellClassList = filterNoneItem(getCellClassList(editor));\n\n    if (tableCellClassList.length !== 0) {\n      editor.ui.registry.addNestedMenuItem('tablecellclass', {\n        icon: 'table-cell-classes',\n        text: 'Cell styles',\n        getSubmenuItems: function getSubmenuItems() {\n          return buildMenuItems(editor, selections, tableCellClassList, 'tablecellclass', function (value) {\n            return editor.execCommand('mceTableCellToggleClass', false, value);\n          });\n        },\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n    }\n\n    editor.ui.registry.addNestedMenuItem('tablecellvalign', {\n      icon: 'vertical-align',\n      text: 'Vertical align',\n      getSubmenuItems: function getSubmenuItems() {\n        return buildMenuItems(editor, selections, verticalAlignValues, 'tablecellverticalalign', applyTableCellStyle(editor, 'vertical-align'));\n      },\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addNestedMenuItem('tablecellborderwidth', {\n      icon: 'border-width',\n      text: 'Border width',\n      getSubmenuItems: function getSubmenuItems() {\n        return buildMenuItems(editor, selections, getTableBorderWidths(editor), 'tablecellborderwidth', applyTableCellStyle(editor, 'border-width'));\n      },\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addNestedMenuItem('tablecellborderstyle', {\n      icon: 'border-style',\n      text: 'Border style',\n      getSubmenuItems: function getSubmenuItems() {\n        return buildMenuItems(editor, selections, getTableBorderStyles(editor), 'tablecellborderstyle', applyTableCellStyle(editor, 'border-style'));\n      },\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addToggleMenuItem('tablecaption', {\n      icon: 'table-caption',\n      text: 'Table caption',\n      onAction: cmd('mceTableToggleCaption'),\n      onSetup: selectionTargets.onSetupTableWithCaption\n    });\n    editor.ui.registry.addNestedMenuItem('tablecellbackgroundcolor', {\n      icon: 'cell-background-color',\n      text: 'Background color',\n      getSubmenuItems: function getSubmenuItems() {\n        return buildColorMenu(editor, getTableBackgroundColorMap(editor), 'background-color');\n      },\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addNestedMenuItem('tablecellbordercolor', {\n      icon: 'cell-border-color',\n      text: 'Border color',\n      getSubmenuItems: function getSubmenuItems() {\n        return buildColorMenu(editor, getTableBorderColorMap(editor), 'border-color');\n      },\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    editor.ui.registry.addToggleMenuItem('tablerowheader', {\n      text: 'Row header',\n      icon: 'table-top-header',\n      onAction: changeRowHeader(editor),\n      onSetup: selectionTargets.onSetupTableRowHeaders\n    });\n    editor.ui.registry.addToggleMenuItem('tablecolheader', {\n      text: 'Column header',\n      icon: 'table-left-header',\n      onAction: changeColumnHeader(editor),\n      onSetup: selectionTargets.onSetupTableColumnHeaders\n    });\n  };\n\n  var Plugin = function Plugin(editor) {\n    var selections = Selections(function () {\n      return getBody(editor);\n    }, function () {\n      return getSelectionCell(getSelectionStart(editor), getIsRoot(editor));\n    }, ephemera.selectedSelector);\n    var selectionTargets = getSelectionTargets(editor, selections);\n    var resizeHandler = getResizeHandler(editor);\n    var cellSelection = CellSelection(editor, resizeHandler.lazyResize, selectionTargets);\n    var actions = TableActions(editor, cellSelection, resizeHandler.lazyWire);\n    var clipboard = Clipboard();\n    registerCommands(editor, actions, cellSelection, selections, clipboard);\n    registerQueryCommands(editor, actions, selections);\n    registerEvents(editor, selections, actions);\n    addMenuItems(editor, selections, selectionTargets, clipboard);\n    addButtons(editor, selections, selectionTargets, clipboard);\n    addToolbars(editor);\n    editor.on('PreInit', function () {\n      editor.serializer.addTempAttr(ephemera.firstSelected);\n      editor.serializer.addTempAttr(ephemera.lastSelected);\n      registerFormats(editor);\n    });\n\n    if (hasTabNavigation(editor)) {\n      editor.on('keydown', function (e) {\n        handle$1(e, editor, cellSelection);\n      });\n    }\n\n    editor.on('remove', function () {\n      resizeHandler.destroy();\n    });\n    return getApi(editor, clipboard, resizeHandler, selectionTargets);\n  };\n\n  function Plugin$1() {\n    global$3.add('table', Plugin);\n  }\n\n  Plugin$1();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/table/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/tinymce/plugins/table/index.js");
/******/ 	
/******/ })()
;