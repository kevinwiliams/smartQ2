/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/table/plugin.min.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/table/plugin.min.js ***!
  \**********************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n!function () {\n  \"use strict\";\n\n  function e(r) {\n    return function (e) {\n      return t = _typeof(n = e), (null === n ? \"null\" : \"object\" == t && (Array.prototype.isPrototypeOf(n) || n.constructor && \"Array\" === n.constructor.name) ? \"array\" : \"object\" == t && (String.prototype.isPrototypeOf(n) || n.constructor && \"String\" === n.constructor.name) ? \"string\" : t) === r;\n      var n, t;\n    };\n  }\n\n  function n(n) {\n    return function (e) {\n      return _typeof(e) === n;\n    };\n  }\n\n  function t(n) {\n    return function (e) {\n      return n === e;\n    };\n  }\n\n  function l(e) {\n    return !(null == e);\n  }\n\n  function E() {}\n\n  function C(e) {\n    return function () {\n      return e;\n    };\n  }\n\n  function S(e) {\n    return e;\n  }\n\n  function r(e, n) {\n    return e === n;\n  }\n\n  var T = e(\"string\"),\n      g = e(\"object\"),\n      a = e(\"array\"),\n      h = t(null),\n      o = n(\"boolean\"),\n      u = t(void 0),\n      c = n(\"function\"),\n      f = n(\"number\");\n\n  function P(r) {\n    for (var o = [], e = 1; e < arguments.length; e++) {\n      o[e - 1] = arguments[e];\n    }\n\n    return function () {\n      for (var e = [], n = 0; n < arguments.length; n++) {\n        e[n] = arguments[n];\n      }\n\n      var t = o.concat(e);\n      return r.apply(null, t);\n    };\n  }\n\n  function p(n) {\n    return function (e) {\n      return !n(e);\n    };\n  }\n\n  function i() {\n    return s;\n  }\n\n  var v = C(!1),\n      x = C(!0),\n      s = {\n    fold: function fold(e, n) {\n      return e();\n    },\n    isSome: v,\n    isNone: x,\n    getOr: S,\n    getOrThunk: m,\n    getOrDie: function getOrDie(e) {\n      throw new Error(e || \"error: getOrDie called on none.\");\n    },\n    getOrNull: C(null),\n    getOrUndefined: C(void 0),\n    or: S,\n    orThunk: m,\n    map: i,\n    each: E,\n    bind: i,\n    exists: v,\n    forall: x,\n    filter: function filter() {\n      return s;\n    },\n    toArray: function toArray() {\n      return [];\n    },\n    toString: C(\"none()\")\n  };\n\n  function m(e) {\n    return e();\n  }\n\n  function y(e, n) {\n    return -1 < G.call(e, n);\n  }\n\n  function R(e, n) {\n    for (var t = 0, r = e.length; t < r; t++) {\n      if (n(e[t], t)) return !0;\n    }\n\n    return !1;\n  }\n\n  function D(e, n) {\n    for (var t = [], r = 0; r < e; r++) {\n      t.push(n(r));\n    }\n\n    return t;\n  }\n\n  function O(e, n) {\n    for (var t = e.length, r = new Array(t), o = 0; o < t; o++) {\n      var u = e[o];\n      r[o] = n(u, o);\n    }\n\n    return r;\n  }\n\n  function A(e, n) {\n    for (var t = 0, r = e.length; t < r; t++) {\n      n(e[t], t);\n    }\n  }\n\n  function d(e, n) {\n    for (var t = [], r = [], o = 0, u = e.length; o < u; o++) {\n      var i = e[o];\n      (n(i, o) ? t : r).push(i);\n    }\n\n    return {\n      pass: t,\n      fail: r\n    };\n  }\n\n  function k(e, n) {\n    for (var t = [], r = 0, o = e.length; r < o; r++) {\n      var u = e[r];\n      n(u, r) && t.push(u);\n    }\n\n    return t;\n  }\n\n  function I(e, r, o) {\n    return function (e) {\n      for (var n, t = e.length - 1; 0 <= t; t--) {\n        n = e[t], o = r(o, n, t);\n      }\n    }(e), o;\n  }\n\n  function B(e, t, r) {\n    return A(e, function (e, n) {\n      r = t(r, e, n);\n    }), r;\n  }\n\n  function w(e, n) {\n    return function (e, n, t) {\n      for (var r = 0, o = e.length; r < o; r++) {\n        var u = e[r];\n        if (n(u, r)) return q.some(u);\n        if (t(u, r)) break;\n      }\n\n      return q.none();\n    }(e, n, v);\n  }\n\n  function b(e, n) {\n    for (var t = 0, r = e.length; t < r; t++) {\n      if (n(e[t], t)) return q.some(t);\n    }\n\n    return q.none();\n  }\n\n  function M(e) {\n    for (var n = [], t = 0, r = e.length; t < r; ++t) {\n      if (!a(e[t])) throw new Error(\"Arr.flatten item \" + t + \" was not an array, input: \" + e);\n      $.apply(n, e[t]);\n    }\n\n    return n;\n  }\n\n  function N(e, n) {\n    return M(O(e, n));\n  }\n\n  function z(e, n) {\n    for (var t = 0, r = e.length; t < r; ++t) {\n      if (!0 !== n(e[t], t)) return !1;\n    }\n\n    return !0;\n  }\n\n  function L(e, n) {\n    for (var t = {}, r = 0, o = e.length; r < o; r++) {\n      var u = e[r];\n      t[String(u)] = n(u, r);\n    }\n\n    return t;\n  }\n\n  function _(e) {\n    return [e];\n  }\n\n  function W(e, n) {\n    return 0 <= n && n < e.length ? q.some(e[n]) : q.none();\n  }\n\n  function j(e) {\n    return W(e, 0);\n  }\n\n  function F(e) {\n    return W(e, e.length - 1);\n  }\n\n  function H(e, n) {\n    for (var t = 0; t < e.length; t++) {\n      var r = n(e[t], t);\n      if (r.isSome()) return r;\n    }\n\n    return q.none();\n  }\n\n  var V = function V(t) {\n    function e() {\n      return o;\n    }\n\n    function n(e) {\n      return e(t);\n    }\n\n    var r = C(t),\n        o = {\n      fold: function fold(e, n) {\n        return n(t);\n      },\n      isSome: x,\n      isNone: v,\n      getOr: r,\n      getOrThunk: r,\n      getOrDie: r,\n      getOrNull: r,\n      getOrUndefined: r,\n      or: e,\n      orThunk: e,\n      map: function map(e) {\n        return V(e(t));\n      },\n      each: function each(e) {\n        e(t);\n      },\n      bind: n,\n      exists: n,\n      forall: n,\n      filter: function filter(e) {\n        return e(t) ? o : s;\n      },\n      toArray: function toArray() {\n        return [t];\n      },\n      toString: function toString() {\n        return \"some(\" + t + \")\";\n      }\n    };\n    return o;\n  },\n      q = {\n    some: V,\n    none: i,\n    from: function from(e) {\n      return null == e ? s : V(e);\n    }\n  },\n      U = Array.prototype.slice,\n      G = Array.prototype.indexOf,\n      $ = Array.prototype.push,\n      _K = function K() {\n    return (_K = Object.assign || function (e) {\n      for (var n, t = 1, r = arguments.length; t < r; t++) {\n        for (var o in n = arguments[t]) {\n          Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);\n        }\n      }\n\n      return e;\n    }).apply(this, arguments);\n  };\n\n  function X(e, n, t) {\n    if (t || 2 === arguments.length) for (var r, o = 0, u = n.length; o < u; o++) {\n      !r && o in n || ((r = r || Array.prototype.slice.call(n, 0, o))[o] = n[o]);\n    }\n    return e.concat(r || Array.prototype.slice.call(n));\n  }\n\n  function Y(t) {\n    var r,\n        o = !1;\n    return function () {\n      for (var e = [], n = 0; n < arguments.length; n++) {\n        e[n] = arguments[n];\n      }\n\n      return o || (o = !0, r = t.apply(null, e)), r;\n    };\n  }\n\n  function J(e, n) {\n    var t = String(n).toLowerCase();\n    return w(e, function (e) {\n      return e.search(t);\n    });\n  }\n\n  function Q(e, n, t) {\n    return \"\" === n || e.length >= n.length && e.substr(t, t + n.length) === n;\n  }\n\n  function Z(e, n) {\n    return -1 !== e.indexOf(n);\n  }\n\n  function ee(e, n) {\n    return Q(e, n, e.length - n.length);\n  }\n\n  function ne(e) {\n    return 0 < e.length;\n  }\n\n  function te(n) {\n    return function (e) {\n      return Z(e, n);\n    };\n  }\n\n  function re(e) {\n    return window.matchMedia(e).matches;\n  }\n\n  function oe(e, n) {\n    var t = e.dom;\n    if (1 !== t.nodeType) return !1;\n    var r = t;\n    if (void 0 !== r.matches) return r.matches(n);\n    if (void 0 !== r.msMatchesSelector) return r.msMatchesSelector(n);\n    if (void 0 !== r.webkitMatchesSelector) return r.webkitMatchesSelector(n);\n    if (void 0 !== r.mozMatchesSelector) return r.mozMatchesSelector(n);\n    throw new Error(\"Browser lacks native selectors\");\n  }\n\n  function ue(e) {\n    return 1 !== e.nodeType && 9 !== e.nodeType && 11 !== e.nodeType || 0 === e.childElementCount;\n  }\n\n  function ie(e, n) {\n    var t = void 0 === n ? document : n.dom;\n    return ue(t) ? q.none() : q.from(t.querySelector(e)).map(Ve.fromDom);\n  }\n\n  function ce(e, n) {\n    return e.dom === n.dom;\n  }\n\n  function le(e, n) {\n    return He().browser.isIE() ? (t = e.dom, r = n.dom, o = Node.DOCUMENT_POSITION_CONTAINED_BY, 0 != (t.compareDocumentPosition(r) & o)) : (u = e.dom) !== (i = n.dom) && u.contains(i);\n    var t, r, o, u, i;\n  }\n\n  function ae(e, n) {\n    for (var t = Ue(e), r = 0, o = t.length; r < o; r++) {\n      var u = t[r];\n      n(e[u], u);\n    }\n  }\n\n  function fe(e, t) {\n    return $e(e, function (e, n) {\n      return {\n        k: n,\n        v: t(e, n)\n      };\n    });\n  }\n\n  function se(e, n) {\n    var t = {},\n        r = n,\n        o = t,\n        u = function u(e, n) {\n      o[n] = e;\n    },\n        i = E;\n\n    return ae(e, function (e, n) {\n      (r(e, n) ? u : i)(e, n);\n    }), t;\n  }\n\n  function me(e, t) {\n    var r = [];\n    return ae(e, function (e, n) {\n      r.push(t(e, n));\n    }), r;\n  }\n\n  function de(e) {\n    return me(e, S);\n  }\n\n  function ge(e) {\n    return Ue(e).length;\n  }\n\n  function pe(e, n) {\n    return Ke(e, n) ? q.from(e[n]) : q.none();\n  }\n\n  function be(e, n) {\n    return Ke(e, n) && void 0 !== e[n] && null !== e[n];\n  }\n\n  function he(e, n, t) {\n    return {\n      element: e,\n      rowspan: n,\n      colspan: t\n    };\n  }\n\n  function ve(e, n, t) {\n    return {\n      element: e,\n      cells: n,\n      section: t\n    };\n  }\n\n  function we(e, n, t) {\n    return {\n      element: e,\n      isNew: n,\n      isLocked: t\n    };\n  }\n\n  function ye(e, n, t, r) {\n    return {\n      element: e,\n      cells: n,\n      section: t,\n      isNew: r\n    };\n  }\n\n  function Ce() {\n    return De(0, 0);\n  }\n\n  function Se(e) {\n    function n(e) {\n      return function () {\n        return t === e;\n      };\n    }\n\n    var t = e.current,\n        r = e.version;\n    return {\n      current: t,\n      version: r,\n      isEdge: n(\"Edge\"),\n      isChrome: n(\"Chrome\"),\n      isIE: n(\"IE\"),\n      isOpera: n(\"Opera\"),\n      isFirefox: n(Me),\n      isSafari: n(\"Safari\")\n    };\n  }\n\n  function Te(e) {\n    function n(e) {\n      return function () {\n        return t === e;\n      };\n    }\n\n    var t = e.current,\n        r = e.version;\n    return {\n      current: t,\n      version: r,\n      isWindows: n(Ne),\n      isiOS: n(\"iOS\"),\n      isAndroid: n(ze),\n      isOSX: n(\"OSX\"),\n      isLinux: n(\"Linux\"),\n      isSolaris: n(Le),\n      isFreeBSD: n(_e),\n      isChromeOS: n(We)\n    };\n  }\n\n  function xe(e) {\n    if (null == e) throw new Error(\"Node cannot be null or undefined\");\n    return {\n      dom: e\n    };\n  }\n\n  var Re,\n      De = function De(e, n) {\n    return {\n      major: e,\n      minor: n\n    };\n  },\n      Oe = {\n    nu: De,\n    detect: function detect(e, n) {\n      var t,\n          r,\n          o = String(n).toLowerCase();\n      return 0 === e.length ? Ce() : (r = function (e, n) {\n        for (var t = 0; t < e.length; t++) {\n          var r = e[t];\n          if (r.test(n)) return r;\n        }\n      }(e, t = o)) ? De(u(1), u(2)) : {\n        major: 0,\n        minor: 0\n      };\n\n      function u(e) {\n        return Number(t.replace(r, \"$\" + e));\n      }\n    },\n    unknown: Ce\n  },\n      Ae = function Ae(e, n) {\n    return Q(e, n, 0);\n  },\n      ke = (Re = /^\\s+|\\s+$/g, function (e) {\n    return e.replace(Re, \"\");\n  }),\n      Ie = /.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/,\n      Be = {\n    browsers: C([{\n      name: \"Edge\",\n      versionRegexes: [/.*?edge\\/ ?([0-9]+)\\.([0-9]+)$/],\n      search: function search(e) {\n        return Z(e, \"edge/\") && Z(e, \"chrome\") && Z(e, \"safari\") && Z(e, \"applewebkit\");\n      }\n    }, {\n      name: \"Chrome\",\n      brand: \"Chromium\",\n      versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/, Ie],\n      search: function search(e) {\n        return Z(e, \"chrome\") && !Z(e, \"chromeframe\");\n      }\n    }, {\n      name: \"IE\",\n      versionRegexes: [/.*?msie\\ ?([0-9]+)\\.([0-9]+).*/, /.*?rv:([0-9]+)\\.([0-9]+).*/],\n      search: function search(e) {\n        return Z(e, \"msie\") || Z(e, \"trident\");\n      }\n    }, {\n      name: \"Opera\",\n      versionRegexes: [Ie, /.*?opera\\/([0-9]+)\\.([0-9]+).*/],\n      search: te(\"opera\")\n    }, {\n      name: \"Firefox\",\n      versionRegexes: [/.*?firefox\\/\\ ?([0-9]+)\\.([0-9]+).*/],\n      search: te(\"firefox\")\n    }, {\n      name: \"Safari\",\n      versionRegexes: [Ie, /.*?cpu os ([0-9]+)_([0-9]+).*/],\n      search: function search(e) {\n        return (Z(e, \"safari\") || Z(e, \"mobile/\")) && Z(e, \"applewebkit\");\n      }\n    }]),\n    oses: C([{\n      name: \"Windows\",\n      search: te(\"win\"),\n      versionRegexes: [/.*?windows\\ nt\\ ?([0-9]+)\\.([0-9]+).*/]\n    }, {\n      name: \"iOS\",\n      search: function search(e) {\n        return Z(e, \"iphone\") || Z(e, \"ipad\");\n      },\n      versionRegexes: [/.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/, /.*cpu os ([0-9]+)_([0-9]+).*/, /.*cpu iphone os ([0-9]+)_([0-9]+).*/]\n    }, {\n      name: \"Android\",\n      search: te(\"android\"),\n      versionRegexes: [/.*?android\\ ?([0-9]+)\\.([0-9]+).*/]\n    }, {\n      name: \"OSX\",\n      search: te(\"mac os x\"),\n      versionRegexes: [/.*?mac\\ os\\ x\\ ?([0-9]+)_([0-9]+).*/]\n    }, {\n      name: \"Linux\",\n      search: te(\"linux\"),\n      versionRegexes: []\n    }, {\n      name: \"Solaris\",\n      search: te(\"sunos\"),\n      versionRegexes: []\n    }, {\n      name: \"FreeBSD\",\n      search: te(\"freebsd\"),\n      versionRegexes: []\n    }, {\n      name: \"ChromeOS\",\n      search: te(\"cros\"),\n      versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/]\n    }])\n  },\n      Me = \"Firefox\",\n      Ee = function Ee() {\n    return Se({\n      current: void 0,\n      version: Oe.unknown()\n    });\n  },\n      Pe = Se,\n      Ne = (C(\"Edge\"), C(\"Chrome\"), C(\"IE\"), C(\"Opera\"), C(Me), C(\"Safari\"), \"Windows\"),\n      ze = \"Android\",\n      Le = \"Solaris\",\n      _e = \"FreeBSD\",\n      We = \"ChromeOS\",\n      je = function je() {\n    return Te({\n      current: void 0,\n      version: Oe.unknown()\n    });\n  },\n      Fe = Te,\n      He = (C(Ne), C(\"iOS\"), C(ze), C(\"Linux\"), C(\"OSX\"), C(Le), C(_e), C(We), Y(function () {\n    return e = navigator.userAgent, n = q.from(navigator.userAgentData), t = re, p = Be.browsers(), b = Be.oses(), h = n.bind(function (e) {\n      return r = p, H(e.brands, function (n) {\n        var t = n.brand.toLowerCase();\n        return w(r, function (e) {\n          var n;\n          return t === (null === (n = e.brand) || void 0 === n ? void 0 : n.toLowerCase());\n        }).map(function (e) {\n          return {\n            current: e.name,\n            version: Oe.nu(parseInt(n.version, 10), 0)\n          };\n        });\n      });\n      var r;\n    }).orThunk(function () {\n      return J(p, t = e).map(function (e) {\n        var n = Oe.detect(e.versionRegexes, t);\n        return {\n          current: e.name,\n          version: n\n        };\n      });\n      var t;\n    }).fold(Ee, Pe), v = J(b, r = e).map(function (e) {\n      var n = Oe.detect(e.versionRegexes, r);\n      return {\n        current: e.name,\n        version: n\n      };\n    }).fold(je, Fe), {\n      browser: h,\n      os: v,\n      deviceType: (u = h, i = e, c = t, l = (o = v).isiOS() && !0 === /ipad/i.test(i), a = o.isiOS() && !l, s = (f = o.isiOS() || o.isAndroid()) || c(\"(pointer:coarse)\"), m = l || !a && f && c(\"(min-device-width:768px)\"), d = a || f && !m, g = u.isSafari() && o.isiOS() && !1 === /safari/i.test(i), {\n        isiPad: C(l),\n        isiPhone: C(a),\n        isTablet: C(m),\n        isPhone: C(d),\n        isTouch: C(s),\n        isAndroid: o.isAndroid,\n        isiOS: o.isiOS,\n        isWebView: C(g),\n        isDesktop: C(!d && !m && !g)\n      })\n    };\n    var e, n, t, r, o, u, i, c, l, a, f, s, m, d, g, p, b, h, v;\n  })),\n      Ve = {\n    fromHtml: function fromHtml(e, n) {\n      var t = (n || document).createElement(\"div\");\n      if (t.innerHTML = e, !t.hasChildNodes() || 1 < t.childNodes.length) throw console.error(\"HTML does not have a single root node\", e), new Error(\"HTML must have a single root node\");\n      return xe(t.childNodes[0]);\n    },\n    fromTag: function fromTag(e, n) {\n      var t = (n || document).createElement(e);\n      return xe(t);\n    },\n    fromText: function fromText(e, n) {\n      var t = (n || document).createTextNode(e);\n      return xe(t);\n    },\n    fromDom: xe,\n    fromPoint: function fromPoint(e, n, t) {\n      return q.from(e.dom.elementFromPoint(n, t)).map(xe);\n    }\n  },\n      qe = oe,\n      Ue = Object.keys,\n      Ge = Object.hasOwnProperty,\n      $e = function $e(e, r) {\n    var o = {};\n    return ae(e, function (e, n) {\n      var t = r(e, n);\n      o[t.k] = t.v;\n    }), o;\n  },\n      Ke = function Ke(e, n) {\n    return Ge.call(e, n);\n  },\n      Xe = [\"tfoot\", \"thead\", \"tbody\", \"colgroup\"];\n\n  function Ye(e) {\n    return e.dom.nodeName.toLowerCase();\n  }\n\n  function Je(e) {\n    return e.dom.nodeType;\n  }\n\n  function Qe(n) {\n    return function (e) {\n      return Je(e) === n;\n    };\n  }\n\n  function Ze(e) {\n    return 8 === Je(e) || \"#comment\" === Ye(e);\n  }\n\n  function en(n) {\n    return function (e) {\n      return gn(e) && Ye(e) === n;\n    };\n  }\n\n  function nn(e) {\n    return Ve.fromDom(e.dom.ownerDocument);\n  }\n\n  function tn(e) {\n    return bn(e) ? e : nn(e);\n  }\n\n  function rn(e) {\n    return q.from(e.dom.parentNode).map(Ve.fromDom);\n  }\n\n  function on(e, n) {\n    for (var t = c(n) ? n : v, r = e.dom, o = []; null !== r.parentNode && void 0 !== r.parentNode;) {\n      var u = r.parentNode,\n          i = Ve.fromDom(u);\n      if (o.push(i), !0 === t(i)) break;\n      r = u;\n    }\n\n    return o;\n  }\n\n  function un(e) {\n    return q.from(e.dom.previousSibling).map(Ve.fromDom);\n  }\n\n  function cn(e) {\n    return q.from(e.dom.nextSibling).map(Ve.fromDom);\n  }\n\n  function ln(e) {\n    return O(e.dom.childNodes, Ve.fromDom);\n  }\n\n  function an(e, n) {\n    var t = e.dom.childNodes;\n    return q.from(t[n]).map(Ve.fromDom);\n  }\n\n  function fn(e) {\n    return Ve.fromDom(e.dom.host);\n  }\n\n  function sn(e, n, t) {\n    return r = function r(e) {\n      return oe(e, n);\n    }, k(on(e, t), r);\n    var r;\n  }\n\n  function mn(e, n) {\n    return t = function t(e) {\n      return oe(e, n);\n    }, k(ln(e), t);\n    var t;\n  }\n\n  function dn(e, n) {\n    return ue(t = void 0 === e ? document : e.dom) ? [] : O(t.querySelectorAll(n), Ve.fromDom);\n    var t;\n  }\n\n  \"undefined\" != typeof window || Function(\"return this;\")();\n\n  var gn = Qe(1),\n      pn = Qe(3),\n      bn = Qe(9),\n      hn = Qe(11),\n      vn = c(Element.prototype.attachShadow) && c(Node.prototype.getRootNode),\n      wn = C(vn),\n      yn = vn ? function (e) {\n    return Ve.fromDom(e.dom.getRootNode());\n  } : tn,\n      Cn = function Cn(e) {\n    return l(e.dom.shadowRoot);\n  },\n      Sn = function Sn(e) {\n    var n = pn(e) ? e.dom.parentNode : e.dom;\n    if (null == n || null === n.ownerDocument) return !1;\n    var t,\n        r,\n        o,\n        u,\n        i,\n        c = n.ownerDocument;\n    return o = Ve.fromDom(n), i = yn(o), (hn(u = i) && l(u.dom.host) ? q.some(i) : q.none()).fold(function () {\n      return c.body.contains(n);\n    }, (t = Sn, r = fn, function (e) {\n      return t(r(e));\n    }));\n  },\n      Tn = function Tn(e) {\n    var n = e.dom.body;\n    if (null == n) throw new Error(\"Body is not available yet\");\n    return Ve.fromDom(n);\n  },\n      xn = function xn(e, n) {\n    var t = [];\n    return A(ln(e), function (e) {\n      t = (t = n(e) ? t.concat([e]) : t).concat(xn(e, n));\n    }), t;\n  };\n\n  function Rn(e, n, t, r, o) {\n    return e(t, r) ? q.some(t) : c(o) && o(t) ? q.none() : n(t, r, o);\n  }\n\n  function Dn(e, n, t) {\n    for (var r = e.dom, o = c(t) ? t : v; r.parentNode;) {\n      var r = r.parentNode,\n          u = Ve.fromDom(r);\n      if (n(u)) return q.some(u);\n      if (o(u)) break;\n    }\n\n    return q.none();\n  }\n\n  function On(e, n, t) {\n    return Dn(e, function (e) {\n      return oe(e, n);\n    }, t);\n  }\n\n  function An(e, n) {\n    return t = function t(e) {\n      return oe(e, n);\n    }, w(e.dom.childNodes, function (e) {\n      return t(Ve.fromDom(e));\n    }).map(Ve.fromDom);\n    var t;\n  }\n\n  function kn(e, n) {\n    return ie(n, e);\n  }\n\n  function In(e, n, t) {\n    return Rn(oe, On, e, n, t);\n  }\n\n  function Bn(e, n, t) {\n    if (!(T(t) || o(t) || f(t))) throw console.error(\"Invalid call to Attribute.set. Key \", n, \":: Value \", t, \":: Element \", e), new Error(\"Attribute value was not simple\");\n    e.setAttribute(n, t + \"\");\n  }\n\n  function Mn(e, n, t) {\n    Bn(e.dom, n, t);\n  }\n\n  function En(e, n) {\n    var t = e.dom;\n    ae(n, function (e, n) {\n      Bn(t, n, e);\n    });\n  }\n\n  function Pn(e, n) {\n    var t = e.dom.getAttribute(n);\n    return null === t ? void 0 : t;\n  }\n\n  function Nn(e, n) {\n    return q.from(Pn(e, n));\n  }\n\n  function zn(e) {\n    return B(e.dom.attributes, function (e, n) {\n      return e[n.name] = n.value, e;\n    }, {});\n  }\n\n  function Ln(e, n, t) {\n    return void 0 === t && (t = r), e.exists(function (e) {\n      return t(e, n);\n    });\n  }\n\n  function _n(e) {\n    for (var n = [], t = function t(e) {\n      n.push(e);\n    }, r = 0; r < e.length; r++) {\n      e[r].each(t);\n    }\n\n    return n;\n  }\n\n  function Wn(e, n, t) {\n    return e.isSome() && n.isSome() ? q.some(t(e.getOrDie(), n.getOrDie())) : q.none();\n  }\n\n  function jn(e, n) {\n    return e ? q.some(n) : q.none();\n  }\n\n  function Fn(e) {\n    return void 0 !== e.style && c(e.style.getPropertyValue);\n  }\n\n  function Hn(e, n, t) {\n    if (!T(t)) throw console.error(\"Invalid call to CSS.set. Property \", n, \":: Value \", t, \":: Element \", e), new Error(\"CSS value must be a string: \" + t);\n    Fn(e) && e.style.setProperty(n, t);\n  }\n\n  function Vn(e, n, t) {\n    Hn(e.dom, n, t);\n  }\n\n  function qn(e, n) {\n    var t = e.dom;\n    ae(n, function (e, n) {\n      Hn(t, n, e);\n    });\n  }\n\n  function Un(e, n) {\n    var t = e.dom,\n        r = window.getComputedStyle(t).getPropertyValue(n);\n    return \"\" !== r || Sn(e) ? r : jt(t, n);\n  }\n\n  function Gn(e, n) {\n    var t = e.dom,\n        r = jt(t, n);\n    return q.from(r).filter(function (e) {\n      return 0 < e.length;\n    });\n  }\n\n  function $n(e, n) {\n    var t,\n        r = n;\n    Fn(t = e.dom) && t.style.removeProperty(r), Ln(Nn(e, \"style\").map(ke), \"\") && Wt(e, \"style\");\n  }\n\n  function Kn(e, n, t) {\n    return void 0 === t && (t = 0), Nn(e, n).map(function (e) {\n      return parseInt(e, 10);\n    }).getOr(t);\n  }\n\n  function Xn(e, n) {\n    return Kn(e, n, 1);\n  }\n\n  function Yn(e) {\n    return en(\"col\")(e) ? 1 < Kn(e, \"span\", 1) : 1 < Xn(e, \"colspan\");\n  }\n\n  function Jn(e) {\n    return 1 < Xn(e, \"rowspan\");\n  }\n\n  function Qn(e, n) {\n    return parseInt(Un(e, n), 10);\n  }\n\n  function Zn(e, n) {\n    return Vt(e, n, x);\n  }\n\n  function et(e, n) {\n    return t = [\"td\", \"th\"], (o = void 0 === (o = n) ? v : n)(r = e) ? q.none() : y(t, Ye(r)) ? q.some(r) : On(r, t.join(\",\"), function (e) {\n      return oe(e, \"table\") || o(e);\n    });\n    var t, r, o;\n  }\n\n  function nt(e) {\n    return Zn(e, \"th,td\");\n  }\n\n  function tt(e) {\n    return oe(e, \"colgroup\") ? mn(e, \"col\") : N(qt(e), function (e) {\n      return mn(e, \"col\");\n    });\n  }\n\n  function rt(e, n) {\n    return In(e, \"table\", n);\n  }\n\n  function ot(e) {\n    return Zn(e, \"tr\");\n  }\n\n  function ut(e, t) {\n    return O(e, function (e) {\n      if (\"colgroup\" !== Ye(e)) return ve(e, n = O(nt(e), function (e) {\n        return he(e, Kn(e, \"rowspan\", 1), Kn(e, \"colspan\", 1));\n      }), t(e));\n      var n = O(tt(e), function (e) {\n        return he(e, 1, Kn(e, \"span\", 1));\n      });\n      return ve(e, n, \"colgroup\");\n    });\n  }\n\n  function it(e) {\n    return rn(e).map(function (e) {\n      var n = Ye(e);\n      return y(Xe, n) ? n : \"tbody\";\n    }).getOr(\"tbody\");\n  }\n\n  function ct(e) {\n    var n = ot(e);\n    return ut(X(X([], qt(e), !0), n, !0), it);\n  }\n\n  function lt(e, n, t) {\n    var r = e.cells,\n        o = r.slice(0, n),\n        u = r.slice(n),\n        i = o.concat(t).concat(u);\n    return Ut(e, i);\n  }\n\n  function at(e, n, t) {\n    return lt(e, n, [t]);\n  }\n\n  function ft(e, n, t) {\n    e.cells[n] = t;\n  }\n\n  function st(e, n) {\n    return e.cells[n];\n  }\n\n  function mt(e, n) {\n    return st(e, n).element;\n  }\n\n  function dt(e) {\n    return e.cells.length;\n  }\n\n  function gt(e) {\n    var n = d(e, function (e) {\n      return \"colgroup\" === e.section;\n    });\n    return {\n      rows: n.fail,\n      cols: n.pass\n    };\n  }\n\n  function pt(e, n, t) {\n    var r = O(e.cells, t);\n    return ye(n(e.element), r, e.section, !0);\n  }\n\n  function bt(e) {\n    return Nn(e, Gt).bind(function (e) {\n      return q.from(e.match(/\\d+/g));\n    }).map(function (e) {\n      return L(e, x);\n    });\n  }\n\n  function ht(e) {\n    var n,\n        t = me(B(gt(e).rows, function (t, e) {\n      return A(e.cells, function (e, n) {\n        e.isLocked && (t[n] = !0);\n      }), t;\n    }, {}), function (e, n) {\n      return parseInt(n, 10);\n    });\n    return (n = U.call(t, 0)).sort(void 0), n;\n  }\n\n  function vt(e) {\n    var l = {},\n        n = [],\n        a = j(e).map(function (e) {\n      return e.element;\n    }).bind(rt).bind(bt).getOr({}),\n        t = 0,\n        f = 0,\n        s = 0,\n        r = d(e, function (e) {\n      return \"colgroup\" === e.section;\n    }),\n        o = r.pass;\n    A(r.fail, function (e) {\n      var c = [];\n      A(e.cells, function (e) {\n        for (var n = 0; void 0 !== l[s + \",\" + n];) {\n          n++;\n        }\n\n        for (var t = be(a, n.toString()), r = {\n          element: e.element,\n          rowspan: e.rowspan,\n          colspan: e.colspan,\n          row: s,\n          column: n,\n          isLocked: t\n        }, o = 0; o < e.colspan; o++) {\n          for (var u = 0; u < e.rowspan; u++) {\n            var i = n + o;\n            l[s + u + \",\" + i] = r, f = Math.max(f, i + 1);\n          }\n        }\n\n        c.push(r);\n      }), t++, n.push(ve(e.element, c, e.section)), s++;\n    });\n    var u = F(o).map(function (e) {\n      var o,\n          u,\n          n = (o = {}, u = 0, A(e.cells, function (t) {\n        var r = t.colspan;\n        D(r, function (e) {\n          var n = u + e;\n          o[n] = {\n            element: t.element,\n            colspan: r,\n            column: n\n          };\n        }), u += r;\n      }), o);\n      return {\n        colgroups: [{\n          element: e.element,\n          columns: de(n)\n        }],\n        columns: n\n      };\n    }).getOrThunk(function () {\n      return {\n        colgroups: [],\n        columns: {}\n      };\n    }),\n        i = u.columns,\n        c = u.colgroups;\n    return {\n      grid: {\n        rows: t,\n        columns: f\n      },\n      access: l,\n      all: n,\n      columns: i,\n      colgroups: c\n    };\n  }\n\n  function wt(e, n) {\n    var t = n.column,\n        r = n.column + n.colspan - 1,\n        o = n.row,\n        u = n.row + n.rowspan - 1;\n    return t <= e.finishCol && r >= e.startCol && o <= e.finishRow && u >= e.startRow;\n  }\n\n  function yt(e, n) {\n    return n.column >= e.startCol && n.column + n.colspan - 1 <= e.finishCol && n.row >= e.startRow && n.row + n.rowspan - 1 <= e.finishRow;\n  }\n\n  function Ct(e, n, t) {\n    var r = $t.findItem(e, n, ce),\n        o = $t.findItem(e, t, ce);\n    return r.bind(function (r) {\n      return o.map(function (e) {\n        return n = r, t = e, {\n          startRow: Math.min(n.row, t.row),\n          startCol: Math.min(n.column, t.column),\n          finishRow: Math.max(n.row + n.rowspan - 1, t.row + t.rowspan - 1),\n          finishCol: Math.max(n.column + n.colspan - 1, t.column + t.colspan - 1)\n        };\n        var n, t;\n      });\n    });\n  }\n\n  function St(n, e, t) {\n    return Ct(n, e, t).map(function (e) {\n      return O($t.filterItems(n, P(wt, e)), function (e) {\n        return e.element;\n      });\n    });\n  }\n\n  function Tt(e, n) {\n    return $t.findItem(e, n, function (e, n) {\n      return le(n, e);\n    }).map(function (e) {\n      return e.element;\n    });\n  }\n\n  function xt(e, n, t, r, o) {\n    var u = Kt(e),\n        i = ce(e, t) ? q.some(n) : Tt(u, n),\n        c = ce(e, o) ? q.some(r) : Tt(u, r);\n    return i.bind(function (n) {\n      return c.bind(function (e) {\n        return St(u, n, e);\n      });\n    });\n  }\n\n  function Rt(n, t) {\n    rn(n).each(function (e) {\n      e.dom.insertBefore(t.dom, n.dom);\n    });\n  }\n\n  function Dt(e, n) {\n    cn(e).fold(function () {\n      rn(e).each(function (e) {\n        Xt(e, n);\n      });\n    }, function (e) {\n      Rt(e, n);\n    });\n  }\n\n  function Ot(n, t) {\n    an(n, 0).fold(function () {\n      Xt(n, t);\n    }, function (e) {\n      n.dom.insertBefore(t.dom, e.dom);\n    });\n  }\n\n  function At(e, n) {\n    Rt(e, n), Xt(n, e);\n  }\n\n  function kt(t, r) {\n    A(r, function (e, n) {\n      Dt(0 === n ? t : r[n - 1], e);\n    });\n  }\n\n  function It(n, e) {\n    A(e, function (e) {\n      Xt(n, e);\n    });\n  }\n\n  function Bt(e) {\n    e.dom.textContent = \"\", A(ln(e), function (e) {\n      Yt(e);\n    });\n  }\n\n  function Mt(e) {\n    var n,\n        t = ln(e);\n    0 < t.length && (n = e, A(t, function (e) {\n      Rt(n, e);\n    })), Yt(e);\n  }\n\n  function Et(e) {\n    return Jt.get(e);\n  }\n\n  function Pt(e) {\n    return Jt.getOption(e);\n  }\n\n  function Nt(e, n) {\n    return Jt.set(e, n);\n  }\n\n  function zt(e, n) {\n    return k(N(e.all, function (e) {\n      return e.cells;\n    }), n);\n  }\n\n  var Lt,\n      _t,\n      Wt = function Wt(e, n) {\n    e.dom.removeAttribute(n);\n  },\n      jt = function jt(e, n) {\n    return Fn(e) ? e.style.getPropertyValue(n) : \"\";\n  },\n      Ft = C(10),\n      Ht = C(10),\n      Vt = function Vt(e, n, t) {\n    return N(ln(e), function (e) {\n      return oe(e, n) ? t(e) ? [e] : [] : Vt(e, n, t);\n    });\n  },\n      qt = function qt(e) {\n    return rt(e).fold(C([]), function (e) {\n      return mn(e, \"colgroup\");\n    });\n  },\n      Ut = function Ut(e, n) {\n    return ye(e.element, n, e.section, e.isNew);\n  },\n      Gt = \"data-snooker-locked-cols\",\n      $t = {\n    fromTable: function fromTable(e) {\n      return vt(ct(e));\n    },\n    generate: vt,\n    getAt: function getAt(e, n, t) {\n      return q.from(e.access[n + \",\" + t]);\n    },\n    findItem: function findItem(e, n, t) {\n      var r = zt(e, function (e) {\n        return t(n, e.element);\n      });\n      return 0 < r.length ? q.some(r[0]) : q.none();\n    },\n    filterItems: zt,\n    justCells: function justCells(e) {\n      return N(e.all, function (e) {\n        return e.cells;\n      });\n    },\n    justColumns: function justColumns(e) {\n      return de(e.columns);\n    },\n    hasColumns: function hasColumns(e) {\n      return 0 < Ue(e.columns).length;\n    },\n    getColumnAt: function getColumnAt(e, n) {\n      return q.from(e.columns[n]);\n    }\n  },\n      Kt = $t.fromTable,\n      Xt = function Xt(e, n) {\n    e.dom.appendChild(n.dom);\n  },\n      Yt = function Yt(e) {\n    var n = e.dom;\n    null !== n.parentNode && n.parentNode.removeChild(n);\n  },\n      Jt = (Lt = pn, {\n    get: function get(e) {\n      if (!Lt(e)) throw new Error(\"Can only get text value of a text node\");\n      return _t(e).getOr(\"\");\n    },\n    getOption: _t = function _t(e) {\n      return Lt(e) ? q.from(e.dom.nodeValue) : q.none();\n    },\n    set: function set(e, n) {\n      if (!Lt(e)) throw new Error(\"Can only set raw text value of a text node\");\n      e.dom.nodeValue = n;\n    }\n  }),\n      Qt = [\"body\", \"p\", \"div\", \"article\", \"aside\", \"figcaption\", \"figure\", \"footer\", \"header\", \"nav\", \"section\", \"ol\", \"ul\", \"li\", \"table\", \"thead\", \"tbody\", \"tfoot\", \"caption\", \"tr\", \"td\", \"th\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"blockquote\", \"pre\", \"address\"];\n\n  function Zt() {\n    return {\n      up: C({\n        selector: On,\n        closest: In,\n        predicate: Dn,\n        all: on\n      }),\n      down: C({\n        selector: dn,\n        predicate: xn\n      }),\n      styles: C({\n        get: Un,\n        getRaw: Gn,\n        set: Vn,\n        remove: $n\n      }),\n      attrs: C({\n        get: Pn,\n        set: Mn,\n        remove: Wt,\n        copyTo: function copyTo(e, n) {\n          En(n, zn(e));\n        }\n      }),\n      insert: C({\n        before: Rt,\n        after: Dt,\n        afterAll: kt,\n        append: Xt,\n        appendAll: It,\n        prepend: Ot,\n        wrap: At\n      }),\n      remove: C({\n        unwrap: Mt,\n        remove: Yt\n      }),\n      create: C({\n        nu: Ve.fromTag,\n        clone: function clone(e) {\n          return Ve.fromDom(e.dom.cloneNode(!1));\n        },\n        text: Ve.fromText\n      }),\n      query: C({\n        comparePosition: function comparePosition(e, n) {\n          return e.dom.compareDocumentPosition(n.dom);\n        },\n        prevSibling: un,\n        nextSibling: cn\n      }),\n      property: C({\n        children: ln,\n        name: Ye,\n        parent: rn,\n        document: function document(e) {\n          return tn(e).dom;\n        },\n        isText: pn,\n        isComment: Ze,\n        isElement: gn,\n        isSpecial: function isSpecial(e) {\n          return y([\"script\", \"noscript\", \"iframe\", \"noframes\", \"noembed\", \"title\", \"style\", \"textarea\", \"xmp\"], Ye(e));\n        },\n        getLanguage: function getLanguage(e) {\n          return gn(e) ? Nn(e, \"lang\") : q.none();\n        },\n        getText: Et,\n        setText: Nt,\n        isBoundary: function isBoundary(e) {\n          return !!gn(e) && (\"body\" === Ye(e) || y(Qt, Ye(e)));\n        },\n        isEmptyTag: function isEmptyTag(e) {\n          return !!gn(e) && y([\"br\", \"img\", \"hr\", \"input\"], Ye(e));\n        },\n        isNonEditable: function isNonEditable(e) {\n          return gn(e) && \"false\" === Pn(e, \"contenteditable\");\n        }\n      }),\n      eq: ce,\n      is: qe\n    };\n  }\n\n  function er(t, e) {\n    return Hr(qr, function (e, n) {\n      return t(n);\n    }, e);\n  }\n\n  function nr(e) {\n    return On(e, \"table\");\n  }\n\n  function tr(c, l, a) {\n    function f(n) {\n      return function (e) {\n        return void 0 !== a && a(e) || ce(e, n);\n      };\n    }\n\n    return ce(c, l) ? q.some({\n      boxes: q.some([c]),\n      start: c,\n      finish: l\n    }) : nr(c).bind(function (i) {\n      return nr(l).bind(function (u) {\n        if (ce(i, u)) return q.some({\n          boxes: (r = c, o = l, St(Kt(i), r, o)),\n          start: c,\n          finish: l\n        });\n\n        if (le(i, u)) {\n          var e = 0 < (n = sn(l, \"td,th\", f(i))).length ? n[n.length - 1] : l;\n          return q.some({\n            boxes: xt(i, c, i, l, u),\n            start: c,\n            finish: e\n          });\n        }\n\n        if (le(u, i)) {\n          var n,\n              t = 0 < (n = sn(c, \"td,th\", f(u))).length ? n[n.length - 1] : c;\n          return q.some({\n            boxes: xt(u, c, i, l, u),\n            start: c,\n            finish: t\n          });\n        }\n\n        return Vr(qr, c, l, void 0).shared.bind(function (e) {\n          return In(e, \"table\", a).bind(function (e) {\n            var n = sn(l, \"td,th\", f(e)),\n                t = 0 < n.length ? n[n.length - 1] : l,\n                r = sn(c, \"td,th\", f(e)),\n                o = 0 < r.length ? r[r.length - 1] : c;\n            return q.some({\n              boxes: xt(e, c, i, l, u),\n              start: o,\n              finish: t\n            });\n          });\n        });\n        var r, o;\n      });\n    });\n  }\n\n  function rr(e, n) {\n    var t = dn(e, n);\n    return 0 < t.length ? q.some(t) : q.none();\n  }\n\n  function or(e, n, r) {\n    return kn(e, n).bind(function (t) {\n      return kn(e, r).bind(function (n) {\n        return er(nr, [t, n]).map(function (e) {\n          return {\n            first: t,\n            last: n,\n            table: e\n          };\n        });\n      });\n    });\n  }\n\n  function ur(e, r, o, u, n) {\n    return t = n, w(e, function (e) {\n      return oe(e, t);\n    }).bind(function (e) {\n      return t = r, i = o, rt(n = e).bind(function (e) {\n        var r = Kt(e),\n            o = t,\n            u = i;\n        return $t.findItem(r, n, ce).bind(function (e) {\n          var n = 0 < o ? e.row + e.rowspan - 1 : e.row,\n              t = 0 < u ? e.column + e.colspan - 1 : e.column;\n          return $t.getAt(r, n + o, t + u).map(function (e) {\n            return e.element;\n          });\n        });\n      }).bind(function (e) {\n        return t = u, On(n = e, \"table\").bind(function (e) {\n          return kn(e, t).bind(function (e) {\n            return tr(e, n).bind(function (n) {\n              return n.boxes.map(function (e) {\n                return {\n                  boxes: e,\n                  start: n.start,\n                  finish: n.finish\n                };\n              });\n            });\n          });\n        });\n        var n, t;\n      });\n      var n, t, i;\n    });\n    var t;\n  }\n\n  function ir(o, e, n) {\n    return or(o, e, n).bind(function (c) {\n      function e(e) {\n        return ce(o, e);\n      }\n\n      var n = \"thead,tfoot,tbody,table\",\n          t = On(c.first, n, e),\n          r = On(c.last, n, e);\n      return t.bind(function (i) {\n        return r.bind(function (e) {\n          return ce(i, e) ? (t = c.table, r = c.first, o = c.last, u = Kt(t), Ct(n = u, r, o).bind(function (e) {\n            return function (e, n) {\n              for (var t = !0, r = P(yt, n), o = n.startRow; o <= n.finishRow; o++) {\n                for (var u = n.startCol; u <= n.finishCol; u++) {\n                  t = t && $t.getAt(e, o, u).exists(r);\n                }\n              }\n\n              return t ? q.some(n) : q.none();\n            }(n, e);\n          })) : q.none();\n          var n, t, r, o, u;\n        });\n      });\n    });\n  }\n\n  function cr(e, n, t, r) {\n    return e.fold(n, t, r);\n  }\n\n  function lr(e, n) {\n    return Ve.fromDom(e.dom.cloneNode(n));\n  }\n\n  function ar(e) {\n    return lr(e, !1);\n  }\n\n  function fr(e) {\n    return lr(e, !0);\n  }\n\n  function sr(e, n) {\n    var t = Ve.fromTag(n);\n    return En(t, zn(e)), t;\n  }\n\n  function mr(r, o) {\n    function e(e) {\n      var n = o(e);\n\n      if (n <= 0 || null === n) {\n        var t = Un(e, r);\n        return parseFloat(t) || 0;\n      }\n\n      return n;\n    }\n\n    function u(o, e) {\n      return B(e, function (e, n) {\n        var t = Un(o, n),\n            r = void 0 === t ? 0 : parseInt(t, 10);\n        return isNaN(r) ? e : e + r;\n      }, 0);\n    }\n\n    return {\n      set: function set(e, n) {\n        if (!f(n) && !n.match(/^[0-9]+$/)) throw new Error(r + \".set accepts only positive integer values. Value was \" + n);\n        var t = e.dom;\n        Fn(t) && (t.style[r] = n + \"px\");\n      },\n      get: e,\n      getOuter: e,\n      aggregate: u,\n      max: function max(e, n, t) {\n        var r = u(e, t);\n        return r < n ? n - r : 0;\n      }\n    };\n  }\n\n  function dr() {\n    var e = He().browser;\n    return e.isIE() || e.isEdge();\n  }\n\n  function gr(e, n, t) {\n    return r = Un(e, n), o = t, u = parseFloat(r), (isNaN(u) ? q.none() : q.some(u)).getOr(o);\n    var r, o, u;\n  }\n\n  function pr(e) {\n    return Un(e, \"box-sizing\");\n  }\n\n  function br(e, n, t, r) {\n    return n - gr(e, \"padding-\" + t, 0) - gr(e, \"padding-\" + r, 0) - gr(e, \"border-\" + t + \"-width\", 0) - gr(e, \"border-\" + r + \"-width\", 0);\n  }\n\n  function hr(e, n) {\n    var t = e.dom,\n        r = t.getBoundingClientRect().width || t.offsetWidth;\n    return \"border-box\" === n ? r : br(e, r, \"left\", \"right\");\n  }\n\n  function vr(e) {\n    return Jr.get(e);\n  }\n\n  function wr(e) {\n    return Jr.getOuter(e);\n  }\n\n  function yr(t, r) {\n    void 0 === r && (r = x);\n    var e = t.grid,\n        n = D(e.columns, S),\n        o = D(e.rows, S);\n    return O(n, function (n) {\n      return eo(function () {\n        return N(o, function (e) {\n          return $t.getAt(t, e, n).filter(function (e) {\n            return e.column === n;\n          }).toArray();\n        });\n      }, function (e) {\n        return 1 === e.colspan && r(e.element);\n      }, function () {\n        return $t.getAt(t, 0, n);\n      });\n    });\n  }\n\n  function Cr(t) {\n    var e = t.grid,\n        n = D(e.rows, S),\n        r = D(e.columns, S);\n    return O(n, function (n) {\n      return eo(function () {\n        return N(r, function (e) {\n          return $t.getAt(t, n, e).filter(function (e) {\n            return e.row === n;\n          }).fold(C([]), function (e) {\n            return [e];\n          });\n        });\n      }, function (e) {\n        return 1 === e.rowspan;\n      }, function () {\n        return $t.getAt(t, n, 0);\n      });\n    });\n  }\n\n  function Sr(n, t) {\n    return function (e) {\n      return \"rtl\" === no(e) ? t : n;\n    };\n  }\n\n  function Tr(e) {\n    return to.get(e);\n  }\n\n  function xr(e) {\n    return to.getOuter(e);\n  }\n\n  function Rr(e, n) {\n    return void 0 !== e ? e : void 0 !== n ? n : 0;\n  }\n\n  function Dr(e) {\n    var n = e.dom.ownerDocument,\n        t = n.body,\n        r = n.defaultView,\n        o = n.documentElement;\n    if (t === e.dom) return uo(t.offsetLeft, t.offsetTop);\n    var u = Rr(null == r ? void 0 : r.pageYOffset, o.scrollTop),\n        i = Rr(null == r ? void 0 : r.pageXOffset, o.scrollLeft),\n        c = Rr(o.clientTop, t.clientTop),\n        l = Rr(o.clientLeft, t.clientLeft);\n    return io(e).translate(i - l, u - c);\n  }\n\n  function Or(e, n) {\n    return {\n      row: e,\n      y: n\n    };\n  }\n\n  function Ar(e, n) {\n    return {\n      col: e,\n      x: n\n    };\n  }\n\n  function kr(e) {\n    return Dr(e).left + wr(e);\n  }\n\n  function Ir(e) {\n    return Dr(e).left;\n  }\n\n  function Br(e, n) {\n    return Ar(e, Ir(n));\n  }\n\n  function Mr(e, n) {\n    return Ar(e, kr(n));\n  }\n\n  function Er(e) {\n    return Dr(e).top;\n  }\n\n  function Pr(e, n) {\n    return Or(e, Er(n));\n  }\n\n  function Nr(e, n) {\n    return Or(e, Er(n) + xr(n));\n  }\n\n  function zr(t, n, r) {\n    if (0 === r.length) return [];\n    var e = O(r.slice(1), function (e, n) {\n      return e.map(function (e) {\n        return t(n, e);\n      });\n    }),\n        o = r[r.length - 1].map(function (e) {\n      return n(r.length - 1, e);\n    });\n    return e.concat([o]);\n  }\n\n  function Lr(i) {\n    if (!a(i)) throw new Error(\"cases must be an array\");\n    if (0 === i.length) throw new Error(\"there must be at least one case\");\n    var c = [],\n        t = {};\n    return A(i, function (e, r) {\n      var n = Ue(e);\n      if (1 !== n.length) throw new Error(\"one and only one name per case\");\n      var o = n[0],\n          u = e[o];\n      if (void 0 !== t[o]) throw new Error(\"duplicate key detected:\" + o);\n      if (\"cata\" === o) throw new Error(\"cannot have a case named cata (sorry)\");\n      if (!a(u)) throw new Error(\"case arguments must be an array\");\n      c.push(o), t[o] = function () {\n        for (var t = [], e = 0; e < arguments.length; e++) {\n          t[e] = arguments[e];\n        }\n\n        var n = t.length;\n        if (n !== u.length) throw new Error(\"Wrong number of arguments to case \" + o + \". Expected \" + u.length + \" (\" + u + \"), got \" + n);\n        return {\n          fold: function fold() {\n            for (var e = [], n = 0; n < arguments.length; n++) {\n              e[n] = arguments[n];\n            }\n\n            if (e.length !== i.length) throw new Error(\"Wrong number of arguments to fold. Expected \" + i.length + \", got \" + e.length);\n            return e[r].apply(null, t);\n          },\n          match: function match(e) {\n            var n = Ue(e);\n            if (c.length !== n.length) throw new Error(\"Wrong number of arguments to match. Expected: \" + c.join(\",\") + \"\\nActual: \" + n.join(\",\"));\n            if (!z(c, function (e) {\n              return y(n, e);\n            })) throw new Error(\"Not all branches were specified when using match. Specified: \" + n.join(\", \") + \"\\nRequired: \" + c.join(\", \"));\n            return e[o].apply(null, t);\n          },\n          log: function log(e) {\n            console.log(e, {\n              constructors: c,\n              constructor: o,\n              params: t\n            });\n          }\n        };\n      };\n    }), t;\n  }\n\n  var _r,\n      Wr,\n      jr,\n      Fr = function Fr(n, e, t) {\n    return e.bind(function (e) {\n      return t.filter(P(n.eq, e));\n    });\n  },\n      Hr = function Hr(e, n, t) {\n    return 0 < t.length ? (r = e, o = n, u = t[0], I(t.slice(1), function (e, n) {\n      var t = o(r, n);\n      return Fr(r, e, t);\n    }, o(r, u))) : q.none();\n    var r, o, u;\n  },\n      Vr = function Vr(n, e, t, r) {\n    function o(n) {\n      return b(n, r).fold(function () {\n        return n;\n      }, function (e) {\n        return n.slice(0, e + 1);\n      });\n    }\n\n    void 0 === r && (r = v);\n    var u = [e].concat(n.up().all(e)),\n        i = [t].concat(n.up().all(t)),\n        c = o(u),\n        l = o(i),\n        a = w(c, function (e) {\n      return R(l, P(n.eq, e));\n    });\n    return {\n      firstpath: c,\n      secondpath: l,\n      shared: a\n    };\n  },\n      qr = Zt(),\n      Ur = rr,\n      Gr = Lr([{\n    none: []\n  }, {\n    multiple: [\"elements\"]\n  }, {\n    single: [\"element\"]\n  }]),\n      $r = Gr.none,\n      Kr = Gr.multiple,\n      Xr = Gr.single,\n      Yr = tinymce.util.Tools.resolve(\"tinymce.PluginManager\"),\n      Jr = mr(\"width\", function (e) {\n    return e.dom.offsetWidth;\n  }),\n      Qr = function Qr(e) {\n    return hr(e, \"content-box\");\n  },\n      Zr = function Zr(e) {\n    return dr() ? hr(e, pr(e)) : gr(e, \"width\", e.dom.offsetWidth);\n  },\n      eo = function eo(e, n, t) {\n    var r = e();\n    return w(r, n).orThunk(function () {\n      return q.from(r[0]).orThunk(t);\n    }).map(function (e) {\n      return e.element;\n    });\n  },\n      no = function no(e) {\n    return \"rtl\" === Un(e, \"direction\") ? \"rtl\" : \"ltr\";\n  },\n      to = mr(\"height\", function (e) {\n    var n = e.dom;\n    return Sn(e) ? n.getBoundingClientRect().height : n.offsetHeight;\n  }),\n      ro = function ro(e) {\n    return dr() ? (t = pr(n = e), o = (r = n.dom).getBoundingClientRect().height || r.offsetHeight, \"border-box\" === t ? o : br(n, o, \"top\", \"bottom\")) : gr(e, \"height\", e.dom.offsetHeight);\n    var n, t, r, o;\n  },\n      oo = function oo(t, r) {\n    return {\n      left: t,\n      top: r,\n      translate: function translate(e, n) {\n        return oo(t + e, r + n);\n      }\n    };\n  },\n      uo = oo,\n      io = function io(e) {\n    var n,\n        t = e.dom,\n        r = t.ownerDocument.body;\n    return r === t ? uo(r.offsetLeft, r.offsetTop) : Sn(e) ? (n = t.getBoundingClientRect(), uo(n.left, n.top)) : uo(0, 0);\n  },\n      co = {\n    delta: S,\n    positions: function positions(e) {\n      return zr(Pr, Nr, e);\n    },\n    edge: Er\n  },\n      lo = Sr({\n    delta: S,\n    edge: Ir,\n    positions: function positions(e) {\n      return zr(Br, Mr, e);\n    }\n  }, {\n    delta: function delta(e) {\n      return -e;\n    },\n    edge: kr,\n    positions: function positions(e) {\n      return zr(Mr, Br, e);\n    }\n  }),\n      ao = {\n    delta: function delta(e, n) {\n      return lo(n).delta(e, n);\n    },\n    positions: function positions(e, n) {\n      return lo(n).positions(e, n);\n    },\n    edge: function edge(e) {\n      return lo(e).edge(e);\n    }\n  },\n      fo = {\n    unsupportedLength: [\"em\", \"ex\", \"cap\", \"ch\", \"ic\", \"rem\", \"lh\", \"rlh\", \"vw\", \"vh\", \"vi\", \"vb\", \"vmin\", \"vmax\", \"cm\", \"mm\", \"Q\", \"in\", \"pc\", \"pt\", \"px\"],\n    fixed: [\"px\", \"pt\"],\n    relative: [\"%\"],\n    empty: [\"\"]\n  },\n      so = (jr = [\"Infinity\", (_r = \"[0-9]+\") + \"\\\\.\" + mo(_r) + mo(Wr = \"[eE][+-]?[0-9]+\"), \"\\\\.\" + _r + mo(Wr), _r + mo(Wr)].join(\"|\"), new RegExp(\"^([+-]?(?:\" + jr + \"))(.*)$\"));\n\n  function mo(e) {\n    return \"(?:\" + e + \")?\";\n  }\n\n  function go(e, n, t) {\n    var r = q.from(e.dom.parentElement).map(Ve.fromDom).getOrThunk(function () {\n      return Tn(nn(e));\n    });\n    return n(e) / t(r) * 100;\n  }\n\n  function po(e, n) {\n    Vn(e, \"width\", n + \"px\");\n  }\n\n  function bo(e, n) {\n    Vn(e, \"width\", n + \"%\");\n  }\n\n  function ho(e, n) {\n    Vn(e, \"height\", n + \"px\");\n  }\n\n  function vo(e) {\n    var n,\n        t,\n        r,\n        o,\n        u,\n        i,\n        c,\n        l,\n        a,\n        f,\n        s = ro(e) + \"px\";\n    return s ? (n = s, t = e, r = Tr, o = ho, f = parseFloat(n), ee(n, \"%\") && \"table\" !== Ye(t) ? (i = f, c = r, l = o, a = rt(u = t).map(function (e) {\n      var n = c(e);\n      return Math.floor(i / 100 * n);\n    }).getOr(i), l(u, a), a) : f) : Tr(e);\n  }\n\n  function wo(e, n) {\n    return Gn(e, n).orThunk(function () {\n      return Nn(e, n).map(function (e) {\n        return e + \"px\";\n      });\n    });\n  }\n\n  function yo(e) {\n    return wo(e, \"width\");\n  }\n\n  function Co(e) {\n    return go(e, vr, Qr);\n  }\n\n  function So(e) {\n    return (jl(e) ? vr : Zr)(e);\n  }\n\n  function To(e) {\n    return vo(n = e) / Xn(n, \"rowspan\");\n    var n;\n  }\n\n  function xo(e, n, t) {\n    Vn(e, \"width\", n + t);\n  }\n\n  function Ro(e) {\n    return go(e, vr, Qr) + \"%\";\n  }\n\n  function Do(e) {\n    return yo(e).getOrThunk(function () {\n      return So(e) + \"px\";\n    });\n  }\n\n  function Oo(e) {\n    return wo(e, \"height\").getOrThunk(function () {\n      return To(e) + \"px\";\n    });\n  }\n\n  function Ao(e, n, t, r, o, u) {\n    return e.filter(r).fold(function () {\n      return u(function (t, r) {\n        if (r < 0 || r >= t.length - 1) return q.none();\n        var e = t[r].fold(function () {\n          var e, n;\n          return H((e = t.slice(0, r), (n = U.call(e, 0)).reverse(), n), function (e, n) {\n            return e.map(function (e) {\n              return {\n                value: e,\n                delta: n + 1\n              };\n            });\n          });\n        }, function (e) {\n          return q.some({\n            value: e,\n            delta: 0\n          });\n        }),\n            n = t[r + 1].fold(function () {\n          return H(t.slice(r + 1), function (e, n) {\n            return e.map(function (e) {\n              return {\n                value: e,\n                delta: n + 1\n              };\n            });\n          });\n        }, function (e) {\n          return q.some({\n            value: e,\n            delta: 1\n          });\n        });\n        return e.bind(function (t) {\n          return n.map(function (e) {\n            var n = e.delta + t.delta;\n            return Math.abs(e.value - t.value) / n;\n          });\n        });\n      }(t, n));\n    }, function (e) {\n      return o(e);\n    });\n  }\n\n  function ko(e, n, i, c) {\n    var l = yr(e),\n        t = $t.hasColumns(e) ? O($t.justColumns(e), function (e) {\n      return q.from(e.element);\n    }) : l,\n        a = [q.some(ao.edge(n))].concat(O(ao.positions(l, n), function (e) {\n      return e.map(function (e) {\n        return e.x;\n      });\n    })),\n        f = p(Yn);\n    return O(t, function (e, u) {\n      return Ao(e, u, a, f, function (e) {\n        return t = e, o = (r = He().browser).isChrome() || r.isFirefox(), !Hl(t) || o ? i(e) : Ao(null != (n = l[u]) ? S(n) : q.none(), u, a, f, function (e) {\n          return c(q.some(vr(e)));\n        }, c);\n        var n, t, r, o;\n      }, c);\n    });\n  }\n\n  function Io(e) {\n    return e.map(function (e) {\n      return e + \"px\";\n    }).getOr(\"\");\n  }\n\n  function Bo(e, n, t) {\n    return ko(e, n, So, function (e) {\n      return e.getOrThunk(t.minCellWidth);\n    });\n  }\n\n  function Mo(e, n, t, r, o) {\n    var u = Cr(e),\n        i = [q.some(t.edge(n))].concat(O(t.positions(u, n), function (e) {\n      return e.map(function (e) {\n        return e.y;\n      });\n    }));\n    return O(u, function (e, n) {\n      return Ao(e, n, i, p(Jn), r, o);\n    });\n  }\n\n  function Eo(e, n) {\n    return function () {\n      return Sn(e) ? n(e) : parseFloat(Gn(e, \"width\").getOr(\"0\"));\n    };\n  }\n\n  function Po(r) {\n    var t = Eo(r, function (e) {\n      return parseFloat(Ro(e));\n    }),\n        n = Eo(r, vr);\n    return {\n      width: t,\n      pixelWidth: n,\n      getWidths: function getWidths(e, n) {\n        return t = n, ko(e, r, Co, function (e) {\n          return e.fold(function () {\n            return t.minCellWidth();\n          }, function (e) {\n            return e / t.pixelWidth() * 100;\n          });\n        });\n        var t;\n      },\n      getCellDelta: function getCellDelta(e) {\n        return e / n() * 100;\n      },\n      singleColumnWidth: function singleColumnWidth(e, n) {\n        return [100 - e];\n      },\n      minCellWidth: function minCellWidth() {\n        return Ft() / n() * 100;\n      },\n      setElementWidth: bo,\n      adjustTableWidth: function adjustTableWidth(e) {\n        var n = t();\n        bo(r, n + e / 100 * n);\n      },\n      isRelative: !0,\n      label: \"percent\"\n    };\n  }\n\n  function No(t) {\n    var r = Eo(t, vr);\n    return {\n      width: r,\n      pixelWidth: r,\n      getWidths: function getWidths(e, n) {\n        return Bo(e, t, n);\n      },\n      getCellDelta: S,\n      singleColumnWidth: function singleColumnWidth(e, n) {\n        return [Math.max(Ft(), e + n) - e];\n      },\n      minCellWidth: Ft,\n      setElementWidth: po,\n      adjustTableWidth: function adjustTableWidth(e) {\n        var n = r() + e;\n        po(t, n);\n      },\n      isRelative: !1,\n      label: \"pixel\"\n    };\n  }\n\n  function zo(e, n) {\n    function t(e) {\n      return oe(e.element, n);\n    }\n\n    var u,\n        r,\n        i,\n        c,\n        l,\n        a,\n        f,\n        s,\n        o,\n        m,\n        d,\n        g,\n        p = fr(e),\n        b = ct(p),\n        h = Vl(e),\n        v = $t.generate(b),\n        w = (u = t, r = v.grid.columns, i = v.grid.rows, c = r, a = l = 0, f = [], s = [], ae(v.access, function (e) {\n      var n, t, r, o;\n      f.push(e), u(e) && (s.push(e), t = (n = e.row) + e.rowspan - 1, o = (r = e.column) + e.colspan - 1, n < i ? i = n : l < t && (l = t), r < c ? c = r : a < o && (a = o));\n    }), {\n      minRow: i,\n      minCol: c,\n      maxRow: l,\n      maxCol: a,\n      allCells: f,\n      selectedCells: s\n    }),\n        y = \"th:not(\" + n + \"),td:not(\" + n + \")\";\n    return A(Vt(p, \"th,td\", function (e) {\n      return oe(e, y);\n    }), Yt), function (e, n, t, r) {\n      for (var o, u, i, c = n.grid.columns, l = n.grid.rows, a = 0; a < l; a++) {\n        for (var f = !1, s = 0; s < c; s++) {\n          a < t.minRow || a > t.maxRow || s < t.minCol || s > t.maxCol || ($t.getAt(n, a, s).filter(r).isNone() ? (o = f, 0, u = e[a].element, i = Ve.fromTag(\"td\"), Xt(i, Ve.fromTag(\"br\")), (o ? Xt : Ot)(u, i)) : f = !0);\n        }\n      }\n    }(b, v, w, t), o = p, m = w, d = v, g = function (e, n, t, r) {\n      if (0 === r.minCol && n.grid.columns === r.maxCol + 1) return 0;\n      var o = Bo(n, e, t),\n          u = B(o, function (e, n) {\n        return e + n;\n      }, 0),\n          i = B(o.slice(r.minCol, r.maxCol + 1), function (e, n) {\n        return e + n;\n      }, 0) / u * t.pixelWidth() - t.pixelWidth();\n      return t.getCellDelta(i);\n    }(e, $t.fromTable(e), h, w), ae(d.columns, function (e) {\n      (e.column < m.minCol || e.column > m.maxCol) && Yt(e.element);\n    }), A(k(Zn(o, \"tr\"), function (e) {\n      return 0 === e.dom.childElementCount;\n    }), Yt), m.minCol !== m.maxCol && m.minRow !== m.maxRow || A(Zn(o, \"th,td\"), function (e) {\n      Wt(e, \"rowspan\"), Wt(e, \"colspan\");\n    }), Wt(o, Gt), Wt(o, \"data-snooker-col-series\"), Vl(o).adjustTableWidth(g), p;\n  }\n\n  function Lo(e) {\n    return \"img\" === Ye(e) ? 1 : Pt(e).fold(function () {\n      return ln(e).length;\n    }, function (e) {\n      return e.length;\n    });\n  }\n\n  function _o(e) {\n    return Pt(e).filter(function (e) {\n      return 0 !== e.trim().length || -1 < e.indexOf(\"\\xa0\");\n    }).isSome() || y(Gl, Ye(e));\n  }\n\n  function Wo(e) {\n    return o = _o, (_u2 = function u(e) {\n      for (var n = 0; n < e.childNodes.length; n++) {\n        var t = Ve.fromDom(e.childNodes[n]);\n        if (o(t)) return q.some(t);\n\n        var r = _u2(e.childNodes[n]);\n\n        if (r.isSome()) return r;\n      }\n\n      return q.none();\n    })(e.dom);\n\n    var o, _u2;\n  }\n\n  function jo(e) {\n    return $l(e, _o);\n  }\n\n  function Fo(n) {\n    return function () {\n      var e = Ve.fromTag(\"td\", n.dom);\n      return Xt(e, Ve.fromTag(\"br\", n.dom)), e;\n    };\n  }\n\n  function Ho(e) {\n    return function () {\n      return Ve.fromTag(\"col\", e.dom);\n    };\n  }\n\n  function Vo(e) {\n    return function () {\n      return Ve.fromTag(\"colgroup\", e.dom);\n    };\n  }\n\n  function qo(e) {\n    return function () {\n      return Ve.fromTag(\"tr\", e.dom);\n    };\n  }\n\n  function Uo(e, n, t) {\n    var r,\n        o,\n        u = (It(o = sr(r = e, n), ln(fr(r))), o);\n    return ae(t, function (e, n) {\n      null === e ? Wt(u, n) : Mn(u, n, e);\n    }), u;\n  }\n\n  function Go(e) {\n    return e;\n  }\n\n  function $o(a, f, s) {\n    function m(e, n) {\n      var t = e.element.dom,\n          r = n.dom;\n      Fn(t) && Fn(r) && (r.style.cssText = t.style.cssText), $n(n, \"height\"), 1 !== e.colspan && $n(n, \"width\");\n    }\n\n    return {\n      col: function col(e) {\n        var n = Ve.fromTag(Ye(e.element), f.dom);\n        return m(e, n), a(e.element, n), n;\n      },\n      colgroup: Vo(f),\n      row: qo(f),\n      cell: function cell(e) {\n        var n,\n            t,\n            r,\n            o,\n            u,\n            i = Ve.fromTag(Ye(e.element), f.dom),\n            c = s.getOr([\"strong\", \"em\", \"b\", \"i\", \"span\", \"font\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"p\", \"div\"]),\n            l = 0 < c.length ? (n = e.element, t = i, r = c, Wo(n).map(function (e) {\n          return I(sn(e, r.join(\",\"), function (e) {\n            return ce(e, n);\n          }), function (e, n) {\n            var t = ar(n);\n            return Wt(t, \"contenteditable\"), Xt(e, t), t;\n          }, t);\n        }).getOr(t)) : i;\n        return Xt(l, Ve.fromTag(\"br\")), m(e, i), o = e.element, u = i, ae(Kl, function (n, t) {\n          return Nn(o, t).filter(function (e) {\n            return y(n, e);\n          }).each(function (e) {\n            return Mn(u, t, e);\n          });\n        }), a(e.element, i), i;\n      },\n      replace: Uo,\n      colGap: Ho(f),\n      gap: Fo(f)\n    };\n  }\n\n  function Ko(e) {\n    return {\n      col: Ho(e),\n      colgroup: Vo(e),\n      row: qo(e),\n      cell: Fo(e),\n      replace: Go,\n      colGap: Ho(e),\n      gap: Fo(e)\n    };\n  }\n\n  function Xo(e) {\n    return O(e, Ve.fromDom);\n  }\n\n  function Yo(e) {\n    return Ve.fromDom(e.getBody());\n  }\n\n  function Jo(e) {\n    return e.getBoundingClientRect().width;\n  }\n\n  function Qo(e) {\n    return e.getBoundingClientRect().height;\n  }\n\n  function Zo(n) {\n    return function (e) {\n      return ce(e, Yo(n));\n    };\n  }\n\n  function eu(e) {\n    return /^\\d+(\\.\\d+)?$/.test(e) ? e + \"px\" : e;\n  }\n\n  function nu(e) {\n    function n(e) {\n      return Wt(e, \"data-mce-style\");\n    }\n\n    Wt(e, \"data-mce-style\"), A(nt(e), n), A(tt(e), n), A(ot(e), n);\n  }\n\n  function tu(e) {\n    return Ve.fromDom(e.selection.getStart());\n  }\n\n  function ru(e) {\n    return cr(e.get(), C([]), S, _);\n  }\n\n  function ou(e, n, t) {\n    return {\n      element: t,\n      mergable: (u = n, i = Xl, cr(e.get(), q.none, function (n) {\n        return n.length <= 1 ? q.none() : ir(u, i.firstSelectedSelector, i.lastSelectedSelector).map(function (e) {\n          return {\n            bounds: e,\n            cells: n\n          };\n        });\n      }, q.none)),\n      unmergable: 0 < (o = ru(e)).length && z(o, function (e) {\n        return r(e, \"rowspan\") || r(e, \"colspan\");\n      }) ? q.some(o) : q.none(),\n      selection: ru(e)\n    };\n\n    function r(e, n) {\n      return Nn(e, n).exists(function (e) {\n        return 1 < parseInt(e, 10);\n      });\n    }\n\n    var o, u, i;\n  }\n\n  function uu(o) {\n    return function (e, n) {\n      var t,\n          r = Ye(e);\n      return In(\"col\" === r || \"colgroup\" === r ? rt(t = e).bind(function (e) {\n        return Ur(e, Xl.firstSelectedSelector);\n      }).fold(C(t), function (e) {\n        return e[0];\n      }) : e, o, n);\n    };\n  }\n\n  function iu(a, e, f) {\n    a.on(\"BeforeGetContent\", function (t) {\n      !0 === t.selection && cr(e.get(), E, function (e) {\n        t.preventDefault(), rt(e[0]).map(function (e) {\n          var n = zo(e, \"[data-mce-selected]\");\n          return nu(n), [n];\n        }).each(function (e) {\n          var n;\n          t.content = \"text\" === t.format ? O(e, function (e) {\n            return e.dom.innerText;\n          }).join(\"\") : (n = a, O(e, function (e) {\n            return n.selection.serializer.serialize(e.dom, {});\n          }).join(\"\"));\n        });\n      }, E);\n    }), a.on(\"BeforeSetContent\", function (l) {\n      !0 === l.selection && !0 === l.paste && j(Ql(e)).each(function (c) {\n        rt(c).each(function (e) {\n          var n,\n              t,\n              r,\n              o,\n              u = k((n = l.content, (t = document.createElement(\"div\")).innerHTML = n, ln(Ve.fromDom(t))), function (e) {\n            return \"meta\" !== Ye(e);\n          }),\n              i = en(\"table\");\n          1 === u.length && i(u[0]) && (l.preventDefault(), r = Ko(Ve.fromDom(a.getDoc())), o = {\n            element: c,\n            clipboard: u[0],\n            generators: r\n          }, f.pasteCells(e, o).each(function () {\n            a.focus();\n          }));\n        });\n      });\n    });\n  }\n\n  function cu(e, n, t) {\n    for (var r = 0, o = e; o < n; o++) {\n      r += void 0 !== t[o] ? t[o] : 0;\n    }\n\n    return r;\n  }\n\n  function lu(e, n, t) {\n    var r, o, u, i;\n    A((r = e, o = n, $t.hasColumns(r) ? (i = o, O($t.justColumns(r), function (e, n) {\n      return {\n        element: e.element,\n        width: i[n],\n        colspan: e.colspan\n      };\n    })) : (u = o, O($t.justCells(r), function (e) {\n      var n = cu(e.column, e.column + e.colspan, u);\n      return {\n        element: e.element,\n        width: n,\n        colspan: e.colspan\n      };\n    }))), function (e) {\n      t.setElementWidth(e.element, e.width);\n    });\n  }\n\n  function au(e, n, t, r, o) {\n    var u,\n        i,\n        c,\n        l,\n        a,\n        f,\n        s,\n        m,\n        d,\n        g,\n        p = $t.fromTable(e),\n        b = o.getCellDelta(n),\n        h = o.getWidths(p, o),\n        v = t === p.grid.columns - 1,\n        w = r.clampTableDelta(h, t, b, o.minCellWidth(), v),\n        y = (i = t, c = w, l = o, a = r, m = (u = h).slice(0), s = i, d = 0 === (f = u).length ? ea.none() : 1 === f.length ? ea.only(0) : 0 === s ? ea.left(0, 1) : s === f.length - 1 ? ea.right(s - 1, s) : 0 < s && s < f.length - 1 ? ea.middle(s - 1, s, s + 1) : ea.none(), g = C(O(m, C(0))), d.fold(g, function (e) {\n      return l.singleColumnWidth(m[e], c);\n    }, function (e, n) {\n      return a.calcLeftEdgeDeltas(m, e, n, c, l.minCellWidth(), l.isRelative);\n    }, function (e, n, t) {\n      return a.calcMiddleDeltas(m, e, n, t, c, l.minCellWidth(), l.isRelative);\n    }, function (e, n) {\n      return a.calcRightEdgeDeltas(m, e, n, c, l.minCellWidth(), l.isRelative);\n    }));\n    lu(p, O(y, function (e, n) {\n      return e + h[n];\n    }), o), r.resizeTable(o.adjustTableWidth, w, v);\n  }\n\n  function fu(e) {\n    return O(e, C(0));\n  }\n\n  function su(e, n, t, r, o) {\n    return o(e.slice(0, n)).concat(r).concat(o(e.slice(t)));\n  }\n\n  function mu(i) {\n    return function (e, n, t, r) {\n      if (i(t)) {\n        var o = Math.max(r, e[n] - Math.abs(t)),\n            u = Math.abs(o - e[n]);\n        return 0 <= t ? u : -u;\n      }\n\n      return t;\n    };\n  }\n\n  function du() {\n    function f(e, t, n, r) {\n      var o = (100 + n) / 100,\n          u = Math.max(r, (e[t] + n) / o);\n      return O(e, function (e, n) {\n        return (n === t ? u : e / o) - e;\n      });\n    }\n\n    function c(e, n, t, r, o, u) {\n      return u ? f(e, n, r, o) : (l = t, a = na(i = e, c = n, r, o), su(i, c, l + 1, [a, 0], fu));\n      var i, c, l, a;\n    }\n\n    return {\n      resizeTable: function resizeTable(e, n) {\n        return e(n);\n      },\n      clampTableDelta: na,\n      calcLeftEdgeDeltas: c,\n      calcMiddleDeltas: function calcMiddleDeltas(e, n, t, r, o, u, i) {\n        return c(e, t, r, o, u, i);\n      },\n      calcRightEdgeDeltas: function calcRightEdgeDeltas(e, n, t, r, o, u) {\n        if (u) return f(e, t, r, o);\n        var i = na(e, t, r, o);\n        return fu(e.slice(0, t)).concat([i]);\n      },\n      calcRedestributedWidths: function calcRedestributedWidths(e, n, t, r) {\n        if (r) {\n          var o = (n + t) / n,\n              u = O(e, function (e) {\n            return e / o;\n          });\n          return {\n            delta: 100 * o - 100,\n            newSizes: u\n          };\n        }\n\n        return {\n          delta: t,\n          newSizes: e\n        };\n      }\n    };\n  }\n\n  function gu() {\n    function i(e, n, t, r, o) {\n      var u = ta(e, 0 <= r ? t : n, r, o);\n      return su(e, n, t + 1, [u, -u], fu);\n    }\n\n    return {\n      resizeTable: function resizeTable(e, n, t) {\n        t && e(n);\n      },\n      clampTableDelta: function clampTableDelta(e, n, t, r, o) {\n        if (o) {\n          if (0 <= t) return t;\n          var u = B(e, function (e, n) {\n            return e + n - r;\n          }, 0);\n          return Math.max(-u, t);\n        }\n\n        return na(e, n, t, r);\n      },\n      calcLeftEdgeDeltas: i,\n      calcMiddleDeltas: function calcMiddleDeltas(e, n, t, r, o, u) {\n        return i(e, t, r, o, u);\n      },\n      calcRightEdgeDeltas: function calcRightEdgeDeltas(e, n, t, r, o, u) {\n        return u ? fu(e) : O(e, C(r / e.length));\n      },\n      calcRedestributedWidths: function calcRedestributedWidths(e, n, t, r) {\n        return {\n          delta: 0,\n          newSizes: e\n        };\n      }\n    };\n  }\n\n  function pu(e, n, t) {\n    var r = t.substring(0, t.length - e.length),\n        o = parseFloat(r);\n    return r === o.toString() ? n(o) : ra.invalid(t);\n  }\n\n  function bu(e, n, t) {\n    var r,\n        o,\n        u,\n        i,\n        c = oa.from(t),\n        l = z(e, function (e) {\n      return \"0px\" === e;\n    }) ? (r = e.length, o = c.fold(function () {\n      return C(\"\");\n    }, function (e) {\n      return C(e / r + \"px\");\n    }, function () {\n      return C(100 / r + \"%\");\n    }), D(r, o)) : (u = e, i = n, c.fold(function () {\n      return u;\n    }, function (e) {\n      return t = (n = e) / i, O(u, function (e) {\n        return oa.from(e).fold(function () {\n          return e;\n        }, function (e) {\n          return e * t + \"px\";\n        }, function (e) {\n          return e / 100 * n + \"px\";\n        });\n      });\n      var n, t;\n    }, function (e) {\n      return n = i, O(u, function (e) {\n        return oa.from(e).fold(function () {\n          return e;\n        }, function (e) {\n          return e / n * 100 + \"%\";\n        }, function (e) {\n          return e + \"%\";\n        });\n      });\n      var n;\n    }));\n    return ua(l);\n  }\n\n  function hu(e, n) {\n    return 0 === e.length ? n : I(e, function (e, n) {\n      return oa.from(n).fold(C(0), S, S) + e;\n    }, 0);\n  }\n\n  function vu(e) {\n    return ia(e).fold(C(\"px\"), C(\"px\"), C(\"%\"));\n  }\n\n  function wu(l, e, n) {\n    var a = $t.fromTable(l),\n        i = a.all,\n        f = $t.justCells(a),\n        s = $t.justColumns(a);\n    e.each(function (e) {\n      var t,\n          r,\n          o,\n          u,\n          n = vu(e),\n          i = vr(l),\n          c = bu(ko(a, l, Do, Io), i, e);\n      $t.hasColumns(a) ? (o = c, u = n, A(s, function (e, n) {\n        var t = hu([o[n]], Ft());\n        Vn(e.element, \"width\", t + u);\n      })) : (t = c, r = n, A(f, function (e) {\n        var n = hu(t.slice(e.column, e.colspan + e.column), Ft());\n        Vn(e.element, \"width\", n + r);\n      })), Vn(l, \"width\", e);\n    }), n.each(function (e) {\n      var n = vu(e),\n          t = Tr(l),\n          r = bu(Mo(a, l, co, Oo, Io), t, e),\n          o = i,\n          u = n;\n      A(f, function (e) {\n        var n = hu(r.slice(e.row, e.rowspan + e.row), Ht());\n        Vn(e.element, \"height\", n + u);\n      }), A(o, function (e, n) {\n        Vn(e.element, \"height\", r[n]);\n      }), Vn(l, \"height\", e);\n    });\n  }\n\n  function yu(e) {\n    return $t.fromTable(e).grid;\n  }\n\n  function Cu(n) {\n    var o = [];\n    return {\n      bind: function bind(e) {\n        if (void 0 === e) throw new Error(\"Event bind error: undefined handler\");\n        o.push(e);\n      },\n      unbind: function unbind(n) {\n        o = k(o, function (e) {\n          return e !== n;\n        });\n      },\n      trigger: function trigger() {\n        for (var t = [], e = 0; e < arguments.length; e++) {\n          t[e] = arguments[e];\n        }\n\n        var r = {};\n        A(n, function (e, n) {\n          r[e] = t[n];\n        }), A(o, function (e) {\n          e(r);\n        });\n      }\n    };\n  }\n\n  function Su(e) {\n    return {\n      registry: fe(e, function (e) {\n        return {\n          bind: e.bind,\n          unbind: e.unbind\n        };\n      }),\n      trigger: fe(e, function (e) {\n        return e.trigger;\n      })\n    };\n  }\n\n  function Tu(e) {\n    return e.slice(0).sort();\n  }\n\n  function xu(n, e) {\n    var t = k(e, function (e) {\n      return !y(n, e);\n    });\n    0 < t.length && function () {\n      throw new Error(\"Unsupported keys for object: \" + Tu(t).join(\", \"));\n    }();\n  }\n\n  function Ru(e) {\n    return function (r, o, u) {\n      if (0 === o.length) throw new Error(\"You must specify at least one required field.\");\n      var t;\n      return function (n, e) {\n        if (!a(e)) throw new Error(\"The \" + n + \" fields must be an array. Was: \" + e + \".\");\n        A(e, function (e) {\n          if (!T(e)) throw new Error(\"The value \" + e + \" in the \" + n + \" fields was not a string.\");\n        });\n      }(\"required\", o), w(t = Tu(o), function (e, n) {\n        return n < t.length - 1 && e === t[n + 1];\n      }).each(function (e) {\n        throw new Error(\"The field: \" + e + \" occurs more than once in the combined fields: [\" + t.join(\", \") + \"].\");\n      }), function (n) {\n        var t = Ue(n);\n        z(o, function (e) {\n          return y(t, e);\n        }) || function (e, n) {\n          throw new Error(\"All required keys (\" + Tu(e).join(\", \") + \") were not specified. Specified keys were: \" + Tu(n).join(\", \") + \".\");\n        }(o, t), r(o, t);\n        var e = k(o, function (e) {\n          return !u.validate(n[e], e);\n        });\n        return 0 < e.length && function (e, n) {\n          throw new Error(\"All values need to be of type: \" + n + \". Keys (\" + Tu(e).join(\", \") + \") were not.\");\n        }(e, u.label), n;\n      };\n    }(xu, e, {\n      validate: c,\n      label: \"function\"\n    });\n  }\n\n  function Du() {\n    var u,\n        i,\n        e = {\n      onEvent: E,\n      reset: E,\n      events: Su({\n        move: Cu([\"info\"])\n      }).registry\n    },\n        n = (u = q.none(), {\n      onEvent: function onEvent(e, o) {\n        o.extract(e).each(function (e) {\n          var n = o,\n              t = e,\n              r = u.map(function (e) {\n            return n.compare(e, t);\n          });\n          u = q.some(t), r.each(function (e) {\n            i.trigger.move(e);\n          });\n        });\n      },\n      reset: function reset() {\n        u = q.none();\n      },\n      events: (i = Su({\n        move: Cu([\"info\"])\n      })).registry\n    }),\n        t = e;\n    return {\n      on: function on() {\n        t.reset(), t = n;\n      },\n      off: function off() {\n        t.reset(), t = e;\n      },\n      isOn: function isOn() {\n        return t === n;\n      },\n      onEvent: function onEvent(e, n) {\n        t.onEvent(e, n);\n      },\n      events: n.events\n    };\n  }\n\n  function Ou(e) {\n    function n() {\n      return e.stopPropagation();\n    }\n\n    function t() {\n      return e.preventDefault();\n    }\n\n    var r,\n        o,\n        u = Ve.fromDom(function (e) {\n      if (wn() && l(e.target)) {\n        var n = Ve.fromDom(e.target);\n\n        if (gn(n) && Cn(n) && e.composed && e.composedPath) {\n          var t = e.composedPath();\n          if (t) return j(t);\n        }\n      }\n\n      return q.from(e.target);\n    }(e).getOr(e.target)),\n        i = (r = t, o = n, function () {\n      for (var e = [], n = 0; n < arguments.length; n++) {\n        e[n] = arguments[n];\n      }\n\n      return r(o.apply(null, e));\n    });\n    return {\n      target: u,\n      x: e.clientX,\n      y: e.clientY,\n      stop: n,\n      prevent: t,\n      kill: i,\n      raw: e\n    };\n  }\n\n  function Au(e, n, t) {\n    return o = n, u = !1, i = sa, c = t, l = function l(e) {\n      i(e) && c(Ou(e));\n    }, (r = e).dom.addEventListener(o, l, u), {\n      unbind: P(fa, r, o, l, u)\n    };\n    var r, o, u, i, c, l;\n  }\n\n  function ku(e) {\n    return void 0 !== e.dom.classList;\n  }\n\n  function Iu(e, n) {\n    return o = n, Mn(e, t = \"class\", (void 0 === (r = Pn(e, t)) || \"\" === r ? [] : r.split(\" \")).concat([o]).join(\" \")), 1;\n    var t, r, o;\n  }\n\n  function Bu(e, n) {\n    ku(e) ? e.dom.classList.add(n) : Iu(e, n);\n  }\n\n  function Mu(e, n) {\n    return ku(e) && e.dom.classList.contains(n);\n  }\n\n  function Eu(e) {\n    var n = e.replace(/\\./g, \"-\");\n    return {\n      resolve: function resolve(e) {\n        return n + \"-\" + e;\n      }\n    };\n  }\n\n  function Pu(e) {\n    return In(e, \"[contenteditable]\");\n  }\n\n  function Nu(e, n) {\n    return void 0 === n && (n = !1), !He().browser.isIE() && Sn(e) ? e.dom.isContentEditable : Pu(e).fold(C(n), function (e) {\n      return \"true\" === pa(e);\n    });\n  }\n\n  function zu(e) {\n    A(dn(e.parent(), \".\" + ha), Yt);\n  }\n\n  function Lu(t, e, r) {\n    var o = t.origin();\n    A(e, function (e) {\n      e.each(function (e) {\n        var n = r(o, e);\n        Bu(n, ha), Xt(t.parent(), n);\n      });\n    });\n  }\n\n  function _u(e, n, t, r, o) {\n    var u,\n        i,\n        c,\n        l,\n        a,\n        f = Dr(t),\n        s = n.isResizable,\n        m = 0 < r.length ? co.positions(r, t) : [],\n        d = 0 < m.length ? (u = s, N(e.all, function (e, n) {\n      return u(e.element) ? [n] : [];\n    })) : [],\n        g = k(m, function (e, n) {\n      return R(d, function (e) {\n        return n === e;\n      });\n    });\n    i = n, c = g, l = f, a = wr(t), Lu(i, c, function (e, n) {\n      var t,\n          r,\n          o,\n          u,\n          i,\n          c = (t = n.row, r = l.left - e.left, o = n.y - e.top, u = a, qn(i = Ve.fromTag(\"div\"), {\n        position: \"absolute\",\n        left: r + \"px\",\n        top: o - 3.5 + \"px\",\n        height: \"7px\",\n        width: u + \"px\"\n      }), En(i, {\n        \"data-row\": t,\n        role: \"presentation\"\n      }), i);\n      return Bu(c, va), c;\n    });\n    var p,\n        b,\n        h,\n        v,\n        w,\n        y,\n        C,\n        S = 0 < o.length ? ao.positions(o, t) : [],\n        T = 0 < S.length ? (b = s, h = [], D((p = e).grid.columns, function (e) {\n      $t.getColumnAt(p, e).map(function (e) {\n        return e.element;\n      }).forall(b) && h.push(e);\n    }), k(h, function (n) {\n      return z($t.filterItems(p, function (e) {\n        return e.column === n;\n      }), function (e) {\n        return b(e.element);\n      });\n    })) : [],\n        x = k(S, function (e, n) {\n      return R(T, function (e) {\n        return n === e;\n      });\n    });\n    v = n, w = x, y = f, C = xr(t), Lu(v, w, function (e, n) {\n      var t,\n          r,\n          o,\n          u,\n          i,\n          c = (t = n.col, r = n.x - e.left, o = y.top - e.top, u = C, qn(i = Ve.fromTag(\"div\"), {\n        position: \"absolute\",\n        left: r - 3.5 + \"px\",\n        top: o + \"px\",\n        height: u + \"px\",\n        width: \"7px\"\n      }), En(i, {\n        \"data-column\": t,\n        role: \"presentation\"\n      }), i);\n      return Bu(c, wa), c;\n    });\n  }\n\n  function Wu(e, n) {\n    var t;\n    zu(e), e.isResizable(n) && _u(t = $t.fromTable(n), e, n, Cr(t), yr(t));\n  }\n\n  function ju(e, n) {\n    A(dn(e.parent(), \".\" + ha), n);\n  }\n\n  function Fu(e) {\n    ju(e, function (e) {\n      Vn(e, \"display\", \"none\");\n    });\n  }\n\n  function Hu(e) {\n    ju(e, function (e) {\n      Vn(e, \"display\", \"block\");\n    });\n  }\n\n  function Vu(o) {\n    function e(e, n) {\n      return q.from(Pn(e, n));\n    }\n\n    var n,\n        t,\n        r,\n        u,\n        i,\n        c,\n        l = (u = Su({\n      drag: Cu([\"xDelta\", \"yDelta\", \"target\"])\n    }), i = q.none(), (c = {\n      mutate: function mutate(e, n) {\n        r.trigger.drag(e, n);\n      },\n      events: (r = Su({\n        drag: Cu([\"xDelta\", \"yDelta\"])\n      })).registry\n    }).events.drag.bind(function (n) {\n      i.each(function (e) {\n        u.trigger.drag(n.xDelta, n.yDelta, e);\n      });\n    }), {\n      assign: function assign(e) {\n        i = q.some(e);\n      },\n      get: function get() {\n        return i;\n      },\n      mutate: c.mutate,\n      events: u.registry\n    }),\n        a = (t = void 0 !== (n = {}).mode ? n.mode : ga, function (n, t, e) {\n      function r() {\n        m.stop(), l.isOn() && (l.off(), c.trigger.stop());\n      }\n\n      var o,\n          u,\n          i = !1,\n          c = Su({\n        start: Cu([]),\n        stop: Cu([])\n      }),\n          l = Du(),\n          a = (o = r, u = null, {\n        cancel: f,\n        throttle: function throttle() {\n          for (var e = [], n = 0; n < arguments.length; n++) {\n            e[n] = arguments[n];\n          }\n\n          f(), u = setTimeout(function () {\n            u = null, o.apply(null, e);\n          }, 200);\n        }\n      });\n\n      function f() {\n        h(u) || (clearTimeout(u), u = null);\n      }\n\n      function s(t) {\n        return function () {\n          for (var e = [], n = 0; n < arguments.length; n++) {\n            e[n] = arguments[n];\n          }\n\n          i && t.apply(null, e);\n        };\n      }\n\n      l.events.move.bind(function (e) {\n        t.mutate(n, e.info);\n      });\n      var m = t.sink(aa({\n        forceDrop: r,\n        drop: s(r),\n        move: s(function (e) {\n          a.cancel(), l.onEvent(e, t);\n        }),\n        delayDrop: s(a.throttle)\n      }), e);\n      return {\n        element: m.element,\n        go: function go(e) {\n          m.start(e), l.on(), c.trigger.start();\n        },\n        on: function on() {\n          i = !0;\n        },\n        off: function off() {\n          i = !1;\n        },\n        destroy: function destroy() {\n          m.destroy();\n        },\n        events: c.registry\n      };\n    }(l, t, n)),\n        f = q.none();\n\n    function s(e, n) {\n      return Qn(e, n) - Kn(e, \"data-initial-\" + n, 0);\n    }\n\n    function m(e, n) {\n      b.trigger.startAdjust(), l.assign(e), Mn(e, \"data-initial-\" + n, Qn(e, n)), Bu(e, ya), Vn(e, \"opacity\", \"0.2\"), a.go(o.parent());\n    }\n\n    function d(e) {\n      return ce(e, o.view());\n    }\n\n    l.events.drag.bind(function (t) {\n      e(t.target, \"data-row\").each(function (e) {\n        var n = Qn(t.target, \"top\");\n        Vn(t.target, \"top\", n + t.yDelta + \"px\");\n      }), e(t.target, \"data-column\").each(function (e) {\n        var n = Qn(t.target, \"left\");\n        Vn(t.target, \"left\", n + t.xDelta + \"px\");\n      });\n    }), a.events.stop.bind(function () {\n      l.get().each(function (r) {\n        f.each(function (t) {\n          e(r, \"data-row\").each(function (e) {\n            var n = s(r, \"top\");\n            Wt(r, \"data-initial-top\"), b.trigger.adjustHeight(t, n, parseInt(e, 10));\n          }), e(r, \"data-column\").each(function (e) {\n            var n = s(r, \"left\");\n            Wt(r, \"data-initial-left\"), b.trigger.adjustWidth(t, n, parseInt(e, 10));\n          }), Wu(o, t);\n        });\n      });\n    });\n    var g = Au(o.parent(), \"mousedown\", function (e) {\n      Mu(e.target, va) && m(e.target, \"top\"), Mu(e.target, wa) && m(e.target, \"left\");\n    }),\n        p = Au(o.view(), \"mouseover\", function (e) {\n      In(e.target, \"table\", d).filter(Nu).fold(function () {\n        Sn(e.target) && zu(o);\n      }, function (e) {\n        f = q.some(e), Wu(o, e);\n      });\n    }),\n        b = Su({\n      adjustHeight: Cu([\"table\", \"delta\", \"row\"]),\n      adjustWidth: Cu([\"table\", \"delta\", \"column\"]),\n      startAdjust: Cu([])\n    });\n    return {\n      destroy: function destroy() {\n        g.unbind(), p.unbind(), a.destroy(), zu(o);\n      },\n      refresh: function refresh(e) {\n        Wu(o, e);\n      },\n      on: a.on,\n      off: a.off,\n      hideBars: P(Fu, o),\n      showBars: P(Hu, o),\n      events: b.registry\n    };\n  }\n\n  function qu(e, n) {\n    return e.fire(\"newrow\", {\n      node: n\n    });\n  }\n\n  function Uu(e, n) {\n    return e.fire(\"newcell\", {\n      node: n\n    });\n  }\n\n  function Gu(e, n, t) {\n    e.fire(\"TableModified\", _K(_K({}, t), {\n      table: n\n    }));\n  }\n\n  function $u(e) {\n    return e.getParam(\"table_sizing_mode\", \"auto\");\n  }\n\n  function Ku(e) {\n    return e.getParam(\"table_responsive_width\");\n  }\n\n  function Xu(e) {\n    return e.getParam(\"table_border_widths\", Ra, \"array\");\n  }\n\n  function Yu(e) {\n    return e.getParam(\"table_border_styles\", Da, \"array\");\n  }\n\n  function Ju(e) {\n    return e.getParam(\"table_default_attributes\", Oa, \"object\");\n  }\n\n  function Qu(e) {\n    return e.getParam(\"table_default_styles\", function (e) {\n      var n;\n\n      if (ka(e)) {\n        var t = e.dom,\n            r = null !== (n = t.getParent(e.selection.getStart(), t.isBlock)) && void 0 !== n ? n : e.getBody(),\n            o = Qr(Ve.fromDom(r));\n        return _K(_K({}, xa), {\n          width: o + \"px\"\n        });\n      }\n\n      return Ia(e) ? se(xa, function (e, n) {\n        return \"width\" !== n;\n      }) : xa;\n    }(e), \"object\");\n  }\n\n  function Zu(e) {\n    return e.getParam(\"table_cell_advtab\", !0, \"boolean\");\n  }\n\n  function ei(e) {\n    return e.getParam(\"table_row_advtab\", !0, \"boolean\");\n  }\n\n  function ni(e) {\n    return e.getParam(\"table_advtab\", !0, \"boolean\");\n  }\n\n  function ti(e) {\n    return e.getParam(\"table_style_by_css\", !1, \"boolean\");\n  }\n\n  function ri(e) {\n    return e.getParam(\"table_cell_class_list\", [], \"array\");\n  }\n\n  function oi(e) {\n    return e.getParam(\"table_class_list\", [], \"array\");\n  }\n\n  function ui(e) {\n    return \"relative\" === $u(e) || !0 === Ku(e);\n  }\n\n  function ii(e) {\n    var n = \"section\",\n        t = e.getParam(\"table_header_type\", n, \"string\");\n    return y([\"section\", \"cells\", \"sectionCells\", \"auto\"], t) ? t : n;\n  }\n\n  function ci(e) {\n    var n = e.getParam(\"table_column_resizing\", Aa, \"string\");\n    return w([\"preservetable\", \"resizetable\"], function (e) {\n      return e === n;\n    }).getOr(Aa);\n  }\n\n  function li(e) {\n    return \"preservetable\" === ci(e);\n  }\n\n  function ai(e) {\n    return \"resizetable\" === ci(e);\n  }\n\n  function fi(e) {\n    var n = e.getParam(\"table_clone_elements\");\n    return T(n) ? q.some(n.split(/[ ,]/)) : Array.isArray(n) ? q.some(n) : q.none();\n  }\n\n  function si(e) {\n    return e.getParam(\"table_background_color_map\", [], \"array\");\n  }\n\n  function mi(e) {\n    return e.getParam(\"table_border_color_map\", [], \"array\");\n  }\n\n  function di(e, n) {\n    return (ui(e) ? Ul : ka(e) ? ql : Vl)(n);\n  }\n\n  function gi(e) {\n    Wt(e, \"width\");\n  }\n\n  function pi(e) {\n    return \"false\" !== Pn(e, \"data-mce-resize\");\n  }\n\n  function bi(p) {\n    function m(e) {\n      return \"TABLE\" === e.nodeName;\n    }\n\n    function b(e) {\n      return di(p, e);\n    }\n\n    function h() {\n      return (li(p) ? gu : du)();\n    }\n\n    var d,\n        g,\n        v = q.none(),\n        w = q.none(),\n        y = q.none();\n    return p.on(\"init\", function () {\n      var e,\n          n,\n          t,\n          r,\n          o,\n          u,\n          i,\n          c,\n          l,\n          a,\n          m,\n          f,\n          s,\n          d,\n          g = (n = pi, (e = p).inline ? (u = Yo(e), qn(c = Ve.fromTag(\"div\"), {\n        position: \"static\",\n        height: \"0\",\n        width: \"0\",\n        padding: \"0\",\n        margin: \"0\",\n        border: \"0\"\n      }), Xt(Tn(Ve.fromDom(document)), c), c, i = n, {\n        parent: C(c),\n        view: C(u),\n        origin: C(uo(0, 0)),\n        isResizable: i\n      }) : Il(Ve.fromDom(e.getDoc()), n));\n      y = q.some(g), o = p.getParam(\"object_resizing\", !0), (T(o) ? \"table\" === o : o) && p.getParam(\"table_resize_bars\", !0, \"boolean\") && (t = h(), l = t, a = b, m = co, f = ao, s = Vu(g), d = Su({\n        beforeResize: Cu([\"table\", \"type\"]),\n        afterResize: Cu([\"table\", \"type\"]),\n        startDrag: Cu([])\n      }), s.events.adjustHeight.bind(function (e) {\n        var n = e.table;\n        d.trigger.beforeResize(n, \"row\");\n        var t,\n            r,\n            o,\n            u,\n            i,\n            c,\n            l,\n            a,\n            f,\n            s = m.delta(e.delta, n);\n        t = n, r = s, o = e.row, u = m, l = $t.fromTable(t), a = O(Mo(l, t, u, To, function (e) {\n          return e.getOrThunk(Ht);\n        }), function (e, n) {\n          return o === n ? Math.max(r + e, Ht()) : e;\n        }), i = a, f = O($t.justCells(l), function (e) {\n          var n = cu(e.row, e.row + e.rowspan, i);\n          return {\n            element: e.element,\n            height: n,\n            rowspan: e.rowspan\n          };\n        }), A((c = a, O(l.all, function (e, n) {\n          return {\n            element: e.element,\n            height: c[n]\n          };\n        })), function (e) {\n          ho(e.element, e.height);\n        }), A(f, function (e) {\n          ho(e.element, e.height);\n        }), ho(t, I(a, function (e, n) {\n          return e + n;\n        }, 0)), d.trigger.afterResize(n, \"row\");\n      }), s.events.startAdjust.bind(function (e) {\n        d.trigger.startDrag();\n      }), s.events.adjustWidth.bind(function (e) {\n        var n = e.table;\n        d.trigger.beforeResize(n, \"col\");\n        var t = f.delta(e.delta, n),\n            r = a(n);\n        au(n, t, e.column, l, r), d.trigger.afterResize(n, \"col\");\n      }), (r = {\n        on: s.on,\n        off: s.off,\n        hideBars: s.hideBars,\n        showBars: s.showBars,\n        destroy: s.destroy,\n        events: d.registry\n      }).on(), r.events.startDrag.bind(function (e) {\n        v = q.some(p.selection.getRng());\n      }), r.events.beforeResize.bind(function (e) {\n        var n,\n            t = e.table.dom,\n            r = p,\n            o = Jo(n = t),\n            u = Qo(t),\n            i = Pa + e.type;\n        r.fire(\"ObjectResizeStart\", {\n          target: n,\n          width: o,\n          height: u,\n          origin: i\n        });\n      }), r.events.afterResize.bind(function (e) {\n        var n,\n            t,\n            r,\n            o,\n            u,\n            i = e.table,\n            c = i.dom;\n        nu(i), v.each(function (e) {\n          p.selection.setRng(e), p.focus();\n        }), n = p, r = Jo(t = c), o = Qo(c), u = Pa + e.type, n.fire(\"ObjectResized\", {\n          target: t,\n          width: r,\n          height: o,\n          origin: u\n        }), p.undoManager.add();\n      }), w = q.some(r));\n    }), p.on(\"ObjectResizeStart\", function (e) {\n      var n,\n          t,\n          r,\n          o,\n          u = e.target;\n      m(u) && (n = Ve.fromDom(u), A(p.dom.select(\".mce-clonedresizable\"), function (e) {\n        p.dom.addClass(e, \"mce-\" + ci(p) + \"-columns\");\n      }), !Ml(n) && ka(p) ? Ma(n) : !Bl(n) && ui(p) && Ba(n), El(n) && Ae(e.origin, Pa) && Ba(n), d = e.width, g = Ia(p) ? \"\" : (o = (t = p).dom.getStyle(r = u, \"width\") || t.dom.getAttrib(r, \"width\"), q.from(o).filter(ne).getOr(\"\")));\n    }), p.on(\"ObjectResized\", function (e) {\n      var n,\n          t,\n          r,\n          o,\n          u,\n          i,\n          c,\n          l,\n          a,\n          f,\n          s = e.target;\n      m(s) && (n = Ve.fromDom(s), t = e.origin, Ae(t, \"corner-\") && (r = n, o = e.width, f = ee(t, \"e\"), \"\" === g && Ba(r), o !== d && \"\" !== g ? (Vn(r, \"width\", g), u = h(), i = b(r), c = li(p) || f ? yu(r).columns - 1 : 0, au(r, o - d, c, u, i)) : /^(\\d+(\\.\\d+)?)%$/.test(g) && Vn(r, \"width\", o * parseFloat(g.replace(\"%\", \"\")) / d + \"%\"), /^(\\d+(\\.\\d+)?)px$/.test(g) && (a = $t.fromTable(l = r), $t.hasColumns(a) || A(nt(l), function (e) {\n        Vn(e, \"width\", Un(e, \"width\")), Wt(e, \"width\");\n      }))), nu(n), Gu(p, n.dom, Ca));\n    }), p.on(\"SwitchMode\", function () {\n      w.each(function (e) {\n        p.mode.isReadOnly() ? e.hideBars() : e.showBars();\n      });\n    }), {\n      lazyResize: function lazyResize() {\n        return w;\n      },\n      lazyWire: function lazyWire() {\n        return y.getOr(Il(Ve.fromDom(p.getBody()), pi));\n      },\n      destroy: function destroy() {\n        w.each(function (e) {\n          e.destroy();\n        }), y.each(function (e) {\n          var n = e;\n          p.inline && Yt(n.parent());\n        });\n      }\n    };\n  }\n\n  function hi(e, n) {\n    return {\n      element: e,\n      offset: n\n    };\n  }\n\n  function vi(e, n) {\n    return (e.property().isText(n) ? e.property().getText(n) : e.property().children(n)).length;\n  }\n\n  function wi(t, r) {\n    1 === Xn(t, \"colspan\") && yo(t).bind(function (e) {\n      return o = [\"fixed\", \"relative\", \"empty\"], q.from(so.exec(e)).bind(function (e) {\n        var n = Number(e[1]),\n            t = e[2],\n            r = t;\n        return R(o, function (e) {\n          return R(fo[e], function (e) {\n            return r === e;\n          });\n        }) ? q.some({\n          value: n,\n          unit: t\n        }) : q.none();\n      });\n      var o;\n    }).each(function (e) {\n      var n = e.value / 2;\n      xo(t, n, e.unit), xo(r, n, e.unit);\n    });\n  }\n\n  function yi(e) {\n    return z(e, function (e) {\n      return Wa(e.element);\n    });\n  }\n\n  function Ci(e) {\n    var n = \"thead\" === e.section,\n        t = Ln(ja(e.cells), \"th\");\n    return n || t ? {\n      type: \"header\",\n      subType: n && t ? \"sectionCells\" : n ? \"section\" : \"cells\"\n    } : \"tfoot\" === e.section ? {\n      type: \"footer\"\n    } : {\n      type: \"body\"\n    };\n  }\n\n  function Si(e, n, t) {\n    return we(t(e.element, n), !0, e.isLocked);\n  }\n\n  function Ti(e, n) {\n    return e.section !== n ? ye(e.element, e.cells, n, e.isNew) : e;\n  }\n\n  function xi() {\n    return {\n      transformRow: Ti,\n      transformCell: function transformCell(e, n, t) {\n        var r,\n            o,\n            u = t(e.element, n);\n        return we(\"td\" !== Ye(u) ? (o = sr(r = u, \"td\"), Rt(r, o), It(o, ln(r)), Yt(r), o) : u, e.isNew, e.isLocked);\n      }\n    };\n  }\n\n  function Ri() {\n    return {\n      transformRow: Ti,\n      transformCell: Si\n    };\n  }\n\n  function Di() {\n    return {\n      transformRow: function transformRow(e, n) {\n        return Ti(e, \"thead\" === n ? \"tbody\" : n);\n      },\n      transformCell: Si\n    };\n  }\n\n  function Oi(e, n, t, r) {\n    t === r ? Wt(e, n) : Mn(e, n, t);\n  }\n\n  function Ai(e, n, t) {\n    F(mn(e, n)).fold(function () {\n      return Ot(e, t);\n    }, function (e) {\n      return Dt(e, t);\n    });\n  }\n\n  function ki(u, e) {\n    function t(e, n) {\n      var t, r, o;\n      It((Bt(o = An(t = u, r = n).getOrThunk(function () {\n        var e = Ve.fromTag(r, nn(t).dom);\n        return \"thead\" === r ? Ai(t, \"caption,colgroup\", e) : \"colgroup\" === r ? Ai(t, \"caption\", e) : Xt(t, e), e;\n      })), o), (\"colgroup\" === n ? function (e) {\n        return N(e, function (e) {\n          return O(e.cells, function (e) {\n            return Oi(e.element, \"span\", e.colspan, 1), e.element;\n          });\n        });\n      } : function (e) {\n        return O(e, function (e) {\n          e.isNew && i.push(e.element);\n          var n = e.element;\n          return Bt(n), A(e.cells, function (e) {\n            e.isNew && c.push(e.element), Oi(e.element, \"colspan\", e.colspan, 1), Oi(e.element, \"rowspan\", e.rowspan, 1), Xt(n, e.element);\n          }), n;\n        });\n      })(e));\n    }\n\n    function n(e, n) {\n      0 < e.length ? t(e, n) : An(u, n).each(Yt);\n    }\n\n    var i = [],\n        c = [],\n        r = [],\n        o = [],\n        l = [],\n        a = [];\n    return A(e, function (e) {\n      switch (e.section) {\n        case \"thead\":\n          r.push(e);\n          break;\n\n        case \"tbody\":\n          o.push(e);\n          break;\n\n        case \"tfoot\":\n          l.push(e);\n          break;\n\n        case \"colgroup\":\n          a.push(e);\n      }\n    }), n(a, \"colgroup\"), n(r, \"thead\"), n(o, \"tbody\"), n(l, \"tfoot\"), {\n      newRows: i,\n      newCells: c\n    };\n  }\n\n  function Ii(e, n) {\n    if (0 === e.length) return 0;\n    var t = e[0];\n    return b(e, function (e) {\n      return !n(t.element, e.element);\n    }).getOr(e.length);\n  }\n\n  function Bi(m, d) {\n    var g = O(m, function (e) {\n      return O(e.cells, v);\n    });\n    return O(m, function (e, s) {\n      var n = N(e.cells, function (e, n) {\n        if (!1 !== g[s][n]) return [];\n        var t,\n            r,\n            o,\n            u,\n            i,\n            c,\n            l,\n            a,\n            f = (o = n, u = d, l = (t = m)[r = s], a = \"colgroup\" === l.section, {\n          colspan: Ii(l.cells.slice(o), u),\n          rowspan: a ? 1 : Ii((i = t.slice(r), c = o, O(i, function (e) {\n            return st(e, c);\n          })), u)\n        });\n        return function (e, n, t, r) {\n          for (var o = e; o < e + t; o++) {\n            for (var u = n; u < n + r; u++) {\n              g[o][u] = !0;\n            }\n          }\n        }(s, n, f.rowspan, f.colspan), [{\n          element: e.element,\n          rowspan: f.rowspan,\n          colspan: f.colspan,\n          isNew: e.isNew\n        }];\n      });\n      return {\n        element: e.element,\n        cells: n,\n        section: e.section,\n        isNew: e.isNew\n      };\n    });\n  }\n\n  function Mi(o, u, i) {\n    var c = [];\n    A(o.colgroups, function (e) {\n      for (var n = [], t = 0; t < o.grid.columns; t++) {\n        var r = $t.getColumnAt(o, t).map(function (e) {\n          return we(e.element, i, !1);\n        }).getOrThunk(function () {\n          return we(u.colGap(), !0, !1);\n        });\n        n.push(r);\n      }\n\n      c.push(ye(e.element, n, \"colgroup\", i));\n    });\n\n    for (var e = 0; e < o.grid.rows; e++) {\n      for (var n = [], t = 0; t < o.grid.columns; t++) {\n        var r = $t.getAt(o, e, t).map(function (e) {\n          return we(e.element, i, e.isLocked);\n        }).getOrThunk(function () {\n          return we(u.gap(), !0, !1);\n        });\n        n.push(r);\n      }\n\n      var l = o.all[e],\n          a = ye(l.element, n, l.section, i);\n      c.push(a);\n    }\n\n    return c;\n  }\n\n  function Ei(e) {\n    return Bi(e, ce);\n  }\n\n  function Pi(e, n) {\n    return H(e.all, function (e) {\n      return w(e.cells, function (e) {\n        return ce(n, e.element);\n      });\n    });\n  }\n\n  function Ni(n, e, t) {\n    var r = _n(O(e.selection, function (e) {\n      return et(e).bind(function (e) {\n        return Pi(n, e);\n      }).filter(t);\n    }));\n\n    return jn(0 < r.length, r);\n  }\n\n  function zi(f, n, s, m, d) {\n    return function (o, u, e, i, c) {\n      var l = $t.fromTable(u),\n          a = q.from(null == c ? void 0 : c.section).getOrThunk(Pl);\n      return n(l, e).map(function (e) {\n        var n = Mi(l, i, !1),\n            t = f(n, e, ce, d(i), a),\n            r = ht(t.grid);\n        return {\n          info: e,\n          grid: Ei(t.grid),\n          cursor: t.cursor,\n          lockedColumns: r\n        };\n      }).bind(function (e) {\n        var n = ki(u, e.grid),\n            t = q.from(null == c ? void 0 : c.sizing).getOrThunk(function () {\n          return Vl(u);\n        }),\n            r = q.from(null == c ? void 0 : c.resize).getOrThunk(gu);\n        return s(u, e.grid, e.info, {\n          sizing: t,\n          resize: r,\n          section: a\n        }), m(u), Wu(o, u), Wt(u, Gt), 0 < e.lockedColumns.length && Mn(u, Gt, e.lockedColumns.join(\",\")), q.some({\n          cursor: e.cursor,\n          newRows: n.newRows,\n          newCells: n.newCells\n        });\n      });\n    };\n  }\n\n  function Li(e, n) {\n    return Ni(e, n, x).map(function (e) {\n      return {\n        cells: e,\n        generators: n.generators,\n        clipboard: n.clipboard\n      };\n    });\n  }\n\n  function _i(e, n) {\n    return Ni(e, n, x);\n  }\n\n  function Wi(e, n) {\n    return Ni(e, n, function (e) {\n      return !e.isLocked;\n    });\n  }\n\n  function ji(n, e) {\n    return z(e, function (e) {\n      return Pi(n, e).exists(function (e) {\n        return !e.isLocked;\n      });\n    });\n  }\n\n  function Fi(n, e) {\n    return e.mergable.filter(function (e) {\n      return ji(n, e.cells);\n    });\n  }\n\n  function Hi(n, e) {\n    return e.unmergable.filter(function (e) {\n      return ji(n, e);\n    });\n  }\n\n  function Vi(e, n, t, r) {\n    for (var o = gt(e).rows, u = !0, i = 0; i < o.length; i++) {\n      for (var c = 0; c < dt(o[0]); c++) {\n        var l = o[i],\n            a = st(l, c),\n            f = t(a.element, n);\n        !0 === f && !1 === u ? ft(l, c, we(r(), !0, a.isLocked)) : !0 === f && (u = !1);\n      }\n    }\n\n    return e;\n  }\n\n  function qi(e, t, i, c) {\n    var n,\n        r,\n        l = gt(e).rows;\n    return 0 < t && t < l.length && (n = l[t - 1].cells, r = i, A(B(n, function (e, n) {\n      return R(e, function (e) {\n        return r(e.element, n.element);\n      }) ? e : e.concat([n]);\n    }, []), function (e) {\n      for (var o = q.none(), u = t; u < l.length; u++) {\n        for (var n = 0; n < dt(l[0]); n++) {\n          !function (n) {\n            var t = l[u],\n                r = st(t, n);\n            i(r.element, e.element) && (o = o.isNone() ? q.some(c()) : o).each(function (e) {\n              ft(t, n, we(e, !0, r.isLocked));\n            });\n          }(n);\n        }\n      }\n    })), e;\n  }\n\n  function Ui(e, n) {\n    return {\n      rowDelta: 0,\n      colDelta: dt(e[0]) - dt(n[0])\n    };\n  }\n\n  function Gi(e, n) {\n    return {\n      rowDelta: e.length - n.length,\n      colDelta: 0\n    };\n  }\n\n  function $i(e, n, t, r) {\n    var o = \"colgroup\" === n.section ? t.col : t.cell;\n    return D(e, function (e) {\n      return we(o(), !0, r(e));\n    });\n  }\n\n  function Ki(e, n, r, o) {\n    var u = e[e.length - 1];\n    return e.concat(D(n, function () {\n      var e = \"colgroup\" === u.section ? r.colgroup : r.row,\n          n = pt(u, e, S),\n          t = $i(n.cells.length, n, r, function (e) {\n        return Ke(o, e.toString());\n      });\n      return Ut(n, t);\n    }));\n  }\n\n  function Xi(e, t, r, o) {\n    return O(e, function (e) {\n      var n = $i(t, e, r, v);\n      return lt(e, o, n);\n    });\n  }\n\n  function Yi(e, n, t) {\n    var r = n.colDelta < 0 ? Xi : S,\n        o = n.rowDelta < 0 ? Ki : S,\n        u = ht(e),\n        i = dt(e[0]),\n        c = R(u, function (e) {\n      return e === i - 1;\n    }),\n        l = r(e, Math.abs(n.colDelta), t, c ? i - 1 : i),\n        a = ht(l);\n    return o(l, Math.abs(n.rowDelta), t, L(a, x));\n  }\n\n  function Ji(n, t, e) {\n    return k(e, function (e) {\n      return e >= n.column && e <= dt(t[0]) + n.column;\n    });\n  }\n\n  function Qi(e, u, n, i, c) {\n    var t,\n        r,\n        o,\n        l = ht(u),\n        a = (t = e, r = l, o = dt(u[0]), {\n      row: gt(u).cols.length + t.row,\n      column: w(D(o - t.column, function (e) {\n        return e + t.column;\n      }), function (n) {\n        return z(r, function (e) {\n          return e !== n;\n        });\n      }).getOr(o - 1)\n    }),\n        f = gt(n).rows,\n        s = Ji(a, f, l);\n    return function (e, n, t) {\n      if (e.row >= n.length || e.column > dt(n[0])) return Ga.error(\"invalid start address out of table bounds, row: \" + e.row + \", column: \" + e.column);\n      var r = n.slice(e.row),\n          o = r[0].cells.slice(e.column),\n          u = dt(t[0]),\n          i = t.length;\n      return Ga.value({\n        rowDelta: r.length - i,\n        colDelta: o.length - u\n      });\n    }(a, u, f).map(function (e) {\n      var n = _K(_K({}, e), {\n        colDelta: e.colDelta - s.length\n      }),\n          t = Yi(u, n, i),\n          r = ht(t),\n          o = Ji(a, f, r);\n\n      return function (e, n, t, r, o, u) {\n        for (var i, c, l, a, f, s = e.row, m = e.column, d = s + t.length, g = m + dt(t[0]) + u.length, p = L(u, x), b = s; b < d; b++) {\n          for (var h, v, w, y = 0, C = m; C < g; C++) {\n            p[C] ? y++ : (l = C, a = void 0, a = P(o, st((i = n)[c = b], l).element), f = i[c], 1 < i.length && 1 < dt(f) && (0 < l && a(mt(f, l - 1)) || l < f.cells.length - 1 && a(mt(f, l + 1)) || 0 < c && a(mt(i[c - 1], l)) || c < i.length - 1 && a(mt(i[c + 1], l))) && Vi(n, mt(n[b], C), o, r.cell), v = (h = st(t[b - s], C - m - y)).element, w = r.replace(v), ft(n[b], C, we(w, !0, h.isLocked)));\n          }\n        }\n\n        return n;\n      }(a, t, f, i, c, o);\n    });\n  }\n\n  function Zi(t, e, n, r, o) {\n    var u = t,\n        i = o,\n        c = r.cell;\n    0 < u && u < e[0].cells.length && A(e, function (e) {\n      var n = e.cells[u - 1],\n          t = e.cells[u];\n      i(t.element, n.element) && ft(e, u, we(c(), !0, t.isLocked));\n    });\n    var l = Yi(n, Gi(n, e), r);\n    return O(Yi(e, Gi(e, l), r), function (e, n) {\n      return lt(e, t, l[n].cells);\n    });\n  }\n\n  function ec(e, n, t, r, o) {\n    qi(n, e, o, r.cell);\n\n    var u,\n        i,\n        c = ht(n),\n        l = Ui(n, t),\n        a = Yi(n, _K(_K({}, l), {\n      colDelta: l.colDelta - c.length\n    }), r),\n        f = gt(a),\n        s = f.cols,\n        m = f.rows,\n        d = ht(a),\n        g = Ui(t, n),\n        p = _K(_K({}, g), {\n      colDelta: g.colDelta + d.length\n    }),\n        b = Yi((u = r, i = d, O(t, function (t) {\n      return B(i, function (e, n) {\n        return at(e, n, $i(1, t, u, x)[0]);\n      }, t);\n    })), p, r);\n\n    return s.concat(m.slice(0, e)).concat(b).concat(m.slice(e, m.length));\n  }\n\n  function nc(e, t, n, r, o) {\n    var u,\n        i,\n        c,\n        l,\n        a = gt(e),\n        f = a.rows,\n        s = a.cols,\n        m = f.slice(0, t),\n        d = f.slice(t),\n        g = (u = f[n], i = function i(e, n) {\n      return 0 < t && t < f.length && r(mt(f[t - 1], n), mt(f[t], n)) ? st(f[t], n) : we(o(e.element, r), !0, e.isLocked);\n    }, c = r, l = o, pt(u, function (e) {\n      return l(e, c);\n    }, i));\n    return s.concat(m).concat([g]).concat(d);\n  }\n\n  function tc(e, u, i, c, l) {\n    return O(e, function (e) {\n      var n,\n          t,\n          r = 0 < u && u < dt(e) && c(mt(e, u - 1), mt(e, u)),\n          o = (n = e.section, t = l, \"colgroup\" !== n && r ? st(e, u) : we(t(st(e, i).element, c), !0, !1));\n      return at(e, u, o);\n    });\n  }\n\n  function rc(e, n, t, r) {\n    return void 0 !== mt((u = e)[i = n], t) && 0 < i && r(mt(u[i - 1], t), mt(u[i], t)) || (o = e[n], 0 < t && r(mt(o, t - 1), mt(o, t)));\n    var o, u, i;\n  }\n\n  function oc(e, n, t, r) {\n    function o(e) {\n      return (\"row\" === e ? Jn : Yn)(n) ? e + \"group\" : e;\n    }\n\n    return e ? Wa(n) ? o(t) : null : r && Wa(n) ? o(\"row\" === t ? \"col\" : \"row\") : null;\n  }\n\n  function uc(e, n, t) {\n    return we(t(e.element, n), !0, e.isLocked);\n  }\n\n  function ic(e, u, i, c, l, a, f) {\n    return O(e, function (e, o) {\n      return t = function t(e, n) {\n        if (t = e, R(u, function (e) {\n          return i(t.element, e.element);\n        })) {\n          var r = f(e, o, n) ? l(e, i, c) : e;\n          return a(r, o, n).each(function (e) {\n            var t = r.element;\n            ae({\n              scope: q.from(e)\n            }, function (e, n) {\n              e.fold(function () {\n                Wt(t, n);\n              }, function (e) {\n                Bn(t.dom, n, e);\n              });\n            });\n          }), r;\n        }\n\n        return e;\n        var t;\n      }, r = O((n = e).cells, t), ye(n.element, r, n.section, n.isNew);\n      var n, t, r;\n    });\n  }\n\n  function cc(t, r, o) {\n    return N(t, function (e, n) {\n      return rc(t, n, r, o) ? [] : [st(e, r)];\n    });\n  }\n\n  function lc(e, n, t, r, o) {\n    var u,\n        i,\n        c,\n        l,\n        a = gt(e).rows,\n        f = N(n, function (e) {\n      return cc(a, e, r);\n    }),\n        s = O(e, function (e) {\n      return yi(e.cells);\n    }),\n        m = (u = f, z(i = s, S) && yi(u) ? x : function (e, n, t) {\n      return !(\"th\" === Ye(e.element) && i[n]);\n    }),\n        d = (c = t, l = s, function (e, n) {\n      return q.some(oc(c, e.element, \"row\", l[n]));\n    });\n    return ic(e, f, r, o, uc, d, m);\n  }\n\n  function ac(e, n, t, r) {\n    var o = gt(e).rows;\n    return ic(e, O(n, function (e) {\n      return st(o[e.row], e.column);\n    }), t, r, uc, q.none, x);\n  }\n\n  function fc(e) {\n    return B(e, function (e, n) {\n      return R(e, function (e) {\n        return e.column === n.column;\n      }) ? e : e.concat([n]);\n    }, []).sort(function (e, n) {\n      return e.column - n.column;\n    });\n  }\n\n  function sc(e) {\n    return \"tr\" === Ye(e) || Ka(e);\n  }\n\n  function mc(e) {\n    return {\n      element: e,\n      colspan: Kn(e, \"colspan\", 1),\n      rowspan: Kn(e, \"rowspan\", 1)\n    };\n  }\n\n  function dc(e) {\n    return Nn(e, \"scope\").map(function (e) {\n      return e.substr(0, 3);\n    });\n  }\n\n  function gc(e) {\n    return n = e, t = Ya.property().name(n), y(Xa, t);\n    var n, t;\n  }\n\n  function pc(e) {\n    return n = e, y([\"ol\", \"ul\"], Ya.property().name(n));\n    var n;\n  }\n\n  function bc(e) {\n    function u(e) {\n      return \"br\" === Ye(e);\n    }\n\n    function t(o) {\n      return jo(o).bind(function (t) {\n        var r = cn(t).map(function (e) {\n          return !!gc(e) || (n = e, !!y([\"br\", \"img\", \"hr\", \"input\"], Ya.property().name(n)) && \"img\" !== Ye(e));\n          var n;\n        }).getOr(!1);\n        return rn(t).map(function (e) {\n          return !0 === r || \"li\" === Ye(n = e) || Dn(n, pc).isSome() || u(t) || gc(e) && !ce(o, e) ? [] : [Ve.fromTag(\"br\")];\n          var n;\n        });\n      }).getOr([]);\n    }\n\n    var n,\n        r = 0 === (n = N(e, function (e) {\n      var n = ln(e);\n      return z(n, function (e) {\n        return u(e) || pn(e) && 0 === Et(e).trim().length;\n      }) ? [] : n.concat(t(e));\n    })).length ? [Ve.fromTag(\"br\")] : n;\n    Bt(e[0]), It(e[0], r);\n  }\n\n  function hc(e) {\n    return Nu(e, !0);\n  }\n\n  function vc(e) {\n    0 === nt(e).length && Yt(e);\n  }\n\n  function wc(e, n) {\n    return {\n      grid: e,\n      cursor: n\n    };\n  }\n\n  function yc(e, n, t) {\n    var r,\n        o,\n        u,\n        i,\n        c,\n        l = (r = n, o = t, c = gt(e).rows, q.from(null === (i = null === (u = c[r]) || void 0 === u ? void 0 : u.cells[o]) || void 0 === i ? void 0 : i.element).filter(hc).orThunk(function () {\n      return H(c, function (e) {\n        return H(e.cells, function (e) {\n          var n = e.element;\n          return jn(hc(n), n);\n        });\n      });\n    }));\n    return wc(e, l);\n  }\n\n  function Cc(e) {\n    return B(e, function (e, n) {\n      return R(e, function (e) {\n        return e.row === n.row;\n      }) ? e : e.concat([n]);\n    }, []).sort(function (e, n) {\n      return e.row - n.row;\n    });\n  }\n\n  function Sc(u, i) {\n    return function (e, n, t, r, o) {\n      return yc(function (e, n, t, r, u, o, i) {\n        var c = gt(e),\n            l = c.cols,\n            a = c.rows,\n            f = a[n[0]],\n            s = N(n, function (e) {\n          return o = u, N((t = a)[r = e].cells, function (e, n) {\n            return rc(t, r, n, o) ? [] : [e];\n          });\n          var t, r, o;\n        }),\n            m = O(f.cells, function (e, n) {\n          return yi(cc(a, n, u));\n        }),\n            d = X([], a, !0);\n        A(n, function (e) {\n          d[e] = i.transformRow(a[e], t);\n        });\n        var g,\n            p,\n            b,\n            h,\n            v = l.concat(d),\n            w = (g = f, z(p = m, S) && yi(g.cells) ? x : function (e, n, t) {\n          return !(\"th\" === Ye(e.element) && p[t]);\n        }),\n            y = (b = r, h = m, function (e, n, t) {\n          return q.some(oc(b, e.element, \"col\", h[t]));\n        });\n        return ic(v, s, u, o, i.transformCell, y, w);\n      }(e, O(Cc(n), function (e) {\n        return e.row;\n      }), u, i, t, r.replaceOrInit, o), n[0].row, n[0].column);\n    };\n  }\n\n  function Tc(e, n, t) {\n    var r,\n        o = (r = t.section, ut(e, function () {\n      return r;\n    }));\n    return Mi($t.generate(o), n, !0);\n  }\n\n  function xc(e, n, t, r) {\n    var o = r.sizing,\n        u = $t.generate(n);\n    lu(u, o.getWidths(u, o), o);\n  }\n\n  function Rc(e, n, t, r) {\n    var o = t,\n        u = r.sizing,\n        i = r.resize,\n        c = $t.generate(n),\n        l = u.getWidths(c, u),\n        a = u.pixelWidth(),\n        f = i.calcRedestributedWidths(l, a, o.pixelDelta, u.isRelative),\n        s = f.newSizes,\n        m = f.delta;\n    lu(c, s, u), u.adjustTableWidth(m);\n  }\n\n  function Dc(e, n) {\n    return R(n, function (e) {\n      return 0 === e.column && e.isLocked;\n    });\n  }\n\n  function Oc(n, e) {\n    return R(e, function (e) {\n      return e.column + e.colspan >= n.grid.columns && e.isLocked;\n    });\n  }\n\n  function Ac(e, n) {\n    var t = yr(e);\n    return B(fc(n), function (e, n) {\n      return e + t[n.column].map(wr).getOr(0);\n    }, 0);\n  }\n\n  function kc(t) {\n    return function (n, e) {\n      return _i(n, e).filter(function (e) {\n        return !(t ? Dc : Oc)(n, e);\n      }).map(function (e) {\n        return {\n          details: e,\n          pixelDelta: Ac(n, e)\n        };\n      });\n    };\n  }\n\n  function Ic(t) {\n    return function (n, e) {\n      return Li(n, e).filter(function (e) {\n        return !(t ? Dc : Oc)(n, e.cells);\n      });\n    };\n  }\n\n  function Bc(e, n) {\n    var u = $t.fromTable(e);\n    return _i(u, n).bind(function (e) {\n      var n = e[e.length - 1],\n          t = e[0].column,\n          r = n.column + n.colspan,\n          o = M(O(u.all, function (e) {\n        return k(e.cells, function (e) {\n          return e.column >= t && e.column < r;\n        });\n      }));\n      return ja(o);\n    }).getOr(\"\");\n  }\n\n  function Mc(e, n) {\n    return _i($t.fromTable(e), n).bind(ja).getOr(\"\");\n  }\n\n  function Ec(m, d, e) {\n    function n(e) {\n      return \"table\" === Ye(Yo(e));\n    }\n\n    function t(c, l, a, f, s) {\n      return function (t, e, o) {\n        void 0 === o && (o = !1), nu(t);\n        var n = f(),\n            r = Ve.fromDom(m.getDoc()),\n            u = $o(a, r, g),\n            i = {\n          sizing: di(m, t),\n          resize: (ai(m) ? du : gu)(),\n          section: function (e) {\n            switch (ii(m)) {\n              case \"section\":\n                return Fa();\n\n              case \"sectionCells\":\n                return Ha();\n\n              case \"cells\":\n                return Va();\n\n              default:\n                return function (e, n) {\n                  var t;\n\n                  switch (H($t.fromTable(e).all, function (e) {\n                    var n = Ci(e);\n                    return \"header\" === n.type ? q.from(n.subType) : q.none();\n                  }).getOr(n)) {\n                    case \"section\":\n                      return xi();\n\n                    case \"sectionCells\":\n                      return Ri();\n\n                    case \"cells\":\n                      return Di();\n                  }\n                }(e, \"section\");\n            }\n          }(t)\n        };\n        return l(t) ? c(n, t, e, u, i).bind(function (e) {\n          A(e.newRows, function (e) {\n            qu(m, e.dom);\n          }), A(e.newCells, function (e) {\n            Uu(m, e.dom);\n          });\n          var r,\n              n = (r = t, e.cursor.fold(function () {\n            return j(nt(r)).filter(Sn).map(function (e) {\n              d.clear(r);\n              var n = m.dom.createRng();\n              return n.selectNode(e.dom), m.selection.setRng(n), Mn(e, \"data-mce-selected\", \"1\"), n;\n            });\n          }, function (e) {\n            var n = La(_a, e),\n                t = m.dom.createRng();\n            return t.setStart(n.element.dom, n.offset), t.setEnd(n.element.dom, n.offset), m.selection.setRng(t), d.clear(r), q.some(t);\n          }));\n          return Sn(t) && (nu(t), o || Gu(m, t.dom, s)), n.map(function (e) {\n            return {\n              rng: e,\n              effect: s\n            };\n          });\n        }) : q.none();\n      };\n    }\n\n    var g = fi(m),\n        r = ai(m) ? E : wi;\n    return {\n      deleteRow: t(lf, function (e) {\n        return !1 === n(m) || 1 < yu(e).rows;\n      }, E, e, Sa),\n      deleteColumn: t(cf, function (e) {\n        return !1 === n(m) || 1 < yu(e).columns;\n      }, E, e, Sa),\n      insertRowsBefore: t(tf, x, E, e, Sa),\n      insertRowsAfter: t(rf, x, E, e, Sa),\n      insertColumnsBefore: t(of, x, r, e, Sa),\n      insertColumnsAfter: t(uf, x, r, e, Sa),\n      mergeCells: t(bf, x, E, e, Sa),\n      unmergeCells: t(hf, x, E, e, Sa),\n      pasteColsBefore: t(wf, x, E, e, Sa),\n      pasteColsAfter: t(yf, x, E, e, Sa),\n      pasteRowsBefore: t(Cf, x, E, e, Sa),\n      pasteRowsAfter: t(Sf, x, E, e, Sa),\n      pasteCells: t(vf, x, E, e, Ta),\n      makeCellsHeader: t(gf, x, E, e, Sa),\n      unmakeCellsHeader: t(pf, x, E, e, Sa),\n      makeColumnsHeader: t(af, x, E, e, Sa),\n      unmakeColumnsHeader: t(ff, x, E, e, Sa),\n      makeRowsHeader: t(sf, x, E, e, Sa),\n      makeRowsBody: t(mf, x, E, e, Sa),\n      makeRowsFooter: t(df, x, E, e, Sa),\n      getTableRowType: Tf,\n      getTableCellType: Mc,\n      getTableColType: Bc\n    };\n  }\n\n  function Pc(e, n, t, r) {\n    return D(e, function (e) {\n      return function (e, n, t, r) {\n        for (var o = Ve.fromTag(\"tr\"), u = 0; u < e; u++) {\n          var i = r < n || u < t ? Ve.fromTag(\"th\") : Ve.fromTag(\"td\");\n          u < t && Mn(i, \"scope\", \"row\"), r < n && Mn(i, \"scope\", \"col\"), Xt(i, Ve.fromTag(\"br\")), Xt(o, i);\n        }\n\n        return o;\n      }(n, t, r, e);\n    });\n  }\n\n  function Nc(e, n) {\n    e.selection.select(n.dom, !0), e.selection.collapse(!0);\n  }\n\n  function zc(u, i, c, l, a) {\n    var o = Qu(u),\n        f = {\n      styles: o,\n      attributes: Ju(u),\n      colGroups: u.getParam(\"table_use_colgroups\", !1, \"boolean\")\n    };\n    return u.undoManager.ignore(function () {\n      var e = function (e, n, t, r, o, u) {\n        void 0 === u && (u = xf);\n        var i,\n            c,\n            l = Ve.fromTag(\"table\"),\n            a = \"cells\" !== o;\n        qn(l, u.styles), En(l, u.attributes), u.colGroups && Xt(l, (i = n, c = Ve.fromTag(\"colgroup\"), D(i, function () {\n          return Xt(c, Ve.fromTag(\"col\"));\n        }), c));\n        var f,\n            s = Math.min(e, t);\n        a && 0 < t && (f = Ve.fromTag(\"thead\"), Xt(l, f), It(f, Pc(t, n, \"sectionCells\" === o ? s : 0, r)));\n        var m = Ve.fromTag(\"tbody\");\n        return Xt(l, m), It(m, Pc(a ? e - s : e, n, a ? 0 : t, r)), l;\n      }(c, i, a, l, ii(u), f);\n\n      Mn(e, \"data-mce-id\", \"__mce\");\n      var n,\n          t,\n          r,\n          o = (n = e, t = Ve.fromTag(\"div\"), r = Ve.fromDom(n.dom.cloneNode(!0)), Xt(t, r), t.dom.innerHTML);\n      u.insertContent(o), u.addVisual();\n    }), kn(Yo(u), 'table[data-mce-id=\"__mce\"]').map(function (e) {\n      var n, t, r;\n      return ka(u) ? Ma(e) : Ia(u) ? Ea(e) : (ui(u) || (n = o.width, T(n) && -1 !== n.indexOf(\"%\"))) && Ba(e), nu(e), Wt(e, \"data-mce-id\"), t = u, A(dn(e, \"tr\"), function (e) {\n        qu(t, e.dom), A(dn(e, \"th,td\"), function (e) {\n          Uu(t, e.dom);\n        });\n      }), r = u, kn(e, \"td,th\").each(P(Nc, r)), e.dom;\n    }).getOr(null);\n  }\n\n  function Lc(e, n, t, r, o) {\n    function u(e) {\n      return f(e) && 0 < e;\n    }\n\n    if (void 0 === r && (r = {}), u(n) && u(t)) {\n      var i = r.headerRows || 0;\n      return zc(e, t, n, r.headerColumns || 0, i);\n    }\n\n    return console.error(o), null;\n  }\n\n  function _c(e) {\n    return function () {\n      return e().fold(function () {\n        return [];\n      }, function (e) {\n        return O(e, function (e) {\n          return e.dom;\n        });\n      });\n    };\n  }\n\n  function Wc(t) {\n    return function (e) {\n      var n = 0 < e.length ? q.some(Xo(e)) : q.none();\n      t(n);\n    };\n  }\n\n  function jc(e, n, t) {\n    var r = Kn(e, n, 1);\n    1 === t || r <= 1 ? Wt(e, n) : Mn(e, n, Math.min(t, r));\n  }\n\n  function Fc(o, e, u) {\n    return function (e, n) {\n      for (var t = 0; t < n.length; t++) {\n        var r = o.getStyle(n[t], u);\n        if ((e = void 0 === e ? r : e) !== r) return \"\";\n      }\n\n      return e;\n    }(void 0, o.select(\"td,th\", e));\n  }\n\n  function Hc(e, n, t) {\n    t && e.formatter.apply(\"align\" + t, {}, n);\n  }\n\n  function Vc(n, t) {\n    Rf.each(\"left center right\".split(\" \"), function (e) {\n      n.formatter.remove(\"align\" + e, {}, t);\n    });\n  }\n\n  function qc(e) {\n    return Of.test(t = e) || Af.test(t) ? q.some({\n      value: (Ae(n = e, \"#\") ? n.substring(\"#\".length) : n).toUpperCase()\n    }) : q.none();\n    var n, t;\n  }\n\n  function Uc(e) {\n    var n = e.toString(16);\n    return (1 === n.length ? \"0\" + n : n).toUpperCase();\n  }\n\n  function Gc(e) {\n    return {\n      value: Uc(e.red) + Uc(e.green) + Uc(e.blue)\n    };\n  }\n\n  function $c(e, n, t, r) {\n    return {\n      red: e,\n      green: n,\n      blue: t,\n      alpha: r\n    };\n  }\n\n  function Kc(e, n, t, r) {\n    return $c(parseInt(e, 10), parseInt(n, 10), parseInt(t, 10), parseFloat(r));\n  }\n\n  function Xc(e) {\n    var n = e;\n    return {\n      get: function get() {\n        return n;\n      },\n      set: function set(e) {\n        n = e;\n      }\n    };\n  }\n\n  function Yc(e) {\n    function n() {\n      return t.get().each(e);\n    }\n\n    var t = Xc(q.none());\n    return {\n      clear: function clear() {\n        n(), t.set(q.none());\n      },\n      isSet: function isSet() {\n        return t.get().isSome();\n      },\n      get: function get() {\n        return t.get();\n      },\n      set: function set(e) {\n        n(), t.set(q.some(e));\n      }\n    };\n  }\n\n  function Jc() {\n    var n = Yc(E);\n    return _K(_K({}, n), {\n      on: function on(e) {\n        return n.get().each(e);\n      }\n    });\n  }\n\n  function Qc(e) {\n    return be(e, \"menu\");\n  }\n\n  function Zc(t, r) {\n    return function (e) {\n      var n;\n      t.execCommand(\"mceTableApplyCellStyle\", !1, ((n = {})[r] = e, n));\n    };\n  }\n\n  function el(n, t, r, o, u) {\n    return function (e) {\n      return e(Mf(n, t, r, o, u));\n    };\n  }\n\n  function nl(r, e, o) {\n    var n = O(e, function (e) {\n      return {\n        text: e.title,\n        value: \"#\" + qc(r = e.value).orThunk(function () {\n          return function (e) {\n            if (\"transparent\" === e) return q.some($c(0, 0, 0, 0));\n            var n = kf.exec(e);\n            if (null !== n) return q.some(Kc(n[1], n[2], n[3], \"1\"));\n            var t = If.exec(e);\n            return null !== t ? q.some(Kc(t[1], t[2], t[3], t[4])) : q.none();\n          }(r).map(Gc);\n        }).getOrThunk(function () {\n          var e = document.createElement(\"canvas\");\n          e.height = 1, e.width = 1;\n          var n = e.getContext(\"2d\");\n          n.clearRect(0, 0, e.width, e.height), n.fillStyle = \"#FFFFFF\", n.fillStyle = r, n.fillRect(0, 0, 1, 1);\n          var t = n.getImageData(0, 0, 1, 1).data;\n          return Gc($c(t[0], t[1], t[2], t[3]));\n        }).value,\n        type: \"choiceitem\"\n      };\n      var r;\n    });\n    return [{\n      type: \"fancymenuitem\",\n      fancytype: \"colorswatch\",\n      initData: {\n        colors: 0 < n.length ? n : void 0,\n        allowCustomColors: !1\n      },\n      onAction: function onAction(e) {\n        var n,\n            t = \"remove\" === e.value ? \"\" : e.value;\n        r.execCommand(\"mceTableApplyCellStyle\", !1, ((n = {})[o] = t, n));\n      }\n    }];\n  }\n\n  function tl(n) {\n    return function () {\n      var e = n.queryCommandValue(\"mceTableRowType\");\n      n.execCommand(\"mceTableRowType\", !1, {\n        type: \"header\" === e ? \"body\" : \"header\"\n      });\n    };\n  }\n\n  function rl(n) {\n    return function () {\n      var e = n.queryCommandValue(\"mceTableColType\");\n      n.execCommand(\"mceTableColType\", !1, {\n        type: \"th\" === e ? \"td\" : \"th\"\n      });\n    };\n  }\n\n  function ol(e) {\n    return Pf.concat((0 < (n = Bf(ri(e))).length ? q.some({\n      name: \"class\",\n      type: \"listbox\",\n      label: \"Class\",\n      items: n\n    }) : q.none()).toArray());\n    var n;\n  }\n\n  function ul(e, n) {\n    var t = [{\n      name: \"borderstyle\",\n      type: \"listbox\",\n      label: \"Border style\",\n      items: [{\n        text: \"Select...\",\n        value: \"\"\n      }].concat(Bf(Yu(e)))\n    }, {\n      name: \"bordercolor\",\n      type: \"colorinput\",\n      label: \"Border color\"\n    }, {\n      name: \"backgroundcolor\",\n      type: \"colorinput\",\n      label: \"Background color\"\n    }];\n    return {\n      title: \"Advanced\",\n      name: \"advanced\",\n      items: \"cell\" === n ? [{\n        name: \"borderwidth\",\n        type: \"input\",\n        label: \"Border width\"\n      }].concat(t) : t\n    };\n  }\n\n  function il(u) {\n    return function (t, r) {\n      var o = t.dom;\n      return {\n        setAttrib: function setAttrib(e, n) {\n          u && !n || o.setAttrib(r, e, n);\n        },\n        setStyle: function setStyle(e, n) {\n          u && !n || o.setStyle(r, e, n);\n        },\n        setFormat: function setFormat(e, n) {\n          u && !n || (\"\" === n ? t.formatter.remove(e, {\n            value: null\n          }, r, !0) : t.formatter.apply(e, {\n            value: n\n          }, r));\n        }\n      };\n    };\n  }\n\n  function cl(n) {\n    return function (e) {\n      return Ae(e, \"rgb\") ? n.toHex(e) : e;\n    };\n  }\n\n  function ll(e, n) {\n    var t = Ve.fromDom(n);\n    return {\n      borderwidth: Gn(t, \"border-width\").getOr(\"\"),\n      borderstyle: Gn(t, \"border-style\").getOr(\"\"),\n      bordercolor: Gn(t, \"border-color\").map(cl(e)).getOr(\"\"),\n      backgroundcolor: Gn(t, \"background-color\").map(cl(e)).getOr(\"\")\n    };\n  }\n\n  function al(e) {\n    var o = e[0];\n    return A(e.slice(1), function (e) {\n      A(Ue(o), function (r) {\n        ae(e, function (e, n) {\n          var t = o[r];\n          \"\" !== t && r === n && t !== e && (o[r] = \"\");\n        });\n      });\n    }), o;\n  }\n\n  function fl(e, n, t, r) {\n    return w(e, function (e) {\n      return !u(t.formatter.matchNode(r, n + e));\n    }).getOr(\"\");\n  }\n\n  function sl(e, t) {\n    var n = $t.fromTable(e);\n    return O(k($t.justCells(n), function (n) {\n      return R(t, function (e) {\n        return ce(n.element, e);\n      });\n    }), function (e) {\n      return {\n        element: e.element.dom,\n        column: $t.getColumnAt(n, e.column).map(function (e) {\n          return e.element.dom;\n        })\n      };\n    });\n  }\n\n  function ml(e, n, r, t) {\n    var l = t.getData();\n    t.close(), e.undoManager.transact(function () {\n      var o,\n          u = e,\n          i = n,\n          t = r,\n          c = se(o = l, function (e, n) {\n        return t[n] !== e;\n      });\n      0 < ge(c) && 1 <= i.length && rt(i[0]).each(function (e) {\n        var s,\n            m,\n            d,\n            n = sl(e, i),\n            t = 0 < ge(se(c, function (e, n) {\n          return \"scope\" !== n && \"celltype\" !== n;\n        })),\n            r = Ke(c, \"celltype\");\n        (t || Ke(c, \"scope\")) && (s = u, m = o, d = 1 === n.length, A(n, function (e) {\n          var n,\n              t,\n              r,\n              o,\n              u,\n              i,\n              c = e.element,\n              l = d ? Nf.normal(s, c) : Nf.ifTruthy(s, c),\n              a = e.column.map(function (e) {\n            return d ? Nf.normal(s, e) : Nf.ifTruthy(s, e);\n          }).getOr(l),\n              f = m;\n          (n = l).setAttrib(\"scope\", f.scope), n.setAttrib(\"class\", f[\"class\"]), n.setStyle(\"height\", eu(f.height)), a.setStyle(\"width\", eu(f.width)), Zu(s) && ((t = l).setFormat(\"tablecellbackgroundcolor\", (r = m).backgroundcolor), t.setFormat(\"tablecellbordercolor\", r.bordercolor), t.setFormat(\"tablecellborderstyle\", r.borderstyle), t.setFormat(\"tablecellborderwidth\", eu(r.borderwidth))), d && (Vc(s, c), o = s, u = c, Rf.each(\"top middle bottom\".split(\" \"), function (e) {\n            o.formatter.remove(\"valign\" + e, {}, u);\n          })), m.halign && Hc(s, c, m.halign), !m.valign || (i = m.valign) && s.formatter.apply(\"valign\" + i, {}, c);\n        })), r && u.execCommand(\"mceTableCellType\", !1, {\n          type: o.celltype,\n          no_events: !0\n        }), Gu(u, e.dom, {\n          structure: r,\n          style: t\n        });\n      }), e.focus();\n    });\n  }\n\n  function dl(e, n) {\n    var t,\n        l,\n        r,\n        o,\n        u,\n        i = Ql(n);\n    0 !== i.length && (l = e, t = al(rt((r = i)[0]).map(function (e) {\n      return O(sl(e, r), function (e) {\n        return t = l, r = e.element, o = Zu(l), u = e.column, i = t.dom, c = u.getOr(r), _K({\n          width: n(c, \"width\"),\n          height: n(r, \"height\"),\n          scope: i.getAttrib(r, \"scope\"),\n          celltype: r.nodeName.toLowerCase(),\n          \"class\": i.getAttrib(r, \"class\", \"\"),\n          halign: zf(t, r),\n          valign: Lf(t, r)\n        }, o ? ll(i, r) : {});\n\n        function n(e, n) {\n          return i.getStyle(e, n) || i.getAttrib(e, n);\n        }\n\n        var t, r, o, u, i, c;\n      });\n    }).getOrDie()), o = {\n      type: \"tabpanel\",\n      tabs: [{\n        title: \"General\",\n        name: \"general\",\n        items: ol(e)\n      }, ul(e, \"cell\")]\n    }, u = {\n      type: \"panel\",\n      items: [{\n        type: \"grid\",\n        columns: 2,\n        items: ol(e)\n      }]\n    }, e.windowManager.open({\n      title: \"Cell Properties\",\n      size: \"normal\",\n      body: Zu(e) ? o : u,\n      buttons: [{\n        type: \"cancel\",\n        name: \"cancel\",\n        text: \"Cancel\"\n      }, {\n        type: \"submit\",\n        name: \"save\",\n        text: \"Save\",\n        primary: !0\n      }],\n      initialData: t,\n      onSubmit: P(ml, e, i, t)\n    }));\n  }\n\n  function gl(e) {\n    return _f.concat((0 < (n = Bf(e.getParam(\"table_row_class_list\", [], \"array\"))).length ? q.some({\n      name: \"class\",\n      type: \"listbox\",\n      label: \"Class\",\n      items: n\n    }) : q.none()).toArray());\n    var n;\n  }\n\n  function pl(s, m, d, e) {\n    var g = e.getData();\n    e.close(), s.undoManager.transact(function () {\n      var e,\n          n,\n          t,\n          i,\n          c,\n          l,\n          a,\n          r = s,\n          o = m,\n          u = d,\n          f = se(e = g, function (e, n) {\n        return u[n] !== e;\n      });\n      0 < ge(f) && (n = Ke(f, \"type\"), (t = !n || 1 < ge(f)) && (i = r, c = e, l = u, a = 1 === o.length, A(o, function (e) {\n        var n,\n            t,\n            r,\n            o = a ? Nf.normal(i, e) : Nf.ifTruthy(i, e),\n            u = c;\n        (n = o).setAttrib(\"class\", u[\"class\"]), n.setStyle(\"height\", eu(u.height)), ei(i) && ((t = o).setStyle(\"background-color\", (r = c).backgroundcolor), t.setStyle(\"border-color\", r.bordercolor), t.setStyle(\"border-style\", r.borderstyle)), c.align !== l.align && (Vc(i, e), Hc(i, e, c.align));\n      })), n && r.execCommand(\"mceTableRowType\", !1, {\n        type: e.type,\n        no_events: !0\n      }), rt(Ve.fromDom(o[0])).each(function (e) {\n        return Gu(r, e.dom, {\n          structure: n,\n          style: t\n        });\n      })), s.focus();\n    });\n  }\n\n  function bl(i) {\n    var e,\n        t,\n        n,\n        r,\n        o,\n        u,\n        c,\n        l = (e = tu(i), t = Xl.selected, r = (n = Jl(e)).bind(function (e) {\n      return rt(e);\n    }).map(ot), Wn(n, r, function (n, e) {\n      return k(e, function (e) {\n        return R(Xo(e.dom.cells), function (e) {\n          return \"1\" === Pn(e, t) || ce(e, n);\n        });\n      });\n    }).getOr([]));\n    0 !== l.length && (o = al(O(l, function (e) {\n      return n = i, t = e.dom, r = ei(i), u = n.dom, _K({\n        height: u.getStyle(t, \"height\") || u.getAttrib(t, \"height\"),\n        \"class\": u.getAttrib(t, \"class\", \"\"),\n        type: rt(Ve.fromDom(o = t)).map(function (e) {\n          var n = {\n            selection: Xo(o.cells)\n          };\n          return Tf(e, n);\n        }).getOr(\"\"),\n        align: zf(n, t)\n      }, r ? ll(u, t) : {});\n      var n, t, r, o, u;\n    })), u = {\n      type: \"tabpanel\",\n      tabs: [{\n        title: \"General\",\n        name: \"general\",\n        items: gl(i)\n      }, ul(i, \"row\")]\n    }, c = {\n      type: \"panel\",\n      items: [{\n        type: \"grid\",\n        columns: 2,\n        items: gl(i)\n      }]\n    }, i.windowManager.open({\n      title: \"Row Properties\",\n      size: \"normal\",\n      body: ei(i) ? u : c,\n      buttons: [{\n        type: \"cancel\",\n        name: \"cancel\",\n        text: \"Cancel\"\n      }, {\n        type: \"submit\",\n        name: \"save\",\n        text: \"Save\",\n        primary: !0\n      }],\n      initialData: o,\n      onSubmit: P(pl, i, O(l, function (e) {\n        return e.dom;\n      }), o)\n    }));\n  }\n\n  function hl(u, i, t, e) {\n    var c = u.dom,\n        l = e.getData(),\n        a = se(l, function (e, n) {\n      return t[n] !== e;\n    });\n    e.close(), \"\" === l[\"class\"] && delete l[\"class\"], u.undoManager.transact(function () {\n      var e, n, t, r, o;\n      i || (e = parseInt(l.cols, 10) || 1, n = parseInt(l.rows, 10) || 1, i = zc(u, e, n, 0, 0)), 0 < ge(a) && (function (e, n, t) {\n        var r,\n            o = e.dom,\n            u = {},\n            i = {};\n        if (u[\"class\"] = t[\"class\"], i.height = eu(t.height), o.getAttrib(n, \"width\") && !ti(e) ? u.width = (r = t.width) ? r.replace(/px$/, \"\") : \"\" : i.width = eu(t.width), ti(e) ? (i[\"border-width\"] = eu(t.border), i[\"border-spacing\"] = eu(t.cellspacing)) : (u.border = t.border, u.cellpadding = t.cellpadding, u.cellspacing = t.cellspacing), ti(e) && n.children) for (var c = 0; c < n.children.length; c++) {\n          Wf(o, n.children[c], {\n            \"border-width\": eu(t.border),\n            padding: eu(t.cellpadding)\n          }), ni(e) && Wf(o, n.children[c], {\n            \"border-color\": t.bordercolor\n          });\n        }\n        ni(e) && (i[\"background-color\"] = t.backgroundcolor, i[\"border-color\"] = t.bordercolor, i[\"border-style\"] = t.borderstyle), u.style = o.serializeStyle(_K(_K({}, Qu(e)), i)), o.setAttribs(n, _K(_K({}, Ju(e)), u));\n      }(u, i, l), ((t = c.select(\"caption\", i)[0]) && !l.caption || !t && l.caption) && u.execCommand(\"mceTableToggleCaption\"), \"\" === l.align ? Vc(u, i) : Hc(u, i, l.align)), u.focus(), u.addVisual(), 0 < ge(a) && (o = !(r = Ke(a, \"caption\")) || 1 < ge(a), Gu(u, i, {\n        structure: r,\n        style: o\n      }));\n    });\n  }\n\n  function vl(e, n) {\n    var t,\n        r,\n        o,\n        u,\n        i,\n        c,\n        l,\n        a,\n        f,\n        s,\n        m,\n        d,\n        g,\n        p,\n        b,\n        h,\n        v,\n        w,\n        y,\n        C = e.dom,\n        S = (o = ni(r = e), a = Qu(r), f = Ju(r), s = o ? (u = r.dom, {\n      borderstyle: pe(a, \"border-style\").getOr(\"\"),\n      bordercolor: cl(u)(pe(a, \"border-color\").getOr(\"\")),\n      backgroundcolor: cl(u)(pe(a, \"background-color\").getOr(\"\"))\n    }) : {}, _K(_K(_K(_K(_K(_K({}, {\n      height: \"\",\n      width: \"100%\",\n      cellspacing: \"\",\n      cellpadding: \"\",\n      caption: !1,\n      \"class\": \"\",\n      align: \"\",\n      border: \"\"\n    }), a), f), s), (l = a[\"border-width\"], ti(r) && l ? {\n      border: l\n    } : pe(f, \"border\").fold(function () {\n      return {};\n    }, function (e) {\n      return {\n        border: e\n      };\n    }))), (i = pe(a, \"border-spacing\").or(pe(f, \"cellspacing\")).fold(function () {\n      return {};\n    }, function (e) {\n      return {\n        cellspacing: e\n      };\n    }), c = pe(a, \"border-padding\").or(pe(f, \"cellpadding\")).fold(function () {\n      return {};\n    }, function (e) {\n      return {\n        cellpadding: e\n      };\n    }), _K(_K({}, i), c))));\n    !1 === n ? (t = C.getParent(e.selection.getStart(), \"table\", e.getBody())) ? (d = t, g = ni(m = e), v = m.dom, w = ti(m) ? v.getStyle(d, \"border-spacing\") || v.getAttrib(d, \"cellspacing\") : v.getAttrib(d, \"cellspacing\") || v.getStyle(d, \"border-spacing\"), y = ti(m) ? Fc(v, d, \"padding\") || v.getAttrib(d, \"cellpadding\") : v.getAttrib(d, \"cellpadding\") || Fc(v, d, \"padding\"), S = _K({\n      width: v.getStyle(d, \"width\") || v.getAttrib(d, \"width\"),\n      height: v.getStyle(d, \"height\") || v.getAttrib(d, \"height\"),\n      cellspacing: w,\n      cellpadding: y,\n      border: (p = v, h = Gn(Ve.fromDom(b = d), \"border-width\"), ti(m) && h.isSome() ? h.getOr(\"\") : p.getAttrib(b, \"border\") || Fc(m.dom, b, \"border-width\") || Fc(m.dom, b, \"border\")),\n      caption: !!v.select(\"caption\", d)[0],\n      \"class\": v.getAttrib(d, \"class\", \"\"),\n      align: zf(m, d)\n    }, g ? ll(v, d) : {})) : ni(e) && (S.borderstyle = \"\", S.bordercolor = \"\", S.backgroundcolor = \"\") : (S.cols = \"1\", S.rows = \"1\", ni(e) && (S.borderstyle = \"\", S.bordercolor = \"\", S.backgroundcolor = \"\"));\n    var T = Bf(oi(e));\n    0 < T.length && S[\"class\"] && (S[\"class\"] = S[\"class\"].replace(/\\s*mce\\-item\\-table\\s*/g, \"\"));\n    var x,\n        R,\n        D,\n        O,\n        A = {\n      type: \"grid\",\n      columns: 2,\n      items: (x = T, R = n ? [{\n        type: \"input\",\n        name: \"cols\",\n        label: \"Cols\",\n        inputMode: \"numeric\"\n      }, {\n        type: \"input\",\n        name: \"rows\",\n        label: \"Rows\",\n        inputMode: \"numeric\"\n      }] : [], D = e.getParam(\"table_appearance_options\", !0, \"boolean\") ? [{\n        type: \"input\",\n        name: \"cellspacing\",\n        label: \"Cell spacing\",\n        inputMode: \"numeric\"\n      }, {\n        type: \"input\",\n        name: \"cellpadding\",\n        label: \"Cell padding\",\n        inputMode: \"numeric\"\n      }, {\n        type: \"input\",\n        name: \"border\",\n        label: \"Border width\"\n      }, {\n        type: \"label\",\n        label: \"Caption\",\n        items: [{\n          type: \"checkbox\",\n          name: \"caption\",\n          label: \"Show caption\"\n        }]\n      }] : [], O = 0 < x.length ? [{\n        type: \"listbox\",\n        name: \"class\",\n        label: \"Class\",\n        items: x\n      }] : [], R.concat([{\n        type: \"input\",\n        name: \"width\",\n        label: \"Width\"\n      }, {\n        type: \"input\",\n        name: \"height\",\n        label: \"Height\"\n      }]).concat(D).concat([{\n        type: \"listbox\",\n        name: \"align\",\n        label: \"Alignment\",\n        items: [{\n          text: \"None\",\n          value: \"\"\n        }, {\n          text: \"Left\",\n          value: \"left\"\n        }, {\n          text: \"Center\",\n          value: \"center\"\n        }, {\n          text: \"Right\",\n          value: \"right\"\n        }]\n      }]).concat(O))\n    },\n        k = ni(e) ? {\n      type: \"tabpanel\",\n      tabs: [{\n        title: \"General\",\n        name: \"general\",\n        items: [A]\n      }, ul(e, \"table\")]\n    } : {\n      type: \"panel\",\n      items: [A]\n    };\n    e.windowManager.open({\n      title: \"Table Properties\",\n      size: \"normal\",\n      body: k,\n      onSubmit: P(hl, e, t, S),\n      buttons: [{\n        type: \"cancel\",\n        name: \"cancel\",\n        text: \"Cancel\"\n      }, {\n        type: \"submit\",\n        name: \"save\",\n        text: \"Save\",\n        primary: !0\n      }],\n      initialData: S\n    });\n  }\n\n  function wl(e) {\n    return Yl(tu(e), Zo(e));\n  }\n\n  function yl(l, n, e, a, t) {\n    function u(e) {\n      return rt(e, d);\n    }\n\n    function f(t) {\n      return Jl(tu(e = l), Zo(e)).bind(function (n) {\n        return u(n).map(function (e) {\n          return t(e, n);\n        });\n      });\n      var e;\n    }\n\n    function s(e) {\n      l.focus();\n    }\n\n    function r(r, o) {\n      return void 0 === o && (o = !1), f(function (e, n) {\n        var t = ou(a, e, n);\n        r(e, t, o).each(s);\n      });\n    }\n\n    function o() {\n      return f(function (e, n) {\n        var t,\n            r,\n            o,\n            u = ou(a, e, n),\n            i = $o(E, Ve.fromDom(l.getDoc()), q.none());\n        return t = u, r = i, _i(o = $t.fromTable(e), t).bind(function (e) {\n          var n = Ei(N(gt(Mi(o, r, !1)).rows.slice(e[0].row, e[e.length - 1].row + e[e.length - 1].rowspan), function (e) {\n            var n = k(e.cells, function (e) {\n              return !e.isLocked;\n            });\n            return 0 < n.length ? [_K(_K({}, e), {\n              cells: n\n            })] : [];\n          }));\n          return jn(0 < n.length, n);\n        }).map(function (e) {\n          return O(e, function (e) {\n            var t = ar(e.element);\n            return A(e.cells, function (e) {\n              var n = fr(e.element);\n              Oi(n, \"colspan\", e.colspan, 1), Oi(n, \"rowspan\", e.rowspan, 1), Xt(t, n);\n            }), t;\n          });\n        });\n      });\n    }\n\n    function i() {\n      return f(function (e, n) {\n        var t,\n            l,\n            r = ou(a, e, n);\n        return t = r, Wi(l = $t.fromTable(e), t).map(function (e) {\n          var r,\n              o,\n              n = e[e.length - 1],\n              t = e[0].column,\n              u = n.column + n.colspan,\n              i = function (e, t, r) {\n            if ($t.hasColumns(e)) {\n              var n = O(k($t.justColumns(e), function (e) {\n                return e.column >= t && e.column < r;\n              }), function (e) {\n                var n = fr(e.element);\n                return jc(n, \"span\", r - t), n;\n              }),\n                  o = Ve.fromTag(\"colgroup\");\n              return It(o, n), [o];\n            }\n\n            return [];\n          }(l, t, u),\n              c = (r = t, o = u, O(l.all, function (e) {\n            var n = O(k(e.cells, function (e) {\n              return e.column >= r && e.column < o;\n            }), function (e) {\n              var n = fr(e.element);\n              return jc(n, \"colspan\", o - r), n;\n            }),\n                t = Ve.fromTag(\"tr\");\n            return It(t, n), t;\n          }));\n\n          return X(X([], i, !0), c, !0);\n        });\n      });\n    }\n\n    function c(c, e) {\n      return e().each(function (e) {\n        var i = O(e, fr);\n        f(function (e, n) {\n          var t,\n              r,\n              o = Ko(Ve.fromDom(l.getDoc())),\n              u = (t = i, r = o, {\n            selection: ru(a),\n            clipboard: t,\n            generators: r\n          });\n          c(e, u).each(s);\n        });\n      });\n    }\n\n    function m(t) {\n      return function (e, n) {\n        return pe(n, \"type\").each(function (e) {\n          r(t(e), n.no_events);\n        });\n      };\n    }\n\n    var d = Zo(l);\n    ae({\n      mceTableSplitCells: function mceTableSplitCells() {\n        return r(n.unmergeCells);\n      },\n      mceTableMergeCells: function mceTableMergeCells() {\n        return r(n.mergeCells);\n      },\n      mceTableInsertRowBefore: function mceTableInsertRowBefore() {\n        return r(n.insertRowsBefore);\n      },\n      mceTableInsertRowAfter: function mceTableInsertRowAfter() {\n        return r(n.insertRowsAfter);\n      },\n      mceTableInsertColBefore: function mceTableInsertColBefore() {\n        return r(n.insertColumnsBefore);\n      },\n      mceTableInsertColAfter: function mceTableInsertColAfter() {\n        return r(n.insertColumnsAfter);\n      },\n      mceTableDeleteCol: function mceTableDeleteCol() {\n        return r(n.deleteColumn);\n      },\n      mceTableDeleteRow: function mceTableDeleteRow() {\n        return r(n.deleteRow);\n      },\n      mceTableCutCol: function mceTableCutCol() {\n        return i().each(function (e) {\n          t.setColumns(e), r(n.deleteColumn);\n        });\n      },\n      mceTableCutRow: function mceTableCutRow() {\n        return o().each(function (e) {\n          t.setRows(e), r(n.deleteRow);\n        });\n      },\n      mceTableCopyCol: function mceTableCopyCol() {\n        return i().each(function (e) {\n          return t.setColumns(e);\n        });\n      },\n      mceTableCopyRow: function mceTableCopyRow() {\n        return o().each(function (e) {\n          return t.setRows(e);\n        });\n      },\n      mceTablePasteColBefore: function mceTablePasteColBefore() {\n        return c(n.pasteColsBefore, t.getColumns);\n      },\n      mceTablePasteColAfter: function mceTablePasteColAfter() {\n        return c(n.pasteColsAfter, t.getColumns);\n      },\n      mceTablePasteRowBefore: function mceTablePasteRowBefore() {\n        return c(n.pasteRowsBefore, t.getRows);\n      },\n      mceTablePasteRowAfter: function mceTablePasteRowAfter() {\n        return c(n.pasteRowsAfter, t.getRows);\n      },\n      mceTableDelete: function mceTableDelete() {\n        return wl(l).each(function (e) {\n          rt(e, d).filter(p(d)).each(function (e) {\n            var n,\n                t = Ve.fromText(\"\");\n            Dt(e, t), Yt(e), l.dom.isEmpty(l.getBody()) ? (l.setContent(\"\"), l.selection.setCursorLocation()) : ((n = l.dom.createRng()).setStart(t.dom, 0), n.setEnd(t.dom, 0), l.selection.setRng(n), l.nodeChanged());\n          });\n        });\n      },\n      mceTableCellToggleClass: function mceTableCellToggleClass(e, r) {\n        f(function (e) {\n          var n = Ql(a),\n              t = z(n, function (e) {\n            return l.formatter.match(\"tablecellclass\", {\n              value: r\n            }, e.dom);\n          }) ? l.formatter.remove : l.formatter.apply;\n          A(n, function (e) {\n            return t(\"tablecellclass\", {\n              value: r\n            }, e.dom);\n          }), Gu(l, e.dom, Ca);\n        });\n      },\n      mceTableToggleClass: function mceTableToggleClass(e, n) {\n        f(function (e) {\n          l.formatter.toggle(\"tableclass\", {\n            value: n\n          }, e.dom), Gu(l, e.dom, Ca);\n        });\n      },\n      mceTableToggleCaption: function mceTableToggleCaption() {\n        wl(l).each(function (n) {\n          rt(n, d).each(function (r) {\n            An(r, \"caption\").fold(function () {\n              var e,\n                  n,\n                  t = Ve.fromTag(\"caption\");\n              Xt(t, Ve.fromText(\"Caption\")), n = t, an(e = r, 0).fold(function () {\n                Xt(e, n);\n              }, function (e) {\n                Rt(e, n);\n              }), l.selection.setCursorLocation(t.dom, 0);\n            }, function (e) {\n              en(\"caption\")(n) && ie(\"td\", r).each(function (e) {\n                return l.selection.setCursorLocation(e.dom, 0);\n              }), Yt(e);\n            }), Gu(l, r.dom, Sa);\n          });\n        });\n      },\n      mceTableSizingMode: function mceTableSizingMode(e, n) {\n        return t = n, wl(l).each(function (e) {\n          Ia(l) || ka(l) || ui(l) || rt(e, d).each(function (e) {\n            \"relative\" !== t || Bl(e) ? \"fixed\" !== t || Ml(e) ? \"responsive\" !== t || El(e) || Ea(e) : Ma(e) : Ba(e), nu(e), Gu(l, e.dom, Sa);\n          });\n        });\n        var t;\n      },\n      mceTableCellType: m(function (e) {\n        return \"th\" === e ? n.makeCellsHeader : n.unmakeCellsHeader;\n      }),\n      mceTableColType: m(function (e) {\n        return \"th\" === e ? n.makeColumnsHeader : n.unmakeColumnsHeader;\n      }),\n      mceTableRowType: m(function (e) {\n        switch (e) {\n          case \"header\":\n            return n.makeRowsHeader;\n\n          case \"footer\":\n            return n.makeRowsFooter;\n\n          default:\n            return n.makeRowsBody;\n        }\n      })\n    }, function (e, n) {\n      return l.addCommand(n, e);\n    }), ae({\n      mceTableProps: P(vl, l, !1),\n      mceTableRowProps: P(bl, l),\n      mceTableCellProps: P(dl, l, a)\n    }, function (e, n) {\n      return l.addCommand(n, function () {\n        return e();\n      });\n    }), l.addCommand(\"mceInsertTable\", function (e, n) {\n      g(n) && 0 < Ue(n).length ? Lc(l, n.rows, n.columns, n.options, \"Invalid values for mceInsertTable - rows and columns values are required to insert a table.\") : vl(l, !0);\n    }), l.addCommand(\"mceTableApplyCellStyle\", function (e, n) {\n      function r(e) {\n        return \"tablecell\" + e.toLowerCase().replace(\"-\", \"\");\n      }\n\n      var o, t;\n      !g(n) || 0 !== (o = Ql(a)).length && (function (e) {\n        for (var n in e) {\n          if (Ge.call(e, n)) return;\n        }\n\n        return 1;\n      }(t = se(n, function (e, n) {\n        return l.formatter.has(r(n)) && T(e);\n      })) || (ae(t, function (n, t) {\n        A(o, function (e) {\n          Nf.normal(l, e.dom).setFormat(r(t), n);\n        });\n      }), u(o[0]).each(function (e) {\n        return Gu(l, e.dom, Ca);\n      })));\n    });\n  }\n\n  function Cl(t, e) {\n    return rt(t, e).bind(function (e) {\n      var n = nt(e);\n      return b(n, function (e) {\n        return ce(t, e);\n      }).map(function (e) {\n        return {\n          index: e,\n          all: n\n        };\n      });\n    });\n  }\n\n  function Sl(e, n) {\n    var t = e.document.createRange();\n    return t.selectNode(n.dom), t;\n  }\n\n  function Tl(e, n) {\n    var t = e.document.createRange();\n    return Jf(t, n), t;\n  }\n\n  function xl(e, n, t) {\n    var r,\n        o = e.document.createRange(),\n        u = o;\n    return n.fold(function (e) {\n      u.setStartBefore(e.dom);\n    }, function (e, n) {\n      u.setStart(e.dom, n);\n    }, function (e) {\n      u.setStartAfter(e.dom);\n    }), r = o, t.fold(function (e) {\n      r.setEndBefore(e.dom);\n    }, function (e, n) {\n      r.setEnd(e.dom, n);\n    }, function (e) {\n      r.setEndAfter(e.dom);\n    }), o;\n  }\n\n  function Rl(e, n, t, r, o) {\n    var u = e.document.createRange();\n    return u.setStart(n.dom, t), u.setEnd(r.dom, o), u;\n  }\n\n  function Dl(e) {\n    return {\n      left: e.left,\n      top: e.top,\n      right: e.right,\n      bottom: e.bottom,\n      width: e.width,\n      height: e.height\n    };\n  }\n\n  function Ol(e, n, t) {\n    return n(Ve.fromDom(t.startContainer), t.startOffset, Ve.fromDom(t.endContainer), t.endOffset);\n  }\n\n  function Al(e, n) {\n    var o,\n        t,\n        r,\n        u = (o = e, n.match({\n      domRange: function domRange(e) {\n        return {\n          ltr: C(e),\n          rtl: q.none\n        };\n      },\n      relative: function relative(e, n) {\n        return {\n          ltr: Y(function () {\n            return xl(o, e, n);\n          }),\n          rtl: Y(function () {\n            return q.some(xl(o, n, e));\n          })\n        };\n      },\n      exact: function exact(e, n, t, r) {\n        return {\n          ltr: Y(function () {\n            return Rl(o, e, n, t, r);\n          }),\n          rtl: Y(function () {\n            return q.some(Rl(o, t, r, e, n));\n          })\n        };\n      }\n    }));\n    return (r = (t = u).ltr()).collapsed ? t.rtl().filter(function (e) {\n      return !1 === e.collapsed;\n    }).map(function (e) {\n      return Qf.rtl(Ve.fromDom(e.endContainer), e.endOffset, Ve.fromDom(e.startContainer), e.startOffset);\n    }).getOrThunk(function () {\n      return Ol(0, Qf.ltr, r);\n    }) : Ol(0, Qf.ltr, r);\n  }\n\n  function kl(u, e) {\n    return Al(u, e).match({\n      ltr: function ltr(e, n, t, r) {\n        var o = u.document.createRange();\n        return o.setStart(e.dom, n), o.setEnd(t.dom, r), o;\n      },\n      rtl: function rtl(e, n, t, r) {\n        var o = u.document.createRange();\n        return o.setStart(t.dom, r), o.setEnd(e.dom, n), o;\n      }\n    });\n  }\n\n  function Il(e, n) {\n    return {\n      parent: C(q.from(e.dom.documentElement).map(Ve.fromDom).getOr(e)),\n      view: C(e),\n      origin: C(uo(0, 0)),\n      isResizable: n\n    };\n  }\n\n  function Bl(e) {\n    return yo(e).exists(function (e) {\n      return _l.test(e);\n    });\n  }\n\n  function Ml(e) {\n    return yo(e).exists(function (e) {\n      return Wl.test(e);\n    });\n  }\n\n  function El(e) {\n    return yo(e).isNone();\n  }\n\n  function Pl() {\n    return {\n      transformRow: S,\n      transformCell: Si\n    };\n  }\n\n  function Nl(o, u) {\n    function r(e) {\n      if (sc(e)) return Ka((t = {\n        element: e\n      }).element) ? o.colgroup(t) : o.row(t);\n      var n,\n          t,\n          r = (n = u(e), $a(n.element) ? o.col(n) : o.cell(n));\n      return i = q.some({\n        item: e,\n        replacement: r\n      }), r;\n    }\n\n    void 0 === u && (u = mc);\n    var i = q.none();\n    return {\n      getOrInit: function getOrInit(n, t) {\n        return i.fold(function () {\n          return r(n);\n        }, function (e) {\n          return t(n, e.item) ? e.replacement : r(n);\n        });\n      }\n    };\n  }\n\n  function zl(r) {\n    return function (t) {\n      function u(e) {\n        var n = t.replace(e, r, \"td\" === r ? {\n          scope: null\n        } : {});\n        return i.push({\n          item: e,\n          sub: n\n        }), n;\n      }\n\n      var i = [];\n      return {\n        replaceOrInit: function replaceOrInit(n, t) {\n          return sc(n) || $a(n) ? n : (r = n, o = t, w(i, function (e) {\n            return o(e.item, r);\n          }).fold(function () {\n            return u(n);\n          }, function (e) {\n            return t(n, e.item) ? e.sub : u(n);\n          }));\n          var r, o;\n        }\n      };\n    };\n  }\n\n  function Ll(r) {\n    return {\n      unmerge: function unmerge(t) {\n        var e = dc(t);\n        return e.each(function (e) {\n          return Mn(t, \"scope\", e);\n        }), function () {\n          var n = r.cell({\n            element: t,\n            colspan: 1,\n            rowspan: 1\n          });\n          return $n(n, \"width\"), $n(t, \"width\"), e.each(function (e) {\n            return Mn(n, \"scope\", e);\n          }), n;\n        };\n      },\n      merge: function merge(r) {\n        return $n(r[0], \"width\"), function () {\n          var e = _n(O(r, dc));\n\n          if (0 === e.length) return q.none();\n          var n = e[0],\n              t = [\"row\", \"col\"];\n          return R(e, function (e) {\n            return e !== n && y(t, e);\n          }) ? q.none() : q.from(n);\n        }().fold(function () {\n          return Wt(r[0], \"scope\");\n        }, function (e) {\n          return Mn(r[0], \"scope\", e + \"group\");\n        }), C(r[0]);\n      }\n    };\n  }\n\n  var _l = /(\\d+(\\.\\d+)?)%/,\n      Wl = /(\\d+(\\.\\d+)?)px|em/,\n      jl = en(\"col\"),\n      Fl = C(_l),\n      Hl = en(\"col\"),\n      Vl = function Vl(r) {\n    return yo(r).fold(function () {\n      return e = Eo(t = r, vr), n = C(0), {\n        width: e,\n        pixelWidth: e,\n        getWidths: function getWidths(e, n) {\n          return Bo(e, t, n);\n        },\n        getCellDelta: n,\n        singleColumnWidth: C([0]),\n        minCellWidth: n,\n        setElementWidth: E,\n        adjustTableWidth: E,\n        isRelative: !0,\n        label: \"none\"\n      };\n      var t, e, n;\n    }, function (e) {\n      return n = r, t = e, (null !== Fl().exec(t) ? Po : No)(n);\n      var n, t;\n    });\n  },\n      ql = No,\n      Ul = Po,\n      Gl = [\"img\", \"br\"],\n      $l = function $l(e, u) {\n    var i = function i(e) {\n      for (var n = ln(e), t = n.length - 1; 0 <= t; t--) {\n        var r = n[t];\n        if (u(r)) return q.some(r);\n        var o = i(r);\n        if (o.isSome()) return o;\n      }\n\n      return q.none();\n    };\n\n    return i(e);\n  },\n      Kl = {\n    scope: [\"row\", \"col\"]\n  },\n      Xl = {\n    selected: \"data-mce-selected\",\n    selectedSelector: \"td[data-mce-selected],th[data-mce-selected]\",\n    firstSelected: \"data-mce-first-selected\",\n    firstSelectedSelector: \"td[data-mce-first-selected],th[data-mce-first-selected]\",\n    lastSelected: \"data-mce-last-selected\",\n    lastSelectedSelector: \"td[data-mce-last-selected],th[data-mce-last-selected]\"\n  },\n      Yl = uu(\"th,td,caption\"),\n      Jl = uu(\"th,td\"),\n      Ql = ru,\n      Zl = Lr([{\n    none: []\n  }, {\n    only: [\"index\"]\n  }, {\n    left: [\"index\", \"next\"]\n  }, {\n    middle: [\"prev\", \"index\", \"next\"]\n  }, {\n    right: [\"prev\", \"index\"]\n  }]),\n      ea = _K({}, Zl),\n      na = mu(function (e) {\n    return e < 0;\n  }),\n      ta = mu(x),\n      ra = Lr([{\n    invalid: [\"raw\"]\n  }, {\n    pixels: [\"value\"]\n  }, {\n    percent: [\"value\"]\n  }]),\n      oa = _K(_K({}, ra), {\n    from: function from(e) {\n      return ee(e, \"%\") ? pu(\"%\", ra.percent, e) : ee(e, \"px\") ? pu(\"px\", ra.pixels, e) : ra.invalid(e);\n    }\n  }),\n      ua = function ua(e) {\n    if (0 === e.length) return e;\n    var n,\n        t,\n        r = I(e, function (e, n) {\n      var t = oa.from(n).fold(function () {\n        return {\n          value: n,\n          remainder: 0\n        };\n      }, function (e) {\n        return n = e, {\n          value: (t = Math.floor(n)) + \"px\",\n          remainder: n - t\n        };\n        var n, t;\n      }, function (e) {\n        return {\n          value: e + \"%\",\n          remainder: 0\n        };\n      });\n      return {\n        output: [t.value].concat(e.output),\n        remainder: e.remainder + t.remainder\n      };\n    }, {\n      output: [],\n      remainder: 0\n    }),\n        o = r.output;\n    return o.slice(0, o.length - 1).concat([(n = o[o.length - 1], t = Math.round(r.remainder), oa.from(n).fold(C(n), function (e) {\n      return e + t + \"px\";\n    }, function (e) {\n      return e + t + \"%\";\n    }))]);\n  },\n      ia = oa.from,\n      ca = Ru([\"compare\", \"extract\", \"mutate\", \"sink\"]),\n      la = Ru([\"element\", \"start\", \"stop\", \"destroy\"]),\n      aa = Ru([\"forceDrop\", \"drop\", \"move\", \"delayDrop\"]),\n      fa = function fa(e, n, t, r) {\n    e.dom.removeEventListener(n, t, r);\n  },\n      sa = x,\n      ma = Ou,\n      da = Eu(\"ephox-dragster\").resolve,\n      ga = ca({\n    compare: function compare(e, n) {\n      return uo(n.left - e.left, n.top - e.top);\n    },\n    extract: function extract(e) {\n      return q.some(uo(e.x, e.y));\n    },\n    sink: function sink(e, n) {\n      var t,\n          r,\n          o,\n          u = (t = n, r = _K({\n        layerClass: da(\"blocker\")\n      }, t), Mn(o = Ve.fromTag(\"div\"), \"role\", \"presentation\"), qn(o, {\n        position: \"fixed\",\n        left: \"0px\",\n        top: \"0px\",\n        width: \"100%\",\n        height: \"100%\"\n      }), Bu(o, da(\"blocker\")), Bu(o, r.layerClass), {\n        element: C(o),\n        destroy: function destroy() {\n          Yt(o);\n        }\n      }),\n          i = Au(u.element(), \"mousedown\", e.forceDrop),\n          c = Au(u.element(), \"mouseup\", e.drop),\n          l = Au(u.element(), \"mousemove\", e.move),\n          a = Au(u.element(), \"mouseout\", e.delayDrop);\n      return la({\n        element: u.element,\n        start: function start(e) {\n          Xt(e, u.element());\n        },\n        stop: function stop() {\n          Yt(u.element());\n        },\n        destroy: function destroy() {\n          u.destroy(), c.unbind(), l.unbind(), a.unbind(), i.unbind();\n        }\n      });\n    },\n    mutate: function mutate(e, n) {\n      e.mutate(n.left, n.top);\n    }\n  }),\n      pa = function pa(e) {\n    return e.dom.contentEditable;\n  },\n      ba = Eu(\"ephox-snooker\").resolve,\n      ha = ba(\"resizer-bar\"),\n      va = ba(\"resizer-rows\"),\n      wa = ba(\"resizer-cols\"),\n      ya = ba(\"resizer-bar-dragging\"),\n      Ca = {\n    structure: !1,\n    style: !0\n  },\n      Sa = {\n    structure: !0,\n    style: !1\n  },\n      Ta = {\n    structure: !0,\n    style: !0\n  },\n      xa = {\n    \"border-collapse\": \"collapse\",\n    width: \"100%\"\n  },\n      Ra = D(5, function (e) {\n    var n = e + 1 + \"px\";\n    return {\n      title: n,\n      value: n\n    };\n  }),\n      Da = O([\"Solid\", \"Dotted\", \"Dashed\", \"Double\", \"Groove\", \"Ridge\", \"Inset\", \"Outset\", \"None\", \"Hidden\"], function (e) {\n    return {\n      title: e,\n      value: e.toLowerCase()\n    };\n  }),\n      Oa = {\n    border: \"1\"\n  },\n      Aa = \"preservetable\",\n      ka = function ka(e) {\n    return \"fixed\" === $u(e) || !1 === Ku(e);\n  },\n      Ia = function Ia(e) {\n    return \"responsive\" === $u(e);\n  },\n      Ba = function Ba(e) {\n    var n = Ro(e);\n    wu(e, q.some(n), q.none()), gi(e);\n  },\n      Ma = function Ma(e) {\n    var n = vr(e) + \"px\";\n    wu(e, q.some(n), q.none()), gi(e);\n  },\n      Ea = function Ea(e) {\n    $n(e, \"width\");\n    var n = tt(e);\n    A(0 < n.length ? n : nt(e), function (e) {\n      $n(e, \"width\"), gi(e);\n    }), gi(e);\n  },\n      Pa = \"bar-\",\n      Na = function Na(n, e, t) {\n    return n.property().isText(e) && 0 === n.property().getText(e).trim().length || n.property().isComment(e) ? t(e).bind(function (e) {\n      return Na(n, e, t).orThunk(function () {\n        return q.some(e);\n      });\n    }) : q.none();\n  },\n      za = function za(e, n) {\n    var t = Na(e, n, e.query().prevSibling).getOr(n);\n    if (e.property().isText(t)) return hi(t, vi(e, t));\n    var r = e.property().children(t);\n    return 0 < r.length ? za(e, r[r.length - 1]) : hi(t, vi(e, t));\n  },\n      La = za,\n      _a = Zt(),\n      Wa = en(\"th\"),\n      ja = function ja(e) {\n    var n = k(e, function (e) {\n      return Wa(e.element);\n    });\n    return 0 === n.length ? q.some(\"td\") : n.length === e.length ? q.some(\"th\") : q.none();\n  },\n      Fa = xi,\n      Ha = Ri,\n      Va = Di,\n      qa = function qa(t) {\n    return {\n      isValue: x,\n      isError: v,\n      getOr: C(t),\n      getOrThunk: C(t),\n      getOrDie: C(t),\n      or: function or(e) {\n        return qa(t);\n      },\n      orThunk: function orThunk(e) {\n        return qa(t);\n      },\n      fold: function fold(e, n) {\n        return n(t);\n      },\n      map: function map(e) {\n        return qa(e(t));\n      },\n      mapError: function mapError(e) {\n        return qa(t);\n      },\n      each: function each(e) {\n        e(t);\n      },\n      bind: function bind(e) {\n        return e(t);\n      },\n      exists: function exists(e) {\n        return e(t);\n      },\n      forall: function forall(e) {\n        return e(t);\n      },\n      toOptional: function toOptional() {\n        return q.some(t);\n      }\n    };\n  },\n      Ua = function Ua(t) {\n    return {\n      isValue: v,\n      isError: x,\n      getOr: S,\n      getOrThunk: function getOrThunk(e) {\n        return e();\n      },\n      getOrDie: function getOrDie() {\n        return e = String(t), function () {\n          throw new Error(e);\n        }();\n        var e;\n      },\n      or: S,\n      orThunk: function orThunk(e) {\n        return e();\n      },\n      fold: function fold(e, n) {\n        return e(t);\n      },\n      map: function map(e) {\n        return Ua(t);\n      },\n      mapError: function mapError(e) {\n        return Ua(e(t));\n      },\n      each: E,\n      bind: function bind(e) {\n        return Ua(t);\n      },\n      exists: v,\n      forall: x,\n      toOptional: q.none\n    };\n  },\n      Ga = {\n    value: qa,\n    error: Ua,\n    fromOption: function fromOption(e, n) {\n      return e.fold(function () {\n        return Ua(n);\n      }, qa);\n    }\n  },\n      $a = en(\"col\"),\n      Ka = en(\"colgroup\"),\n      Xa = [\"body\", \"p\", \"div\", \"article\", \"aside\", \"figcaption\", \"figure\", \"footer\", \"header\", \"nav\", \"section\", \"ol\", \"ul\", \"table\", \"thead\", \"tfoot\", \"tbody\", \"caption\", \"tr\", \"td\", \"th\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"blockquote\", \"pre\", \"address\"],\n      Ya = Zt(),\n      Ja = Sc(\"thead\", !0),\n      Qa = Sc(\"tbody\", !1),\n      Za = Sc(\"tfoot\", !1),\n      ef = zl(\"th\"),\n      nf = zl(\"td\"),\n      tf = zi(function (e, n, t, r) {\n    var o = n[0].row;\n    return yc(I(Cc(n), function (e, n) {\n      return {\n        grid: nc(e.grid, o, n.row + e.delta, t, r.getOrInit),\n        delta: e.delta + 1\n      };\n    }, {\n      grid: e,\n      delta: 0\n    }).grid, o, n[0].column);\n  }, _i, E, E, Nl),\n      rf = zi(function (e, n, t, r) {\n    var o = Cc(n),\n        u = o[o.length - 1],\n        i = u.row + u.rowspan;\n    return yc(I(o, function (e, n) {\n      return nc(e, i, n.row, t, r.getOrInit);\n    }, e), i, n[0].column);\n  }, _i, E, E, Nl),\n      of = zi(function (e, n, t, r) {\n    var o = n.details,\n        u = fc(o),\n        i = u[0].column;\n    return yc(I(u, function (e, n) {\n      return {\n        grid: tc(e.grid, i, n.column + e.delta, t, r.getOrInit),\n        delta: e.delta + 1\n      };\n    }, {\n      grid: e,\n      delta: 0\n    }).grid, o[0].row, i);\n  }, kc(!0), Rc, E, Nl),\n      uf = zi(function (e, n, t, r) {\n    var o = n.details,\n        u = o[o.length - 1],\n        i = u.column + u.colspan;\n    return yc(I(fc(o), function (e, n) {\n      return tc(e, i, n.column, t, r.getOrInit);\n    }, e), o[0].row, i);\n  }, kc(!1), Rc, E, Nl),\n      cf = zi(function (e, n, t, r) {\n    var o,\n        u,\n        i = fc(n.details),\n        c = (o = e, u = O(i, function (e) {\n      return e.column;\n    }), N(o, function (e) {\n      var n = e.cells,\n          t = I(u, function (e, n) {\n        return 0 <= n && n < e.length ? e.slice(0, n).concat(e.slice(n + 1)) : e;\n      }, n);\n      return 0 < t.length ? [ye(e.element, t, e.section, e.isNew)] : [];\n    })),\n        l = 0 < c.length ? c[0].cells.length - 1 : 0;\n    return yc(c, i[0].row, Math.min(i[0].column, l));\n  }, function (n, e) {\n    return Wi(n, e).map(function (e) {\n      return {\n        details: e,\n        pixelDelta: -Ac(n, e)\n      };\n    });\n  }, Rc, vc, Nl),\n      lf = zi(function (e, n, t, r) {\n    var o,\n        u,\n        i,\n        c,\n        l = Cc(n),\n        a = (o = l[0].row, u = l[l.length - 1].row, c = (i = gt(e)).rows, i.cols.concat(c.slice(0, o)).concat(c.slice(u + 1))),\n        f = 0 < a.length ? a.length - 1 : 0;\n    return yc(a, Math.min(n[0].row, f), n[0].column);\n  }, _i, E, vc, Nl),\n      af = zi(function (e, n, t, r) {\n    return yc(lc(e, O(fc(n), function (e) {\n      return e.column;\n    }), !0, t, r.replaceOrInit), n[0].row, n[0].column);\n  }, Wi, E, E, ef),\n      ff = zi(function (e, n, t, r) {\n    return yc(lc(e, O(fc(n), function (e) {\n      return e.column;\n    }), !1, t, r.replaceOrInit), n[0].row, n[0].column);\n  }, Wi, E, E, nf),\n      sf = zi(Ja, Wi, E, E, ef),\n      mf = zi(Qa, Wi, E, E, nf),\n      df = zi(Za, Wi, E, E, nf),\n      gf = zi(function (e, n, t, r) {\n    return yc(ac(e, n, t, r.replaceOrInit), n[0].row, n[0].column);\n  }, Wi, E, E, ef),\n      pf = zi(function (e, n, t, r) {\n    return yc(ac(e, n, t, r.replaceOrInit), n[0].row, n[0].column);\n  }, Wi, E, E, nf),\n      bf = zi(function (e, n, t, r) {\n    var o = n.cells;\n    return bc(o), wc(function (e, n, t) {\n      var r = gt(e).rows;\n      if (0 === r.length) return e;\n\n      for (var o = n.startRow; o <= n.finishRow; o++) {\n        for (var u = n.startCol; u <= n.finishCol; u++) {\n          var i = r[o],\n              c = st(i, u).isLocked;\n          ft(i, u, we(t(), !1, c));\n        }\n      }\n\n      return e;\n    }(e, n.bounds, r.merge(o)), q.from(o[0]));\n  }, Fi, xc, E, Ll),\n      hf = zi(function (e, n, t, r) {\n    return wc(I(n, function (e, n) {\n      return Vi(e, n, t, r.unmerge(n));\n    }, e), q.from(n[0]));\n  }, Hi, xc, E, Ll),\n      vf = zi(function (e, n, t, r) {\n    var o,\n        u,\n        i = (o = n.clipboard, u = n.generators, Mi($t.fromTable(o), u, !0));\n    return Qi({\n      row: n.row,\n      column: n.column\n    }, e, i, n.generators, t).fold(function () {\n      return wc(e, q.some(n.element));\n    }, function (e) {\n      return yc(e, n.row, n.column);\n    });\n  }, function (n, t) {\n    return et(t.element).bind(function (e) {\n      return Pi(n, e).map(function (e) {\n        return _K(_K({}, e), {\n          generators: t.generators,\n          clipboard: t.clipboard\n        });\n      });\n    });\n  }, xc, E, Nl),\n      wf = zi(function (e, n, t, r) {\n    var o = gt(e).rows,\n        u = n.cells[0].column,\n        i = o[n.cells[0].row];\n    return yc(Zi(u, e, Tc(n.clipboard, n.generators, i), n.generators, t), n.cells[0].row, n.cells[0].column);\n  }, Ic(!0), E, E, Nl),\n      yf = zi(function (e, n, t, r) {\n    var o = gt(e).rows,\n        u = n.cells[n.cells.length - 1].column + n.cells[n.cells.length - 1].colspan,\n        i = o[n.cells[0].row];\n    return yc(Zi(u, e, Tc(n.clipboard, n.generators, i), n.generators, t), n.cells[0].row, n.cells[0].column);\n  }, Ic(!1), E, E, Nl),\n      Cf = zi(function (e, n, t, r) {\n    var o = gt(e).rows,\n        u = n.cells[0].row,\n        i = o[u];\n    return yc(ec(u, e, Tc(n.clipboard, n.generators, i), n.generators, t), n.cells[0].row, n.cells[0].column);\n  }, Li, E, E, Nl),\n      Sf = zi(function (e, n, t, r) {\n    var o = gt(e).rows,\n        u = n.cells[n.cells.length - 1].row + n.cells[n.cells.length - 1].rowspan,\n        i = o[n.cells[0].row];\n    return yc(ec(u, e, Tc(n.clipboard, n.generators, i), n.generators, t), n.cells[0].row, n.cells[0].column);\n  }, Li, E, E, Nl),\n      Tf = function Tf(e, n) {\n    var i = $t.fromTable(e);\n    return _i(i, n).bind(function (e) {\n      var n = e[e.length - 1],\n          o = e[0].row,\n          u = n.row + n.rowspan;\n      return function () {\n        var e = O(i.all.slice(o, u), function (e) {\n          return Ci(e).type;\n        }),\n            n = y(e, \"header\"),\n            t = y(e, \"footer\");\n\n        if (n || t) {\n          var r = y(e, \"body\");\n          return !n || r || t ? n || r || !t ? q.none() : q.some(\"footer\") : q.some(\"header\");\n        }\n\n        return q.some(\"body\");\n      }();\n    }).getOr(\"\");\n  },\n      xf = {\n    styles: {\n      \"border-collapse\": \"collapse\",\n      width: \"100%\"\n    },\n    attributes: {\n      border: \"1\"\n    },\n    colGroups: !1\n  },\n      Rf = tinymce.util.Tools.resolve(\"tinymce.util.Tools\"),\n      Df = [{\n    text: \"None\",\n    value: \"\"\n  }, {\n    text: \"Top\",\n    value: \"top\"\n  }, {\n    text: \"Middle\",\n    value: \"middle\"\n  }, {\n    text: \"Bottom\",\n    value: \"bottom\"\n  }],\n      Of = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,\n      Af = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i,\n      kf = /^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/,\n      If = /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+),\\s*(\\d?(?:\\.\\d+)?)\\)/,\n      Bf = function Bf(e) {\n    return O(e, function (e) {\n      var n = e.text || e.title;\n      return Qc(e) ? {\n        text: n,\n        items: Bf(e.menu)\n      } : {\n        text: n,\n        value: e.value\n      };\n    });\n  },\n      Mf = function Mf(t, r, e, o, a) {\n    return O(e, function (e) {\n      var u,\n          i,\n          c,\n          l,\n          n = e.text || e.title;\n      return Qc(e) ? {\n        type: \"nestedmenuitem\",\n        text: n,\n        getSubmenuItems: function getSubmenuItems() {\n          return Mf(t, r, e.menu, o, a);\n        }\n      } : {\n        text: n,\n        type: \"togglemenuitem\",\n        onAction: function onAction() {\n          return a(e.value);\n        },\n        onSetup: (u = t, i = r, c = o, l = e.value, function (t) {\n          function e() {\n            function e(e) {\n              return u.formatter.match(c, {\n                value: l\n              }, e.dom, o);\n            }\n\n            var n = Ql(i);\n            o ? (t.setActive(!R(n, e)), r.set(u.formatter.formatChanged(c, function (e) {\n              return t.setActive(!e);\n            }, !0))) : (t.setActive(z(n, e)), r.set(u.formatter.formatChanged(c, t.setActive, !1, {\n              value: l\n            })));\n          }\n\n          var r = Yc(function (e) {\n            return e.unbind();\n          }),\n              o = !ne(l);\n          return u.initialized ? e() : u.on(\"init\", e), r.clear;\n        })\n      };\n    });\n  },\n      Ef = function Ef(e) {\n    return N(e, function (e) {\n      return Qc(e) ? [_K(_K({}, e), {\n        menu: Ef(e.menu)\n      })] : ne(e.value) ? [e] : [];\n    });\n  },\n      Pf = [{\n    name: \"width\",\n    type: \"input\",\n    label: \"Width\"\n  }, {\n    name: \"height\",\n    type: \"input\",\n    label: \"Height\"\n  }, {\n    name: \"celltype\",\n    type: \"listbox\",\n    label: \"Cell type\",\n    items: [{\n      text: \"Cell\",\n      value: \"td\"\n    }, {\n      text: \"Header cell\",\n      value: \"th\"\n    }]\n  }, {\n    name: \"scope\",\n    type: \"listbox\",\n    label: \"Scope\",\n    items: [{\n      text: \"None\",\n      value: \"\"\n    }, {\n      text: \"Row\",\n      value: \"row\"\n    }, {\n      text: \"Column\",\n      value: \"col\"\n    }, {\n      text: \"Row group\",\n      value: \"rowgroup\"\n    }, {\n      text: \"Column group\",\n      value: \"colgroup\"\n    }]\n  }, {\n    name: \"halign\",\n    type: \"listbox\",\n    label: \"Horizontal align\",\n    items: [{\n      text: \"None\",\n      value: \"\"\n    }, {\n      text: \"Left\",\n      value: \"left\"\n    }, {\n      text: \"Center\",\n      value: \"center\"\n    }, {\n      text: \"Right\",\n      value: \"right\"\n    }]\n  }, {\n    name: \"valign\",\n    type: \"listbox\",\n    label: \"Vertical align\",\n    items: Df\n  }],\n      Nf = {\n    normal: il(!1),\n    ifTruthy: il(!0)\n  },\n      zf = P(fl, [\"left\", \"center\", \"right\"], \"align\"),\n      Lf = P(fl, [\"top\", \"middle\", \"bottom\"], \"valign\"),\n      _f = [{\n    type: \"listbox\",\n    name: \"type\",\n    label: \"Row type\",\n    items: [{\n      text: \"Header\",\n      value: \"header\"\n    }, {\n      text: \"Body\",\n      value: \"body\"\n    }, {\n      text: \"Footer\",\n      value: \"footer\"\n    }]\n  }, {\n    type: \"listbox\",\n    name: \"align\",\n    label: \"Alignment\",\n    items: [{\n      text: \"None\",\n      value: \"\"\n    }, {\n      text: \"Left\",\n      value: \"left\"\n    }, {\n      text: \"Center\",\n      value: \"center\"\n    }, {\n      text: \"Right\",\n      value: \"right\"\n    }]\n  }, {\n    label: \"Height\",\n    name: \"height\",\n    type: \"input\"\n  }],\n      Wf = function Wf(e, n, t, r) {\n    if (\"TD\" === n.tagName || \"TH\" === n.tagName) T(t) ? e.setStyle(n, t, r) : e.setStyle(n, t);else if (n.children) for (var o = 0; o < n.children.length; o++) {\n      Wf(e, n.children[o], t, r);\n    }\n  },\n      jf = {\n    remove_similar: !0,\n    inherit: !1\n  },\n      Ff = _K({\n    selector: \"td,th\"\n  }, jf),\n      Hf = {\n    tablecellbackgroundcolor: _K({\n      styles: {\n        backgroundColor: \"%value\"\n      }\n    }, Ff),\n    tablecellverticalalign: _K({\n      styles: {\n        \"vertical-align\": \"%value\"\n      }\n    }, Ff),\n    tablecellbordercolor: _K({\n      styles: {\n        borderColor: \"%value\"\n      }\n    }, Ff),\n    tablecellclass: _K({\n      classes: [\"%value\"]\n    }, Ff),\n    tableclass: _K({\n      selector: \"table\",\n      classes: [\"%value\"]\n    }, jf),\n    tablecellborderstyle: _K({\n      styles: {\n        borderStyle: \"%value\"\n      }\n    }, Ff),\n    tablecellborderwidth: _K({\n      styles: {\n        borderWidth: \"%value\"\n      }\n    }, Ff)\n  },\n      Vf = Lr([{\n    none: [\"current\"]\n  }, {\n    first: [\"current\"]\n  }, {\n    middle: [\"current\", \"target\"]\n  }, {\n    last: [\"current\"]\n  }]),\n      qf = _K(_K({}, Vf), {\n    none: function none(e) {\n      return Vf.none(e = void 0 === e ? void 0 : e);\n    }\n  }),\n      Uf = function Uf(e, n, t, r, o) {\n    void 0 === o && (o = x);\n    var u = 1 === r;\n    if (!u && t <= 0) return qf.first(e[0]);\n    if (u && t >= e.length - 1) return qf.last(e[e.length - 1]);\n    var i = t + r,\n        c = e[i];\n    return o(c) ? qf.middle(n, c) : Uf(e, n, i, r, o);\n  },\n      Gf = function Gf(e, n, t, r) {\n    return {\n      start: e,\n      soffset: n,\n      finish: t,\n      foffset: r\n    };\n  },\n      $f = Lr([{\n    before: [\"element\"]\n  }, {\n    on: [\"element\", \"offset\"]\n  }, {\n    after: [\"element\"]\n  }]),\n      Kf = {\n    before: $f.before,\n    on: $f.on,\n    after: $f.after,\n    cata: function cata(e, n, t, r) {\n      return e.fold(n, t, r);\n    },\n    getStart: function getStart(e) {\n      return e.fold(S, S, S);\n    }\n  },\n      Xf = Lr([{\n    domRange: [\"rng\"]\n  }, {\n    relative: [\"startSitu\", \"finishSitu\"]\n  }, {\n    exact: [\"start\", \"soffset\", \"finish\", \"foffset\"]\n  }]),\n      Yf = {\n    domRange: Xf.domRange,\n    relative: Xf.relative,\n    exact: Xf.exact,\n    exactFromRange: function exactFromRange(e) {\n      return Xf.exact(e.start, e.soffset, e.finish, e.foffset);\n    },\n    getWin: function getWin(e) {\n      var n = e.match({\n        domRange: function domRange(e) {\n          return Ve.fromDom(e.startContainer);\n        },\n        relative: function relative(e, n) {\n          return Kf.getStart(e);\n        },\n        exact: function exact(e, n, t, r) {\n          return e;\n        }\n      });\n      return Ve.fromDom(tn(n).dom.defaultView);\n    },\n    range: Gf\n  },\n      Jf = function Jf(e, n) {\n    return e.selectNodeContents(n.dom);\n  },\n      Qf = Lr([{\n    ltr: [\"start\", \"soffset\", \"finish\", \"foffset\"]\n  }, {\n    rtl: [\"start\", \"soffset\", \"finish\", \"foffset\"]\n  }]);\n\n  function Zf(e, n, t) {\n    return n >= e.left && n <= e.right && t >= e.top && t <= e.bottom;\n  }\n\n  function es(t, r, e, n, o) {\n    function l(e) {\n      var n = t.dom.createRange();\n      return n.setStart(r.dom, e), n.collapse(!0), n;\n    }\n\n    var u = Et(r).length,\n        i = function (e, n, t, r) {\n      if (0 === r) return 0;\n      if (e === t) return r - 1;\n\n      for (var o = t, u = 1; u < r; u++) {\n        var i = l(u).getBoundingClientRect(),\n            c = Math.abs(e - i.left);\n\n        if (n <= i.bottom) {\n          if (n < i.top || o < c) return u - 1;\n          o = c;\n        }\n      }\n\n      return 0;\n    }(e, n, o.right, u);\n\n    return l(i);\n  }\n\n  function ns(e, n) {\n    return n - e.left < e.right - n;\n  }\n\n  function ts(e, n, t) {\n    var r = e.dom.createRange();\n    return r.selectNode(n.dom), r.collapse(t), r;\n  }\n\n  function rs(n, e, t) {\n    var r = n.dom.createRange();\n    r.selectNode(e.dom);\n    var o = ns(r.getBoundingClientRect(), t);\n    return (!0 === o ? Wo : jo)(e).map(function (e) {\n      return ts(n, e, o);\n    });\n  }\n\n  function os(e, n, t) {\n    var r = ns(n.dom.getBoundingClientRect(), t);\n    return q.some(ts(e, n, r));\n  }\n\n  function us(e, n) {\n    var t = Ye(e);\n    return \"input\" === t ? Kf.after(e) : y([\"br\", \"img\"], t) ? 0 === n ? Kf.before(e) : Kf.after(e) : Kf.on(e, n);\n  }\n\n  function is(e, n) {\n    var t = e.fold(Kf.before, us, Kf.after),\n        r = n.fold(Kf.before, us, Kf.after);\n    return Yf.relative(t, r);\n  }\n\n  function cs(e, n, t, r) {\n    var o = us(e, n),\n        u = us(t, r);\n    return Yf.relative(o, u);\n  }\n\n  function ls(e) {\n    return q.from(e.getSelection());\n  }\n\n  function as(e, n) {\n    ls(e).each(function (e) {\n      e.removeAllRanges(), e.addRange(n);\n    });\n  }\n\n  function fs(e, n, t, r, o) {\n    as(e, Rl(e, n, t, r, o));\n  }\n\n  function ss(l, e) {\n    return Al(l, e).match({\n      ltr: function ltr(e, n, t, r) {\n        fs(l, e, n, t, r);\n      },\n      rtl: function rtl(o, u, i, c) {\n        ls(l).each(function (e) {\n          if (e.setBaseAndExtent) e.setBaseAndExtent(o.dom, u, i.dom, c);else if (e.extend) try {\n            t = i, r = c, (n = e).collapse(o.dom, u), n.extend(t.dom, r);\n          } catch (e) {\n            fs(l, i, c, o, u);\n          } else fs(l, i, c, o, u);\n          var n, t, r;\n        });\n      }\n    });\n  }\n\n  function ms(e, n, t, r, o) {\n    ss(e, cs(n, t, r, o));\n  }\n\n  function ds(e, n, t) {\n    ss(e, is(n, t));\n  }\n\n  function gs(e) {\n    if (0 < e.rangeCount) {\n      var n = e.getRangeAt(0),\n          t = e.getRangeAt(e.rangeCount - 1);\n      return q.some(Gf(Ve.fromDom(n.startContainer), n.startOffset, Ve.fromDom(t.endContainer), t.endOffset));\n    }\n\n    return q.none();\n  }\n\n  function ps(e) {\n    if (null === e.anchorNode || null === e.focusNode) return gs(e);\n    var n,\n        t,\n        r,\n        o,\n        u,\n        i,\n        c,\n        l,\n        a,\n        f,\n        s,\n        m = Ve.fromDom(e.anchorNode),\n        d = Ve.fromDom(e.focusNode);\n    return n = m, t = e.anchorOffset, r = d, o = e.focusOffset, i = t, c = r, l = o, (a = nn(u = n).dom.createRange()).setStart(u.dom, i), a.setEnd(c.dom, l), f = a, s = ce(n, r) && t === o, f.collapsed && !s ? q.some(Gf(m, e.anchorOffset, d, e.focusOffset)) : gs(e);\n  }\n\n  function bs(e, n, t) {\n    as(e, ((t = void 0 === t || t) ? Tl : Sl)(e, n));\n  }\n\n  function hs(e) {\n    return ls(e).filter(function (e) {\n      return 0 < e.rangeCount;\n    }).bind(ps).map(function (e) {\n      return Yf.exact(e.start, e.soffset, e.finish, e.foffset);\n    });\n  }\n\n  function vs(e, n, t) {\n    return Zs(e, n, (o = Nu, Cl(r = t, void 0).fold(function () {\n      return qf.none(r);\n    }, function (e) {\n      return Uf(e.all, r, e.index, 1, o);\n    })));\n    var r, o;\n  }\n\n  function ws(e, n) {\n    var t = kl(e, n);\n    return Gf(Ve.fromDom(t.startContainer), t.startOffset, Ve.fromDom(t.endContainer), t.endOffset);\n  }\n\n  function ys(e, n) {\n    return {\n      item: e,\n      mode: n\n    };\n  }\n\n  function Cs(e, n, t, r) {\n    return void 0 === r && (r = Ks), e.property().parent(n).map(function (e) {\n      return ys(e, r);\n    });\n  }\n\n  function Ss(n) {\n    return function (e) {\n      return 0 === n.property().children(e).length;\n    };\n  }\n\n  function Ts(e, n) {\n    return am(sm, e, Ss(sm), n);\n  }\n\n  function xs(e, n) {\n    return fm(sm, e, Ss(sm), n);\n  }\n\n  function Rs(e) {\n    return In(e, \"tr\");\n  }\n\n  function Ds(e) {\n    return \"br\" === Ye(e);\n  }\n\n  function Os(e, n, t, r) {\n    var o, u, i, c, l, a, f;\n    return (Ds(n) ? (o = e, (i = r).traverse(u = n).orThunk(function () {\n      return pm(u, i.gather, o);\n    }).map(i.relative)) : (c = e, l = r, an(a = n, f = t).filter(Ds).orThunk(function () {\n      return an(a, f - 1).filter(Ds);\n    }).bind(function (e) {\n      return l.traverse(e).fold(function () {\n        return pm(e, l.gather, c).map(l.relative);\n      }, function (e) {\n        return rn(r = e).bind(function (n) {\n          var t = ln(n);\n          return gm(t, r).map(function (e) {\n            return {\n              parent: n,\n              children: t,\n              element: r,\n              index: e\n            };\n          });\n        }).map(function (e) {\n          return Kf.on(e.parent, e.index);\n        });\n        var r;\n      });\n    }))).map(function (e) {\n      return {\n        start: e,\n        finish: e\n      };\n    });\n  }\n\n  function As(e, n) {\n    return {\n      left: e.left,\n      top: e.top + n,\n      right: e.right,\n      bottom: e.bottom + n\n    };\n  }\n\n  function ks(e, n) {\n    return {\n      left: e.left,\n      top: e.top - n,\n      right: e.right,\n      bottom: e.bottom - n\n    };\n  }\n\n  function Is(e, n, t) {\n    return {\n      left: e.left + n,\n      top: e.top + t,\n      right: e.right + n,\n      bottom: e.bottom + t\n    };\n  }\n\n  function Bs(e) {\n    return {\n      left: e.left,\n      top: e.top,\n      right: e.right,\n      bottom: e.bottom\n    };\n  }\n\n  function Ms(e, n) {\n    return q.some(e.getRect(n));\n  }\n\n  function Es(e, n, t) {\n    return gn(n) ? Ms(e, n).map(Bs) : pn(n) ? (r = e, o = n, (0 <= (u = t) && u < Lo(o) ? r.getRangedRect(o, u, o, u + 1) : 0 < u ? r.getRangedRect(o, u - 1, o, u) : q.none()).map(Bs)) : q.none();\n    var r, o, u;\n  }\n\n  function Ps(e, n) {\n    return gn(n) ? Ms(e, n).map(Bs) : pn(n) ? e.getRangedRect(n, 0, n, Lo(n)).map(Bs) : q.none();\n  }\n\n  function Ns(n, e, r) {\n    return Rn(function (e, n) {\n      return n(e);\n    }, Dn, e, gc, void 0).fold(v, function (e) {\n      return Ps(n, e).exists(function (e) {\n        return (n = r).left < (t = e).left || Math.abs(t.right - n.left) < 1 || n.left > t.right;\n        var n, t;\n      });\n    });\n  }\n\n  function zs(n, t, e) {\n    var r,\n        o = n.move(e, 5),\n        u = vm(t, n, e, o, 100).getOr(o),\n        i = u,\n        c = t;\n    return ((r = n).point(i) > c.getInnerHeight() ? q.some(r.point(i) - c.getInnerHeight()) : r.point(i) < 0 ? q.some(-r.point(i)) : q.none()).fold(function () {\n      return t.situsFromPoint(u.left, n.point(u));\n    }, function (e) {\n      return t.scrollBy(0, e), t.situsFromPoint(u.left, n.point(u) - e);\n    });\n  }\n\n  function Ls(a, f, s, e, m) {\n    return In(e, \"td,th\", f).bind(function (l) {\n      return In(l, \"table\", f).bind(function (e) {\n        return n = e, Dn(m, function (e) {\n          return rn(e).exists(function (e) {\n            return ce(e, n);\n          });\n        }, void 0).isSome() ? (o = t = a, u = r = f, i = c = s, o.getSelection().bind(function (r) {\n          return Os(u, r.finish, r.foffset, i).fold(function () {\n            return q.some(hi(r.finish, r.foffset));\n          }, function (e) {\n            var n = o.fromSitus(e),\n                t = dm.verify(o, r.finish, r.foffset, n.finish, n.foffset, i.failure, u);\n            return dm.cata(t, function (e) {\n              return q.none();\n            }, function () {\n              return q.none();\n            }, function (e) {\n              return q.some(hi(e, 0));\n            }, function (e) {\n              return q.some(hi(e, Lo(e)));\n            });\n          });\n        }).bind(function (e) {\n          return ym(t, r, e.element, e.offset, c, 20).map(t.fromSitus);\n        }).bind(function (n) {\n          return In(n.finish, \"td,th\", f).map(function (e) {\n            return {\n              start: l,\n              finish: e,\n              range: n\n            };\n          });\n        })) : q.none();\n        var o, u, i, n, t, r, c;\n      });\n    });\n  }\n\n  function _s(e, n, t, r, o, u) {\n    return He().browser.isIE() ? q.none() : u(r, n).orThunk(function () {\n      return Ls(e, n, t, r, o).map(function (e) {\n        var n = e.range;\n        return nm(q.some(rm(n.start, n.soffset, n.finish, n.foffset)), !0);\n      });\n    });\n  }\n\n  function Ws(e, r) {\n    return In(e, \"tr\", r).bind(function (t) {\n      return In(t, \"table\", r).bind(function (e) {\n        var n = dn(e, \"tr\");\n        return ce(t, n[0]) ? am(sm, e, function (e) {\n          return jo(e).isSome();\n        }, r).map(function (e) {\n          var n = Lo(e);\n          return nm(q.some(rm(e, n, e, n)), !0);\n        }) : q.none();\n      });\n    });\n  }\n\n  function js(e, r) {\n    return In(e, \"tr\", r).bind(function (t) {\n      return In(t, \"table\", r).bind(function (e) {\n        var n = dn(e, \"tr\");\n        return ce(t, n[n.length - 1]) ? fm(sm, e, function (e) {\n          return Wo(e).isSome();\n        }, r).map(function (e) {\n          return nm(q.some(rm(e, 0, e, 0)), !0);\n        }) : q.none();\n      });\n    });\n  }\n\n  function Fs(e, n, t, r, o, u, i) {\n    return Ls(e, t, r, o, u).bind(function (e) {\n      return om(n, t, e.start, e.finish, i);\n    });\n  }\n\n  function Hs(e, n) {\n    return In(e, \"td,th\", n);\n  }\n\n  function Vs(n) {\n    return function (e) {\n      return e === n;\n    };\n  }\n\n  function qs(e) {\n    return 37 <= e && e <= 40;\n  }\n\n  function Us(l) {\n    return {\n      elementFromPoint: function elementFromPoint(e, n) {\n        return Ve.fromPoint(Ve.fromDom(l.document), e, n);\n      },\n      getRect: function getRect(e) {\n        return e.dom.getBoundingClientRect();\n      },\n      getRangedRect: function getRangedRect(e, n, t, r) {\n        var o,\n            u,\n            i,\n            c = Yf.exact(e, n, t, r);\n        return i = (o = kl(l, c)).getClientRects(), 0 < (u = 0 < i.length ? i[0] : o.getBoundingClientRect()).width || 0 < u.height ? q.some(u).map(Dl) : q.none();\n      },\n      getSelection: function getSelection() {\n        return hs(l).map(function (e) {\n          return ws(l, e);\n        });\n      },\n      fromSitus: function fromSitus(e) {\n        var n = Yf.relative(e.start, e.finish);\n        return ws(l, n);\n      },\n      situsFromPoint: function situsFromPoint(e, n) {\n        return t = e, r = n, o = Ve.fromDom(l.document), Js(o, t, r).map(function (e) {\n          return Gf(Ve.fromDom(e.startContainer), e.startOffset, Ve.fromDom(e.endContainer), e.endOffset);\n        }).map(function (e) {\n          return tm(e.start, e.soffset, e.finish, e.foffset);\n        });\n        var t, r, o;\n      },\n      clearSelection: function clearSelection() {\n        ls(l).each(function (e) {\n          return e.removeAllRanges();\n        });\n      },\n      collapseSelection: function collapseSelection(i) {\n        void 0 === i && (i = !1), hs(l).each(function (e) {\n          return e.fold(function (e) {\n            return e.collapse(i);\n          }, function (e, n) {\n            var t = i ? e : n;\n            ds(l, t, t);\n          }, function (e, n, t, r) {\n            var o = i ? e : t,\n                u = i ? n : r;\n            ms(l, o, u, o, u);\n          });\n        });\n      },\n      setSelection: function setSelection(e) {\n        ms(l, e.start, e.soffset, e.finish, e.foffset);\n      },\n      setRelativeSelection: function setRelativeSelection(e, n) {\n        ds(l, e, n);\n      },\n      selectNode: function selectNode(e) {\n        bs(l, e, !1);\n      },\n      selectContents: function selectContents(e) {\n        bs(l, e);\n      },\n      getInnerHeight: function getInnerHeight() {\n        return l.innerHeight;\n      },\n      getScrollY: function getScrollY() {\n        var e = Ve.fromDom(l.document),\n            n = void 0 !== e ? e.dom : document,\n            t = n.body.scrollLeft || n.documentElement.scrollLeft,\n            r = n.body.scrollTop || n.documentElement.scrollTop;\n        return uo(t, r).top;\n      },\n      scrollBy: function scrollBy(e, n) {\n        var t,\n            r = e,\n            o = n,\n            u = Ve.fromDom(l.document);\n        (t = (void 0 !== u ? u.dom : document).defaultView) && t.scrollBy(r, o);\n      }\n    };\n  }\n\n  function Gs(e, n) {\n    return {\n      rows: e,\n      cols: n\n    };\n  }\n\n  function $s(e) {\n    return !1 === Mu(Ve.fromDom(e.target), \"ephox-snooker-resizer-bar\");\n  }\n\n  Qf.ltr, Qf.rtl;\n\n  function Ks(e, n, t, r) {\n    return void 0 === r && (r = um), t.sibling(e, n).map(function (e) {\n      return ys(e, r);\n    });\n  }\n\n  function Xs(o, u, n) {\n    function t(e) {\n      Wt(e, o.selected), Wt(e, o.firstSelected), Wt(e, o.lastSelected);\n    }\n\n    function i(e) {\n      Mn(e, o.selected, \"1\");\n    }\n\n    function c(e) {\n      r(e), n();\n    }\n\n    function r(e) {\n      A(dn(e, o.selectedSelector + \",\" + o.firstSelectedSelector + \",\" + o.lastSelectedSelector), t);\n    }\n\n    return {\n      clearBeforeUpdate: r,\n      clear: c,\n      selectRange: function selectRange(e, n, t, r) {\n        c(e), A(n, i), Mn(t, o.firstSelected, \"1\"), Mn(r, o.lastSelected, \"1\"), u(n, t, r);\n      },\n      selectedSelector: o.selectedSelector,\n      firstSelectedSelector: o.firstSelectedSelector,\n      lastSelectedSelector: o.lastSelectedSelector\n    };\n  }\n\n  var Ys = function Ys(e, n, t, r) {\n    return pn(n) ? (u = n, i = t, c = r, (l = (o = e).dom.createRange()).selectNode(u.dom), H(l.getClientRects(), function (e) {\n      return Zf(e, i, c) ? q.some(e) : q.none();\n    }).map(function (e) {\n      return es(o, u, i, c, e);\n    })) : (f = n, s = t, m = r, d = (a = e).dom.createRange(), H(ln(f), function (e) {\n      return d.selectNode(e.dom), Zf(d.getBoundingClientRect(), s, m) ? Ys(a, e, s, m) : q.none();\n    }));\n    var o, u, i, c, l, a, f, s, m, d;\n  },\n      Js = document.caretPositionFromPoint ? function (t, e, n) {\n    var r, o;\n    return q.from(null === (o = (r = t.dom).caretPositionFromPoint) || void 0 === o ? void 0 : o.call(r, e, n)).bind(function (e) {\n      if (null === e.offsetNode) return q.none();\n      var n = t.dom.createRange();\n      return n.setStart(e.offsetNode, e.offset), n.collapse(), q.some(n);\n    });\n  } : document.caretRangeFromPoint ? function (e, n, t) {\n    var r, o;\n    return q.from(null === (o = (r = e.dom).caretRangeFromPoint) || void 0 === o ? void 0 : o.call(r, n, t));\n  } : function (o, u, n) {\n    return Ve.fromPoint(o, u, n).bind(function (r) {\n      function e() {\n        return e = o, t = u, (0 === ln(n = r).length ? os : rs)(e, n, t);\n        var e, n, t;\n      }\n\n      return 0 === ln(r).length ? e() : function (e, n, t, r) {\n        var o = e.dom.createRange();\n        o.selectNode(n.dom);\n        var u = o.getBoundingClientRect();\n        return function (e, n, t, r) {\n          var o = e.dom.createRange();\n          o.selectNode(n.dom);\n          var u = o.getBoundingClientRect(),\n              i = Math.max(u.left, Math.min(u.right, t)),\n              c = Math.max(u.top, Math.min(u.bottom, r));\n          return Ys(e, n, i, c);\n        }(e, n, Math.max(u.left, Math.min(u.right, t)), Math.max(u.top, Math.min(u.bottom, r)));\n      }(o, r, u, n).orThunk(e);\n    });\n  },\n      Qs = tinymce.util.Tools.resolve(\"tinymce.util.VK\"),\n      Zs = function Zs(n, t, e) {\n    return e.fold(q.none, q.none, function (e, n) {\n      return Wo(n).map(function (e) {\n        return u = Yf.exact(e, 0, e, 0), t = u, o = Yf.getWin(t).dom, r = t.match({\n          domRange: function domRange(e) {\n            var n = Ve.fromDom(e.startContainer),\n                t = Ve.fromDom(e.endContainer);\n            return cs(n, e.startOffset, t, e.endOffset);\n          },\n          relative: is,\n          exact: cs\n        }), Al(o, r).match({\n          ltr: n,\n          rtl: n\n        });\n\n        function n(e, n, t, r) {\n          return Rl(o, e, n, t, r);\n        }\n\n        var t, o, r, u;\n      });\n    }, function (e) {\n      return n.execCommand(\"mceTableInsertRowAfter\"), vs(n, t, e);\n    });\n  },\n      em = [\"table\", \"li\", \"dl\"],\n      nm = function nm(e, n) {\n    return {\n      selection: e,\n      kill: n\n    };\n  },\n      tm = function tm(e, n, t, r) {\n    return {\n      start: Kf.on(e, n),\n      finish: Kf.on(t, r)\n    };\n  },\n      rm = tm,\n      om = function om(t, e, r, n, o) {\n    return ce(r, n) ? q.none() : tr(r, n, e).bind(function (e) {\n      var n = e.boxes.getOr([]);\n      return 1 < n.length ? (o(t, n, e.start, e.finish), q.some(nm(q.some(rm(r, 0, r, Lo(r))), !0))) : q.none();\n    });\n  },\n      um = function um(e, n, t, r) {\n    void 0 === r && (r = um);\n    var o = e.property().children(n);\n    return t.first(o).map(function (e) {\n      return ys(e, r);\n    });\n  },\n      im = [{\n    current: Cs,\n    next: Ks,\n    fallback: q.none()\n  }, {\n    current: Ks,\n    next: um,\n    fallback: q.some(Cs)\n  }, {\n    current: um,\n    next: um,\n    fallback: q.some(Ks)\n  }],\n      cm = function cm(n, t, r, o, e) {\n    return w(e = void 0 === e ? im : e, function (e) {\n      return e.current === r;\n    }).bind(function (e) {\n      return e.current(n, t, o, e.next).orThunk(function () {\n        return e.fallback.bind(function (e) {\n          return cm(n, t, e, o);\n        });\n      });\n    });\n  },\n      lm = function lm(n, e, t, r, o, u) {\n    return cm(n, e, r, o).bind(function (e) {\n      return u(e.item) ? q.none() : t(e.item) ? q.some(e.item) : lm(n, e.item, t, e.mode, o, u);\n    });\n  },\n      am = function am(e, n, t, r) {\n    return lm(e, n, t, Ks, {\n      sibling: function sibling(e, n) {\n        return e.query().prevSibling(n);\n      },\n      first: function first(e) {\n        return 0 < e.length ? q.some(e[e.length - 1]) : q.none();\n      }\n    }, r);\n  },\n      fm = function fm(e, n, t, r) {\n    return lm(e, n, t, Ks, {\n      sibling: function sibling(e, n) {\n        return e.query().nextSibling(n);\n      },\n      first: function first(e) {\n        return 0 < e.length ? q.some(e[0]) : q.none();\n      }\n    }, r);\n  },\n      sm = Zt(),\n      mm = Lr([{\n    none: [\"message\"]\n  }, {\n    success: []\n  }, {\n    failedUp: [\"cell\"]\n  }, {\n    failedDown: [\"cell\"]\n  }]),\n      dm = _K(_K({}, mm), {\n    verify: function verify(i, e, n, t, r, c, o) {\n      return In(t, \"td,th\", o).bind(function (u) {\n        return In(e, \"td,th\", o).map(function (o) {\n          return ce(u, o) ? ce(t, u) && Lo(u) === r ? c(o) : mm.none(\"in same cell\") : er(Rs, [u, o]).fold(function () {\n            return n = u, t = (e = i).getRect(o), (r = e.getRect(n)).right > t.left && r.left < t.right ? mm.success() : c(o);\n            var e, n, t, r;\n          }, function (e) {\n            return c(o);\n          });\n        });\n      }).getOr(mm.none(\"default\"));\n    },\n    cata: function cata(e, n, t, r, o) {\n      return e.fold(n, t, r, o);\n    }\n  }),\n      gm = function gm(e, n) {\n    return b(e, P(ce, n));\n  },\n      pm = function pm(e, n, t) {\n    return n(e, t).bind(function (e) {\n      return pn(e) && 0 === Et(e).trim().length ? pm(e, n, t) : q.some(e);\n    });\n  },\n      bm = Lr([{\n    none: []\n  }, {\n    retry: [\"caret\"]\n  }]),\n      hm = {\n    point: function point(e) {\n      return e.bottom;\n    },\n    adjuster: function adjuster(e, n, t, r, o) {\n      var u = As(o, 5);\n      return Math.abs(t.bottom - r.bottom) < 1 || t.top > o.bottom ? bm.retry(u) : t.top === o.bottom ? bm.retry(As(o, 1)) : Ns(e, n, o) ? bm.retry(Is(u, 5, 0)) : bm.none();\n    },\n    move: As,\n    gather: xs\n  },\n      vm = function vm(t, r, o, u, i) {\n    return 0 === i ? q.some(u) : (n = t, c = u.left, l = r.point(u), n.elementFromPoint(c, l).filter(function (e) {\n      return \"table\" === Ye(e);\n    }).isSome() ? (e = i - 1, vm(t, r, o, r.move(u, 5), e)) : t.situsFromPoint(u.left, r.point(u)).bind(function (e) {\n      return e.start.fold(q.none, function (n) {\n        return Ps(t, n).bind(function (e) {\n          return r.adjuster(t, n, e, o, u).fold(q.none, function (e) {\n            return vm(t, r, o, e, i - 1);\n          });\n        }).orThunk(function () {\n          return q.some(u);\n        });\n      }, q.none);\n    }));\n    var e, n, c, l;\n  },\n      wm = {\n    tryUp: P(zs, {\n      point: function point(e) {\n        return e.top;\n      },\n      adjuster: function adjuster(e, n, t, r, o) {\n        var u = ks(o, 5);\n        return Math.abs(t.top - r.top) < 1 || t.bottom < o.top ? bm.retry(u) : t.bottom === o.top ? bm.retry(ks(o, 1)) : Ns(e, n, o) ? bm.retry(Is(u, 5, 0)) : bm.none();\n      },\n      move: ks,\n      gather: Ts\n    }),\n    tryDown: P(zs, hm),\n    ieTryUp: function ieTryUp(e, n) {\n      return e.situsFromPoint(n.left, n.top - 5);\n    },\n    ieTryDown: function ieTryDown(e, n) {\n      return e.situsFromPoint(n.left, n.bottom + 5);\n    },\n    getJumpSize: C(5)\n  },\n      ym = function ym(r, o, u, i, c, l) {\n    return 0 === l ? q.none() : Tm(r, o, u, i, c).bind(function (e) {\n      var n = r.fromSitus(e),\n          t = dm.verify(r, u, i, n.finish, n.foffset, c.failure, o);\n      return dm.cata(t, function () {\n        return q.none();\n      }, function () {\n        return q.some(e);\n      }, function (e) {\n        return ce(u, e) && 0 === i ? Cm(r, u, i, ks, c) : ym(r, o, e, 0, c, l - 1);\n      }, function (e) {\n        return ce(u, e) && i === Lo(e) ? Cm(r, u, i, As, c) : ym(r, o, e, Lo(e), c, l - 1);\n      });\n    });\n  },\n      Cm = function Cm(n, e, t, r, o) {\n    return Es(n, e, t).bind(function (e) {\n      return Sm(n, o, r(e, wm.getJumpSize()));\n    });\n  },\n      Sm = function Sm(e, n, t) {\n    var r = He().browser;\n    return r.isChrome() || r.isSafari() || r.isFirefox() || r.isEdge() ? n.otherRetry(e, t) : r.isIE() ? n.ieRetry(e, t) : q.none();\n  },\n      Tm = function Tm(n, e, t, r, o) {\n    return Es(n, t, r).bind(function (e) {\n      return Sm(n, o, e);\n    });\n  },\n      xm = {\n    traverse: cn,\n    gather: xs,\n    relative: Kf.before,\n    otherRetry: wm.tryDown,\n    ieRetry: wm.ieTryDown,\n    failure: dm.failedDown\n  },\n      Rm = {\n    traverse: un,\n    gather: Ts,\n    relative: Kf.before,\n    otherRetry: wm.tryUp,\n    ieRetry: wm.ieTryUp,\n    failure: dm.failedUp\n  },\n      Dm = Vs(38),\n      Om = Vs(40),\n      Am = {\n    isBackward: Vs(37),\n    isForward: Vs(39)\n  },\n      km = {\n    isBackward: Vs(39),\n    isForward: Vs(37)\n  },\n      Im = tinymce.util.Tools.resolve(\"tinymce.Env\");\n\n  function Bm(I, B, e) {\n    var M = Xs(Xl, function (l, a, f) {\n      e.targets().each(function (c) {\n        rt(a).each(function (e) {\n          var n,\n              o,\n              u,\n              t = fi(I),\n              r = $o(E, Ve.fromDom(I.getDoc()), t),\n              i = (n = c, o = r, _i(u = $t.fromTable(e), n).map(function (e) {\n            var n,\n                t,\n                r = Mi(u, o, !1);\n            return {\n              upOrLeftCells: N(Ei(r.slice(0, (n = e)[n.length - 1].row + 1)), function (e) {\n                return O(e.cells.slice(0, n[n.length - 1].column + 1), function (e) {\n                  return e.element;\n                });\n              }),\n              downOrRightCells: N(Ei(r.slice((t = e)[0].row + t[0].rowspan - 1, r.length)), function (e) {\n                return O(e.cells.slice(t[0].column + t[0].colspan - 1, e.cells.length), function (e) {\n                  return e.element;\n                });\n              })\n            };\n          }));\n          I.fire(\"TableSelectionChange\", {\n            cells: l,\n            start: a,\n            finish: f,\n            otherCells: i\n          });\n        });\n      });\n    }, function () {\n      I.fire(\"TableSelectionClear\");\n    });\n    return I.on(\"init\", function (e) {\n      var n,\n          t,\n          r,\n          o,\n          u,\n          i,\n          m,\n          d,\n          g,\n          a,\n          c,\n          l,\n          f,\n          s,\n          p,\n          b,\n          h = I.getWin(),\n          v = Yo(I),\n          w = Zo(I),\n          y = (n = Us(h), {\n        clearstate: (c = n, l = v, f = w, s = M, p = Jc(), (t = {\n          clearstate: b = p.clear,\n          mousedown: function mousedown(e) {\n            s.clear(l), Hs(e.target, f).each(p.set);\n          },\n          mouseover: function mouseover(e) {\n            x(e);\n          },\n          mouseup: function mouseup(e) {\n            x(e), b();\n          }\n        }).clearstate),\n        mousedown: t.mousedown,\n        mouseover: t.mouseover,\n        mouseup: t.mouseup\n      }),\n          C = (a = Us(h), {\n        keydown: function keydown(e, n, t, r, o, i) {\n          var u = e.raw,\n              c = u.which,\n              l = !0 === u.shiftKey;\n          return rr(m, g.selectedSelector).fold(function () {\n            return qs(c) && !l && g.clearBeforeUpdate(m), Om(c) && l ? P(Fs, a, m, d, xm, r, n, g.selectRange) : Dm(c) && l ? P(Fs, a, m, d, Rm, r, n, g.selectRange) : Om(c) ? P(_s, a, d, xm, r, n, js) : Dm(c) ? P(_s, a, d, Rm, r, n, Ws) : q.none;\n          }, function (u) {\n            function e(e) {\n              return function () {\n                return H(e, function (e) {\n                  return n = e.rows, t = e.cols, r = m, ur(u, n, t, (o = g).firstSelectedSelector, o.lastSelectedSelector).map(function (e) {\n                    return o.clearBeforeUpdate(r), o.selectRange(r, e.boxes, e.start, e.finish), e.boxes;\n                  });\n                  var n, t, r, o;\n                }).fold(function () {\n                  return or(m, g.firstSelectedSelector, g.lastSelectedSelector).map(function (e) {\n                    var n = Om(c) || i.isForward(c) ? Kf.after : Kf.before;\n                    return a.setRelativeSelection(Kf.on(e.first, 0), n(e.table)), g.clear(m), nm(q.none(), !0);\n                  });\n                }, function (e) {\n                  return q.some(nm(q.none(), !0));\n                });\n              };\n            }\n\n            return Om(c) && l ? e([Gs(1, 0)]) : Dm(c) && l ? e([Gs(-1, 0)]) : i.isBackward(c) && l ? e([Gs(0, -1), Gs(-1, 0)]) : i.isForward(c) && l ? e([Gs(0, 1), Gs(1, 0)]) : qs(c) && !l ? T : q.none;\n          })();\n        },\n        keyup: function keyup(c, l, a, f, s) {\n          return rr(m, g.selectedSelector).fold(function () {\n            var t,\n                r,\n                e,\n                o,\n                u,\n                n = c.raw,\n                i = n.which;\n            return !0 === n.shiftKey && qs(i) ? (t = m, r = d, u = g.selectRange, ce(e = l, o = f) && a === s ? q.none() : In(e, \"td,th\", r).bind(function (n) {\n              return In(o, \"td,th\", r).bind(function (e) {\n                return om(t, r, n, e, u);\n              });\n            })) : q.none();\n          }, q.none);\n        }\n      }),\n          S = (r = m = v, o = d = w, u = g = M, i = Us(h), function (e, t) {\n        u.clearBeforeUpdate(r), tr(e, t, o).each(function (e) {\n          var n = e.boxes.getOr([]);\n          u.selectRange(r, n, e.start, e.finish), i.selectContents(t), i.collapseSelection();\n        });\n      });\n\n      function T() {\n        return g.clear(m), q.none();\n      }\n\n      function x(i) {\n        p.on(function (e) {\n          s.clearBeforeUpdate(l), Hs(i.target, f).each(function (u) {\n            tr(e, u, f).each(function (e) {\n              var n,\n                  t,\n                  r,\n                  o = e.boxes.getOr([]);\n              1 === o.length ? (n = o[0], t = \"false\" === pa(n), r = Ln(Pu(i.target), n, ce), t && r && (s.selectRange(l, o, n, n), c.selectContents(n))) : 1 < o.length && (s.selectRange(l, o, e.start, e.finish), c.selectContents(u));\n            });\n          });\n        });\n      }\n\n      function R(e, n) {\n        !0 === e.raw.shiftKey && (n.kill && e.kill(), n.selection.each(function (e) {\n          var n = Yf.relative(e.start, e.finish),\n              t = kl(h, n);\n          I.selection.setRng(t);\n        }));\n      }\n\n      function D(e) {\n        return 0 === e.button;\n      }\n\n      I.on(\"TableSelectorChange\", function (e) {\n        return S(e.start, e.finish);\n      });\n      var O,\n          A,\n          k = (O = Xc(Ve.fromDom(v)), A = Xc(0), {\n        touchEnd: function touchEnd(e) {\n          var n,\n              t,\n              r = Ve.fromDom(e.target);\n          \"td\" !== Ye(r) && \"th\" !== Ye(r) || (n = O.get(), t = A.get(), ce(n, r) && e.timeStamp - t < 300 && (e.preventDefault(), S(r, r))), O.set(r), A.set(e.timeStamp);\n        }\n      });\n      I.on(\"dragstart\", function (e) {\n        y.clearstate();\n      }), I.on(\"mousedown\", function (e) {\n        D(e) && $s(e) && y.mousedown(ma(e));\n      }), I.on(\"mouseover\", function (e) {\n        var n;\n        (void 0 === (n = e).buttons || Im.browser.isEdge() && 0 === n.buttons || 0 != (1 & n.buttons)) && $s(e) && y.mouseover(ma(e));\n      }), I.on(\"mouseup\", function (e) {\n        D(e) && $s(e) && y.mouseup(ma(e));\n      }), I.on(\"touchend\", k.touchEnd), I.on(\"keyup\", function (e) {\n        var n,\n            t,\n            r,\n            o = ma(e);\n        o.raw.shiftKey && qs(o.raw.which) && (n = I.selection.getRng(), t = Ve.fromDom(n.startContainer), r = Ve.fromDom(n.endContainer), C.keyup(o, t, n.startOffset, r, n.endOffset).each(function (e) {\n          R(o, e);\n        }));\n      }), I.on(\"keydown\", function (e) {\n        var n = ma(e);\n        B().each(function (e) {\n          return e.hideBars();\n        });\n        var t = I.selection.getRng(),\n            r = Ve.fromDom(t.startContainer),\n            o = Ve.fromDom(t.endContainer),\n            u = Sr(Am, km)(Ve.fromDom(I.selection.getStart()));\n        C.keydown(n, r, t.startOffset, o, t.endOffset, u).each(function (e) {\n          R(n, e);\n        }), B().each(function (e) {\n          return e.showBars();\n        });\n      }), I.on(\"NodeChange\", function () {\n        var e = I.selection;\n        er(rt, [Ve.fromDom(e.getStart()), Ve.fromDom(e.getEnd())]).fold(function () {\n          return M.clear(v);\n        }, E);\n      });\n    }), {\n      clear: M.clear\n    };\n  }\n\n  function Mm(o, u) {\n    function n(n) {\n      return d.forall(function (e) {\n        return !e[n];\n      });\n    }\n\n    function e() {\n      return Yl(tu(o), Zo(o)).bind(function (r) {\n        return Wn(rt(r), Yl(Ve.fromDom(o.selection.getEnd()), Zo(o)).bind(rt), function (e, n) {\n          return ce(e, n) ? g(r) ? q.some({\n            element: t = r,\n            mergable: q.none(),\n            unmergable: q.none(),\n            selection: [t]\n          }) : q.some(ou(u, e, r)) : q.none();\n          var t;\n        }).bind(S);\n      });\n    }\n\n    function t(r) {\n      return rt(r.element).map(function (e) {\n        var t = $t.fromTable(e),\n            n = B(_i(t, r).getOr([]), function (e, n) {\n          return n.isLocked && (e.onAny = !0, 0 === n.column ? e.onFirst = !0 : n.column + n.colspan >= t.grid.columns && (e.onLast = !0)), e;\n        }, {\n          onAny: !1,\n          onFirst: !1,\n          onLast: !1\n        });\n        return {\n          mergeable: Fi(t, r).isSome(),\n          unmergeable: Hi(t, r).isSome(),\n          locked: n\n        };\n      });\n    }\n\n    function r() {\n      s.set(Y(e)()), d = s.get().bind(t), A(m.get(), function (e) {\n        return e();\n      });\n    }\n\n    function i(n) {\n      return n(), m.set(m.get().concat([n])), function () {\n        m.set(k(m.get(), function (e) {\n          return e !== n;\n        }));\n      };\n    }\n\n    function c(n, t) {\n      return i(function () {\n        return s.get().fold(function () {\n          n.setDisabled(!0);\n        }, function (e) {\n          n.setDisabled(t(e));\n        });\n      });\n    }\n\n    function l(n, t, r) {\n      return i(function () {\n        return s.get().fold(function () {\n          n.setDisabled(!0), n.setActive(!1);\n        }, function (e) {\n          n.setDisabled(t(e)), n.setActive(r(e));\n        });\n      });\n    }\n\n    function a(n) {\n      return d.exists(function (e) {\n        return e.locked[n];\n      });\n    }\n\n    function f(n, t) {\n      return function (e) {\n        return l(e, function (e) {\n          return g(e.element);\n        }, function () {\n          return o.queryCommandValue(n) === t;\n        });\n      };\n    }\n\n    var s = Xc(q.none()),\n        m = Xc([]),\n        d = q.none(),\n        g = en(\"caption\"),\n        p = f(\"mceTableRowType\", \"header\"),\n        b = f(\"mceTableColType\", \"th\");\n    return o.on(\"NodeChange ExecCommand TableSelectorChange\", r), {\n      onSetupTable: function onSetupTable(e) {\n        return c(e, function (e) {\n          return !1;\n        });\n      },\n      onSetupCellOrRow: function onSetupCellOrRow(e) {\n        return c(e, function (e) {\n          return g(e.element);\n        });\n      },\n      onSetupColumn: function onSetupColumn(n) {\n        return function (e) {\n          return c(e, function (e) {\n            return g(e.element) || a(n);\n          });\n        };\n      },\n      onSetupPasteable: function onSetupPasteable(n) {\n        return function (e) {\n          return c(e, function (e) {\n            return g(e.element) || n().isNone();\n          });\n        };\n      },\n      onSetupPasteableColumn: function onSetupPasteableColumn(n, t) {\n        return function (e) {\n          return c(e, function (e) {\n            return g(e.element) || n().isNone() || a(t);\n          });\n        };\n      },\n      onSetupMergeable: function onSetupMergeable(e) {\n        return c(e, function (e) {\n          return n(\"mergeable\");\n        });\n      },\n      onSetupUnmergeable: function onSetupUnmergeable(e) {\n        return c(e, function (e) {\n          return n(\"unmergeable\");\n        });\n      },\n      resetTargets: r,\n      onSetupTableWithCaption: function onSetupTableWithCaption(e) {\n        return l(e, v, function (e) {\n          return rt(e.element, Zo(o)).exists(function (e) {\n            return An(e, \"caption\").isSome();\n          });\n        });\n      },\n      onSetupTableRowHeaders: p,\n      onSetupTableColumnHeaders: b,\n      targets: s.get\n    };\n  }\n\n  Yr.add(\"table\", function (c) {\n    var e,\n        n,\n        t,\n        r,\n        o,\n        u,\n        i,\n        l,\n        a,\n        f,\n        s,\n        m,\n        d = (e = function e() {\n      return Yo(c);\n    }, n = function n() {\n      return Jl(tu(c), Zo(c));\n    }, t = Xl.selectedSelector, {\n      get: function get() {\n        return Ur(e(), t).fold(function () {\n          return n().fold($r, Xr);\n        }, function (e) {\n          return Kr(e);\n        });\n      }\n    }),\n        g = Mm(c, d),\n        p = bi(c),\n        b = Bm(c, p.lazyResize, g),\n        h = Ec(c, b, p.lazyWire),\n        v = (r = Jc(), o = Jc(), {\n      getRows: r.get,\n      setRows: function setRows(e) {\n        e.fold(r.clear, r.set), o.clear();\n      },\n      clearRows: r.clear,\n      getColumns: o.get,\n      setColumns: function setColumns(e) {\n        e.fold(o.clear, o.set), r.clear();\n      },\n      clearColumns: o.clear\n    });\n    return yl(c, h, 0, d, v), f = h, s = d, m = Zo(a = c), ae({\n      mceTableRowType: function mceTableRowType() {\n        return w(f.getTableRowType);\n      },\n      mceTableCellType: function mceTableCellType() {\n        return w(f.getTableCellType);\n      },\n      mceTableColType: function mceTableColType() {\n        return w(f.getTableColType);\n      }\n    }, function (e, n) {\n      return a.addQueryValueHandler(n, e);\n    }), iu(c, d, h), function (n, e, t, r) {\n      function o(e) {\n        return function () {\n          return n.execCommand(e);\n        };\n      }\n\n      function u(e) {\n        n.execCommand(\"mceInsertTable\", !1, {\n          rows: e.numRows,\n          columns: e.numColumns\n        });\n      }\n\n      var i = {\n        text: \"Table properties\",\n        onSetup: t.onSetupTable,\n        onAction: o(\"mceTableProps\")\n      },\n          c = {\n        text: \"Delete table\",\n        icon: \"table-delete-table\",\n        onSetup: t.onSetupTable,\n        onAction: o(\"mceTableDelete\")\n      };\n      n.ui.registry.addMenuItem(\"tableinsertrowbefore\", {\n        text: \"Insert row before\",\n        icon: \"table-insert-row-above\",\n        onAction: o(\"mceTableInsertRowBefore\"),\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addMenuItem(\"tableinsertrowafter\", {\n        text: \"Insert row after\",\n        icon: \"table-insert-row-after\",\n        onAction: o(\"mceTableInsertRowAfter\"),\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addMenuItem(\"tabledeleterow\", {\n        text: \"Delete row\",\n        icon: \"table-delete-row\",\n        onAction: o(\"mceTableDeleteRow\"),\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addMenuItem(\"tablerowprops\", {\n        text: \"Row properties\",\n        icon: \"table-row-properties\",\n        onAction: o(\"mceTableRowProps\"),\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addMenuItem(\"tablecutrow\", {\n        text: \"Cut row\",\n        icon: \"cut-row\",\n        onAction: o(\"mceTableCutRow\"),\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addMenuItem(\"tablecopyrow\", {\n        text: \"Copy row\",\n        icon: \"duplicate-row\",\n        onAction: o(\"mceTableCopyRow\"),\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addMenuItem(\"tablepasterowbefore\", {\n        text: \"Paste row before\",\n        icon: \"paste-row-before\",\n        onAction: o(\"mceTablePasteRowBefore\"),\n        onSetup: t.onSetupPasteable(r.getRows)\n      }), n.ui.registry.addMenuItem(\"tablepasterowafter\", {\n        text: \"Paste row after\",\n        icon: \"paste-row-after\",\n        onAction: o(\"mceTablePasteRowAfter\"),\n        onSetup: t.onSetupPasteable(r.getRows)\n      });\n      var l = {\n        type: \"nestedmenuitem\",\n        text: \"Row\",\n        getSubmenuItems: C(\"tableinsertrowbefore tableinsertrowafter tabledeleterow tablerowprops | tablecutrow tablecopyrow tablepasterowbefore tablepasterowafter\")\n      };\n      n.ui.registry.addMenuItem(\"tableinsertcolumnbefore\", {\n        text: \"Insert column before\",\n        icon: \"table-insert-column-before\",\n        onAction: o(\"mceTableInsertColBefore\"),\n        onSetup: t.onSetupColumn(\"onFirst\")\n      }), n.ui.registry.addMenuItem(\"tableinsertcolumnafter\", {\n        text: \"Insert column after\",\n        icon: \"table-insert-column-after\",\n        onAction: o(\"mceTableInsertColAfter\"),\n        onSetup: t.onSetupColumn(\"onLast\")\n      }), n.ui.registry.addMenuItem(\"tabledeletecolumn\", {\n        text: \"Delete column\",\n        icon: \"table-delete-column\",\n        onAction: o(\"mceTableDeleteCol\"),\n        onSetup: t.onSetupColumn(\"onAny\")\n      }), n.ui.registry.addMenuItem(\"tablecutcolumn\", {\n        text: \"Cut column\",\n        icon: \"cut-column\",\n        onAction: o(\"mceTableCutCol\"),\n        onSetup: t.onSetupColumn(\"onAny\")\n      }), n.ui.registry.addMenuItem(\"tablecopycolumn\", {\n        text: \"Copy column\",\n        icon: \"duplicate-column\",\n        onAction: o(\"mceTableCopyCol\"),\n        onSetup: t.onSetupColumn(\"onAny\")\n      }), n.ui.registry.addMenuItem(\"tablepastecolumnbefore\", {\n        text: \"Paste column before\",\n        icon: \"paste-column-before\",\n        onAction: o(\"mceTablePasteColBefore\"),\n        onSetup: t.onSetupPasteableColumn(r.getColumns, \"onFirst\")\n      }), n.ui.registry.addMenuItem(\"tablepastecolumnafter\", {\n        text: \"Paste column after\",\n        icon: \"paste-column-after\",\n        onAction: o(\"mceTablePasteColAfter\"),\n        onSetup: t.onSetupPasteableColumn(r.getColumns, \"onLast\")\n      });\n      var a = {\n        type: \"nestedmenuitem\",\n        text: \"Column\",\n        getSubmenuItems: C(\"tableinsertcolumnbefore tableinsertcolumnafter tabledeletecolumn | tablecutcolumn tablecopycolumn tablepastecolumnbefore tablepastecolumnafter\")\n      };\n      n.ui.registry.addMenuItem(\"tablecellprops\", {\n        text: \"Cell properties\",\n        icon: \"table-cell-properties\",\n        onAction: o(\"mceTableCellProps\"),\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addMenuItem(\"tablemergecells\", {\n        text: \"Merge cells\",\n        icon: \"table-merge-cells\",\n        onAction: o(\"mceTableMergeCells\"),\n        onSetup: t.onSetupMergeable\n      }), n.ui.registry.addMenuItem(\"tablesplitcells\", {\n        text: \"Split cell\",\n        icon: \"table-split-cells\",\n        onAction: o(\"mceTableSplitCells\"),\n        onSetup: t.onSetupUnmergeable\n      });\n      var f = {\n        type: \"nestedmenuitem\",\n        text: \"Cell\",\n        getSubmenuItems: C(\"tablecellprops tablemergecells tablesplitcells\")\n      };\n      !1 === n.getParam(\"table_grid\", !0, \"boolean\") ? n.ui.registry.addMenuItem(\"inserttable\", {\n        text: \"Table\",\n        icon: \"table\",\n        onAction: o(\"mceInsertTable\")\n      }) : n.ui.registry.addNestedMenuItem(\"inserttable\", {\n        text: \"Table\",\n        icon: \"table\",\n        getSubmenuItems: function getSubmenuItems() {\n          return [{\n            type: \"fancymenuitem\",\n            fancytype: \"inserttable\",\n            onAction: u\n          }];\n        }\n      }), n.ui.registry.addMenuItem(\"inserttabledialog\", {\n        text: \"Insert table\",\n        icon: \"table\",\n        onAction: o(\"mceInsertTable\")\n      }), n.ui.registry.addMenuItem(\"tableprops\", i), n.ui.registry.addMenuItem(\"deletetable\", c), n.ui.registry.addNestedMenuItem(\"row\", l), n.ui.registry.addNestedMenuItem(\"column\", a), n.ui.registry.addNestedMenuItem(\"cell\", f), n.ui.registry.addContextMenu(\"table\", {\n        update: function update() {\n          return t.resetTargets(), t.targets().fold(C(\"\"), function (e) {\n            return \"caption\" === Ye(e.element) ? \"tableprops deletetable\" : \"cell row column | advtablesort | tableprops deletetable\";\n          });\n        }\n      });\n      var s = Ef(oi(n));\n      0 !== s.length && n.ui.registry.addNestedMenuItem(\"tableclass\", {\n        icon: \"table-classes\",\n        text: \"Table styles\",\n        getSubmenuItems: function getSubmenuItems() {\n          return Mf(n, e, s, \"tableclass\", function (e) {\n            return n.execCommand(\"mceTableToggleClass\", !1, e);\n          });\n        },\n        onSetup: t.onSetupTable\n      });\n      var m = Ef(ri(n));\n      0 !== m.length && n.ui.registry.addNestedMenuItem(\"tablecellclass\", {\n        icon: \"table-cell-classes\",\n        text: \"Cell styles\",\n        getSubmenuItems: function getSubmenuItems() {\n          return Mf(n, e, m, \"tablecellclass\", function (e) {\n            return n.execCommand(\"mceTableCellToggleClass\", !1, e);\n          });\n        },\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addNestedMenuItem(\"tablecellvalign\", {\n        icon: \"vertical-align\",\n        text: \"Vertical align\",\n        getSubmenuItems: function getSubmenuItems() {\n          return Mf(n, e, Df, \"tablecellverticalalign\", Zc(n, \"vertical-align\"));\n        },\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addNestedMenuItem(\"tablecellborderwidth\", {\n        icon: \"border-width\",\n        text: \"Border width\",\n        getSubmenuItems: function getSubmenuItems() {\n          return Mf(n, e, Xu(n), \"tablecellborderwidth\", Zc(n, \"border-width\"));\n        },\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addNestedMenuItem(\"tablecellborderstyle\", {\n        icon: \"border-style\",\n        text: \"Border style\",\n        getSubmenuItems: function getSubmenuItems() {\n          return Mf(n, e, Yu(n), \"tablecellborderstyle\", Zc(n, \"border-style\"));\n        },\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addToggleMenuItem(\"tablecaption\", {\n        icon: \"table-caption\",\n        text: \"Table caption\",\n        onAction: o(\"mceTableToggleCaption\"),\n        onSetup: t.onSetupTableWithCaption\n      }), n.ui.registry.addNestedMenuItem(\"tablecellbackgroundcolor\", {\n        icon: \"cell-background-color\",\n        text: \"Background color\",\n        getSubmenuItems: function getSubmenuItems() {\n          return nl(n, si(n), \"background-color\");\n        },\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addNestedMenuItem(\"tablecellbordercolor\", {\n        icon: \"cell-border-color\",\n        text: \"Border color\",\n        getSubmenuItems: function getSubmenuItems() {\n          return nl(n, mi(n), \"border-color\");\n        },\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addToggleMenuItem(\"tablerowheader\", {\n        text: \"Row header\",\n        icon: \"table-top-header\",\n        onAction: tl(n),\n        onSetup: t.onSetupTableRowHeaders\n      }), n.ui.registry.addToggleMenuItem(\"tablecolheader\", {\n        text: \"Column header\",\n        icon: \"table-left-header\",\n        onAction: rl(n),\n        onSetup: t.onSetupTableColumnHeaders\n      });\n    }(c, d, g, v), function (n, e, t, r) {\n      function o(e) {\n        return function () {\n          return n.execCommand(e);\n        };\n      }\n\n      n.ui.registry.addMenuButton(\"table\", {\n        tooltip: \"Table\",\n        icon: \"table\",\n        fetch: function fetch(e) {\n          return e(\"inserttable | cell row column | advtablesort | tableprops deletetable\");\n        }\n      }), n.ui.registry.addButton(\"tableprops\", {\n        tooltip: \"Table properties\",\n        onAction: o(\"mceTableProps\"),\n        icon: \"table\",\n        onSetup: t.onSetupTable\n      }), n.ui.registry.addButton(\"tabledelete\", {\n        tooltip: \"Delete table\",\n        onAction: o(\"mceTableDelete\"),\n        icon: \"table-delete-table\",\n        onSetup: t.onSetupTable\n      }), n.ui.registry.addButton(\"tablecellprops\", {\n        tooltip: \"Cell properties\",\n        onAction: o(\"mceTableCellProps\"),\n        icon: \"table-cell-properties\",\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addButton(\"tablemergecells\", {\n        tooltip: \"Merge cells\",\n        onAction: o(\"mceTableMergeCells\"),\n        icon: \"table-merge-cells\",\n        onSetup: t.onSetupMergeable\n      }), n.ui.registry.addButton(\"tablesplitcells\", {\n        tooltip: \"Split cell\",\n        onAction: o(\"mceTableSplitCells\"),\n        icon: \"table-split-cells\",\n        onSetup: t.onSetupUnmergeable\n      }), n.ui.registry.addButton(\"tableinsertrowbefore\", {\n        tooltip: \"Insert row before\",\n        onAction: o(\"mceTableInsertRowBefore\"),\n        icon: \"table-insert-row-above\",\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addButton(\"tableinsertrowafter\", {\n        tooltip: \"Insert row after\",\n        onAction: o(\"mceTableInsertRowAfter\"),\n        icon: \"table-insert-row-after\",\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addButton(\"tabledeleterow\", {\n        tooltip: \"Delete row\",\n        onAction: o(\"mceTableDeleteRow\"),\n        icon: \"table-delete-row\",\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addButton(\"tablerowprops\", {\n        tooltip: \"Row properties\",\n        onAction: o(\"mceTableRowProps\"),\n        icon: \"table-row-properties\",\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addButton(\"tableinsertcolbefore\", {\n        tooltip: \"Insert column before\",\n        onAction: o(\"mceTableInsertColBefore\"),\n        icon: \"table-insert-column-before\",\n        onSetup: t.onSetupColumn(\"onFirst\")\n      }), n.ui.registry.addButton(\"tableinsertcolafter\", {\n        tooltip: \"Insert column after\",\n        onAction: o(\"mceTableInsertColAfter\"),\n        icon: \"table-insert-column-after\",\n        onSetup: t.onSetupColumn(\"onLast\")\n      }), n.ui.registry.addButton(\"tabledeletecol\", {\n        tooltip: \"Delete column\",\n        onAction: o(\"mceTableDeleteCol\"),\n        icon: \"table-delete-column\",\n        onSetup: t.onSetupColumn(\"onAny\")\n      }), n.ui.registry.addButton(\"tablecutrow\", {\n        tooltip: \"Cut row\",\n        icon: \"cut-row\",\n        onAction: o(\"mceTableCutRow\"),\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addButton(\"tablecopyrow\", {\n        tooltip: \"Copy row\",\n        icon: \"duplicate-row\",\n        onAction: o(\"mceTableCopyRow\"),\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addButton(\"tablepasterowbefore\", {\n        tooltip: \"Paste row before\",\n        icon: \"paste-row-before\",\n        onAction: o(\"mceTablePasteRowBefore\"),\n        onSetup: t.onSetupPasteable(r.getRows)\n      }), n.ui.registry.addButton(\"tablepasterowafter\", {\n        tooltip: \"Paste row after\",\n        icon: \"paste-row-after\",\n        onAction: o(\"mceTablePasteRowAfter\"),\n        onSetup: t.onSetupPasteable(r.getRows)\n      }), n.ui.registry.addButton(\"tablecutcol\", {\n        tooltip: \"Cut column\",\n        icon: \"cut-column\",\n        onAction: o(\"mceTableCutCol\"),\n        onSetup: t.onSetupColumn(\"onAny\")\n      }), n.ui.registry.addButton(\"tablecopycol\", {\n        tooltip: \"Copy column\",\n        icon: \"duplicate-column\",\n        onAction: o(\"mceTableCopyCol\"),\n        onSetup: t.onSetupColumn(\"onAny\")\n      }), n.ui.registry.addButton(\"tablepastecolbefore\", {\n        tooltip: \"Paste column before\",\n        icon: \"paste-column-before\",\n        onAction: o(\"mceTablePasteColBefore\"),\n        onSetup: t.onSetupPasteableColumn(r.getColumns, \"onFirst\")\n      }), n.ui.registry.addButton(\"tablepastecolafter\", {\n        tooltip: \"Paste column after\",\n        icon: \"paste-column-after\",\n        onAction: o(\"mceTablePasteColAfter\"),\n        onSetup: t.onSetupPasteableColumn(r.getColumns, \"onLast\")\n      }), n.ui.registry.addButton(\"tableinsertdialog\", {\n        tooltip: \"Insert table\",\n        onAction: o(\"mceInsertTable\"),\n        icon: \"table\"\n      });\n      var u = Ef(oi(n));\n      0 !== u.length && n.ui.registry.addMenuButton(\"tableclass\", {\n        icon: \"table-classes\",\n        tooltip: \"Table styles\",\n        fetch: el(n, e, u, \"tableclass\", function (e) {\n          return n.execCommand(\"mceTableToggleClass\", !1, e);\n        }),\n        onSetup: t.onSetupTable\n      });\n      var i = Ef(ri(n));\n      0 !== i.length && n.ui.registry.addMenuButton(\"tablecellclass\", {\n        icon: \"table-cell-classes\",\n        tooltip: \"Cell styles\",\n        fetch: el(n, e, i, \"tablecellclass\", function (e) {\n          return n.execCommand(\"mceTableCellToggleClass\", !1, e);\n        }),\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addMenuButton(\"tablecellvalign\", {\n        icon: \"vertical-align\",\n        tooltip: \"Vertical align\",\n        fetch: el(n, e, Df, \"tablecellverticalalign\", Zc(n, \"vertical-align\")),\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addMenuButton(\"tablecellborderwidth\", {\n        icon: \"border-width\",\n        tooltip: \"Border width\",\n        fetch: el(n, e, Xu(n), \"tablecellborderwidth\", Zc(n, \"border-width\")),\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addMenuButton(\"tablecellborderstyle\", {\n        icon: \"border-style\",\n        tooltip: \"Border style\",\n        fetch: el(n, e, Yu(n), \"tablecellborderstyle\", Zc(n, \"border-style\")),\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addToggleButton(\"tablecaption\", {\n        tooltip: \"Table caption\",\n        onAction: o(\"mceTableToggleCaption\"),\n        icon: \"table-caption\",\n        onSetup: t.onSetupTableWithCaption\n      }), n.ui.registry.addMenuButton(\"tablecellbackgroundcolor\", {\n        icon: \"cell-background-color\",\n        tooltip: \"Background color\",\n        fetch: function fetch(e) {\n          return e(nl(n, si(n), \"background-color\"));\n        },\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addMenuButton(\"tablecellbordercolor\", {\n        icon: \"cell-border-color\",\n        tooltip: \"Border color\",\n        fetch: function fetch(e) {\n          return e(nl(n, mi(n), \"border-color\"));\n        },\n        onSetup: t.onSetupCellOrRow\n      }), n.ui.registry.addToggleButton(\"tablerowheader\", {\n        tooltip: \"Row header\",\n        icon: \"table-top-header\",\n        onAction: tl(n),\n        onSetup: t.onSetupTableRowHeaders\n      }), n.ui.registry.addToggleButton(\"tablecolheader\", {\n        tooltip: \"Column header\",\n        icon: \"table-left-header\",\n        onAction: rl(n),\n        onSetup: t.onSetupTableColumnHeaders\n      });\n    }(c, d, g, v), 0 < (l = (i = c).getParam(\"table_toolbar\", \"tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol\")).length && i.ui.registry.addContextToolbar(\"table\", {\n      predicate: function predicate(e) {\n        return i.dom.is(e, \"table\") && i.getBody().contains(e);\n      },\n      items: l,\n      scope: \"node\",\n      position: \"node\"\n    }), c.on(\"PreInit\", function () {\n      c.serializer.addTempAttr(Xl.firstSelected), c.serializer.addTempAttr(Xl.lastSelected), c.formatter.register(Hf);\n    }), c.getParam(\"table_tab_navigation\", !0, \"boolean\") && c.on(\"keydown\", function (e) {\n      var n,\n          t,\n          r,\n          o,\n          u = c,\n          i = b;\n      (n = e).keyCode === Qs.TAB && (t = Yo(u), r = function r(e) {\n        var n = Ye(e);\n        return ce(e, t) || y(em, n);\n      }, o = u.selection.getRng(), et(Ve.fromDom(n.shiftKey ? o.startContainer : o.endContainer), r).each(function (e) {\n        n.preventDefault(), rt(e, r).each(i.clear), u.selection.collapse(n.shiftKey), (n.shiftKey ? function (e, n, t) {\n          return Zs(e, n, (o = Nu, Cl(r = t, void 0).fold(function () {\n            return qf.none();\n          }, function (e) {\n            return Uf(e.all, r, e.index, -1, o);\n          })));\n          var r, o;\n        } : vs)(u, r, e).each(function (e) {\n          u.selection.setRng(e);\n        });\n      }));\n    }), c.on(\"remove\", function () {\n      p.destroy();\n    }), {\n      insertTable: (u = c, function (e, n, t) {\n        var r = Lc(u, n, e, t = void 0 === t ? {} : t, \"Invalid values for insertTable - rows and columns values are required to insert a table.\");\n        return u.undoManager.add(), r;\n      }),\n      setClipboardRows: Wc(v.setRows),\n      getClipboardRows: _c(v.getRows),\n      setClipboardCols: Wc(v.setColumns),\n      getClipboardCols: _c(v.getColumns),\n      resizeHandler: p,\n      selectionTargets: g\n    };\n\n    function w(r) {\n      return Jl(tu(a)).bind(function (t) {\n        return rt(t, m).map(function (e) {\n          var n = ou(s, e, t);\n          return r(e, n);\n        });\n      }).getOr(\"\");\n    }\n  });\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/table/plugin.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/table/plugin.min.js"]();
/******/ 	
/******/ })()
;