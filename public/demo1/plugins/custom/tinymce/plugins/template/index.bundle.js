/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/template/index.js":
/*!********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/template/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Exports the \"template\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/template')\n//   ES2015:\n//     import 'tinymce/plugins/template'\n__webpack_require__(/*! ./plugin.js */ \"./resources/assets/core/plugins/custom/tinymce/plugins/template/plugin.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL3RlbXBsYXRlL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQSxtQkFBTyxDQUFDLDhGQUFELENBQVAiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL3RlbXBsYXRlL2luZGV4LmpzP2MyYTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRXhwb3J0cyB0aGUgXCJ0ZW1wbGF0ZVwiIHBsdWdpbiBmb3IgdXNhZ2Ugd2l0aCBtb2R1bGUgbG9hZGVyc1xyXG4vLyBVc2FnZTpcclxuLy8gICBDb21tb25KUzpcclxuLy8gICAgIHJlcXVpcmUoJ3RpbnltY2UvcGx1Z2lucy90ZW1wbGF0ZScpXHJcbi8vICAgRVMyMDE1OlxyXG4vLyAgICAgaW1wb3J0ICd0aW55bWNlL3BsdWdpbnMvdGVtcGxhdGUnXHJcbnJlcXVpcmUoJy4vcGx1Z2luLmpzJyk7Il0sIm5hbWVzIjpbInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/template/index.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/template/plugin.js":
/*!*********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/template/plugin.js ***!
  \*********************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var global$4 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n\n  var isType = function isType(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n\n  var isSimpleType = function isSimpleType(type) {\n    return function (value) {\n      return _typeof(value) === type;\n    };\n  };\n\n  var isString = isType('string');\n  var isFunction = isSimpleType('function');\n\n  var noop = function noop() {};\n\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  function curry(fn) {\n    var initialArgs = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      initialArgs[_i - 1] = arguments[_i];\n    }\n\n    return function () {\n      var restArgs = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        restArgs[_i] = arguments[_i];\n      }\n\n      var all = initialArgs.concat(restArgs);\n      return fn.apply(null, all);\n    };\n  }\n\n  var never = constant(false);\n  var always = constant(true);\n  var global$3 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n  var global$2 = tinymce.util.Tools.resolve('tinymce.util.XHR');\n\n  var getCreationDateClasses = function getCreationDateClasses(editor) {\n    return editor.getParam('template_cdate_classes', 'cdate');\n  };\n\n  var getModificationDateClasses = function getModificationDateClasses(editor) {\n    return editor.getParam('template_mdate_classes', 'mdate');\n  };\n\n  var getSelectedContentClasses = function getSelectedContentClasses(editor) {\n    return editor.getParam('template_selected_content_classes', 'selcontent');\n  };\n\n  var getPreviewReplaceValues = function getPreviewReplaceValues(editor) {\n    return editor.getParam('template_preview_replace_values');\n  };\n\n  var getContentStyle = function getContentStyle(editor) {\n    return editor.getParam('content_style', '', 'string');\n  };\n\n  var shouldUseContentCssCors = function shouldUseContentCssCors(editor) {\n    return editor.getParam('content_css_cors', false, 'boolean');\n  };\n\n  var getTemplateReplaceValues = function getTemplateReplaceValues(editor) {\n    return editor.getParam('template_replace_values');\n  };\n\n  var getTemplates = function getTemplates(editor) {\n    return editor.getParam('templates');\n  };\n\n  var getCdateFormat = function getCdateFormat(editor) {\n    return editor.getParam('template_cdate_format', editor.translate('%Y-%m-%d'));\n  };\n\n  var getMdateFormat = function getMdateFormat(editor) {\n    return editor.getParam('template_mdate_format', editor.translate('%Y-%m-%d'));\n  };\n\n  var getBodyClassFromHash = function getBodyClassFromHash(editor) {\n    var bodyClass = editor.getParam('body_class', '', 'hash');\n    return bodyClass[editor.id] || '';\n  };\n\n  var getBodyClass = function getBodyClass(editor) {\n    var bodyClass = editor.getParam('body_class', '', 'string');\n\n    if (bodyClass.indexOf('=') === -1) {\n      return bodyClass;\n    } else {\n      return getBodyClassFromHash(editor);\n    }\n  };\n\n  var addZeros = function addZeros(value, len) {\n    value = '' + value;\n\n    if (value.length < len) {\n      for (var i = 0; i < len - value.length; i++) {\n        value = '0' + value;\n      }\n    }\n\n    return value;\n  };\n\n  var getDateTime = function getDateTime(editor, fmt, date) {\n    if (date === void 0) {\n      date = new Date();\n    }\n\n    var daysShort = 'Sun Mon Tue Wed Thu Fri Sat Sun'.split(' ');\n    var daysLong = 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday Sunday'.split(' ');\n    var monthsShort = 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' ');\n    var monthsLong = 'January February March April May June July August September October November December'.split(' ');\n    fmt = fmt.replace('%D', '%m/%d/%Y');\n    fmt = fmt.replace('%r', '%I:%M:%S %p');\n    fmt = fmt.replace('%Y', '' + date.getFullYear());\n    fmt = fmt.replace('%y', '' + date.getYear());\n    fmt = fmt.replace('%m', addZeros(date.getMonth() + 1, 2));\n    fmt = fmt.replace('%d', addZeros(date.getDate(), 2));\n    fmt = fmt.replace('%H', '' + addZeros(date.getHours(), 2));\n    fmt = fmt.replace('%M', '' + addZeros(date.getMinutes(), 2));\n    fmt = fmt.replace('%S', '' + addZeros(date.getSeconds(), 2));\n    fmt = fmt.replace('%I', '' + ((date.getHours() + 11) % 12 + 1));\n    fmt = fmt.replace('%p', '' + (date.getHours() < 12 ? 'AM' : 'PM'));\n    fmt = fmt.replace('%B', '' + editor.translate(monthsLong[date.getMonth()]));\n    fmt = fmt.replace('%b', '' + editor.translate(monthsShort[date.getMonth()]));\n    fmt = fmt.replace('%A', '' + editor.translate(daysLong[date.getDay()]));\n    fmt = fmt.replace('%a', '' + editor.translate(daysShort[date.getDay()]));\n    fmt = fmt.replace('%%', '%');\n    return fmt;\n  };\n\n  var createTemplateList = function createTemplateList(editor, callback) {\n    return function () {\n      var templateList = getTemplates(editor);\n\n      if (isFunction(templateList)) {\n        templateList(callback);\n      } else if (isString(templateList)) {\n        global$2.send({\n          url: templateList,\n          success: function success(text) {\n            callback(JSON.parse(text));\n          }\n        });\n      } else {\n        callback(templateList);\n      }\n    };\n  };\n\n  var replaceTemplateValues = function replaceTemplateValues(html, templateValues) {\n    global$3.each(templateValues, function (v, k) {\n      if (isFunction(v)) {\n        v = v(k);\n      }\n\n      html = html.replace(new RegExp('\\\\{\\\\$' + k + '\\\\}', 'g'), v);\n    });\n    return html;\n  };\n\n  var replaceVals = function replaceVals(editor, scope) {\n    var dom = editor.dom,\n        vl = getTemplateReplaceValues(editor);\n    global$3.each(dom.select('*', scope), function (e) {\n      global$3.each(vl, function (v, k) {\n        if (dom.hasClass(e, k)) {\n          if (isFunction(v)) {\n            v(e);\n          }\n        }\n      });\n    });\n  };\n\n  var hasClass = function hasClass(n, c) {\n    return new RegExp('\\\\b' + c + '\\\\b', 'g').test(n.className);\n  };\n\n  var insertTemplate = function insertTemplate(editor, _ui, html) {\n    var dom = editor.dom;\n    var sel = editor.selection.getContent();\n    html = replaceTemplateValues(html, getTemplateReplaceValues(editor));\n    var el = dom.create('div', null, html);\n    var n = dom.select('.mceTmpl', el);\n\n    if (n && n.length > 0) {\n      el = dom.create('div', null);\n      el.appendChild(n[0].cloneNode(true));\n    }\n\n    global$3.each(dom.select('*', el), function (n) {\n      if (hasClass(n, getCreationDateClasses(editor).replace(/\\s+/g, '|'))) {\n        n.innerHTML = getDateTime(editor, getCdateFormat(editor));\n      }\n\n      if (hasClass(n, getModificationDateClasses(editor).replace(/\\s+/g, '|'))) {\n        n.innerHTML = getDateTime(editor, getMdateFormat(editor));\n      }\n\n      if (hasClass(n, getSelectedContentClasses(editor).replace(/\\s+/g, '|'))) {\n        n.innerHTML = sel;\n      }\n    });\n    replaceVals(editor, el);\n    editor.execCommand('mceInsertContent', false, el.innerHTML);\n    editor.addVisual();\n  };\n\n  var none = function none() {\n    return NONE;\n  };\n\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n\n  var some = function some(a) {\n    var constant_a = constant(a);\n\n    var self = function self() {\n      return me;\n    };\n\n    var bind = function bind(f) {\n      return f(a);\n    };\n\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n\n  var map = function map(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n\n    return r;\n  };\n\n  var findUntil = function findUntil(xs, pred, until) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n\n      if (pred(x, i)) {\n        return Optional.some(x);\n      } else if (until(x, i)) {\n        break;\n      }\n    }\n\n    return Optional.none();\n  };\n\n  var find = function find(xs, pred) {\n    return findUntil(xs, pred, never);\n  };\n\n  var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n  var global = tinymce.util.Tools.resolve('tinymce.util.Promise');\n  var hasOwnProperty = Object.hasOwnProperty;\n\n  var get = function get(obj, key) {\n    return has(obj, key) ? Optional.from(obj[key]) : Optional.none();\n  };\n\n  var has = function has(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  var entitiesAttr = {\n    '\"': '&quot;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    '\\'': '&#039;'\n  };\n\n  var htmlEscape = function htmlEscape(html) {\n    return html.replace(/[\"'<>&]/g, function (match) {\n      return get(entitiesAttr, match).getOr(match);\n    });\n  };\n\n  var getPreviewContent = function getPreviewContent(editor, html) {\n    if (html.indexOf('<html>') === -1) {\n      var contentCssEntries_1 = '';\n      var contentStyle = getContentStyle(editor);\n      var cors_1 = shouldUseContentCssCors(editor) ? ' crossorigin=\"anonymous\"' : '';\n      global$3.each(editor.contentCSS, function (url) {\n        contentCssEntries_1 += '<link type=\"text/css\" rel=\"stylesheet\" href=\"' + editor.documentBaseURI.toAbsolute(url) + '\"' + cors_1 + '>';\n      });\n\n      if (contentStyle) {\n        contentCssEntries_1 += '<style type=\"text/css\">' + contentStyle + '</style>';\n      }\n\n      var bodyClass = getBodyClass(editor);\n      var encode = editor.dom.encode;\n      var isMetaKeyPressed = global$1.mac ? 'e.metaKey' : 'e.ctrlKey && !e.altKey';\n      var preventClicksOnLinksScript = '<script>' + 'document.addEventListener && document.addEventListener(\"click\", function(e) {' + 'for (var elm = e.target; elm; elm = elm.parentNode) {' + 'if (elm.nodeName === \"A\" && !(' + isMetaKeyPressed + ')) {' + 'e.preventDefault();' + '}' + '}' + '}, false);' + '</script> ';\n      var directionality = editor.getBody().dir;\n      var dirAttr = directionality ? ' dir=\"' + encode(directionality) + '\"' : '';\n      html = '<!DOCTYPE html>' + '<html>' + '<head>' + '<base href=\"' + encode(editor.documentBaseURI.getURI()) + '\">' + contentCssEntries_1 + preventClicksOnLinksScript + '</head>' + '<body class=\"' + encode(bodyClass) + '\"' + dirAttr + '>' + html + '</body>' + '</html>';\n    }\n\n    return replaceTemplateValues(html, getPreviewReplaceValues(editor));\n  };\n\n  var open = function open(editor, templateList) {\n    var createTemplates = function createTemplates() {\n      if (!templateList || templateList.length === 0) {\n        var message = editor.translate('No templates defined.');\n        editor.notificationManager.open({\n          text: message,\n          type: 'info'\n        });\n        return Optional.none();\n      }\n\n      return Optional.from(global$3.map(templateList, function (template, index) {\n        var isUrlTemplate = function isUrlTemplate(t) {\n          return t.url !== undefined;\n        };\n\n        return {\n          selected: index === 0,\n          text: template.title,\n          value: {\n            url: isUrlTemplate(template) ? Optional.from(template.url) : Optional.none(),\n            content: !isUrlTemplate(template) ? Optional.from(template.content) : Optional.none(),\n            description: template.description\n          }\n        };\n      }));\n    };\n\n    var createSelectBoxItems = function createSelectBoxItems(templates) {\n      return map(templates, function (t) {\n        return {\n          text: t.text,\n          value: t.text\n        };\n      });\n    };\n\n    var findTemplate = function findTemplate(templates, templateTitle) {\n      return find(templates, function (t) {\n        return t.text === templateTitle;\n      });\n    };\n\n    var loadFailedAlert = function loadFailedAlert(api) {\n      editor.windowManager.alert('Could not load the specified template.', function () {\n        return api.focus('template');\n      });\n    };\n\n    var getTemplateContent = function getTemplateContent(t) {\n      return new global(function (resolve, reject) {\n        t.value.url.fold(function () {\n          return resolve(t.value.content.getOr(''));\n        }, function (url) {\n          return global$2.send({\n            url: url,\n            success: function success(html) {\n              resolve(html);\n            },\n            error: function error(e) {\n              reject(e);\n            }\n          });\n        });\n      });\n    };\n\n    var onChange = function onChange(templates, updateDialog) {\n      return function (api, change) {\n        if (change.name === 'template') {\n          var newTemplateTitle = api.getData().template;\n          findTemplate(templates, newTemplateTitle).each(function (t) {\n            api.block('Loading...');\n            getTemplateContent(t).then(function (previewHtml) {\n              updateDialog(api, t, previewHtml);\n            })[\"catch\"](function () {\n              updateDialog(api, t, '');\n              api.disable('save');\n              loadFailedAlert(api);\n            });\n          });\n        }\n      };\n    };\n\n    var onSubmit = function onSubmit(templates) {\n      return function (api) {\n        var data = api.getData();\n        findTemplate(templates, data.template).each(function (t) {\n          getTemplateContent(t).then(function (previewHtml) {\n            editor.execCommand('mceInsertTemplate', false, previewHtml);\n            api.close();\n          })[\"catch\"](function () {\n            api.disable('save');\n            loadFailedAlert(api);\n          });\n        });\n      };\n    };\n\n    var openDialog = function openDialog(templates) {\n      var selectBoxItems = createSelectBoxItems(templates);\n\n      var buildDialogSpec = function buildDialogSpec(bodyItems, initialData) {\n        return {\n          title: 'Insert Template',\n          size: 'large',\n          body: {\n            type: 'panel',\n            items: bodyItems\n          },\n          initialData: initialData,\n          buttons: [{\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          }, {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true\n          }],\n          onSubmit: onSubmit(templates),\n          onChange: onChange(templates, updateDialog)\n        };\n      };\n\n      var updateDialog = function updateDialog(dialogApi, template, previewHtml) {\n        var content = getPreviewContent(editor, previewHtml);\n        var bodyItems = [{\n          type: 'selectbox',\n          name: 'template',\n          label: 'Templates',\n          items: selectBoxItems\n        }, {\n          type: 'htmlpanel',\n          html: '<p aria-live=\"polite\">' + htmlEscape(template.value.description) + '</p>'\n        }, {\n          label: 'Preview',\n          type: 'iframe',\n          name: 'preview',\n          sandboxed: false\n        }];\n        var initialData = {\n          template: template.text,\n          preview: content\n        };\n        dialogApi.unblock();\n        dialogApi.redial(buildDialogSpec(bodyItems, initialData));\n        dialogApi.focus('template');\n      };\n\n      var dialogApi = editor.windowManager.open(buildDialogSpec([], {\n        template: '',\n        preview: ''\n      }));\n      dialogApi.block('Loading...');\n      getTemplateContent(templates[0]).then(function (previewHtml) {\n        updateDialog(dialogApi, templates[0], previewHtml);\n      })[\"catch\"](function () {\n        updateDialog(dialogApi, templates[0], '');\n        dialogApi.disable('save');\n        loadFailedAlert(dialogApi);\n      });\n    };\n\n    var optTemplates = createTemplates();\n    optTemplates.each(openDialog);\n  };\n\n  var showDialog = function showDialog(editor) {\n    return function (templates) {\n      open(editor, templates);\n    };\n  };\n\n  var register$1 = function register$1(editor) {\n    editor.addCommand('mceInsertTemplate', curry(insertTemplate, editor));\n    editor.addCommand('mceTemplate', createTemplateList(editor, showDialog(editor)));\n  };\n\n  var setup = function setup(editor) {\n    editor.on('PreProcess', function (o) {\n      var dom = editor.dom,\n          dateFormat = getMdateFormat(editor);\n      global$3.each(dom.select('div', o.node), function (e) {\n        if (dom.hasClass(e, 'mceTmpl')) {\n          global$3.each(dom.select('*', e), function (e) {\n            if (dom.hasClass(e, getModificationDateClasses(editor).replace(/\\s+/g, '|'))) {\n              e.innerHTML = getDateTime(editor, dateFormat);\n            }\n          });\n          replaceVals(editor, e);\n        }\n      });\n    });\n  };\n\n  var register = function register(editor) {\n    var onAction = function onAction() {\n      return editor.execCommand('mceTemplate');\n    };\n\n    editor.ui.registry.addButton('template', {\n      icon: 'template',\n      tooltip: 'Insert template',\n      onAction: onAction\n    });\n    editor.ui.registry.addMenuItem('template', {\n      icon: 'template',\n      text: 'Insert template...',\n      onAction: onAction\n    });\n  };\n\n  function Plugin() {\n    global$4.add('template', function (editor) {\n      register(editor);\n      register$1(editor);\n      setup(editor);\n    });\n  }\n\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/template/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/tinymce/plugins/template/index.js");
/******/ 	
/******/ })()
;