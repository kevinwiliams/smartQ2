/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/template/plugin.min.js":
/*!*************************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/template/plugin.min.js ***!
  \*************************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n!function () {\n  \"use strict\";\n\n  function o(e) {\n    return function () {\n      return e;\n    };\n  }\n\n  function e(e) {\n    return e;\n  }\n\n  function i(e) {\n    return n = _typeof(t = e), \"string\" == (null === t ? \"null\" : \"object\" == n && (Array.prototype.isPrototypeOf(t) || t.constructor && \"Array\" === t.constructor.name) ? \"array\" : \"object\" == n && (String.prototype.isPrototypeOf(t) || t.constructor && \"String\" === t.constructor.name) ? \"string\" : n);\n    var t, n;\n  }\n\n  var t,\n      n = tinymce.util.Tools.resolve(\"tinymce.PluginManager\"),\n      u = function u(e) {\n    return _typeof(e) === t;\n  };\n\n  function s(e) {\n    return e.getParam(\"template_mdate_classes\", \"mdate\");\n  }\n\n  function l(e) {\n    return e.getParam(\"template_replace_values\");\n  }\n\n  function m(e) {\n    return e.getParam(\"template_mdate_format\", e.translate(\"%Y-%m-%d\"));\n  }\n\n  function f(e, t) {\n    if ((e = \"\" + e).length < t) for (var n = 0; n < t - e.length; n++) {\n      e = \"0\" + e;\n    }\n    return e;\n  }\n\n  function p(e, t, n) {\n    void 0 === n && (n = new Date());\n    var r = \"Sun Mon Tue Wed Thu Fri Sat Sun\".split(\" \"),\n        a = \"Sunday Monday Tuesday Wednesday Thursday Friday Saturday Sunday\".split(\" \"),\n        o = \"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \"),\n        c = \"January February March April May June July August September October November December\".split(\" \");\n    return (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = t.replace(\"%D\", \"%m/%d/%Y\")).replace(\"%r\", \"%I:%M:%S %p\")).replace(\"%Y\", \"\" + n.getFullYear())).replace(\"%y\", \"\" + n.getYear())).replace(\"%m\", f(n.getMonth() + 1, 2))).replace(\"%d\", f(n.getDate(), 2))).replace(\"%H\", \"\" + f(n.getHours(), 2))).replace(\"%M\", \"\" + f(n.getMinutes(), 2))).replace(\"%S\", \"\" + f(n.getSeconds(), 2))).replace(\"%I\", \"\" + ((n.getHours() + 11) % 12 + 1))).replace(\"%p\", n.getHours() < 12 ? \"AM\" : \"PM\")).replace(\"%B\", \"\" + e.translate(c[n.getMonth()]))).replace(\"%b\", \"\" + e.translate(o[n.getMonth()]))).replace(\"%A\", \"\" + e.translate(a[n.getDay()]))).replace(\"%a\", \"\" + e.translate(r[n.getDay()]))).replace(\"%%\", \"%\");\n  }\n\n  function x(n, e) {\n    return O.each(e, function (e, t) {\n      u(e) && (e = e(t)), n = n.replace(new RegExp(\"\\\\{\\\\$\" + t + \"\\\\}\", \"g\"), e);\n    }), n;\n  }\n\n  function d(e, t) {\n    var r = e.dom,\n        a = l(e);\n    O.each(r.select(\"*\", t), function (n) {\n      O.each(a, function (e, t) {\n        r.hasClass(n, t) && u(e) && e(n);\n      });\n    });\n  }\n\n  function g(e, t) {\n    return new RegExp(\"\\\\b\" + t + \"\\\\b\", \"g\").test(e.className);\n  }\n\n  function y(t, e, n) {\n    var r = t.dom,\n        a = t.selection.getContent();\n    n = x(n, l(t));\n    var o = r.create(\"div\", null, n),\n        c = r.select(\".mceTmpl\", o);\n    c && 0 < c.length && (o = r.create(\"div\", null)).appendChild(c[0].cloneNode(!0)), O.each(r.select(\"*\", o), function (e) {\n      g(e, t.getParam(\"template_cdate_classes\", \"cdate\").replace(/\\s+/g, \"|\")) && (e.innerHTML = p(t, t.getParam(\"template_cdate_format\", t.translate(\"%Y-%m-%d\")))), g(e, s(t).replace(/\\s+/g, \"|\")) && (e.innerHTML = p(t, m(t))), g(e, t.getParam(\"template_selected_content_classes\", \"selcontent\").replace(/\\s+/g, \"|\")) && (e.innerHTML = a);\n    }), d(t, o), t.execCommand(\"mceInsertContent\", !1, o.innerHTML), t.addVisual();\n  }\n\n  function r() {\n    return b;\n  }\n\n  var c = o(!(t = \"function\")),\n      v = o(!0),\n      O = tinymce.util.Tools.resolve(\"tinymce.util.Tools\"),\n      h = tinymce.util.Tools.resolve(\"tinymce.util.XHR\"),\n      b = {\n    fold: function fold(e, t) {\n      return e();\n    },\n    isSome: c,\n    isNone: v,\n    getOr: e,\n    getOrThunk: a,\n    getOrDie: function getOrDie(e) {\n      throw new Error(e || \"error: getOrDie called on none.\");\n    },\n    getOrNull: o(null),\n    getOrUndefined: o(void 0),\n    or: e,\n    orThunk: a,\n    map: r,\n    each: function each() {},\n    bind: r,\n    exists: c,\n    forall: v,\n    filter: function filter() {\n      return b;\n    },\n    toArray: function toArray() {\n      return [];\n    },\n    toString: o(\"none()\")\n  };\n\n  function a(e) {\n    return e();\n  }\n\n  function T(M, t) {\n    function l(e, t) {\n      return function (e, t, n) {\n        for (var r = 0, a = e.length; r < a; r++) {\n          var o = e[r];\n          if (t(o, r)) return P.some(o);\n          if (n(o, r)) break;\n        }\n\n        return P.none();\n      }(e, function (e) {\n        return e.text === t;\n      }, c);\n    }\n\n    function i(e) {\n      M.windowManager.alert(\"Could not load the specified template.\", function () {\n        return e.focus(\"template\");\n      });\n    }\n\n    function u(e) {\n      return new _(function (t, n) {\n        e.value.url.fold(function () {\n          return t(e.value.content.getOr(\"\"));\n        }, function (e) {\n          return h.send({\n            url: e,\n            success: function success(e) {\n              t(e);\n            },\n            error: function error(e) {\n              n(e);\n            }\n          });\n        });\n      });\n    }\n\n    !function () {\n      if (t && 0 !== t.length) return P.from(O.map(t, function (e, t) {\n        function n(e) {\n          return void 0 !== e.url;\n        }\n\n        return {\n          selected: 0 === t,\n          text: e.title,\n          value: {\n            url: n(e) ? P.from(e.url) : P.none(),\n            content: n(e) ? P.none() : P.from(e.content),\n            description: e.description\n          }\n        };\n      }));\n      var e = M.translate(\"No templates defined.\");\n      return M.notificationManager.open({\n        text: e,\n        type: \"info\"\n      }), P.none();\n    }().each(function (o) {\n      function b(e, t) {\n        return {\n          title: \"Insert Template\",\n          size: \"large\",\n          body: {\n            type: \"panel\",\n            items: e\n          },\n          initialData: t,\n          buttons: [{\n            type: \"cancel\",\n            name: \"cancel\",\n            text: \"Cancel\"\n          }, {\n            type: \"submit\",\n            name: \"save\",\n            text: \"Save\",\n            primary: !0\n          }],\n          onSubmit: function onSubmit(t) {\n            var e = t.getData();\n            l(n, e.template).each(function (e) {\n              u(e).then(function (e) {\n                M.execCommand(\"mceInsertTemplate\", !1, e), t.close();\n              })[\"catch\"](function () {\n                t.disable(\"save\"), i(t);\n              });\n            });\n          },\n          onChange: (r = n = o, a = c, function (n, e) {\n            var t;\n            \"template\" === e.name && (t = n.getData().template, l(r, t).each(function (t) {\n              n.block(\"Loading...\"), u(t).then(function (e) {\n                a(n, t, e);\n              })[\"catch\"](function () {\n                a(n, t, \"\"), n.disable(\"save\"), i(n);\n              });\n            }));\n          })\n        };\n        var r, a, n;\n      }\n\n      var T = function (e) {\n        for (var t = e.length, n = new Array(t), r = 0; r < t; r++) {\n          var a = e[r];\n          n[r] = {\n            text: a.text,\n            value: a.text\n          };\n        }\n\n        return n;\n      }(o),\n          c = function c(e, t, n) {\n        var r,\n            a,\n            o,\n            c,\n            l,\n            i,\n            u,\n            s,\n            m,\n            f,\n            p,\n            d,\n            g,\n            y = (r = M, -1 === (a = n).indexOf(\"<html>\") && (o = \"\", c = r.getParam(\"content_style\", \"\", \"string\"), l = r.getParam(\"content_css_cors\", !1, \"boolean\") ? ' crossorigin=\"anonymous\"' : \"\", O.each(r.contentCSS, function (e) {\n          o += '<link type=\"text/css\" rel=\"stylesheet\" href=\"' + r.documentBaseURI.toAbsolute(e) + '\"' + l + \">\";\n        }), c && (o += '<style type=\"text/css\">' + c + \"</style>\"), i = -1 === (g = (p = r).getParam(\"body_class\", \"\", \"string\")).indexOf(\"=\") ? g : (d = p).getParam(\"body_class\", \"\", \"hash\")[d.id] || \"\", u = r.dom.encode, s = '<script>document.addEventListener && document.addEventListener(\"click\", function(e) {for (var elm = e.target; elm; elm = elm.parentNode) {if (elm.nodeName === \"A\" && !(' + (S.mac ? \"e.metaKey\" : \"e.ctrlKey && !e.altKey\") + \")) {e.preventDefault();}}}, false);<\\/script> \", f = (m = r.getBody().dir) ? ' dir=\"' + u(m) + '\"' : \"\", a = '<!DOCTYPE html><html><head><base href=\"' + u(r.documentBaseURI.getURI()) + '\">' + o + s + '</head><body class=\"' + u(i) + '\"' + f + \">\" + a + \"</body></html>\"), x(a, r.getParam(\"template_preview_replace_values\"))),\n            v = [{\n          type: \"selectbox\",\n          name: \"template\",\n          label: \"Templates\",\n          items: T\n        }, {\n          type: \"htmlpanel\",\n          html: '<p aria-live=\"polite\">' + t.value.description.replace(/[\"'<>&]/g, function (e) {\n            return (C(t = A, n = e) ? P.from(t[n]) : P.none()).getOr(e);\n            var t, n;\n          }) + \"</p>\"\n        }, {\n          label: \"Preview\",\n          type: \"iframe\",\n          name: \"preview\",\n          sandboxed: !1\n        }],\n            h = {\n          template: t.text,\n          preview: y\n        };\n        e.unblock(), e.redial(b(v, h)), e.focus(\"template\");\n      },\n          t = M.windowManager.open(b([], {\n        template: \"\",\n        preview: \"\"\n      }));\n\n      t.block(\"Loading...\"), u(o[0]).then(function (e) {\n        c(t, o[0], e);\n      })[\"catch\"](function () {\n        c(t, o[0], \"\"), t.disable(\"save\"), i(t);\n      });\n    });\n  }\n\n  var M = function M(n) {\n    function e() {\n      return a;\n    }\n\n    function t(e) {\n      return e(n);\n    }\n\n    var r = o(n),\n        a = {\n      fold: function fold(e, t) {\n        return t(n);\n      },\n      isSome: v,\n      isNone: c,\n      getOr: r,\n      getOrThunk: r,\n      getOrDie: r,\n      getOrNull: r,\n      getOrUndefined: r,\n      or: e,\n      orThunk: e,\n      map: function map(e) {\n        return M(e(n));\n      },\n      each: function each(e) {\n        e(n);\n      },\n      bind: t,\n      exists: t,\n      forall: t,\n      filter: function filter(e) {\n        return e(n) ? a : b;\n      },\n      toArray: function toArray() {\n        return [n];\n      },\n      toString: function toString() {\n        return \"some(\" + n + \")\";\n      }\n    };\n    return a;\n  },\n      P = {\n    some: M,\n    none: r,\n    from: function from(e) {\n      return null == e ? b : M(e);\n    }\n  },\n      S = tinymce.util.Tools.resolve(\"tinymce.Env\"),\n      _ = tinymce.util.Tools.resolve(\"tinymce.util.Promise\"),\n      w = Object.hasOwnProperty,\n      C = function C(e, t) {\n    return w.call(e, t);\n  },\n      A = {\n    '\"': \"&quot;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    \"&\": \"&amp;\",\n    \"'\": \"&#039;\"\n  };\n\n  n.add(\"template\", function (e) {\n    function t() {\n      return n.execCommand(\"mceTemplate\");\n    }\n\n    var n, r, a, o, c, l;\n    (n = e).ui.registry.addButton(\"template\", {\n      icon: \"template\",\n      tooltip: \"Insert template\",\n      onAction: t\n    }), n.ui.registry.addMenuItem(\"template\", {\n      icon: \"template\",\n      text: \"Insert template...\",\n      onAction: t\n    }), (a = e).addCommand(\"mceInsertTemplate\", function (r) {\n      for (var a = [], e = 1; e < arguments.length; e++) {\n        a[e - 1] = arguments[e];\n      }\n\n      return function () {\n        for (var e = [], t = 0; t < arguments.length; t++) {\n          e[t] = arguments[t];\n        }\n\n        var n = a.concat(e);\n        return r.apply(null, n);\n      };\n    }(y, a)), a.addCommand(\"mceTemplate\", (l = o = a, c = function c(e) {\n      T(l, e);\n    }, function () {\n      var e = o.getParam(\"templates\");\n      u(e) ? e(c) : i(e) ? h.send({\n        url: e,\n        success: function success(e) {\n          c(JSON.parse(e));\n        }\n      }) : c(e);\n    })), (r = e).on(\"PreProcess\", function (e) {\n      var t = r.dom,\n          n = m(r);\n      O.each(t.select(\"div\", e.node), function (e) {\n        t.hasClass(e, \"mceTmpl\") && (O.each(t.select(\"*\", e), function (e) {\n          t.hasClass(e, s(r).replace(/\\s+/g, \"|\")) && (e.innerHTML = p(r, n));\n        }), d(r, e));\n      });\n    });\n  });\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/template/plugin.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/template/plugin.min.js"]();
/******/ 	
/******/ })()
;