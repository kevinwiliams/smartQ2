/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/spellchecker/plugin.min.js":
/*!*****************************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/spellchecker/plugin.min.js ***!
  \*****************************************************************************************/
/***/ (() => {

eval("/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n!function () {\n  \"use strict\";\n\n  function C(e) {\n    var t = e;\n    return {\n      get: function get() {\n        return t;\n      },\n      set: function set(e) {\n        t = e;\n      }\n    };\n  }\n\n  function u(e) {\n    return e.getParam(\"spellchecker_rpc_url\");\n  }\n\n  function E(e) {\n    var t = new RegExp(\"[^\\\\s!\\\"#$%&()*+,-./:;<=>?@[\\\\]^_{|}`\\xA7\\xA9\\xAB\\xAE\\xB1\\xB6\\xB7\\xB8\\xBB\\xBC\\xBD\\xBE\\xBF\\xD7\\xF7\\xA4\\u201D\\u201C\\u201E\\xA0\\u2002\\u2003\\u2009]+\", \"g\");\n    return e.getParam(\"spellchecker_wordchar_pattern\", t);\n  }\n\n  function p(e) {\n    return e && 1 === e.nodeType && \"false\" === e.contentEditable;\n  }\n\n  function r(i, r) {\n    function o(e) {\n      var t = i.getElementsByTagName(\"*\"),\n          n = [];\n      e = \"number\" == typeof e ? \"\" + e : null;\n\n      for (var r = 0; r < t.length; r++) {\n        var o = t[r],\n            a = o.getAttribute(\"data-mce-index\");\n        null !== a && a.length && -1 !== o.className.indexOf(\"mce-spellchecker-word\") && (a !== e && null !== e || n.push(o));\n      }\n\n      return n;\n    }\n\n    function a(e) {\n      for (var t = c.length; t--;) {\n        if (c[t] === e) return t;\n      }\n\n      return -1;\n    }\n\n    var n,\n        c = [],\n        v = r.dom,\n        f = r.schema.getBlockElements(),\n        h = r.schema.getWhiteSpaceElements(),\n        g = r.schema.getShortEndedElements(),\n        s = function s(e) {\n      if (3 === e.nodeType) return e.data;\n      if (h[e.nodeName] && !f[e.nodeName]) return \"\";\n      if (p(e)) return \"\\n\";\n      var t = \"\";\n      if ((f[e.nodeName] || g[e.nodeName]) && (t += \"\\n\"), e = e.firstChild) for (; t += s(e), e = e.nextSibling;) {\n        ;\n      }\n      return t;\n    };\n\n    function e(e) {\n      for (var t = 0, n = c.length; t < n && !1 !== e(c[t], t); t++) {\n        ;\n      }\n\n      return this;\n    }\n\n    function t(e) {\n      for (var t = o(e ? a(e) : null), n = t.length; n--;) {\n        !function (e) {\n          for (var t = e.parentNode; 0 < e.childNodes.length;) {\n            t.insertBefore(e.childNodes[0], e);\n          }\n\n          t.removeChild(e);\n        }(t[n]);\n      }\n\n      return this;\n    }\n\n    function l(e) {\n      var t = o(a(e)),\n          n = r.dom.createRng();\n      return n.setStartBefore(t[0]), n.setEndAfter(t[t.length - 1]), n;\n    }\n\n    var u = s(i);\n    return {\n      text: u,\n      matches: c,\n      each: e,\n      filter: function filter(n) {\n        var r = [];\n        return e(function (e, t) {\n          n(e, t) && r.push(e);\n        }), c = r, this;\n      },\n      reset: function reset() {\n        return c.splice(0, c.length), t(), this;\n      },\n      matchFromElement: function matchFromElement(e) {\n        return c[e.getAttribute(\"data-mce-index\")];\n      },\n      elementFromMatch: function elementFromMatch(e) {\n        return o(a(e))[0];\n      },\n      find: function find(e, t) {\n        if (u && e.global) for (; n = e.exec(u);) {\n          c.push(function (e, t) {\n            if (!e[0]) throw new Error(\"findAndReplaceDOMText cannot handle zero-length matches\");\n            return {\n              start: e.index,\n              end: e.index + e[0].length,\n              text: e[0],\n              data: t\n            };\n          }(n, t));\n        }\n        return this;\n      },\n      add: function add(e, t, n) {\n        return c.push({\n          start: e,\n          end: e + t,\n          text: u.substr(e, t),\n          data: n\n        }), this;\n      },\n      wrap: function wrap(e) {\n        return c.length && function (e, t, n) {\n          var r,\n              o,\n              a,\n              i,\n              c,\n              s = [],\n              l = 0,\n              u = e,\n              d = 0;\n          (t = t.slice(0)).sort(function (e, t) {\n            return e.start - t.start;\n          }), c = t.shift();\n\n          e: for (;;) {\n            if ((f[u.nodeName] || g[u.nodeName] || p(u)) && l++, 3 === u.nodeType && (!o && u.length + l >= c.end ? (o = u, i = c.end - l) : r && s.push(u), !r && u.length + l > c.start && (r = u, a = c.start - l), l += u.length), r && o) {\n              if (u = n({\n                startNode: r,\n                startNodeIndex: a,\n                endNode: o,\n                endNodeIndex: i,\n                innerNodes: s,\n                match: c.text,\n                matchIndex: d\n              }), l -= o.length - i, o = r = null, s = [], d++, !(c = t.shift())) break;\n            } else if (h[u.nodeName] && !f[u.nodeName] || !u.firstChild) {\n              if (u.nextSibling) {\n                u = u.nextSibling;\n                continue;\n              }\n            } else if (!p(u)) {\n              u = u.firstChild;\n              continue;\n            }\n\n            for (;;) {\n              if (u.nextSibling) {\n                u = u.nextSibling;\n                break;\n              }\n\n              if (u.parentNode === e) break e;\n              u = u.parentNode;\n            }\n          }\n        }(i, c, (o = e, function (e) {\n          var t = e.startNode,\n              n = e.endNode,\n              r = e.matchIndex,\n              o = v.doc;\n\n          if (t === n) {\n            var a = t,\n                i = a.parentNode;\n            0 < e.startNodeIndex && (s = o.createTextNode(a.data.substring(0, e.startNodeIndex)), i.insertBefore(s, a));\n            var c = m(e.match, r);\n            return i.insertBefore(c, a), e.endNodeIndex < a.length && (l = o.createTextNode(a.data.substring(e.endNodeIndex)), i.insertBefore(l, a)), a.parentNode.removeChild(a), c;\n          }\n\n          for (var s = o.createTextNode(t.data.substring(0, e.startNodeIndex)), l = o.createTextNode(n.data.substring(e.endNodeIndex)), u = m(t.data.substring(e.startNodeIndex), r), d = 0, f = e.innerNodes.length; d < f; ++d) {\n            var h = e.innerNodes[d],\n                g = m(h.data, r);\n            h.parentNode.replaceChild(g, h);\n          }\n\n          var p = m(n.data.substring(0, e.endNodeIndex), r);\n          return (i = t.parentNode).insertBefore(s, t), i.insertBefore(u, t), i.removeChild(t), (i = n.parentNode).insertBefore(p, n), i.insertBefore(l, n), i.removeChild(n), p;\n        })), this;\n\n        function m(e, t) {\n          var n = c[t];\n          n.stencil || (n.stencil = o(n));\n          var r = n.stencil.cloneNode(!1);\n          return r.setAttribute(\"data-mce-index\", \"\" + t), e && r.appendChild(v.doc.createTextNode(e)), r;\n        }\n\n        var o;\n      },\n      unwrap: t,\n      replace: function replace(e, t) {\n        var n = l(e);\n        return n.deleteContents(), 0 < t.length && n.insertNode(r.dom.doc.createTextNode(t)), n;\n      },\n      rangeFromMatch: l,\n      indexOf: a\n    };\n  }\n\n  function l(e, t) {\n    var n;\n    return t.get() || (n = r(e.getBody(), e), t.set(n)), t.get();\n  }\n\n  function k(e, t, n, r, o, a, i) {\n    var c, s, l;\n    (e.getParam(\"spellchecker_callback\") || (c = e, s = t, l = n, function (e, t, r, o) {\n      var n = {\n        method: e,\n        lang: l.get()\n      },\n          a = \"\";\n      n[\"addToDictionary\" === e ? \"word\" : \"text\"] = t, M.each(n, function (e, t) {\n        a && (a += \"&\"), a += t + \"=\" + encodeURIComponent(e);\n      }), h.send({\n        url: new f(s).toAbsolute(u(c)),\n        type: \"post\",\n        content_type: \"application/x-www-form-urlencoded\",\n        data: a,\n        success: function success(e) {\n          var t,\n              n = JSON.parse(e);\n          n ? n.error ? o(n.error) : r(n) : (t = c.translate(\"Server response wasn't proper JSON.\"), o(t));\n        },\n        error: function error() {\n          var e = c.translate(\"The spelling service was not found: (\") + u(c) + c.translate(\")\");\n          o(e);\n        }\n      });\n    })).call(e.plugins.spellchecker, r, o, a, i);\n  }\n\n  function R(t, e, n, r, o, a) {\n    i(t, n, r) || (t.setProgressState(!0), k(t, e, a, \"spellcheck\", l(t, r).text, function (e) {\n      O(t, n, r, o, e);\n    }, function (e) {\n      t.notificationManager.open({\n        text: e,\n        type: \"error\"\n      }), t.setProgressState(!1), i(t, n, r);\n    }), t.focus());\n  }\n\n  function y(e, t, n) {\n    e.dom.select(\"span.mce-spellchecker-word\").length || i(e, t, n);\n  }\n\n  function S(t, e, n, r, o, a) {\n    t.selection.collapse(), a ? M.each(t.dom.select(\"span.mce-spellchecker-word\"), function (e) {\n      e.getAttribute(\"data-mce-word\") === r && t.dom.remove(e, !0);\n    }) : t.dom.remove(o, !0), y(t, e, n);\n  }\n\n  function b(e) {\n    var t = e.getAttribute(\"data-mce-index\");\n    return \"number\" == typeof t ? \"\" + t : t;\n  }\n\n  function _(g, p, m, v, x, N) {\n    g.ui.registry.addContextMenu(\"spellchecker\", {\n      update: function update(e) {\n        var t = e;\n        if (\"mce-spellchecker-word\" !== t.className) return [];\n\n        var c,\n            s,\n            n,\n            l,\n            u,\n            d,\n            f,\n            h,\n            r,\n            o,\n            a = function (e, t) {\n          var n = [],\n              r = M.toArray(e.getBody().getElementsByTagName(\"span\"));\n          if (r.length) for (var o = 0; o < r.length; o++) {\n            var a = b(r[o]);\n            null !== a && a.length && a === t.toString() && n.push(r[o]);\n          }\n          return n;\n        }(g, b(t));\n\n        if (0 < a.length) {\n          var i = g.dom.createRng();\n          return i.setStartBefore(a[0]), i.setEndAfter(a[a.length - 1]), g.selection.setRng(i), c = g, s = p, n = m, l = v, u = x, d = N, f = t.getAttribute(\"data-mce-word\"), h = a, r = [], o = n.get().suggestions[f], M.each(o, function (e) {\n            r.push({\n              text: e,\n              onAction: function onAction() {\n                c.insertContent(c.dom.encode(e)), c.dom.remove(h), y(c, l, u);\n              }\n            });\n          }), n.get().hasDictionarySupport && (r.push({\n            type: \"separator\"\n          }), r.push({\n            text: \"Add to dictionary\",\n            onAction: function onAction() {\n              var t,\n                  e = s,\n                  n = l,\n                  r = u,\n                  o = d,\n                  a = f,\n                  i = h;\n              (t = c).setProgressState(!0), k(t, e, o, \"addToDictionary\", a, function () {\n                t.setProgressState(!1), t.dom.remove(i, !0), y(t, n, r);\n              }, function (e) {\n                t.notificationManager.open({\n                  text: e,\n                  type: \"error\"\n                }), t.setProgressState(!1);\n              });\n            }\n          })), r.push.apply(r, [{\n            type: \"separator\"\n          }, {\n            text: \"Ignore\",\n            onAction: function onAction() {\n              S(c, l, u, f, h);\n            }\n          }, {\n            text: \"Ignore all\",\n            onAction: function onAction() {\n              S(c, l, u, f, h, !0);\n            }\n          }]), r;\n        }\n      }\n    });\n  }\n\n  var e = tinymce.util.Tools.resolve(\"tinymce.PluginManager\"),\n      d = Object.hasOwnProperty,\n      M = tinymce.util.Tools.resolve(\"tinymce.util.Tools\"),\n      f = tinymce.util.Tools.resolve(\"tinymce.util.URI\"),\n      h = tinymce.util.Tools.resolve(\"tinymce.util.XHR\"),\n      i = function i(e, t, n) {\n    var r = e.selection.getBookmark();\n    if (l(e, n).reset(), e.selection.moveToBookmark(r), n.set(null), t.get()) return t.set(!1), e.fire(\"SpellcheckEnd\"), !0;\n  },\n      O = function O(t, e, n, r, o) {\n    var a = !!o.dictionary,\n        i = o.words;\n\n    if (t.setProgressState(!1), function (e) {\n      for (var t in e) {\n        if (d.call(e, t)) return;\n      }\n\n      return 1;\n    }(i)) {\n      var c = t.translate(\"No misspellings found.\");\n      return t.notificationManager.open({\n        text: c,\n        type: \"info\"\n      }), void e.set(!1);\n    }\n\n    r.set({\n      suggestions: i,\n      hasDictionarySupport: a\n    });\n    var s = t.selection.getBookmark();\n    l(t, n).find(E(t)).filter(function (e) {\n      return !!i[e.text];\n    }).wrap(function (e) {\n      return t.dom.create(\"span\", {\n        \"class\": \"mce-spellchecker-word\",\n        \"aria-invalid\": \"spelling\",\n        \"data-mce-bogus\": 1,\n        \"data-mce-word\": e.text\n      });\n    }), t.selection.moveToBookmark(s), e.set(!0), t.fire(\"SpellcheckStart\");\n  },\n      _D = function D() {\n    return (_D = Object.assign || function (e) {\n      for (var t, n = 1, r = arguments.length; n < r; n++) {\n        for (var o in t = arguments[n]) {\n          Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);\n        }\n      }\n\n      return e;\n    }).apply(this, arguments);\n  },\n      F = \"SpellcheckStart SpellcheckEnd\";\n\n  e.add(\"spellchecker\", function (e, t) {\n    if (0 == (!!e.hasPlugin(\"tinymcespellchecker\", !0) && (void 0 !== window.console && window.console.log && window.console.log(\"Spell Checker Pro is incompatible with Spell Checker plugin! Remove 'spellchecker' from the 'plugins' option.\"), !0))) {\n      var n = C(!1),\n          r = C((I = (P = e).getParam(\"language\", \"en\"), P.getParam(\"spellchecker_language\", I))),\n          o = C(null),\n          a = C(null);\n      return c = e, s = t, l = n, u = o, d = r, f = a, h = M.map(c.getParam(\"spellchecker_languages\", \"English=en,Danish=da,Dutch=nl,Finnish=fi,French=fr_FR,German=de,Italian=it,Polish=pl,Portuguese=pt_BR,Spanish=es,Swedish=sv\").split(\",\"), function (e) {\n        var t = e.split(\"=\");\n        return {\n          name: t[0],\n          value: t[1]\n        };\n      }), g = [], M.each(h, function (e) {\n        g.push({\n          selectable: !0,\n          text: e.name,\n          data: e.value\n        });\n      }), p = g, v = _D(_D({}, m = {\n        tooltip: \"Spellcheck\",\n        onAction: i,\n        icon: \"spell-check\",\n        onSetup: function onSetup(e) {\n          function t() {\n            e.setActive(l.get());\n          }\n\n          return c.on(F, t), function () {\n            c.off(F, t);\n          };\n        }\n      }), {\n        type: \"splitbutton\",\n        select: function select(e) {\n          return e === d.get();\n        },\n        fetch: function fetch(e) {\n          e(M.map(p, function (e) {\n            return {\n              type: \"choiceitem\",\n              value: e.data,\n              text: e.text\n            };\n          }));\n        },\n        onItemAction: function onItemAction(e, t) {\n          d.set(t);\n        }\n      }), 1 < p.length ? c.ui.registry.addSplitButton(\"spellchecker\", v) : c.ui.registry.addToggleButton(\"spellchecker\", m), c.ui.registry.addToggleMenuItem(\"spellchecker\", {\n        text: \"Spellcheck\",\n        icon: \"spell-check\",\n        onSetup: function onSetup(e) {\n          function t() {\n            e.setActive(l.get());\n          }\n\n          return e.setActive(l.get()), c.on(F, t), function () {\n            c.off(F, t);\n          };\n        },\n        onAction: i\n      }), _(e, t, a, n, o, r), b = t, w = n, T = o, A = a, B = r, (S = e).addCommand(\"mceSpellCheck\", function () {\n        R(S, b, w, T, A, B);\n      }), x = e, N = n, k = a, {\n        getTextMatcher: (y = o).get,\n        getWordCharPattern: function getWordCharPattern() {\n          return E(x);\n        },\n        markErrors: function markErrors(e) {\n          O(x, N, y, k, e);\n        },\n        getLanguage: r.get\n      };\n    }\n\n    function i() {\n      R(c, s, l, u, f, d);\n    }\n\n    var c, s, l, u, d, f, h, g, p, m, v, x, N, k, y, S, b, w, T, A, B, P, I;\n  });\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/spellchecker/plugin.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/spellchecker/plugin.min.js"]();
/******/ 	
/******/ })()
;