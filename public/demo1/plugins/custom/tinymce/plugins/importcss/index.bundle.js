/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/importcss/index.js":
/*!*********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/importcss/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Exports the \"importcss\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/importcss')\n//   ES2015:\n//     import 'tinymce/plugins/importcss'\n__webpack_require__(/*! ./plugin.js */ \"./resources/assets/core/plugins/custom/tinymce/plugins/importcss/plugin.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL2ltcG9ydGNzcy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUEsbUJBQU8sQ0FBQywrRkFBRCxDQUFQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL3BsdWdpbnMvY3VzdG9tL3RpbnltY2UvcGx1Z2lucy9pbXBvcnRjc3MvaW5kZXguanM/OTg2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBFeHBvcnRzIHRoZSBcImltcG9ydGNzc1wiIHBsdWdpbiBmb3IgdXNhZ2Ugd2l0aCBtb2R1bGUgbG9hZGVyc1xyXG4vLyBVc2FnZTpcclxuLy8gICBDb21tb25KUzpcclxuLy8gICAgIHJlcXVpcmUoJ3RpbnltY2UvcGx1Z2lucy9pbXBvcnRjc3MnKVxyXG4vLyAgIEVTMjAxNTpcclxuLy8gICAgIGltcG9ydCAndGlueW1jZS9wbHVnaW5zL2ltcG9ydGNzcydcclxucmVxdWlyZSgnLi9wbHVnaW4uanMnKTsiXSwibmFtZXMiOlsicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/importcss/index.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/importcss/plugin.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/importcss/plugin.js ***!
  \**********************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var global$4 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n\n  var isType = function isType(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n\n  var isString = isType('string');\n  var isArray = isType('array');\n  var global$3 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n  var global$2 = tinymce.util.Tools.resolve('tinymce.EditorManager');\n  var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n  var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n  var shouldMergeClasses = function shouldMergeClasses(editor) {\n    return editor.getParam('importcss_merge_classes');\n  };\n\n  var shouldImportExclusive = function shouldImportExclusive(editor) {\n    return editor.getParam('importcss_exclusive');\n  };\n\n  var getSelectorConverter = function getSelectorConverter(editor) {\n    return editor.getParam('importcss_selector_converter');\n  };\n\n  var getSelectorFilter = function getSelectorFilter(editor) {\n    return editor.getParam('importcss_selector_filter');\n  };\n\n  var getCssGroups = function getCssGroups(editor) {\n    return editor.getParam('importcss_groups');\n  };\n\n  var shouldAppend = function shouldAppend(editor) {\n    return editor.getParam('importcss_append');\n  };\n\n  var getFileFilter = function getFileFilter(editor) {\n    return editor.getParam('importcss_file_filter');\n  };\n\n  var getSkin = function getSkin(editor) {\n    var skin = editor.getParam('skin');\n    return skin !== false ? skin || 'oxide' : false;\n  };\n\n  var getSkinUrl = function getSkinUrl(editor) {\n    return editor.getParam('skin_url');\n  };\n\n  var nativePush = Array.prototype.push;\n\n  var map = function map(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n\n    return r;\n  };\n\n  var flatten = function flatten(xs) {\n    var r = [];\n\n    for (var i = 0, len = xs.length; i < len; ++i) {\n      if (!isArray(xs[i])) {\n        throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n      }\n\n      nativePush.apply(r, xs[i]);\n    }\n\n    return r;\n  };\n\n  var bind = function bind(xs, f) {\n    return flatten(map(xs, f));\n  };\n\n  var generate = function generate() {\n    var ungroupedOrder = [];\n    var groupOrder = [];\n    var groups = {};\n\n    var addItemToGroup = function addItemToGroup(groupTitle, itemInfo) {\n      if (groups[groupTitle]) {\n        groups[groupTitle].push(itemInfo);\n      } else {\n        groupOrder.push(groupTitle);\n        groups[groupTitle] = [itemInfo];\n      }\n    };\n\n    var addItem = function addItem(itemInfo) {\n      ungroupedOrder.push(itemInfo);\n    };\n\n    var toFormats = function toFormats() {\n      var groupItems = bind(groupOrder, function (g) {\n        var items = groups[g];\n        return items.length === 0 ? [] : [{\n          title: g,\n          items: items\n        }];\n      });\n      return groupItems.concat(ungroupedOrder);\n    };\n\n    return {\n      addItemToGroup: addItemToGroup,\n      addItem: addItem,\n      toFormats: toFormats\n    };\n  };\n\n  var internalEditorStyle = /^\\.(?:ephox|tiny-pageembed|mce)(?:[.-]+\\w+)+$/;\n\n  var removeCacheSuffix = function removeCacheSuffix(url) {\n    var cacheSuffix = global$1.cacheSuffix;\n\n    if (isString(url)) {\n      url = url.replace('?' + cacheSuffix, '').replace('&' + cacheSuffix, '');\n    }\n\n    return url;\n  };\n\n  var isSkinContentCss = function isSkinContentCss(editor, href) {\n    var skin = getSkin(editor);\n\n    if (skin) {\n      var skinUrlBase = getSkinUrl(editor);\n      var skinUrl = skinUrlBase ? editor.documentBaseURI.toAbsolute(skinUrlBase) : global$2.baseURL + '/skins/ui/' + skin;\n      var contentSkinUrlPart = global$2.baseURL + '/skins/content/';\n      return href === skinUrl + '/content' + (editor.inline ? '.inline' : '') + '.min.css' || href.indexOf(contentSkinUrlPart) !== -1;\n    }\n\n    return false;\n  };\n\n  var compileFilter = function compileFilter(filter) {\n    if (isString(filter)) {\n      return function (value) {\n        return value.indexOf(filter) !== -1;\n      };\n    } else if (filter instanceof RegExp) {\n      return function (value) {\n        return filter.test(value);\n      };\n    }\n\n    return filter;\n  };\n\n  var isCssImportRule = function isCssImportRule(rule) {\n    return rule.styleSheet;\n  };\n\n  var isCssPageRule = function isCssPageRule(rule) {\n    return rule.selectorText;\n  };\n\n  var getSelectors = function getSelectors(editor, doc, fileFilter) {\n    var selectors = [];\n    var contentCSSUrls = {};\n\n    var append = function append(styleSheet, imported) {\n      var href = styleSheet.href,\n          rules;\n      href = removeCacheSuffix(href);\n\n      if (!href || !fileFilter(href, imported) || isSkinContentCss(editor, href)) {\n        return;\n      }\n\n      global.each(styleSheet.imports, function (styleSheet) {\n        append(styleSheet, true);\n      });\n\n      try {\n        rules = styleSheet.cssRules || styleSheet.rules;\n      } catch (e) {}\n\n      global.each(rules, function (cssRule) {\n        if (isCssImportRule(cssRule)) {\n          append(cssRule.styleSheet, true);\n        } else if (isCssPageRule(cssRule)) {\n          global.each(cssRule.selectorText.split(','), function (selector) {\n            selectors.push(global.trim(selector));\n          });\n        }\n      });\n    };\n\n    global.each(editor.contentCSS, function (url) {\n      contentCSSUrls[url] = true;\n    });\n\n    if (!fileFilter) {\n      fileFilter = function fileFilter(href, imported) {\n        return imported || contentCSSUrls[href];\n      };\n    }\n\n    try {\n      global.each(doc.styleSheets, function (styleSheet) {\n        append(styleSheet);\n      });\n    } catch (e) {}\n\n    return selectors;\n  };\n\n  var defaultConvertSelectorToFormat = function defaultConvertSelectorToFormat(editor, selectorText) {\n    var format;\n    var selector = /^(?:([a-z0-9\\-_]+))?(\\.[a-z0-9_\\-\\.]+)$/i.exec(selectorText);\n\n    if (!selector) {\n      return;\n    }\n\n    var elementName = selector[1];\n    var classes = selector[2].substr(1).split('.').join(' ');\n    var inlineSelectorElements = global.makeMap('a,img');\n\n    if (selector[1]) {\n      format = {\n        title: selectorText\n      };\n\n      if (editor.schema.getTextBlockElements()[elementName]) {\n        format.block = elementName;\n      } else if (editor.schema.getBlockElements()[elementName] || inlineSelectorElements[elementName.toLowerCase()]) {\n        format.selector = elementName;\n      } else {\n        format.inline = elementName;\n      }\n    } else if (selector[2]) {\n      format = {\n        inline: 'span',\n        title: selectorText.substr(1),\n        classes: classes\n      };\n    }\n\n    if (shouldMergeClasses(editor) !== false) {\n      format.classes = classes;\n    } else {\n      format.attributes = {\n        \"class\": classes\n      };\n    }\n\n    return format;\n  };\n\n  var getGroupsBySelector = function getGroupsBySelector(groups, selector) {\n    return global.grep(groups, function (group) {\n      return !group.filter || group.filter(selector);\n    });\n  };\n\n  var compileUserDefinedGroups = function compileUserDefinedGroups(groups) {\n    return global.map(groups, function (group) {\n      return global.extend({}, group, {\n        original: group,\n        selectors: {},\n        filter: compileFilter(group.filter)\n      });\n    });\n  };\n\n  var isExclusiveMode = function isExclusiveMode(editor, group) {\n    return group === null || shouldImportExclusive(editor) !== false;\n  };\n\n  var isUniqueSelector = function isUniqueSelector(editor, selector, group, globallyUniqueSelectors) {\n    return !(isExclusiveMode(editor, group) ? selector in globallyUniqueSelectors : selector in group.selectors);\n  };\n\n  var markUniqueSelector = function markUniqueSelector(editor, selector, group, globallyUniqueSelectors) {\n    if (isExclusiveMode(editor, group)) {\n      globallyUniqueSelectors[selector] = true;\n    } else {\n      group.selectors[selector] = true;\n    }\n  };\n\n  var convertSelectorToFormat = function convertSelectorToFormat(editor, plugin, selector, group) {\n    var selectorConverter;\n\n    if (group && group.selector_converter) {\n      selectorConverter = group.selector_converter;\n    } else if (getSelectorConverter(editor)) {\n      selectorConverter = getSelectorConverter(editor);\n    } else {\n      selectorConverter = function selectorConverter() {\n        return defaultConvertSelectorToFormat(editor, selector);\n      };\n    }\n\n    return selectorConverter.call(plugin, selector, group);\n  };\n\n  var setup = function setup(editor) {\n    editor.on('init', function () {\n      var model = generate();\n      var globallyUniqueSelectors = {};\n      var selectorFilter = compileFilter(getSelectorFilter(editor));\n      var groups = compileUserDefinedGroups(getCssGroups(editor));\n\n      var processSelector = function processSelector(selector, group) {\n        if (isUniqueSelector(editor, selector, group, globallyUniqueSelectors)) {\n          markUniqueSelector(editor, selector, group, globallyUniqueSelectors);\n          var format = convertSelectorToFormat(editor, editor.plugins.importcss, selector, group);\n\n          if (format) {\n            var formatName = format.name || global$3.DOM.uniqueId();\n            editor.formatter.register(formatName, format);\n            return {\n              title: format.title,\n              format: formatName\n            };\n          }\n        }\n\n        return null;\n      };\n\n      global.each(getSelectors(editor, editor.getDoc(), compileFilter(getFileFilter(editor))), function (selector) {\n        if (!internalEditorStyle.test(selector)) {\n          if (!selectorFilter || selectorFilter(selector)) {\n            var selectorGroups = getGroupsBySelector(groups, selector);\n\n            if (selectorGroups.length > 0) {\n              global.each(selectorGroups, function (group) {\n                var menuItem = processSelector(selector, group);\n\n                if (menuItem) {\n                  model.addItemToGroup(group.title, menuItem);\n                }\n              });\n            } else {\n              var menuItem = processSelector(selector, null);\n\n              if (menuItem) {\n                model.addItem(menuItem);\n              }\n            }\n          }\n        }\n      });\n      var items = model.toFormats();\n      editor.fire('addStyleModifications', {\n        items: items,\n        replace: !shouldAppend(editor)\n      });\n    });\n  };\n\n  var get = function get(editor) {\n    var convertSelectorToFormat = function convertSelectorToFormat(selectorText) {\n      return defaultConvertSelectorToFormat(editor, selectorText);\n    };\n\n    return {\n      convertSelectorToFormat: convertSelectorToFormat\n    };\n  };\n\n  function Plugin() {\n    global$4.add('importcss', function (editor) {\n      setup(editor);\n      return get(editor);\n    });\n  }\n\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/importcss/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/tinymce/plugins/importcss/index.js");
/******/ 	
/******/ })()
;