/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/wordcount/plugin.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/wordcount/plugin.js ***!
  \**********************************************************************************/
/***/ (() => {

eval("/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var global$2 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) {\n          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n      }\n\n      return t;\n    };\n\n    return _assign.apply(this, arguments);\n  };\n\n  var zeroWidth = \"\\uFEFF\";\n\n  var removeZwsp$1 = function removeZwsp$1(s) {\n    return s.replace(/\\uFEFF/g, '');\n  };\n\n  var map = function map(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n\n    return r;\n  };\n\n  var punctuationStr = \"[!-#%-*,-\\\\/:;?@\\\\[-\\\\]_{}\\xA1\\xAB\\xB7\\xBB\\xBF;\\xB7\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1361-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u3008\\u3009\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30\\u2E31\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]\";\n  var regExps = {\n    aletter: \"[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F3\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u10A0-\\u10C5\\u10D0-\\u10FA\\u10FC\\u1100-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1A00-\\u1A16\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BC0-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u24B6-\\u24E9\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2D00-\\u2D25\\u2D30-\\u2D65\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u303B\\u303C\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790\\uA791\\uA7A0-\\uA7A9\\uA7FA-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]\",\n    midnumlet: \"[-'\\\\.\\u2018\\u2019\\u2024\\uFE52\\uFF07\\uFF0E]\",\n    midletter: \"[:\\xB7\\xB7\\u05F4\\u2027\\uFE13\\uFE55\\uFF1A]\",\n    midnum: \"[\\xB1+*/,;;\\u0589\\u060C\\u060D\\u066C\\u07F8\\u2044\\uFE10\\uFE14\\uFE50\\uFE54\\uFF0C\\uFF1B]\",\n    numeric: \"[0-9\\u0660-\\u0669\\u066B\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9]\",\n    cr: '\\\\r',\n    lf: '\\\\n',\n    newline: \"[\\x0B\\f\\x85\\u2028\\u2029]\",\n    extend: \"[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0900-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C01-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C82\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D02\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B6-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAA\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u200C\\u200D\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA67C\\uA67D\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\\uFF9E\\uFF9F]\",\n    format: \"[\\xAD\\u0600-\\u0603\\u06DD\\u070F\\u17B4\\u17B5\\u200E\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u206A-\\u206F\\uFEFF\\uFFF9-\\uFFFB]\",\n    katakana: \"[\\u3031-\\u3035\\u309B\\u309C\\u30A0-\\u30FA\\u30FC-\\u30FF\\u31F0-\\u31FF\\u32D0-\\u32FE\\u3300-\\u3357\\uFF66-\\uFF9D]\",\n    extendnumlet: \"[=_\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F\\u2200-\\u22FF<>]\",\n    punctuation: punctuationStr\n  };\n  var characterIndices = {\n    ALETTER: 0,\n    MIDNUMLET: 1,\n    MIDLETTER: 2,\n    MIDNUM: 3,\n    NUMERIC: 4,\n    CR: 5,\n    LF: 6,\n    NEWLINE: 7,\n    EXTEND: 8,\n    FORMAT: 9,\n    KATAKANA: 10,\n    EXTENDNUMLET: 11,\n    AT: 12,\n    OTHER: 13\n  };\n  var SETS$1 = [new RegExp(regExps.aletter), new RegExp(regExps.midnumlet), new RegExp(regExps.midletter), new RegExp(regExps.midnum), new RegExp(regExps.numeric), new RegExp(regExps.cr), new RegExp(regExps.lf), new RegExp(regExps.newline), new RegExp(regExps.extend), new RegExp(regExps.format), new RegExp(regExps.katakana), new RegExp(regExps.extendnumlet), new RegExp('@')];\n  var EMPTY_STRING$1 = '';\n  var PUNCTUATION$1 = new RegExp('^' + regExps.punctuation + '$');\n  var WHITESPACE$1 = /^\\s+$/;\n  var SETS = SETS$1;\n  var OTHER = characterIndices.OTHER;\n\n  var getType = function getType(_char) {\n    var type = OTHER;\n    var setsLength = SETS.length;\n\n    for (var j = 0; j < setsLength; ++j) {\n      var set = SETS[j];\n\n      if (set && set.test(_char)) {\n        type = j;\n        break;\n      }\n    }\n\n    return type;\n  };\n\n  var memoize = function memoize(func) {\n    var cache = {};\n    return function (_char2) {\n      if (cache[_char2]) {\n        return cache[_char2];\n      } else {\n        var result = func(_char2);\n        cache[_char2] = result;\n        return result;\n      }\n    };\n  };\n\n  var classify = function classify(characters) {\n    var memoized = memoize(getType);\n    return map(characters, memoized);\n  };\n\n  var isWordBoundary = function isWordBoundary(map, index) {\n    var type = map[index];\n    var nextType = map[index + 1];\n\n    if (index < 0 || index > map.length - 1 && index !== 0) {\n      return false;\n    }\n\n    if (type === characterIndices.ALETTER && nextType === characterIndices.ALETTER) {\n      return false;\n    }\n\n    var nextNextType = map[index + 2];\n\n    if (type === characterIndices.ALETTER && (nextType === characterIndices.MIDLETTER || nextType === characterIndices.MIDNUMLET || nextType === characterIndices.AT) && nextNextType === characterIndices.ALETTER) {\n      return false;\n    }\n\n    var prevType = map[index - 1];\n\n    if ((type === characterIndices.MIDLETTER || type === characterIndices.MIDNUMLET || nextType === characterIndices.AT) && nextType === characterIndices.ALETTER && prevType === characterIndices.ALETTER) {\n      return false;\n    }\n\n    if ((type === characterIndices.NUMERIC || type === characterIndices.ALETTER) && (nextType === characterIndices.NUMERIC || nextType === characterIndices.ALETTER)) {\n      return false;\n    }\n\n    if ((type === characterIndices.MIDNUM || type === characterIndices.MIDNUMLET) && nextType === characterIndices.NUMERIC && prevType === characterIndices.NUMERIC) {\n      return false;\n    }\n\n    if (type === characterIndices.NUMERIC && (nextType === characterIndices.MIDNUM || nextType === characterIndices.MIDNUMLET) && nextNextType === characterIndices.NUMERIC) {\n      return false;\n    }\n\n    if (type === characterIndices.EXTEND || type === characterIndices.FORMAT || prevType === characterIndices.EXTEND || prevType === characterIndices.FORMAT || nextType === characterIndices.EXTEND || nextType === characterIndices.FORMAT) {\n      return false;\n    }\n\n    if (type === characterIndices.CR && nextType === characterIndices.LF) {\n      return false;\n    }\n\n    if (type === characterIndices.NEWLINE || type === characterIndices.CR || type === characterIndices.LF) {\n      return true;\n    }\n\n    if (nextType === characterIndices.NEWLINE || nextType === characterIndices.CR || nextType === characterIndices.LF) {\n      return true;\n    }\n\n    if (type === characterIndices.KATAKANA && nextType === characterIndices.KATAKANA) {\n      return false;\n    }\n\n    if (nextType === characterIndices.EXTENDNUMLET && (type === characterIndices.ALETTER || type === characterIndices.NUMERIC || type === characterIndices.KATAKANA || type === characterIndices.EXTENDNUMLET)) {\n      return false;\n    }\n\n    if (type === characterIndices.EXTENDNUMLET && (nextType === characterIndices.ALETTER || nextType === characterIndices.NUMERIC || nextType === characterIndices.KATAKANA)) {\n      return false;\n    }\n\n    if (type === characterIndices.AT) {\n      return false;\n    }\n\n    return true;\n  };\n\n  var EMPTY_STRING = EMPTY_STRING$1;\n  var WHITESPACE = WHITESPACE$1;\n  var PUNCTUATION = PUNCTUATION$1;\n\n  var isProtocol = function isProtocol(str) {\n    return str === 'http' || str === 'https';\n  };\n\n  var findWordEnd = function findWordEnd(characters, startIndex) {\n    var i;\n\n    for (i = startIndex; i < characters.length; i++) {\n      if (WHITESPACE.test(characters[i])) {\n        break;\n      }\n    }\n\n    return i;\n  };\n\n  var findUrlEnd = function findUrlEnd(characters, startIndex) {\n    var endIndex = findWordEnd(characters, startIndex + 1);\n    var peakedWord = characters.slice(startIndex + 1, endIndex).join(EMPTY_STRING);\n    return peakedWord.substr(0, 3) === '://' ? endIndex : startIndex;\n  };\n\n  var findWords = function findWords(chars, sChars, characterMap, options) {\n    var words = [];\n    var word = [];\n\n    for (var i = 0; i < characterMap.length; ++i) {\n      word.push(chars[i]);\n\n      if (isWordBoundary(characterMap, i)) {\n        var ch = sChars[i];\n\n        if ((options.includeWhitespace || !WHITESPACE.test(ch)) && (options.includePunctuation || !PUNCTUATION.test(ch))) {\n          var startOfWord = i - word.length + 1;\n          var endOfWord = i + 1;\n          var str = sChars.slice(startOfWord, endOfWord).join(EMPTY_STRING);\n\n          if (isProtocol(str)) {\n            var endOfUrl = findUrlEnd(sChars, i);\n            var url = chars.slice(endOfWord, endOfUrl);\n            Array.prototype.push.apply(word, url);\n            i = endOfUrl;\n          }\n\n          words.push(word);\n        }\n\n        word = [];\n      }\n    }\n\n    return words;\n  };\n\n  var getDefaultOptions = function getDefaultOptions() {\n    return {\n      includeWhitespace: false,\n      includePunctuation: false\n    };\n  };\n\n  var getWords$1 = function getWords$1(chars, extract, options) {\n    options = _assign(_assign({}, getDefaultOptions()), options);\n    var filteredChars = [];\n    var extractedChars = [];\n\n    for (var i = 0; i < chars.length; i++) {\n      var ch = extract(chars[i]);\n\n      if (ch !== zeroWidth) {\n        filteredChars.push(chars[i]);\n        extractedChars.push(ch);\n      }\n    }\n\n    var characterMap = classify(extractedChars);\n    return findWords(filteredChars, extractedChars, characterMap, options);\n  };\n\n  var getWords = getWords$1;\n  var global$1 = tinymce.util.Tools.resolve('tinymce.dom.TreeWalker');\n\n  var getText = function getText(node, schema) {\n    var blockElements = schema.getBlockElements();\n    var shortEndedElements = schema.getShortEndedElements();\n\n    var isNewline = function isNewline(node) {\n      return blockElements[node.nodeName] || shortEndedElements[node.nodeName];\n    };\n\n    var textBlocks = [];\n    var txt = '';\n    var treeWalker = new global$1(node, node);\n\n    while (node = treeWalker.next()) {\n      if (node.nodeType === 3) {\n        txt += removeZwsp$1(node.data);\n      } else if (isNewline(node) && txt.length) {\n        textBlocks.push(txt);\n        txt = '';\n      }\n    }\n\n    if (txt.length) {\n      textBlocks.push(txt);\n    }\n\n    return textBlocks;\n  };\n\n  var removeZwsp = function removeZwsp(text) {\n    return text.replace(/\\u200B/g, '');\n  };\n\n  var strLen = function strLen(str) {\n    return str.replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, '_').length;\n  };\n\n  var countWords = function countWords(node, schema) {\n    var text = removeZwsp(getText(node, schema).join('\\n'));\n    return getWords(text.split(''), identity).length;\n  };\n\n  var countCharacters = function countCharacters(node, schema) {\n    var text = getText(node, schema).join('');\n    return strLen(text);\n  };\n\n  var countCharactersWithoutSpaces = function countCharactersWithoutSpaces(node, schema) {\n    var text = getText(node, schema).join('').replace(/\\s/g, '');\n    return strLen(text);\n  };\n\n  var createBodyCounter = function createBodyCounter(editor, count) {\n    return function () {\n      return count(editor.getBody(), editor.schema);\n    };\n  };\n\n  var createSelectionCounter = function createSelectionCounter(editor, count) {\n    return function () {\n      return count(editor.selection.getRng().cloneContents(), editor.schema);\n    };\n  };\n\n  var createBodyWordCounter = function createBodyWordCounter(editor) {\n    return createBodyCounter(editor, countWords);\n  };\n\n  var get = function get(editor) {\n    return {\n      body: {\n        getWordCount: createBodyWordCounter(editor),\n        getCharacterCount: createBodyCounter(editor, countCharacters),\n        getCharacterCountWithoutSpaces: createBodyCounter(editor, countCharactersWithoutSpaces)\n      },\n      selection: {\n        getWordCount: createSelectionCounter(editor, countWords),\n        getCharacterCount: createSelectionCounter(editor, countCharacters),\n        getCharacterCountWithoutSpaces: createSelectionCounter(editor, countCharactersWithoutSpaces)\n      },\n      getCount: createBodyWordCounter(editor)\n    };\n  };\n\n  var open = function open(editor, api) {\n    editor.windowManager.open({\n      title: 'Word Count',\n      body: {\n        type: 'panel',\n        items: [{\n          type: 'table',\n          header: ['Count', 'Document', 'Selection'],\n          cells: [['Words', String(api.body.getWordCount()), String(api.selection.getWordCount())], ['Characters (no spaces)', String(api.body.getCharacterCountWithoutSpaces()), String(api.selection.getCharacterCountWithoutSpaces())], ['Characters', String(api.body.getCharacterCount()), String(api.selection.getCharacterCount())]]\n        }]\n      },\n      buttons: [{\n        type: 'cancel',\n        name: 'close',\n        text: 'Close',\n        primary: true\n      }]\n    });\n  };\n\n  var register$1 = function register$1(editor, api) {\n    editor.addCommand('mceWordCount', function () {\n      return open(editor, api);\n    });\n  };\n\n  var global = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n  var fireWordCountUpdate = function fireWordCountUpdate(editor, api) {\n    editor.fire('wordCountUpdate', {\n      wordCount: {\n        words: api.body.getWordCount(),\n        characters: api.body.getCharacterCount(),\n        charactersWithoutSpaces: api.body.getCharacterCountWithoutSpaces()\n      }\n    });\n  };\n\n  var updateCount = function updateCount(editor, api) {\n    fireWordCountUpdate(editor, api);\n  };\n\n  var setup = function setup(editor, api, delay) {\n    var debouncedUpdate = global.debounce(function () {\n      return updateCount(editor, api);\n    }, delay);\n    editor.on('init', function () {\n      updateCount(editor, api);\n      global.setEditorTimeout(editor, function () {\n        editor.on('SetContent BeforeAddUndo Undo Redo ViewUpdate keyup', debouncedUpdate);\n      }, 0);\n    });\n  };\n\n  var register = function register(editor) {\n    var onAction = function onAction() {\n      return editor.execCommand('mceWordCount');\n    };\n\n    editor.ui.registry.addButton('wordcount', {\n      tooltip: 'Word count',\n      icon: 'character-count',\n      onAction: onAction\n    });\n    editor.ui.registry.addMenuItem('wordcount', {\n      text: 'Word count',\n      icon: 'character-count',\n      onAction: onAction\n    });\n  };\n\n  function Plugin(delay) {\n    if (delay === void 0) {\n      delay = 300;\n    }\n\n    global$2.add('wordcount', function (editor) {\n      var api = get(editor);\n      register$1(editor, api);\n      register(editor);\n      setup(editor, api, delay);\n      return api;\n    });\n  }\n\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/wordcount/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/wordcount/plugin.js"]();
/******/ 	
/******/ })()
;