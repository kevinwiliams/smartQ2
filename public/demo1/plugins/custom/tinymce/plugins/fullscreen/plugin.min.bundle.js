/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/fullscreen/plugin.min.js":
/*!***************************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/fullscreen/plugin.min.js ***!
  \***************************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n!function () {\n  \"use strict\";\n\n  function a(e) {\n    var n = e;\n    return {\n      get: function get() {\n        return n;\n      },\n      set: function set(e) {\n        n = e;\n      }\n    };\n  }\n\n  function e(t) {\n    return function (e) {\n      return r = _typeof(n = e), (null === n ? \"null\" : \"object\" == r && (Array.prototype.isPrototypeOf(n) || n.constructor && \"Array\" === n.constructor.name) ? \"array\" : \"object\" == r && (String.prototype.isPrototypeOf(n) || n.constructor && \"String\" === n.constructor.name) ? \"string\" : r) === t;\n      var n, r;\n    };\n  }\n\n  function n(n) {\n    return function (e) {\n      return _typeof(e) === n;\n    };\n  }\n\n  function c(e) {\n    return !(null == e);\n  }\n\n  function s() {}\n\n  function y(e) {\n    return function () {\n      return e;\n    };\n  }\n\n  function r(e) {\n    return e;\n  }\n\n  var t = tinymce.util.Tools.resolve(\"tinymce.PluginManager\"),\n      l = e(\"string\"),\n      d = e(\"array\"),\n      o = n(\"boolean\"),\n      h = n(\"function\"),\n      i = n(\"number\");\n\n  function u() {\n    return m;\n  }\n\n  var v = y(!1),\n      f = y(!0),\n      m = {\n    fold: function fold(e, n) {\n      return e();\n    },\n    isSome: v,\n    isNone: f,\n    getOr: r,\n    getOrThunk: g,\n    getOrDie: function getOrDie(e) {\n      throw new Error(e || \"error: getOrDie called on none.\");\n    },\n    getOrNull: y(null),\n    getOrUndefined: y(void 0),\n    or: r,\n    orThunk: g,\n    map: u,\n    each: s,\n    bind: u,\n    exists: v,\n    forall: f,\n    filter: function filter() {\n      return m;\n    },\n    toArray: function toArray() {\n      return [];\n    },\n    toString: y(\"none()\")\n  };\n\n  function g(e) {\n    return e();\n  }\n\n  function p(e) {\n    function n() {\n      return r.get().each(e);\n    }\n\n    var r = a(A.none());\n    return {\n      clear: function clear() {\n        n(), r.set(A.none());\n      },\n      isSet: function isSet() {\n        return r.get().isSome();\n      },\n      get: function get() {\n        return r.get();\n      },\n      set: function set(e) {\n        n(), r.set(A.some(e));\n      }\n    };\n  }\n\n  function w() {\n    return p(function (e) {\n      return e.unbind();\n    });\n  }\n\n  function C(e, n) {\n    for (var r = e.length, t = new Array(r), o = 0; o < r; o++) {\n      var i = e[o];\n      t[o] = n(i, o);\n    }\n\n    return t;\n  }\n\n  function D(e, n) {\n    for (var r = 0, t = e.length; r < t; r++) {\n      n(e[r], r);\n    }\n  }\n\n  function b(e, n) {\n    for (var r = [], t = 0, o = e.length; t < o; t++) {\n      var i = e[t];\n      n(i, t) && r.push(i);\n    }\n\n    return r;\n  }\n\n  function S(e, n) {\n    return function (e, n, r) {\n      for (var t = 0, o = e.length; t < o; t++) {\n        var i = e[t];\n        if (n(i, t)) return A.some(i);\n        if (r(i, t)) break;\n      }\n\n      return A.none();\n    }(e, n, v);\n  }\n\n  function x(e, n) {\n    return -1 !== e.indexOf(n);\n  }\n\n  function E(e) {\n    return void 0 !== e.style && h(e.style.getPropertyValue);\n  }\n\n  function O(e) {\n    if (null == e) throw new Error(\"Node cannot be null or undefined\");\n    return {\n      dom: e\n    };\n  }\n\n  var F = function F(r) {\n    function e() {\n      return o;\n    }\n\n    function n(e) {\n      return e(r);\n    }\n\n    var t = y(r),\n        o = {\n      fold: function fold(e, n) {\n        return n(r);\n      },\n      isSome: f,\n      isNone: v,\n      getOr: t,\n      getOrThunk: t,\n      getOrDie: t,\n      getOrNull: t,\n      getOrUndefined: t,\n      or: e,\n      orThunk: e,\n      map: function map(e) {\n        return F(e(r));\n      },\n      each: function each(e) {\n        e(r);\n      },\n      bind: n,\n      exists: n,\n      forall: n,\n      filter: function filter(e) {\n        return e(r) ? o : m;\n      },\n      toArray: function toArray() {\n        return [r];\n      },\n      toString: function toString() {\n        return \"some(\" + r + \")\";\n      }\n    };\n    return o;\n  },\n      A = {\n    some: F,\n    none: u,\n    from: function from(e) {\n      return null == e ? m : F(e);\n    }\n  },\n      _T = function T() {\n    return (_T = Object.assign || function (e) {\n      for (var n, r = 1, t = arguments.length; r < t; r++) {\n        for (var o in n = arguments[r]) {\n          Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);\n        }\n      }\n\n      return e;\n    }).apply(this, arguments);\n  },\n      k = Array.prototype.push,\n      R = Object.keys,\n      L = {\n    fromHtml: function fromHtml(e, n) {\n      var r = (n || document).createElement(\"div\");\n      if (r.innerHTML = e, !r.hasChildNodes() || 1 < r.childNodes.length) throw console.error(\"HTML does not have a single root node\", e), new Error(\"HTML must have a single root node\");\n      return O(r.childNodes[0]);\n    },\n    fromTag: function fromTag(e, n) {\n      var r = (n || document).createElement(e);\n      return O(r);\n    },\n    fromText: function fromText(e, n) {\n      var r = (n || document).createTextNode(e);\n      return O(r);\n    },\n    fromDom: O,\n    fromPoint: function fromPoint(e, n, r) {\n      return A.from(e.dom.elementFromPoint(n, r)).map(O);\n    }\n  };\n\n  function P(n) {\n    return function (e) {\n      return e.dom.nodeType === n;\n    };\n  }\n\n  function M(t, e) {\n    return function (e) {\n      for (var n = 0; n < e.length; n++) {\n        var r = function (n) {\n          var r = n.brand.toLowerCase();\n          return S(t, function (e) {\n            var n;\n            return r === (null === (n = e.brand) || void 0 === n ? void 0 : n.toLowerCase());\n          }).map(function (e) {\n            return {\n              current: e.name,\n              version: he.nu(parseInt(n.version, 10), 0)\n            };\n          });\n        }(e[n]);\n\n        if (r.isSome()) return r;\n      }\n\n      return A.none();\n    }(e.brands);\n  }\n\n  function N(e, n) {\n    var r = String(n).toLowerCase();\n    return S(e, function (e) {\n      return e.search(r);\n    });\n  }\n\n  function H(n) {\n    return function (e) {\n      return x(e, n);\n    };\n  }\n\n  function W(e) {\n    return window.matchMedia(e).matches;\n  }\n\n  function q(e, n) {\n    var r = e.dom;\n    if (1 !== r.nodeType) return !1;\n    var t = r;\n    if (void 0 !== t.matches) return t.matches(n);\n    if (void 0 !== t.msMatchesSelector) return t.msMatchesSelector(n);\n    if (void 0 !== t.webkitMatchesSelector) return t.webkitMatchesSelector(n);\n    if (void 0 !== t.mozMatchesSelector) return t.mozMatchesSelector(n);\n    throw new Error(\"Browser lacks native selectors\");\n  }\n\n  function I(e) {\n    return L.fromDom(e.dom.ownerDocument);\n  }\n\n  function j(e) {\n    var n,\n        r = Re(e);\n    return me(n = r) && c(n.dom.host) ? A.some(r) : A.none();\n  }\n\n  function B(e) {\n    return L.fromDom(e.dom.host);\n  }\n\n  function V(e, n, r) {\n    !function (e, n, r) {\n      if (!(l(r) || o(r) || i(r))) throw console.error(\"Invalid call to Attribute.set. Key \", n, \":: Value \", r, \":: Element \", e), new Error(\"Attribute value was not simple\");\n      e.setAttribute(n, r + \"\");\n    }(e.dom, n, r);\n  }\n\n  function X(e, n) {\n    var r = e.dom.getAttribute(n);\n    return null === r ? void 0 : r;\n  }\n\n  function _(e, n) {\n    e.dom.removeAttribute(n);\n  }\n\n  function z(e, n) {\n    var u = e.dom;\n    !function (e) {\n      for (var n, r = R(e), t = 0, o = r.length; t < o; t++) {\n        var i = r[t];\n        n = e[i], function (e, n, r) {\n          if (!l(r)) throw console.error(\"Invalid call to CSS.set. Property \", n, \":: Value \", r, \":: Element \", e), new Error(\"CSS value must be a string: \" + r);\n          E(e) && e.style.setProperty(n, r);\n        }(u, i, n);\n      }\n    }(n);\n  }\n\n  function U(e) {\n    function n() {\n      return e.stopPropagation();\n    }\n\n    function r() {\n      return e.preventDefault();\n    }\n\n    var t,\n        o,\n        i = L.fromDom(function (e) {\n      if (Ae() && c(e.target)) {\n        var n = L.fromDom(e.target);\n\n        if (se(n) && Le(n) && e.composed && e.composedPath) {\n          var r = e.composedPath();\n          if (r) return 0 < (t = r).length ? A.some(t[0]) : A.none();\n        }\n      }\n\n      var t;\n      return A.from(e.target);\n    }(e).getOr(e.target)),\n        u = (t = r, o = n, function () {\n      for (var e = [], n = 0; n < arguments.length; n++) {\n        e[n] = arguments[n];\n      }\n\n      return t(o.apply(null, e));\n    });\n    return {\n      target: i,\n      x: e.clientX,\n      y: e.clientY,\n      stop: n,\n      prevent: r,\n      kill: u,\n      raw: e\n    };\n  }\n\n  function $(e, n, r) {\n    return o = n, i = !1, u = He, c = r, a = function a(e) {\n      u(e) && c(U(e));\n    }, (t = e).dom.addEventListener(o, a, i), {\n      unbind: function (t) {\n        for (var o = [], e = 1; e < arguments.length; e++) {\n          o[e - 1] = arguments[e];\n        }\n\n        return function () {\n          for (var e = [], n = 0; n < arguments.length; n++) {\n            e[n] = arguments[n];\n          }\n\n          var r = o.concat(e);\n          return t.apply(null, r);\n        };\n      }(Ne, t, o, a, i)\n    };\n    var t, o, i, u, c, a;\n  }\n\n  function K(e) {\n    var n = void 0 === e ? window : e;\n    return ke().browser.isFirefox() ? A.none() : A.from(n.visualViewport);\n  }\n\n  function Y(e, n, r, t) {\n    return {\n      x: e,\n      y: n,\n      width: r,\n      height: t,\n      right: e + r,\n      bottom: n + t\n    };\n  }\n\n  function G(r, t, e) {\n    return K(e).map(function (e) {\n      function n(e) {\n        return t(U(e));\n      }\n\n      return e.addEventListener(r, n), {\n        unbind: function unbind() {\n          return e.removeEventListener(r, n);\n        }\n      };\n    }).getOrThunk(function () {\n      return {\n        unbind: s\n      };\n    });\n  }\n\n  function J(e, n) {\n    e.fire(\"FullscreenStateChanged\", {\n      state: n\n    });\n  }\n\n  function Q(e) {\n    return e.getParam(\"fullscreen_native\", !1, \"boolean\");\n  }\n\n  function Z(e) {\n    return e.dom === (void 0 !== (n = I(e).dom).fullscreenElement ? n.fullscreenElement : void 0 !== n.msFullscreenElement ? n.msFullscreenElement : void 0 !== n.webkitFullscreenElement ? n.webkitFullscreenElement : null);\n    var n;\n  }\n\n  function ee(e, n) {\n    return t = function t(e) {\n      return q(e, n);\n    }, b((r = e, A.from(r.dom.parentNode).map(L.fromDom).map(Ce).map(function (e) {\n      return b(e, function (e) {\n        return r.dom !== e.dom;\n      });\n    }).getOr([])), t);\n    var r, t;\n  }\n\n  function ne(o, e, n) {\n    function r(t) {\n      return function (e) {\n        var n = X(e, \"style\"),\n            r = void 0 === n ? \"no-styles\" : n.trim();\n        r === t || (V(e, Ve, r), z(e, o.parseStyle(t)));\n      };\n    }\n\n    var t,\n        i,\n        u,\n        c,\n        a,\n        s,\n        l = (s = function s(e) {\n      return q(e, \"*\");\n    }, b(function (e, n) {\n      for (var r = h(n) ? n : v, t = e.dom, o = []; null !== t.parentNode && void 0 !== t.parentNode;) {\n        var i = t.parentNode,\n            u = L.fromDom(i);\n        if (o.push(u), !0 === r(u)) break;\n        t = i;\n      }\n\n      return o;\n    }(e, void 0), s)),\n        f = function (e) {\n      for (var n = [], r = 0, t = e.length; r < t; ++r) {\n        if (!d(e[r])) throw new Error(\"Arr.flatten item \" + r + \" was not an array, input: \" + e);\n        k.apply(n, e[r]);\n      }\n\n      return n;\n    }(C(l, function (e) {\n      return ee(e, \"*:not(.tox-silver-sink)\");\n    })),\n        m = (i = \"background-color\", u = (t = n).dom, void 0 !== (a = \"\" !== (c = window.getComputedStyle(u).getPropertyValue(i)) || Pe(t) ? c : Me(u, i)) && \"\" !== a ? \"background-color:\" + a + \"!important\" : \"background-color:rgb(255,255,255)!important;\");\n\n    D(f, r(\"display:none!important;\")), D(l, r(Xe + _e + m)), r((!0 === ze ? \"\" : Xe) + _e + m)(e);\n  }\n\n  function re(r, t) {\n    return function (n) {\n      function e(e) {\n        return n.setActive(e.state);\n      }\n\n      return n.setActive(null !== t.get()), r.on(\"FullscreenStateChanged\", e), function () {\n        return r.off(\"FullscreenStateChanged\", e);\n      };\n    };\n  }\n\n  \"undefined\" != typeof window || Function(\"return this;\")();\n\n  function te() {\n    return de(0, 0);\n  }\n\n  function oe(e) {\n    function n(e) {\n      return function () {\n        return r === e;\n      };\n    }\n\n    var r = e.current,\n        t = e.version;\n    return {\n      current: r,\n      version: t,\n      isEdge: n(\"Edge\"),\n      isChrome: n(\"Chrome\"),\n      isIE: n(\"IE\"),\n      isOpera: n(\"Opera\"),\n      isFirefox: n(pe),\n      isSafari: n(\"Safari\")\n    };\n  }\n\n  function ie(e) {\n    function n(e) {\n      return function () {\n        return r === e;\n      };\n    }\n\n    var r = e.current,\n        t = e.version;\n    return {\n      current: r,\n      version: t,\n      isWindows: n(be),\n      isiOS: n(\"iOS\"),\n      isAndroid: n(Se),\n      isOSX: n(\"OSX\"),\n      isLinux: n(\"Linux\"),\n      isSolaris: n(xe),\n      isFreeBSD: n(Ee),\n      isChromeOS: n(Oe)\n    };\n  }\n\n  var ue,\n      ce,\n      ae,\n      se = P(1),\n      le = P(3),\n      fe = P(9),\n      me = P(11),\n      de = function de(e, n) {\n    return {\n      major: e,\n      minor: n\n    };\n  },\n      he = {\n    nu: de,\n    detect: function detect(e, n) {\n      var r,\n          t,\n          o = String(n).toLowerCase();\n      return 0 === e.length ? te() : (t = function (e, n) {\n        for (var r = 0; r < e.length; r++) {\n          var t = e[r];\n          if (t.test(n)) return t;\n        }\n      }(e, r = o)) ? de(i(1), i(2)) : {\n        major: 0,\n        minor: 0\n      };\n\n      function i(e) {\n        return Number(r.replace(t, \"$\" + e));\n      }\n    },\n    unknown: te\n  },\n      ve = /.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/,\n      ge = {\n    browsers: y([{\n      name: \"Edge\",\n      versionRegexes: [/.*?edge\\/ ?([0-9]+)\\.([0-9]+)$/],\n      search: function search(e) {\n        return x(e, \"edge/\") && x(e, \"chrome\") && x(e, \"safari\") && x(e, \"applewebkit\");\n      }\n    }, {\n      name: \"Chrome\",\n      brand: \"Chromium\",\n      versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/, ve],\n      search: function search(e) {\n        return x(e, \"chrome\") && !x(e, \"chromeframe\");\n      }\n    }, {\n      name: \"IE\",\n      versionRegexes: [/.*?msie\\ ?([0-9]+)\\.([0-9]+).*/, /.*?rv:([0-9]+)\\.([0-9]+).*/],\n      search: function search(e) {\n        return x(e, \"msie\") || x(e, \"trident\");\n      }\n    }, {\n      name: \"Opera\",\n      versionRegexes: [ve, /.*?opera\\/([0-9]+)\\.([0-9]+).*/],\n      search: H(\"opera\")\n    }, {\n      name: \"Firefox\",\n      versionRegexes: [/.*?firefox\\/\\ ?([0-9]+)\\.([0-9]+).*/],\n      search: H(\"firefox\")\n    }, {\n      name: \"Safari\",\n      versionRegexes: [ve, /.*?cpu os ([0-9]+)_([0-9]+).*/],\n      search: function search(e) {\n        return (x(e, \"safari\") || x(e, \"mobile/\")) && x(e, \"applewebkit\");\n      }\n    }]),\n    oses: y([{\n      name: \"Windows\",\n      search: H(\"win\"),\n      versionRegexes: [/.*?windows\\ nt\\ ?([0-9]+)\\.([0-9]+).*/]\n    }, {\n      name: \"iOS\",\n      search: function search(e) {\n        return x(e, \"iphone\") || x(e, \"ipad\");\n      },\n      versionRegexes: [/.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/, /.*cpu os ([0-9]+)_([0-9]+).*/, /.*cpu iphone os ([0-9]+)_([0-9]+).*/]\n    }, {\n      name: \"Android\",\n      search: H(\"android\"),\n      versionRegexes: [/.*?android\\ ?([0-9]+)\\.([0-9]+).*/]\n    }, {\n      name: \"OSX\",\n      search: H(\"mac os x\"),\n      versionRegexes: [/.*?mac\\ os\\ x\\ ?([0-9]+)_([0-9]+).*/]\n    }, {\n      name: \"Linux\",\n      search: H(\"linux\"),\n      versionRegexes: []\n    }, {\n      name: \"Solaris\",\n      search: H(\"sunos\"),\n      versionRegexes: []\n    }, {\n      name: \"FreeBSD\",\n      search: H(\"freebsd\"),\n      versionRegexes: []\n    }, {\n      name: \"ChromeOS\",\n      search: H(\"cros\"),\n      versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/]\n    }])\n  },\n      pe = \"Firefox\",\n      we = function we() {\n    return oe({\n      current: void 0,\n      version: he.unknown()\n    });\n  },\n      ye = oe,\n      be = (y(\"Edge\"), y(\"Chrome\"), y(\"IE\"), y(\"Opera\"), y(pe), y(\"Safari\"), \"Windows\"),\n      Se = \"Android\",\n      xe = \"Solaris\",\n      Ee = \"FreeBSD\",\n      Oe = \"ChromeOS\",\n      Fe = function Fe() {\n    return ie({\n      current: void 0,\n      version: he.unknown()\n    });\n  },\n      Te = ie,\n      ke = (y(be), y(\"iOS\"), y(Se), y(\"Linux\"), y(\"OSX\"), y(xe), y(Ee), y(Oe), ae = !(ue = function ue() {\n    return e = navigator.userAgent, n = A.from(navigator.userAgentData), r = W, v = ge.browsers(), g = ge.oses(), p = n.bind(function (e) {\n      return M(v, e);\n    }).orThunk(function () {\n      return N(v, r = e).map(function (e) {\n        var n = he.detect(e.versionRegexes, r);\n        return {\n          current: e.name,\n          version: n\n        };\n      });\n      var r;\n    }).fold(we, ye), w = N(g, t = e).map(function (e) {\n      var n = he.detect(e.versionRegexes, t);\n      return {\n        current: e.name,\n        version: n\n      };\n    }).fold(Fe, Te), {\n      browser: p,\n      os: w,\n      deviceType: (i = p, u = e, c = r, a = (o = w).isiOS() && !0 === /ipad/i.test(u), s = o.isiOS() && !a, f = (l = o.isiOS() || o.isAndroid()) || c(\"(pointer:coarse)\"), m = a || !s && l && c(\"(min-device-width:768px)\"), d = s || l && !m, h = i.isSafari() && o.isiOS() && !1 === /safari/i.test(u), {\n        isiPad: y(a),\n        isiPhone: y(s),\n        isTablet: y(m),\n        isPhone: y(d),\n        isTouch: y(f),\n        isAndroid: o.isAndroid,\n        isiOS: o.isiOS,\n        isWebView: y(h),\n        isDesktop: y(!d && !m && !h)\n      })\n    };\n    var e, n, r, t, o, i, u, c, a, s, l, f, m, d, h, v, g, p, w;\n  }), function () {\n    for (var e = [], n = 0; n < arguments.length; n++) {\n      e[n] = arguments[n];\n    }\n\n    return ae || (ae = !0, ce = ue.apply(null, e)), ce;\n  }),\n      Ce = function Ce(e) {\n    return C(e.dom.childNodes, L.fromDom);\n  },\n      De = h(Element.prototype.attachShadow) && h(Node.prototype.getRootNode),\n      Ae = y(De),\n      Re = De ? function (e) {\n    return L.fromDom(e.dom.getRootNode());\n  } : function (e) {\n    return fe(e) ? e : I(e);\n  },\n      Le = function Le(e) {\n    return c(e.dom.shadowRoot);\n  },\n      Pe = function Pe(e) {\n    var n = le(e) ? e.dom.parentNode : e.dom;\n    if (null == n || null === n.ownerDocument) return !1;\n    var r,\n        t,\n        o = n.ownerDocument;\n    return j(L.fromDom(n)).fold(function () {\n      return o.body.contains(n);\n    }, (r = Pe, t = B, function (e) {\n      return r(t(e));\n    }));\n  },\n      Me = function Me(e, n) {\n    return E(e) ? e.style.getPropertyValue(n) : \"\";\n  },\n      Ne = function Ne(e, n, r, t) {\n    e.dom.removeEventListener(n, r, t);\n  },\n      He = f,\n      We = function We(r, t) {\n    return {\n      left: r,\n      top: t,\n      translate: function translate(e, n) {\n        return We(r + e, t + n);\n      }\n    };\n  },\n      qe = We,\n      Ie = tinymce.util.Tools.resolve(\"tinymce.dom.DOMUtils\"),\n      je = tinymce.util.Tools.resolve(\"tinymce.Env\"),\n      Be = tinymce.util.Tools.resolve(\"tinymce.util.Delay\"),\n      Ve = \"data-ephox-mobile-fullscreen-style\",\n      Xe = \"position:absolute!important;\",\n      _e = \"top:0!important;left:0!important;margin:0!important;padding:0!important;width:100%!important;height:100%!important;overflow:visible!important;\",\n      ze = je.os.isAndroid(),\n      Ue = Ie.DOM,\n      $e = K().fold(function () {\n    return {\n      bind: s,\n      unbind: s\n    };\n  }, function (n) {\n    var r,\n        t = (r = p(s), _T(_T({}, r), {\n      on: function on(e) {\n        return r.get().each(e);\n      }\n    })),\n        o = w(),\n        i = w(),\n        u = Be.throttle(function () {\n      document.body.scrollTop = 0, document.documentElement.scrollTop = 0, window.requestAnimationFrame(function () {\n        t.on(function (e) {\n          return z(e, {\n            top: n.offsetTop + \"px\",\n            left: n.offsetLeft + \"px\",\n            height: n.height + \"px\",\n            width: n.width + \"px\"\n          });\n        });\n      });\n    }, 50);\n    return {\n      bind: function bind(e) {\n        t.set(e), u(), o.set(G(\"resize\", u)), i.set(G(\"scroll\", u));\n      },\n      unbind: function unbind() {\n        t.on(function () {\n          o.clear(), i.clear();\n        }), t.clear();\n      }\n    };\n  }),\n      Ke = function Ke(o, i) {\n    function u(n) {\n      n(w, \"tox-fullscreen\"), n(y, \"tox-fullscreen\"), n(b, \"tox-fullscreen\"), j(S).map(function (e) {\n        return B(e).dom;\n      }).each(function (e) {\n        n(e, \"tox-fullscreen\"), n(e, \"tox-shadowhost\");\n      });\n    }\n\n    function e() {\n      var r, e, n, t;\n      F && (r = o.dom, e = \"[\" + Ve + \"]\", D(1 !== (n = t = document).nodeType && 9 !== n.nodeType && 11 !== n.nodeType || 0 === n.childElementCount ? [] : C(t.querySelectorAll(e), L.fromDom), function (e) {\n        var n = X(e, Ve);\n        \"no-styles\" !== n ? z(e, r.parseStyle(n)) : _(e, \"style\"), _(e, Ve);\n      })), u(Ue.removeClass), $e.unbind(), A.from(i.get()).each(function (e) {\n        return e.fullscreenChangeHandler.unbind();\n      });\n    }\n\n    var n,\n        r,\n        t,\n        c,\n        a,\n        s,\n        l,\n        f,\n        m,\n        d,\n        h,\n        v,\n        g,\n        p,\n        w = document.body,\n        y = document.documentElement,\n        b = o.getContainer(),\n        S = L.fromDom(b),\n        x = j(s = L.fromDom(o.getElement())).map(B).getOrThunk(function () {\n      var e = I(s).dom.body;\n      if (null == e) throw new Error(\"Body is not available yet\");\n      return L.fromDom(e);\n    }),\n        E = i.get(),\n        O = L.fromDom(o.getBody()),\n        F = je.deviceType.isTouch(),\n        T = b.style,\n        k = o.iframeElement.style;\n    E ? (E.fullscreenChangeHandler.unbind(), Q(o) && Z(x) && ((c = I(x).dom).exitFullscreen ? c.exitFullscreen() : c.msExitFullscreen ? c.msExitFullscreen() : c.webkitCancelFullScreen && c.webkitCancelFullScreen()), k.width = E.iframeWidth, k.height = E.iframeHeight, T.width = E.containerWidth, T.height = E.containerHeight, T.top = E.containerTop, T.left = E.containerLeft, e(), t = E.scrollPos, window.scrollTo(t.x, t.y), i.set(null), J(o, !1), o.off(\"remove\", e)) : (n = $(I(x), void 0 !== document.fullscreenElement ? \"fullscreenchange\" : void 0 !== document.msFullscreenElement ? \"MSFullscreenChange\" : void 0 !== document.webkitFullscreenElement ? \"webkitfullscreenchange\" : \"fullscreenchange\", function (e) {\n      Q(o) && (Z(x) || null === i.get() || Ke(o, i));\n    }), r = {\n      scrollPos: (l = window, v = void 0 === l ? window : l, g = v.document, d = (m = void 0 !== (f = L.fromDom(g)) ? f.dom : document).body.scrollLeft || m.documentElement.scrollLeft, h = m.body.scrollTop || m.documentElement.scrollTop, p = qe(d, h), K(v).fold(function () {\n        var e = v.document.documentElement,\n            n = e.clientWidth,\n            r = e.clientHeight;\n        return Y(p.left, p.top, n, r);\n      }, function (e) {\n        return Y(Math.max(e.pageLeft, p.left), Math.max(e.pageTop, p.top), e.width, e.height);\n      })),\n      containerWidth: T.width,\n      containerHeight: T.height,\n      containerTop: T.top,\n      containerLeft: T.left,\n      iframeWidth: k.width,\n      iframeHeight: k.height,\n      fullscreenChangeHandler: n\n    }, F && ne(o.dom, S, O), k.width = k.height = \"100%\", T.width = T.height = \"\", u(Ue.addClass), $e.bind(S), o.on(\"remove\", e), i.set(r), Q(o) && ((a = x.dom).requestFullscreen ? a.requestFullscreen() : a.msRequestFullscreen ? a.msRequestFullscreen() : a.webkitRequestFullScreen && a.webkitRequestFullScreen()), J(o, !0));\n  };\n\n  t.add(\"fullscreen\", function (e) {\n    var n,\n        r,\n        t,\n        o,\n        i,\n        u = a(null);\n    return e.inline || (r = u, (n = e).addCommand(\"mceFullScreen\", function () {\n      Ke(n, r);\n    }), (t = e).ui.registry.addToggleMenuItem(\"fullscreen\", {\n      text: \"Fullscreen\",\n      icon: \"fullscreen\",\n      shortcut: \"Meta+Shift+F\",\n      onAction: c,\n      onSetup: re(t, o = u)\n    }), t.ui.registry.addToggleButton(\"fullscreen\", {\n      tooltip: \"Fullscreen\",\n      icon: \"fullscreen\",\n      onAction: c,\n      onSetup: re(t, o)\n    }), e.addShortcut(\"Meta+Shift+F\", \"\", \"mceFullScreen\")), i = u, {\n      isFullscreen: function isFullscreen() {\n        return null !== i.get();\n      }\n    };\n\n    function c() {\n      return t.execCommand(\"mceFullScreen\");\n    }\n  });\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/fullscreen/plugin.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/fullscreen/plugin.min.js"]();
/******/ 	
/******/ })()
;