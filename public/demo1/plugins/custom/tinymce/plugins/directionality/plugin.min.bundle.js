/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/directionality/plugin.min.js":
/*!*******************************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/directionality/plugin.min.js ***!
  \*******************************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n!function () {\n  \"use strict\";\n\n  function n(t) {\n    return function (n) {\n      return _typeof(n) === t;\n    };\n  }\n\n  function u(n) {\n    return function () {\n      return n;\n    };\n  }\n\n  function t(n) {\n    return n;\n  }\n\n  function r() {\n    return d;\n  }\n\n  var o,\n      e = tinymce.util.Tools.resolve(\"tinymce.PluginManager\"),\n      i = function i(n) {\n    return r = _typeof(t = n), (null === t ? \"null\" : \"object\" == r && (Array.prototype.isPrototypeOf(t) || t.constructor && \"Array\" === t.constructor.name) ? \"array\" : \"object\" == r && (String.prototype.isPrototypeOf(t) || t.constructor && \"String\" === t.constructor.name) ? \"string\" : r) === o;\n    var t, r;\n  },\n      c = n(\"boolean\"),\n      f = n(\"function\"),\n      l = n(\"number\"),\n      a = u(!(o = \"string\")),\n      m = u(!0),\n      d = {\n    fold: function fold(n, t) {\n      return n();\n    },\n    isSome: a,\n    isNone: m,\n    getOr: t,\n    getOrThunk: s,\n    getOrDie: function getOrDie(n) {\n      throw new Error(n || \"error: getOrDie called on none.\");\n    },\n    getOrNull: u(null),\n    getOrUndefined: u(void 0),\n    or: t,\n    orThunk: s,\n    map: r,\n    each: function each() {},\n    bind: r,\n    exists: a,\n    forall: m,\n    filter: function filter() {\n      return d;\n    },\n    toArray: function toArray() {\n      return [];\n    },\n    toString: u(\"none()\")\n  };\n\n  function s(n) {\n    return n();\n  }\n\n  function g(n, t) {\n    for (var r = 0, o = n.length; r < o; r++) {\n      t(n[r], r);\n    }\n  }\n\n  function h(n, t) {\n    var r = n.dom;\n    if (1 !== r.nodeType) return !1;\n    var o = r;\n    if (void 0 !== o.matches) return o.matches(t);\n    if (void 0 !== o.msMatchesSelector) return o.msMatchesSelector(t);\n    if (void 0 !== o.webkitMatchesSelector) return o.webkitMatchesSelector(t);\n    if (void 0 !== o.mozMatchesSelector) return o.mozMatchesSelector(t);\n    throw new Error(\"Browser lacks native selectors\");\n  }\n\n  function v(n) {\n    if (null == n) throw new Error(\"Node cannot be null or undefined\");\n    return {\n      dom: n\n    };\n  }\n\n  var p = function p(r) {\n    function n() {\n      return e;\n    }\n\n    function t(n) {\n      return n(r);\n    }\n\n    var o = u(r),\n        e = {\n      fold: function fold(n, t) {\n        return t(r);\n      },\n      isSome: m,\n      isNone: a,\n      getOr: o,\n      getOrThunk: o,\n      getOrDie: o,\n      getOrNull: o,\n      getOrUndefined: o,\n      or: n,\n      orThunk: n,\n      map: function map(n) {\n        return p(n(r));\n      },\n      each: function each(n) {\n        n(r);\n      },\n      bind: t,\n      exists: t,\n      forall: t,\n      filter: function filter(n) {\n        return n(r) ? e : d;\n      },\n      toArray: function toArray() {\n        return [r];\n      },\n      toString: function toString() {\n        return \"some(\" + r + \")\";\n      }\n    };\n    return e;\n  },\n      y = {\n    some: p,\n    none: r,\n    from: function from(n) {\n      return null == n ? d : p(n);\n    }\n  },\n      w = {\n    fromHtml: function fromHtml(n, t) {\n      var r = (t || document).createElement(\"div\");\n      if (r.innerHTML = n, !r.hasChildNodes() || 1 < r.childNodes.length) throw console.error(\"HTML does not have a single root node\", n), new Error(\"HTML must have a single root node\");\n      return v(r.childNodes[0]);\n    },\n    fromTag: function fromTag(n, t) {\n      var r = (t || document).createElement(n);\n      return v(r);\n    },\n    fromText: function fromText(n, t) {\n      var r = (t || document).createTextNode(n);\n      return v(r);\n    },\n    fromDom: v,\n    fromPoint: function fromPoint(n, t, r) {\n      return y.from(n.dom.elementFromPoint(t, r)).map(v);\n    }\n  };\n\n  function D(t) {\n    return function (n) {\n      return n.dom.nodeType === t;\n    };\n  }\n\n  function N(n, t, r) {\n    !function (n, t, r) {\n      if (!(i(r) || c(r) || l(r))) throw console.error(\"Invalid call to Attribute.set. Key \", t, \":: Value \", r, \":: Element \", n), new Error(\"Attribute value was not simple\");\n      n.setAttribute(t, r + \"\");\n    }(n.dom, t, r);\n  }\n\n  function T(n, t) {\n    n.dom.removeAttribute(t);\n  }\n\n  function S(n) {\n    return w.fromDom(n.dom.host);\n  }\n\n  function b(e, u, n) {\n    return function (n) {\n      for (var t = e.dom, r = f(n) ? n : a; t.parentNode;) {\n        var t = t.parentNode,\n            o = w.fromDom(t);\n        if (h(o, u)) return y.some(o);\n        if (r(o)) break;\n      }\n\n      return y.none();\n    }(n);\n  }\n\n  function O(n) {\n    return \"rtl\" === (r = \"direction\", o = (t = n).dom, \"\" !== (e = window.getComputedStyle(o).getPropertyValue(r)) || B(t) ? e : H(o, r)) ? \"rtl\" : \"ltr\";\n    var t, r, o, e;\n  }\n\n  function A(n, t) {\n    return r = function r(n) {\n      return h(n, t);\n    }, function (n, t) {\n      for (var r = [], o = 0, e = n.length; o < e; o++) {\n        var u = n[o];\n        t(u, o) && r.push(u);\n      }\n\n      return r;\n    }(function (n, t) {\n      for (var r = n.length, o = new Array(r), e = 0; e < r; e++) {\n        var u = n[e];\n        o[e] = t(u, e);\n      }\n\n      return o;\n    }(n.dom.childNodes, w.fromDom), r);\n    var r;\n  }\n\n  function C(n, u) {\n    var t = n.selection.getSelectedBlocks();\n    0 < t.length && (g(t, function (n) {\n      var t,\n          r = w.fromDom(n),\n          o = k(r),\n          e = (t = r, (o ? b(t, \"ol,ul\") : y.some(t)).getOr(t));\n      y.from(e.dom.parentNode).map(w.fromDom).filter(E).each(function (n) {\n        O(n) !== u ? N(e, \"dir\", u) : O(e) !== u && T(e, \"dir\"), o && g(A(e, \"li[dir]\"), function (n) {\n          return T(n, \"dir\"), 0;\n        });\n      });\n    }), n.nodeChanged());\n  }\n\n  function M(t, o) {\n    return function (r) {\n      function n(n) {\n        var t = w.fromDom(n.element);\n        r.setActive(O(t) === o);\n      }\n\n      return t.on(\"NodeChange\", n), function () {\n        return t.off(\"NodeChange\", n);\n      };\n    };\n  }\n\n  \"undefined\" != typeof window || Function(\"return this;\")();\n\n  function k(n) {\n    return E(n) && \"li\" === n.dom.nodeName.toLowerCase();\n  }\n\n  var E = D(1),\n      L = D(3),\n      P = D(9),\n      R = D(11),\n      x = f(Element.prototype.attachShadow) && f(Node.prototype.getRootNode) ? function (n) {\n    return w.fromDom(n.dom.getRootNode());\n  } : function (n) {\n    return P(n) ? n : w.fromDom(n.dom.ownerDocument);\n  },\n      B = function B(n) {\n    var t = L(n) ? n.dom.parentNode : n.dom;\n    if (null == t || null === t.ownerDocument) return !1;\n    var r,\n        o,\n        e,\n        u,\n        i,\n        c = t.ownerDocument;\n    return e = w.fromDom(t), i = x(e), (R(u = i) && null != u.dom.host ? y.some(i) : y.none()).fold(function () {\n      return c.body.contains(t);\n    }, (r = B, o = S, function (n) {\n      return r(o(n));\n    }));\n  },\n      H = function H(n, t) {\n    return void 0 !== n.style && f(n.style.getPropertyValue) ? n.style.getPropertyValue(t) : \"\";\n  };\n\n  e.add(\"directionality\", function (n) {\n    var t, r;\n    (t = n).addCommand(\"mceDirectionLTR\", function () {\n      C(t, \"ltr\");\n    }), t.addCommand(\"mceDirectionRTL\", function () {\n      C(t, \"rtl\");\n    }), (r = n).ui.registry.addToggleButton(\"ltr\", {\n      tooltip: \"Left to right\",\n      icon: \"ltr\",\n      onAction: function onAction() {\n        return r.execCommand(\"mceDirectionLTR\");\n      },\n      onSetup: M(r, \"ltr\")\n    }), r.ui.registry.addToggleButton(\"rtl\", {\n      tooltip: \"Right to left\",\n      icon: \"rtl\",\n      onAction: function onAction() {\n        return r.execCommand(\"mceDirectionRTL\");\n      },\n      onSetup: M(r, \"rtl\")\n    });\n  });\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/directionality/plugin.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/directionality/plugin.min.js"]();
/******/ 	
/******/ })()
;