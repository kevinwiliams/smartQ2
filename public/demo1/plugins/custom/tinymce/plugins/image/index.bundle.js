/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/image/index.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/image/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Exports the \"image\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/image')\n//   ES2015:\n//     import 'tinymce/plugins/image'\n__webpack_require__(/*! ./plugin.js */ \"./resources/assets/core/plugins/custom/tinymce/plugins/image/plugin.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL2ltYWdlL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQSxtQkFBTyxDQUFDLDJGQUFELENBQVAiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL2ltYWdlL2luZGV4LmpzP2FmMDEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRXhwb3J0cyB0aGUgXCJpbWFnZVwiIHBsdWdpbiBmb3IgdXNhZ2Ugd2l0aCBtb2R1bGUgbG9hZGVyc1xyXG4vLyBVc2FnZTpcclxuLy8gICBDb21tb25KUzpcclxuLy8gICAgIHJlcXVpcmUoJ3RpbnltY2UvcGx1Z2lucy9pbWFnZScpXHJcbi8vICAgRVMyMDE1OlxyXG4vLyAgICAgaW1wb3J0ICd0aW55bWNlL3BsdWdpbnMvaW1hZ2UnXHJcbnJlcXVpcmUoJy4vcGx1Z2luLmpzJyk7Il0sIm5hbWVzIjpbInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/image/index.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/image/plugin.js":
/*!******************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/image/plugin.js ***!
  \******************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var global$6 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) {\n          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n      }\n\n      return t;\n    };\n\n    return _assign.apply(this, arguments);\n  };\n\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n\n  var isType = function isType(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n\n  var isSimpleType = function isSimpleType(type) {\n    return function (value) {\n      return _typeof(value) === type;\n    };\n  };\n\n  var eq = function eq(t) {\n    return function (a) {\n      return t === a;\n    };\n  };\n\n  var isString = isType('string');\n  var isObject = isType('object');\n  var isArray = isType('array');\n  var isNull = eq(null);\n  var isBoolean = isSimpleType('boolean');\n\n  var isNullable = function isNullable(a) {\n    return a === null || a === undefined;\n  };\n\n  var isNonNullable = function isNonNullable(a) {\n    return !isNullable(a);\n  };\n\n  var isFunction = isSimpleType('function');\n  var isNumber = isSimpleType('number');\n\n  var noop = function noop() {};\n\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  var never = constant(false);\n  var always = constant(true);\n\n  var none = function none() {\n    return NONE;\n  };\n\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n\n  var some = function some(a) {\n    var constant_a = constant(a);\n\n    var self = function self() {\n      return me;\n    };\n\n    var bind = function bind(f) {\n      return f(a);\n    };\n\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n  var keys = Object.keys;\n  var hasOwnProperty = Object.hasOwnProperty;\n\n  var each = function each(obj, f) {\n    var props = keys(obj);\n\n    for (var k = 0, len = props.length; k < len; k++) {\n      var i = props[k];\n      var x = obj[i];\n      f(x, i);\n    }\n  };\n\n  var objAcc = function objAcc(r) {\n    return function (x, i) {\n      r[i] = x;\n    };\n  };\n\n  var internalFilter = function internalFilter(obj, pred, onTrue, onFalse) {\n    var r = {};\n    each(obj, function (x, i) {\n      (pred(x, i) ? onTrue : onFalse)(x, i);\n    });\n    return r;\n  };\n\n  var filter = function filter(obj, pred) {\n    var t = {};\n    internalFilter(obj, pred, objAcc(t), noop);\n    return t;\n  };\n\n  var has = function has(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  var hasNonNullableKey = function hasNonNullableKey(obj, key) {\n    return has(obj, key) && obj[key] !== undefined && obj[key] !== null;\n  };\n\n  var nativePush = Array.prototype.push;\n\n  var flatten = function flatten(xs) {\n    var r = [];\n\n    for (var i = 0, len = xs.length; i < len; ++i) {\n      if (!isArray(xs[i])) {\n        throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n      }\n\n      nativePush.apply(r, xs[i]);\n    }\n\n    return r;\n  };\n\n  var get = function get(xs, i) {\n    return i >= 0 && i < xs.length ? Optional.some(xs[i]) : Optional.none();\n  };\n\n  var head = function head(xs) {\n    return get(xs, 0);\n  };\n\n  var findMap = function findMap(arr, f) {\n    for (var i = 0; i < arr.length; i++) {\n      var r = f(arr[i], i);\n\n      if (r.isSome()) {\n        return r;\n      }\n    }\n\n    return Optional.none();\n  };\n\n  typeof window !== 'undefined' ? window : Function('return this;')();\n\n  var rawSet = function rawSet(dom, key, value) {\n    if (isString(value) || isBoolean(value) || isNumber(value)) {\n      dom.setAttribute(key, value + '');\n    } else {\n      console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n      throw new Error('Attribute value was not simple');\n    }\n  };\n\n  var set = function set(element, key, value) {\n    rawSet(element.dom, key, value);\n  };\n\n  var remove = function remove(element, key) {\n    element.dom.removeAttribute(key);\n  };\n\n  var fromHtml = function fromHtml(html, scope) {\n    var doc = scope || document;\n    var div = doc.createElement('div');\n    div.innerHTML = html;\n\n    if (!div.hasChildNodes() || div.childNodes.length > 1) {\n      console.error('HTML does not have a single root node', html);\n      throw new Error('HTML must have a single root node');\n    }\n\n    return fromDom(div.childNodes[0]);\n  };\n\n  var fromTag = function fromTag(tag, scope) {\n    var doc = scope || document;\n    var node = doc.createElement(tag);\n    return fromDom(node);\n  };\n\n  var fromText = function fromText(text, scope) {\n    var doc = scope || document;\n    var node = doc.createTextNode(text);\n    return fromDom(node);\n  };\n\n  var fromDom = function fromDom(node) {\n    if (node === null || node === undefined) {\n      throw new Error('Node cannot be null or undefined');\n    }\n\n    return {\n      dom: node\n    };\n  };\n\n  var fromPoint = function fromPoint(docElm, x, y) {\n    return Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom);\n  };\n\n  var SugarElement = {\n    fromHtml: fromHtml,\n    fromTag: fromTag,\n    fromText: fromText,\n    fromDom: fromDom,\n    fromPoint: fromPoint\n  };\n  var global$5 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n  var global$4 = tinymce.util.Tools.resolve('tinymce.util.Promise');\n  var global$3 = tinymce.util.Tools.resolve('tinymce.util.URI');\n  var global$2 = tinymce.util.Tools.resolve('tinymce.util.XHR');\n\n  var hasDimensions = function hasDimensions(editor) {\n    return editor.getParam('image_dimensions', true, 'boolean');\n  };\n\n  var hasAdvTab = function hasAdvTab(editor) {\n    return editor.getParam('image_advtab', false, 'boolean');\n  };\n\n  var hasUploadTab = function hasUploadTab(editor) {\n    return editor.getParam('image_uploadtab', true, 'boolean');\n  };\n\n  var getPrependUrl = function getPrependUrl(editor) {\n    return editor.getParam('image_prepend_url', '', 'string');\n  };\n\n  var getClassList = function getClassList(editor) {\n    return editor.getParam('image_class_list');\n  };\n\n  var hasDescription = function hasDescription(editor) {\n    return editor.getParam('image_description', true, 'boolean');\n  };\n\n  var hasImageTitle = function hasImageTitle(editor) {\n    return editor.getParam('image_title', false, 'boolean');\n  };\n\n  var hasImageCaption = function hasImageCaption(editor) {\n    return editor.getParam('image_caption', false, 'boolean');\n  };\n\n  var getImageList = function getImageList(editor) {\n    return editor.getParam('image_list', false);\n  };\n\n  var hasUploadUrl = function hasUploadUrl(editor) {\n    return isNonNullable(editor.getParam('images_upload_url'));\n  };\n\n  var hasUploadHandler = function hasUploadHandler(editor) {\n    return isNonNullable(editor.getParam('images_upload_handler'));\n  };\n\n  var showAccessibilityOptions = function showAccessibilityOptions(editor) {\n    return editor.getParam('a11y_advanced_options', false, 'boolean');\n  };\n\n  var isAutomaticUploadsEnabled = function isAutomaticUploadsEnabled(editor) {\n    return editor.getParam('automatic_uploads', true, 'boolean');\n  };\n\n  var parseIntAndGetMax = function parseIntAndGetMax(val1, val2) {\n    return Math.max(parseInt(val1, 10), parseInt(val2, 10));\n  };\n\n  var getImageSize = function getImageSize(url) {\n    return new global$4(function (callback) {\n      var img = document.createElement('img');\n\n      var done = function done(dimensions) {\n        img.onload = img.onerror = null;\n\n        if (img.parentNode) {\n          img.parentNode.removeChild(img);\n        }\n\n        callback(dimensions);\n      };\n\n      img.onload = function () {\n        var width = parseIntAndGetMax(img.width, img.clientWidth);\n        var height = parseIntAndGetMax(img.height, img.clientHeight);\n        var dimensions = {\n          width: width,\n          height: height\n        };\n        done(global$4.resolve(dimensions));\n      };\n\n      img.onerror = function () {\n        done(global$4.reject('Failed to get image dimensions for: ' + url));\n      };\n\n      var style = img.style;\n      style.visibility = 'hidden';\n      style.position = 'fixed';\n      style.bottom = style.left = '0px';\n      style.width = style.height = 'auto';\n      document.body.appendChild(img);\n      img.src = url;\n    });\n  };\n\n  var removePixelSuffix = function removePixelSuffix(value) {\n    if (value) {\n      value = value.replace(/px$/, '');\n    }\n\n    return value;\n  };\n\n  var addPixelSuffix = function addPixelSuffix(value) {\n    if (value.length > 0 && /^[0-9]+$/.test(value)) {\n      value += 'px';\n    }\n\n    return value;\n  };\n\n  var mergeMargins = function mergeMargins(css) {\n    if (css.margin) {\n      var splitMargin = String(css.margin).split(' ');\n\n      switch (splitMargin.length) {\n        case 1:\n          css['margin-top'] = css['margin-top'] || splitMargin[0];\n          css['margin-right'] = css['margin-right'] || splitMargin[0];\n          css['margin-bottom'] = css['margin-bottom'] || splitMargin[0];\n          css['margin-left'] = css['margin-left'] || splitMargin[0];\n          break;\n\n        case 2:\n          css['margin-top'] = css['margin-top'] || splitMargin[0];\n          css['margin-right'] = css['margin-right'] || splitMargin[1];\n          css['margin-bottom'] = css['margin-bottom'] || splitMargin[0];\n          css['margin-left'] = css['margin-left'] || splitMargin[1];\n          break;\n\n        case 3:\n          css['margin-top'] = css['margin-top'] || splitMargin[0];\n          css['margin-right'] = css['margin-right'] || splitMargin[1];\n          css['margin-bottom'] = css['margin-bottom'] || splitMargin[2];\n          css['margin-left'] = css['margin-left'] || splitMargin[1];\n          break;\n\n        case 4:\n          css['margin-top'] = css['margin-top'] || splitMargin[0];\n          css['margin-right'] = css['margin-right'] || splitMargin[1];\n          css['margin-bottom'] = css['margin-bottom'] || splitMargin[2];\n          css['margin-left'] = css['margin-left'] || splitMargin[3];\n      }\n\n      delete css.margin;\n    }\n\n    return css;\n  };\n\n  var createImageList = function createImageList(editor, callback) {\n    var imageList = getImageList(editor);\n\n    if (isString(imageList)) {\n      global$2.send({\n        url: imageList,\n        success: function success(text) {\n          callback(JSON.parse(text));\n        }\n      });\n    } else if (isFunction(imageList)) {\n      imageList(callback);\n    } else {\n      callback(imageList);\n    }\n  };\n\n  var waitLoadImage = function waitLoadImage(editor, data, imgElm) {\n    var selectImage = function selectImage() {\n      imgElm.onload = imgElm.onerror = null;\n\n      if (editor.selection) {\n        editor.selection.select(imgElm);\n        editor.nodeChanged();\n      }\n    };\n\n    imgElm.onload = function () {\n      if (!data.width && !data.height && hasDimensions(editor)) {\n        editor.dom.setAttribs(imgElm, {\n          width: String(imgElm.clientWidth),\n          height: String(imgElm.clientHeight)\n        });\n      }\n\n      selectImage();\n    };\n\n    imgElm.onerror = selectImage;\n  };\n\n  var blobToDataUri = function blobToDataUri(blob) {\n    return new global$4(function (resolve, reject) {\n      var reader = new FileReader();\n\n      reader.onload = function () {\n        resolve(reader.result);\n      };\n\n      reader.onerror = function () {\n        reject(reader.error.message);\n      };\n\n      reader.readAsDataURL(blob);\n    });\n  };\n\n  var isPlaceholderImage = function isPlaceholderImage(imgElm) {\n    return imgElm.nodeName === 'IMG' && (imgElm.hasAttribute('data-mce-object') || imgElm.hasAttribute('data-mce-placeholder'));\n  };\n\n  var isSafeImageUrl = function isSafeImageUrl(editor, src) {\n    return global$3.isDomSafe(src, 'img', editor.settings);\n  };\n\n  var DOM = global$5.DOM;\n\n  var getHspace = function getHspace(image) {\n    if (image.style.marginLeft && image.style.marginRight && image.style.marginLeft === image.style.marginRight) {\n      return removePixelSuffix(image.style.marginLeft);\n    } else {\n      return '';\n    }\n  };\n\n  var getVspace = function getVspace(image) {\n    if (image.style.marginTop && image.style.marginBottom && image.style.marginTop === image.style.marginBottom) {\n      return removePixelSuffix(image.style.marginTop);\n    } else {\n      return '';\n    }\n  };\n\n  var getBorder = function getBorder(image) {\n    if (image.style.borderWidth) {\n      return removePixelSuffix(image.style.borderWidth);\n    } else {\n      return '';\n    }\n  };\n\n  var getAttrib = function getAttrib(image, name) {\n    if (image.hasAttribute(name)) {\n      return image.getAttribute(name);\n    } else {\n      return '';\n    }\n  };\n\n  var getStyle = function getStyle(image, name) {\n    return image.style[name] ? image.style[name] : '';\n  };\n\n  var hasCaption = function hasCaption(image) {\n    return image.parentNode !== null && image.parentNode.nodeName === 'FIGURE';\n  };\n\n  var updateAttrib = function updateAttrib(image, name, value) {\n    if (value === '') {\n      image.removeAttribute(name);\n    } else {\n      image.setAttribute(name, value);\n    }\n  };\n\n  var wrapInFigure = function wrapInFigure(image) {\n    var figureElm = DOM.create('figure', {\n      \"class\": 'image'\n    });\n    DOM.insertAfter(figureElm, image);\n    figureElm.appendChild(image);\n    figureElm.appendChild(DOM.create('figcaption', {\n      contentEditable: 'true'\n    }, 'Caption'));\n    figureElm.contentEditable = 'false';\n  };\n\n  var removeFigure = function removeFigure(image) {\n    var figureElm = image.parentNode;\n    DOM.insertAfter(image, figureElm);\n    DOM.remove(figureElm);\n  };\n\n  var toggleCaption = function toggleCaption(image) {\n    if (hasCaption(image)) {\n      removeFigure(image);\n    } else {\n      wrapInFigure(image);\n    }\n  };\n\n  var normalizeStyle = function normalizeStyle(image, normalizeCss) {\n    var attrValue = image.getAttribute('style');\n    var value = normalizeCss(attrValue !== null ? attrValue : '');\n\n    if (value.length > 0) {\n      image.setAttribute('style', value);\n      image.setAttribute('data-mce-style', value);\n    } else {\n      image.removeAttribute('style');\n    }\n  };\n\n  var setSize = function setSize(name, normalizeCss) {\n    return function (image, name, value) {\n      if (image.style[name]) {\n        image.style[name] = addPixelSuffix(value);\n        normalizeStyle(image, normalizeCss);\n      } else {\n        updateAttrib(image, name, value);\n      }\n    };\n  };\n\n  var getSize = function getSize(image, name) {\n    if (image.style[name]) {\n      return removePixelSuffix(image.style[name]);\n    } else {\n      return getAttrib(image, name);\n    }\n  };\n\n  var setHspace = function setHspace(image, value) {\n    var pxValue = addPixelSuffix(value);\n    image.style.marginLeft = pxValue;\n    image.style.marginRight = pxValue;\n  };\n\n  var setVspace = function setVspace(image, value) {\n    var pxValue = addPixelSuffix(value);\n    image.style.marginTop = pxValue;\n    image.style.marginBottom = pxValue;\n  };\n\n  var setBorder = function setBorder(image, value) {\n    var pxValue = addPixelSuffix(value);\n    image.style.borderWidth = pxValue;\n  };\n\n  var setBorderStyle = function setBorderStyle(image, value) {\n    image.style.borderStyle = value;\n  };\n\n  var getBorderStyle = function getBorderStyle(image) {\n    return getStyle(image, 'borderStyle');\n  };\n\n  var isFigure = function isFigure(elm) {\n    return elm.nodeName === 'FIGURE';\n  };\n\n  var isImage = function isImage(elm) {\n    return elm.nodeName === 'IMG';\n  };\n\n  var getIsDecorative = function getIsDecorative(image) {\n    return DOM.getAttrib(image, 'alt').length === 0 && DOM.getAttrib(image, 'role') === 'presentation';\n  };\n\n  var getAlt = function getAlt(image) {\n    if (getIsDecorative(image)) {\n      return '';\n    } else {\n      return getAttrib(image, 'alt');\n    }\n  };\n\n  var defaultData = function defaultData() {\n    return {\n      src: '',\n      alt: '',\n      title: '',\n      width: '',\n      height: '',\n      \"class\": '',\n      style: '',\n      caption: false,\n      hspace: '',\n      vspace: '',\n      border: '',\n      borderStyle: '',\n      isDecorative: false\n    };\n  };\n\n  var getStyleValue = function getStyleValue(normalizeCss, data) {\n    var image = document.createElement('img');\n    updateAttrib(image, 'style', data.style);\n\n    if (getHspace(image) || data.hspace !== '') {\n      setHspace(image, data.hspace);\n    }\n\n    if (getVspace(image) || data.vspace !== '') {\n      setVspace(image, data.vspace);\n    }\n\n    if (getBorder(image) || data.border !== '') {\n      setBorder(image, data.border);\n    }\n\n    if (getBorderStyle(image) || data.borderStyle !== '') {\n      setBorderStyle(image, data.borderStyle);\n    }\n\n    return normalizeCss(image.getAttribute('style'));\n  };\n\n  var create = function create(normalizeCss, data) {\n    var image = document.createElement('img');\n    write(normalizeCss, _assign(_assign({}, data), {\n      caption: false\n    }), image);\n    setAlt(image, data.alt, data.isDecorative);\n\n    if (data.caption) {\n      var figure = DOM.create('figure', {\n        \"class\": 'image'\n      });\n      figure.appendChild(image);\n      figure.appendChild(DOM.create('figcaption', {\n        contentEditable: 'true'\n      }, 'Caption'));\n      figure.contentEditable = 'false';\n      return figure;\n    } else {\n      return image;\n    }\n  };\n\n  var read = function read(normalizeCss, image) {\n    return {\n      src: getAttrib(image, 'src'),\n      alt: getAlt(image),\n      title: getAttrib(image, 'title'),\n      width: getSize(image, 'width'),\n      height: getSize(image, 'height'),\n      \"class\": getAttrib(image, 'class'),\n      style: normalizeCss(getAttrib(image, 'style')),\n      caption: hasCaption(image),\n      hspace: getHspace(image),\n      vspace: getVspace(image),\n      border: getBorder(image),\n      borderStyle: getStyle(image, 'borderStyle'),\n      isDecorative: getIsDecorative(image)\n    };\n  };\n\n  var updateProp = function updateProp(image, oldData, newData, name, set) {\n    if (newData[name] !== oldData[name]) {\n      set(image, name, newData[name]);\n    }\n  };\n\n  var setAlt = function setAlt(image, alt, isDecorative) {\n    if (isDecorative) {\n      DOM.setAttrib(image, 'role', 'presentation');\n      var sugarImage = SugarElement.fromDom(image);\n      set(sugarImage, 'alt', '');\n    } else {\n      if (isNull(alt)) {\n        var sugarImage = SugarElement.fromDom(image);\n        remove(sugarImage, 'alt');\n      } else {\n        var sugarImage = SugarElement.fromDom(image);\n        set(sugarImage, 'alt', alt);\n      }\n\n      if (DOM.getAttrib(image, 'role') === 'presentation') {\n        DOM.setAttrib(image, 'role', '');\n      }\n    }\n  };\n\n  var updateAlt = function updateAlt(image, oldData, newData) {\n    if (newData.alt !== oldData.alt || newData.isDecorative !== oldData.isDecorative) {\n      setAlt(image, newData.alt, newData.isDecorative);\n    }\n  };\n\n  var normalized = function normalized(set, normalizeCss) {\n    return function (image, name, value) {\n      set(image, value);\n      normalizeStyle(image, normalizeCss);\n    };\n  };\n\n  var write = function write(normalizeCss, newData, image) {\n    var oldData = read(normalizeCss, image);\n    updateProp(image, oldData, newData, 'caption', function (image, _name, _value) {\n      return toggleCaption(image);\n    });\n    updateProp(image, oldData, newData, 'src', updateAttrib);\n    updateProp(image, oldData, newData, 'title', updateAttrib);\n    updateProp(image, oldData, newData, 'width', setSize('width', normalizeCss));\n    updateProp(image, oldData, newData, 'height', setSize('height', normalizeCss));\n    updateProp(image, oldData, newData, 'class', updateAttrib);\n    updateProp(image, oldData, newData, 'style', normalized(function (image, value) {\n      return updateAttrib(image, 'style', value);\n    }, normalizeCss));\n    updateProp(image, oldData, newData, 'hspace', normalized(setHspace, normalizeCss));\n    updateProp(image, oldData, newData, 'vspace', normalized(setVspace, normalizeCss));\n    updateProp(image, oldData, newData, 'border', normalized(setBorder, normalizeCss));\n    updateProp(image, oldData, newData, 'borderStyle', normalized(setBorderStyle, normalizeCss));\n    updateAlt(image, oldData, newData);\n  };\n\n  var normalizeCss$1 = function normalizeCss$1(editor, cssText) {\n    var css = editor.dom.styles.parse(cssText);\n    var mergedCss = mergeMargins(css);\n    var compressed = editor.dom.styles.parse(editor.dom.styles.serialize(mergedCss));\n    return editor.dom.styles.serialize(compressed);\n  };\n\n  var getSelectedImage = function getSelectedImage(editor) {\n    var imgElm = editor.selection.getNode();\n    var figureElm = editor.dom.getParent(imgElm, 'figure.image');\n\n    if (figureElm) {\n      return editor.dom.select('img', figureElm)[0];\n    }\n\n    if (imgElm && (imgElm.nodeName !== 'IMG' || isPlaceholderImage(imgElm))) {\n      return null;\n    }\n\n    return imgElm;\n  };\n\n  var splitTextBlock = function splitTextBlock(editor, figure) {\n    var dom = editor.dom;\n    var textBlockElements = filter(editor.schema.getTextBlockElements(), function (_, parentElm) {\n      return !editor.schema.isValidChild(parentElm, 'figure');\n    });\n    var textBlock = dom.getParent(figure.parentNode, function (node) {\n      return hasNonNullableKey(textBlockElements, node.nodeName);\n    }, editor.getBody());\n\n    if (textBlock) {\n      return dom.split(textBlock, figure);\n    } else {\n      return figure;\n    }\n  };\n\n  var readImageDataFromSelection = function readImageDataFromSelection(editor) {\n    var image = getSelectedImage(editor);\n    return image ? read(function (css) {\n      return normalizeCss$1(editor, css);\n    }, image) : defaultData();\n  };\n\n  var insertImageAtCaret = function insertImageAtCaret(editor, data) {\n    var elm = create(function (css) {\n      return normalizeCss$1(editor, css);\n    }, data);\n    editor.dom.setAttrib(elm, 'data-mce-id', '__mcenew');\n    editor.focus();\n    editor.selection.setContent(elm.outerHTML);\n    var insertedElm = editor.dom.select('*[data-mce-id=\"__mcenew\"]')[0];\n    editor.dom.setAttrib(insertedElm, 'data-mce-id', null);\n\n    if (isFigure(insertedElm)) {\n      var figure = splitTextBlock(editor, insertedElm);\n      editor.selection.select(figure);\n    } else {\n      editor.selection.select(insertedElm);\n    }\n  };\n\n  var syncSrcAttr = function syncSrcAttr(editor, image) {\n    editor.dom.setAttrib(image, 'src', image.getAttribute('src'));\n  };\n\n  var deleteImage = function deleteImage(editor, image) {\n    if (image) {\n      var elm = editor.dom.is(image.parentNode, 'figure.image') ? image.parentNode : image;\n      editor.dom.remove(elm);\n      editor.focus();\n      editor.nodeChanged();\n\n      if (editor.dom.isEmpty(editor.getBody())) {\n        editor.setContent('');\n        editor.selection.setCursorLocation();\n      }\n    }\n  };\n\n  var writeImageDataToSelection = function writeImageDataToSelection(editor, data) {\n    var image = getSelectedImage(editor);\n    write(function (css) {\n      return normalizeCss$1(editor, css);\n    }, data, image);\n    syncSrcAttr(editor, image);\n\n    if (isFigure(image.parentNode)) {\n      var figure = image.parentNode;\n      splitTextBlock(editor, figure);\n      editor.selection.select(image.parentNode);\n    } else {\n      editor.selection.select(image);\n      waitLoadImage(editor, data, image);\n    }\n  };\n\n  var sanitizeImageData = function sanitizeImageData(editor, data) {\n    var src = data.src;\n    return _assign(_assign({}, data), {\n      src: isSafeImageUrl(editor, src) ? src : ''\n    });\n  };\n\n  var insertOrUpdateImage = function insertOrUpdateImage(editor, partialData) {\n    var image = getSelectedImage(editor);\n\n    if (image) {\n      var selectedImageData = read(function (css) {\n        return normalizeCss$1(editor, css);\n      }, image);\n\n      var data = _assign(_assign({}, selectedImageData), partialData);\n\n      var sanitizedData = sanitizeImageData(editor, data);\n\n      if (data.src) {\n        writeImageDataToSelection(editor, sanitizedData);\n      } else {\n        deleteImage(editor, image);\n      }\n    } else if (partialData.src) {\n      insertImageAtCaret(editor, _assign(_assign({}, defaultData()), partialData));\n    }\n  };\n\n  var deep = function deep(old, nu) {\n    var bothObjects = isObject(old) && isObject(nu);\n    return bothObjects ? deepMerge(old, nu) : nu;\n  };\n\n  var baseMerge = function baseMerge(merger) {\n    return function () {\n      var objects = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        objects[_i] = arguments[_i];\n      }\n\n      if (objects.length === 0) {\n        throw new Error('Can\\'t merge zero objects');\n      }\n\n      var ret = {};\n\n      for (var j = 0; j < objects.length; j++) {\n        var curObject = objects[j];\n\n        for (var key in curObject) {\n          if (has(curObject, key)) {\n            ret[key] = merger(ret[key], curObject[key]);\n          }\n        }\n      }\n\n      return ret;\n    };\n  };\n\n  var deepMerge = baseMerge(deep);\n\n  var isNotEmpty = function isNotEmpty(s) {\n    return s.length > 0;\n  };\n\n  var global$1 = tinymce.util.Tools.resolve('tinymce.util.ImageUploader');\n  var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n  var getValue = function getValue(item) {\n    return isString(item.value) ? item.value : '';\n  };\n\n  var getText = function getText(item) {\n    if (isString(item.text)) {\n      return item.text;\n    } else if (isString(item.title)) {\n      return item.title;\n    } else {\n      return '';\n    }\n  };\n\n  var sanitizeList = function sanitizeList(list, extractValue) {\n    var out = [];\n    global.each(list, function (item) {\n      var text = getText(item);\n\n      if (item.menu !== undefined) {\n        var items = sanitizeList(item.menu, extractValue);\n        out.push({\n          text: text,\n          items: items\n        });\n      } else {\n        var value = extractValue(item);\n        out.push({\n          text: text,\n          value: value\n        });\n      }\n    });\n    return out;\n  };\n\n  var sanitizer = function sanitizer(extractor) {\n    if (extractor === void 0) {\n      extractor = getValue;\n    }\n\n    return function (list) {\n      if (list) {\n        return Optional.from(list).map(function (list) {\n          return sanitizeList(list, extractor);\n        });\n      } else {\n        return Optional.none();\n      }\n    };\n  };\n\n  var sanitize = function sanitize(list) {\n    return sanitizer(getValue)(list);\n  };\n\n  var isGroup = function isGroup(item) {\n    return has(item, 'items');\n  };\n\n  var findEntryDelegate = function findEntryDelegate(list, value) {\n    return findMap(list, function (item) {\n      if (isGroup(item)) {\n        return findEntryDelegate(item.items, value);\n      } else if (item.value === value) {\n        return Optional.some(item);\n      } else {\n        return Optional.none();\n      }\n    });\n  };\n\n  var findEntry = function findEntry(optList, value) {\n    return optList.bind(function (list) {\n      return findEntryDelegate(list, value);\n    });\n  };\n\n  var ListUtils = {\n    sanitizer: sanitizer,\n    sanitize: sanitize,\n    findEntry: findEntry\n  };\n\n  var makeTab$2 = function makeTab$2(_info) {\n    return {\n      title: 'Advanced',\n      name: 'advanced',\n      items: [{\n        type: 'input',\n        label: 'Style',\n        name: 'style'\n      }, {\n        type: 'grid',\n        columns: 2,\n        items: [{\n          type: 'input',\n          label: 'Vertical space',\n          name: 'vspace',\n          inputMode: 'numeric'\n        }, {\n          type: 'input',\n          label: 'Horizontal space',\n          name: 'hspace',\n          inputMode: 'numeric'\n        }, {\n          type: 'input',\n          label: 'Border width',\n          name: 'border',\n          inputMode: 'numeric'\n        }, {\n          type: 'listbox',\n          name: 'borderstyle',\n          label: 'Border style',\n          items: [{\n            text: 'Select...',\n            value: ''\n          }, {\n            text: 'Solid',\n            value: 'solid'\n          }, {\n            text: 'Dotted',\n            value: 'dotted'\n          }, {\n            text: 'Dashed',\n            value: 'dashed'\n          }, {\n            text: 'Double',\n            value: 'double'\n          }, {\n            text: 'Groove',\n            value: 'groove'\n          }, {\n            text: 'Ridge',\n            value: 'ridge'\n          }, {\n            text: 'Inset',\n            value: 'inset'\n          }, {\n            text: 'Outset',\n            value: 'outset'\n          }, {\n            text: 'None',\n            value: 'none'\n          }, {\n            text: 'Hidden',\n            value: 'hidden'\n          }]\n        }]\n      }]\n    };\n  };\n\n  var AdvTab = {\n    makeTab: makeTab$2\n  };\n\n  var collect = function collect(editor) {\n    var urlListSanitizer = ListUtils.sanitizer(function (item) {\n      return editor.convertURL(item.value || item.url, 'src');\n    });\n    var futureImageList = new global$4(function (completer) {\n      createImageList(editor, function (imageList) {\n        completer(urlListSanitizer(imageList).map(function (items) {\n          return flatten([[{\n            text: 'None',\n            value: ''\n          }], items]);\n        }));\n      });\n    });\n    var classList = ListUtils.sanitize(getClassList(editor));\n    var hasAdvTab$1 = hasAdvTab(editor);\n    var hasUploadTab$1 = hasUploadTab(editor);\n    var hasUploadUrl$1 = hasUploadUrl(editor);\n    var hasUploadHandler$1 = hasUploadHandler(editor);\n    var image = readImageDataFromSelection(editor);\n    var hasDescription$1 = hasDescription(editor);\n    var hasImageTitle$1 = hasImageTitle(editor);\n    var hasDimensions$1 = hasDimensions(editor);\n    var hasImageCaption$1 = hasImageCaption(editor);\n    var hasAccessibilityOptions = showAccessibilityOptions(editor);\n    var automaticUploads = isAutomaticUploadsEnabled(editor);\n    var prependURL = Optional.some(getPrependUrl(editor)).filter(function (preUrl) {\n      return isString(preUrl) && preUrl.length > 0;\n    });\n    return futureImageList.then(function (imageList) {\n      return {\n        image: image,\n        imageList: imageList,\n        classList: classList,\n        hasAdvTab: hasAdvTab$1,\n        hasUploadTab: hasUploadTab$1,\n        hasUploadUrl: hasUploadUrl$1,\n        hasUploadHandler: hasUploadHandler$1,\n        hasDescription: hasDescription$1,\n        hasImageTitle: hasImageTitle$1,\n        hasDimensions: hasDimensions$1,\n        hasImageCaption: hasImageCaption$1,\n        prependURL: prependURL,\n        hasAccessibilityOptions: hasAccessibilityOptions,\n        automaticUploads: automaticUploads\n      };\n    });\n  };\n\n  var makeItems = function makeItems(info) {\n    var imageUrl = {\n      name: 'src',\n      type: 'urlinput',\n      filetype: 'image',\n      label: 'Source'\n    };\n    var imageList = info.imageList.map(function (items) {\n      return {\n        name: 'images',\n        type: 'listbox',\n        label: 'Image list',\n        items: items\n      };\n    });\n    var imageDescription = {\n      name: 'alt',\n      type: 'input',\n      label: 'Alternative description',\n      disabled: info.hasAccessibilityOptions && info.image.isDecorative\n    };\n    var imageTitle = {\n      name: 'title',\n      type: 'input',\n      label: 'Image title'\n    };\n    var imageDimensions = {\n      name: 'dimensions',\n      type: 'sizeinput'\n    };\n    var isDecorative = {\n      type: 'label',\n      label: 'Accessibility',\n      items: [{\n        name: 'isDecorative',\n        type: 'checkbox',\n        label: 'Image is decorative'\n      }]\n    };\n    var classList = info.classList.map(function (items) {\n      return {\n        name: 'classes',\n        type: 'listbox',\n        label: 'Class',\n        items: items\n      };\n    });\n    var caption = {\n      type: 'label',\n      label: 'Caption',\n      items: [{\n        type: 'checkbox',\n        name: 'caption',\n        label: 'Show caption'\n      }]\n    };\n\n    var getDialogContainerType = function getDialogContainerType(useColumns) {\n      return useColumns ? {\n        type: 'grid',\n        columns: 2\n      } : {\n        type: 'panel'\n      };\n    };\n\n    return flatten([[imageUrl], imageList.toArray(), info.hasAccessibilityOptions && info.hasDescription ? [isDecorative] : [], info.hasDescription ? [imageDescription] : [], info.hasImageTitle ? [imageTitle] : [], info.hasDimensions ? [imageDimensions] : [], [_assign(_assign({}, getDialogContainerType(info.classList.isSome() && info.hasImageCaption)), {\n      items: flatten([classList.toArray(), info.hasImageCaption ? [caption] : []])\n    })]]);\n  };\n\n  var makeTab$1 = function makeTab$1(info) {\n    return {\n      title: 'General',\n      name: 'general',\n      items: makeItems(info)\n    };\n  };\n\n  var MainTab = {\n    makeTab: makeTab$1,\n    makeItems: makeItems\n  };\n\n  var makeTab = function makeTab(_info) {\n    var items = [{\n      type: 'dropzone',\n      name: 'fileinput'\n    }];\n    return {\n      title: 'Upload',\n      name: 'upload',\n      items: items\n    };\n  };\n\n  var UploadTab = {\n    makeTab: makeTab\n  };\n\n  var createState = function createState(info) {\n    return {\n      prevImage: ListUtils.findEntry(info.imageList, info.image.src),\n      prevAlt: info.image.alt,\n      open: true\n    };\n  };\n\n  var fromImageData = function fromImageData(image) {\n    return {\n      src: {\n        value: image.src,\n        meta: {}\n      },\n      images: image.src,\n      alt: image.alt,\n      title: image.title,\n      dimensions: {\n        width: image.width,\n        height: image.height\n      },\n      classes: image[\"class\"],\n      caption: image.caption,\n      style: image.style,\n      vspace: image.vspace,\n      border: image.border,\n      hspace: image.hspace,\n      borderstyle: image.borderStyle,\n      fileinput: [],\n      isDecorative: image.isDecorative\n    };\n  };\n\n  var toImageData = function toImageData(data, removeEmptyAlt) {\n    return {\n      src: data.src.value,\n      alt: data.alt.length === 0 && removeEmptyAlt ? null : data.alt,\n      title: data.title,\n      width: data.dimensions.width,\n      height: data.dimensions.height,\n      \"class\": data.classes,\n      style: data.style,\n      caption: data.caption,\n      hspace: data.hspace,\n      vspace: data.vspace,\n      border: data.border,\n      borderStyle: data.borderstyle,\n      isDecorative: data.isDecorative\n    };\n  };\n\n  var addPrependUrl2 = function addPrependUrl2(info, srcURL) {\n    if (!/^(?:[a-zA-Z]+:)?\\/\\//.test(srcURL)) {\n      return info.prependURL.bind(function (prependUrl) {\n        if (srcURL.substring(0, prependUrl.length) !== prependUrl) {\n          return Optional.some(prependUrl + srcURL);\n        }\n\n        return Optional.none();\n      });\n    }\n\n    return Optional.none();\n  };\n\n  var addPrependUrl = function addPrependUrl(info, api) {\n    var data = api.getData();\n    addPrependUrl2(info, data.src.value).each(function (srcURL) {\n      api.setData({\n        src: {\n          value: srcURL,\n          meta: data.src.meta\n        }\n      });\n    });\n  };\n\n  var formFillFromMeta2 = function formFillFromMeta2(info, data, meta) {\n    if (info.hasDescription && isString(meta.alt)) {\n      data.alt = meta.alt;\n    }\n\n    if (info.hasAccessibilityOptions) {\n      data.isDecorative = meta.isDecorative || data.isDecorative || false;\n    }\n\n    if (info.hasImageTitle && isString(meta.title)) {\n      data.title = meta.title;\n    }\n\n    if (info.hasDimensions) {\n      if (isString(meta.width)) {\n        data.dimensions.width = meta.width;\n      }\n\n      if (isString(meta.height)) {\n        data.dimensions.height = meta.height;\n      }\n    }\n\n    if (isString(meta[\"class\"])) {\n      ListUtils.findEntry(info.classList, meta[\"class\"]).each(function (entry) {\n        data.classes = entry.value;\n      });\n    }\n\n    if (info.hasImageCaption) {\n      if (isBoolean(meta.caption)) {\n        data.caption = meta.caption;\n      }\n    }\n\n    if (info.hasAdvTab) {\n      if (isString(meta.style)) {\n        data.style = meta.style;\n      }\n\n      if (isString(meta.vspace)) {\n        data.vspace = meta.vspace;\n      }\n\n      if (isString(meta.border)) {\n        data.border = meta.border;\n      }\n\n      if (isString(meta.hspace)) {\n        data.hspace = meta.hspace;\n      }\n\n      if (isString(meta.borderstyle)) {\n        data.borderstyle = meta.borderstyle;\n      }\n    }\n  };\n\n  var formFillFromMeta = function formFillFromMeta(info, api) {\n    var data = api.getData();\n    var meta = data.src.meta;\n\n    if (meta !== undefined) {\n      var newData = deepMerge({}, data);\n      formFillFromMeta2(info, newData, meta);\n      api.setData(newData);\n    }\n  };\n\n  var calculateImageSize = function calculateImageSize(helpers, info, state, api) {\n    var data = api.getData();\n    var url = data.src.value;\n    var meta = data.src.meta || {};\n\n    if (!meta.width && !meta.height && info.hasDimensions) {\n      if (isNotEmpty(url)) {\n        helpers.imageSize(url).then(function (size) {\n          if (state.open) {\n            api.setData({\n              dimensions: size\n            });\n          }\n        })[\"catch\"](function (e) {\n          return console.error(e);\n        });\n      } else {\n        api.setData({\n          dimensions: {\n            width: '',\n            height: ''\n          }\n        });\n      }\n    }\n  };\n\n  var updateImagesDropdown = function updateImagesDropdown(info, state, api) {\n    var data = api.getData();\n    var image = ListUtils.findEntry(info.imageList, data.src.value);\n    state.prevImage = image;\n    api.setData({\n      images: image.map(function (entry) {\n        return entry.value;\n      }).getOr('')\n    });\n  };\n\n  var changeSrc = function changeSrc(helpers, info, state, api) {\n    addPrependUrl(info, api);\n    formFillFromMeta(info, api);\n    calculateImageSize(helpers, info, state, api);\n    updateImagesDropdown(info, state, api);\n  };\n\n  var changeImages = function changeImages(helpers, info, state, api) {\n    var data = api.getData();\n    var image = ListUtils.findEntry(info.imageList, data.images);\n    image.each(function (img) {\n      var updateAlt = data.alt === '' || state.prevImage.map(function (image) {\n        return image.text === data.alt;\n      }).getOr(false);\n\n      if (updateAlt) {\n        if (img.value === '') {\n          api.setData({\n            src: img,\n            alt: state.prevAlt\n          });\n        } else {\n          api.setData({\n            src: img,\n            alt: img.text\n          });\n        }\n      } else {\n        api.setData({\n          src: img\n        });\n      }\n    });\n    state.prevImage = image;\n    changeSrc(helpers, info, state, api);\n  };\n\n  var calcVSpace = function calcVSpace(css) {\n    var matchingTopBottom = css['margin-top'] && css['margin-bottom'] && css['margin-top'] === css['margin-bottom'];\n    return matchingTopBottom ? removePixelSuffix(String(css['margin-top'])) : '';\n  };\n\n  var calcHSpace = function calcHSpace(css) {\n    var matchingLeftRight = css['margin-right'] && css['margin-left'] && css['margin-right'] === css['margin-left'];\n    return matchingLeftRight ? removePixelSuffix(String(css['margin-right'])) : '';\n  };\n\n  var calcBorderWidth = function calcBorderWidth(css) {\n    return css['border-width'] ? removePixelSuffix(String(css['border-width'])) : '';\n  };\n\n  var calcBorderStyle = function calcBorderStyle(css) {\n    return css['border-style'] ? String(css['border-style']) : '';\n  };\n\n  var calcStyle = function calcStyle(parseStyle, serializeStyle, css) {\n    return serializeStyle(parseStyle(serializeStyle(css)));\n  };\n\n  var changeStyle2 = function changeStyle2(parseStyle, serializeStyle, data) {\n    var css = mergeMargins(parseStyle(data.style));\n    var dataCopy = deepMerge({}, data);\n    dataCopy.vspace = calcVSpace(css);\n    dataCopy.hspace = calcHSpace(css);\n    dataCopy.border = calcBorderWidth(css);\n    dataCopy.borderstyle = calcBorderStyle(css);\n    dataCopy.style = calcStyle(parseStyle, serializeStyle, css);\n    return dataCopy;\n  };\n\n  var changeStyle = function changeStyle(helpers, api) {\n    var data = api.getData();\n    var newData = changeStyle2(helpers.parseStyle, helpers.serializeStyle, data);\n    api.setData(newData);\n  };\n\n  var changeAStyle = function changeAStyle(helpers, info, api) {\n    var data = deepMerge(fromImageData(info.image), api.getData());\n    var style = getStyleValue(helpers.normalizeCss, toImageData(data, false));\n    api.setData({\n      style: style\n    });\n  };\n\n  var changeFileInput = function changeFileInput(helpers, info, state, api) {\n    var data = api.getData();\n    api.block('Uploading image');\n    head(data.fileinput).fold(function () {\n      api.unblock();\n    }, function (file) {\n      var blobUri = URL.createObjectURL(file);\n\n      var finalize = function finalize() {\n        api.unblock();\n        URL.revokeObjectURL(blobUri);\n      };\n\n      var updateSrcAndSwitchTab = function updateSrcAndSwitchTab(url) {\n        api.setData({\n          src: {\n            value: url,\n            meta: {}\n          }\n        });\n        api.showTab('general');\n        changeSrc(helpers, info, state, api);\n      };\n\n      blobToDataUri(file).then(function (dataUrl) {\n        var blobInfo = helpers.createBlobCache(file, blobUri, dataUrl);\n\n        if (info.automaticUploads) {\n          helpers.uploadImage(blobInfo).then(function (result) {\n            updateSrcAndSwitchTab(result.url);\n            finalize();\n          })[\"catch\"](function (err) {\n            finalize();\n            helpers.alertErr(err);\n          });\n        } else {\n          helpers.addToBlobCache(blobInfo);\n          updateSrcAndSwitchTab(blobInfo.blobUri());\n          api.unblock();\n        }\n      });\n    });\n  };\n\n  var changeHandler = function changeHandler(helpers, info, state) {\n    return function (api, evt) {\n      if (evt.name === 'src') {\n        changeSrc(helpers, info, state, api);\n      } else if (evt.name === 'images') {\n        changeImages(helpers, info, state, api);\n      } else if (evt.name === 'alt') {\n        state.prevAlt = api.getData().alt;\n      } else if (evt.name === 'style') {\n        changeStyle(helpers, api);\n      } else if (evt.name === 'vspace' || evt.name === 'hspace' || evt.name === 'border' || evt.name === 'borderstyle') {\n        changeAStyle(helpers, info, api);\n      } else if (evt.name === 'fileinput') {\n        changeFileInput(helpers, info, state, api);\n      } else if (evt.name === 'isDecorative') {\n        if (api.getData().isDecorative) {\n          api.disable('alt');\n        } else {\n          api.enable('alt');\n        }\n      }\n    };\n  };\n\n  var closeHandler = function closeHandler(state) {\n    return function () {\n      state.open = false;\n    };\n  };\n\n  var makeDialogBody = function makeDialogBody(info) {\n    if (info.hasAdvTab || info.hasUploadUrl || info.hasUploadHandler) {\n      var tabPanel = {\n        type: 'tabpanel',\n        tabs: flatten([[MainTab.makeTab(info)], info.hasAdvTab ? [AdvTab.makeTab(info)] : [], info.hasUploadTab && (info.hasUploadUrl || info.hasUploadHandler) ? [UploadTab.makeTab(info)] : []])\n      };\n      return tabPanel;\n    } else {\n      var panel = {\n        type: 'panel',\n        items: MainTab.makeItems(info)\n      };\n      return panel;\n    }\n  };\n\n  var makeDialog = function makeDialog(helpers) {\n    return function (info) {\n      var state = createState(info);\n      return {\n        title: 'Insert/Edit Image',\n        size: 'normal',\n        body: makeDialogBody(info),\n        buttons: [{\n          type: 'cancel',\n          name: 'cancel',\n          text: 'Cancel'\n        }, {\n          type: 'submit',\n          name: 'save',\n          text: 'Save',\n          primary: true\n        }],\n        initialData: fromImageData(info.image),\n        onSubmit: helpers.onSubmit(info),\n        onChange: changeHandler(helpers, info, state),\n        onClose: closeHandler(state)\n      };\n    };\n  };\n\n  var submitHandler = function submitHandler(editor) {\n    return function (info) {\n      return function (api) {\n        var data = deepMerge(fromImageData(info.image), api.getData());\n        editor.execCommand('mceUpdateImage', false, toImageData(data, info.hasAccessibilityOptions));\n        editor.editorUpload.uploadImagesAuto();\n        api.close();\n      };\n    };\n  };\n\n  var imageSize = function imageSize(editor) {\n    return function (url) {\n      if (!isSafeImageUrl(editor, url)) {\n        return global$4.resolve({\n          width: '',\n          height: ''\n        });\n      } else {\n        return getImageSize(editor.documentBaseURI.toAbsolute(url)).then(function (dimensions) {\n          return {\n            width: String(dimensions.width),\n            height: String(dimensions.height)\n          };\n        });\n      }\n    };\n  };\n\n  var createBlobCache = function createBlobCache(editor) {\n    return function (file, blobUri, dataUrl) {\n      return editor.editorUpload.blobCache.create({\n        blob: file,\n        blobUri: blobUri,\n        name: file.name ? file.name.replace(/\\.[^\\.]+$/, '') : null,\n        filename: file.name,\n        base64: dataUrl.split(',')[1]\n      });\n    };\n  };\n\n  var addToBlobCache = function addToBlobCache(editor) {\n    return function (blobInfo) {\n      editor.editorUpload.blobCache.add(blobInfo);\n    };\n  };\n\n  var alertErr = function alertErr(editor) {\n    return function (message) {\n      editor.windowManager.alert(message);\n    };\n  };\n\n  var normalizeCss = function normalizeCss(editor) {\n    return function (cssText) {\n      return normalizeCss$1(editor, cssText);\n    };\n  };\n\n  var parseStyle = function parseStyle(editor) {\n    return function (cssText) {\n      return editor.dom.parseStyle(cssText);\n    };\n  };\n\n  var serializeStyle = function serializeStyle(editor) {\n    return function (stylesArg, name) {\n      return editor.dom.serializeStyle(stylesArg, name);\n    };\n  };\n\n  var uploadImage = function uploadImage(editor) {\n    return function (blobInfo) {\n      return global$1(editor).upload([blobInfo], false).then(function (results) {\n        if (results.length === 0) {\n          return global$4.reject('Failed to upload image');\n        } else if (results[0].status === false) {\n          return global$4.reject(results[0].error.message);\n        } else {\n          return results[0];\n        }\n      });\n    };\n  };\n\n  var Dialog = function Dialog(editor) {\n    var helpers = {\n      onSubmit: submitHandler(editor),\n      imageSize: imageSize(editor),\n      addToBlobCache: addToBlobCache(editor),\n      createBlobCache: createBlobCache(editor),\n      alertErr: alertErr(editor),\n      normalizeCss: normalizeCss(editor),\n      parseStyle: parseStyle(editor),\n      serializeStyle: serializeStyle(editor),\n      uploadImage: uploadImage(editor)\n    };\n\n    var open = function open() {\n      collect(editor).then(makeDialog(helpers)).then(editor.windowManager.open);\n    };\n\n    return {\n      open: open\n    };\n  };\n\n  var register$1 = function register$1(editor) {\n    editor.addCommand('mceImage', Dialog(editor).open);\n    editor.addCommand('mceUpdateImage', function (_ui, data) {\n      editor.undoManager.transact(function () {\n        return insertOrUpdateImage(editor, data);\n      });\n    });\n  };\n\n  var hasImageClass = function hasImageClass(node) {\n    var className = node.attr('class');\n    return className && /\\bimage\\b/.test(className);\n  };\n\n  var toggleContentEditableState = function toggleContentEditableState(state) {\n    return function (nodes) {\n      var i = nodes.length;\n\n      var toggleContentEditable = function toggleContentEditable(node) {\n        node.attr('contenteditable', state ? 'true' : null);\n      };\n\n      while (i--) {\n        var node = nodes[i];\n\n        if (hasImageClass(node)) {\n          node.attr('contenteditable', state ? 'false' : null);\n          global.each(node.getAll('figcaption'), toggleContentEditable);\n        }\n      }\n    };\n  };\n\n  var setup = function setup(editor) {\n    editor.on('PreInit', function () {\n      editor.parser.addNodeFilter('figure', toggleContentEditableState(true));\n      editor.serializer.addNodeFilter('figure', toggleContentEditableState(false));\n    });\n  };\n\n  var register = function register(editor) {\n    editor.ui.registry.addToggleButton('image', {\n      icon: 'image',\n      tooltip: 'Insert/edit image',\n      onAction: Dialog(editor).open,\n      onSetup: function onSetup(buttonApi) {\n        buttonApi.setActive(isNonNullable(getSelectedImage(editor)));\n        return editor.selection.selectorChangedWithUnbind('img:not([data-mce-object],[data-mce-placeholder]),figure.image', buttonApi.setActive).unbind;\n      }\n    });\n    editor.ui.registry.addMenuItem('image', {\n      icon: 'image',\n      text: 'Image...',\n      onAction: Dialog(editor).open\n    });\n    editor.ui.registry.addContextMenu('image', {\n      update: function update(element) {\n        return isFigure(element) || isImage(element) && !isPlaceholderImage(element) ? ['image'] : [];\n      }\n    });\n  };\n\n  function Plugin() {\n    global$6.add('image', function (editor) {\n      setup(editor);\n      register(editor);\n      register$1(editor);\n    });\n  }\n\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL2ltYWdlL3BsdWdpbi5qcz8yYjRkIl0sIm5hbWVzIjpbImdsb2JhbCQ2IiwidGlueW1jZSIsInV0aWwiLCJUb29scyIsInJlc29sdmUiLCJfX2Fzc2lnbiIsIk9iamVjdCIsImFzc2lnbiIsInQiLCJzIiwiaSIsIm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJ0eXBlT2YiLCJ4IiwiQXJyYXkiLCJpc1Byb3RvdHlwZU9mIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiU3RyaW5nIiwiaXNUeXBlIiwidHlwZSIsInZhbHVlIiwiaXNTaW1wbGVUeXBlIiwiZXEiLCJhIiwiaXNTdHJpbmciLCJpc09iamVjdCIsImlzQXJyYXkiLCJpc051bGwiLCJpc0Jvb2xlYW4iLCJpc051bGxhYmxlIiwidW5kZWZpbmVkIiwiaXNOb25OdWxsYWJsZSIsImlzRnVuY3Rpb24iLCJpc051bWJlciIsIm5vb3AiLCJjb25zdGFudCIsImlkZW50aXR5IiwibmV2ZXIiLCJhbHdheXMiLCJub25lIiwiTk9ORSIsInRodW5rIiwiaWQiLCJtZSIsImZvbGQiLCJfcyIsImlzU29tZSIsImlzTm9uZSIsImdldE9yIiwiZ2V0T3JUaHVuayIsImdldE9yRGllIiwibXNnIiwiRXJyb3IiLCJnZXRPck51bGwiLCJnZXRPclVuZGVmaW5lZCIsIm9yIiwib3JUaHVuayIsIm1hcCIsImVhY2giLCJiaW5kIiwiZXhpc3RzIiwiZm9yYWxsIiwiZmlsdGVyIiwidG9BcnJheSIsInRvU3RyaW5nIiwic29tZSIsImNvbnN0YW50X2EiLCJzZWxmIiwiZiIsImZyb20iLCJPcHRpb25hbCIsImtleXMiLCJvYmoiLCJwcm9wcyIsImsiLCJsZW4iLCJvYmpBY2MiLCJyIiwiaW50ZXJuYWxGaWx0ZXIiLCJwcmVkIiwib25UcnVlIiwib25GYWxzZSIsImhhcyIsImtleSIsImhhc05vbk51bGxhYmxlS2V5IiwibmF0aXZlUHVzaCIsInB1c2giLCJmbGF0dGVuIiwieHMiLCJnZXQiLCJoZWFkIiwiZmluZE1hcCIsImFyciIsIndpbmRvdyIsIkZ1bmN0aW9uIiwicmF3U2V0IiwiZG9tIiwic2V0QXR0cmlidXRlIiwiY29uc29sZSIsImVycm9yIiwic2V0IiwiZWxlbWVudCIsInJlbW92ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImZyb21IdG1sIiwiaHRtbCIsInNjb3BlIiwiZG9jIiwiZG9jdW1lbnQiLCJkaXYiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiaGFzQ2hpbGROb2RlcyIsImNoaWxkTm9kZXMiLCJmcm9tRG9tIiwiZnJvbVRhZyIsInRhZyIsIm5vZGUiLCJmcm9tVGV4dCIsInRleHQiLCJjcmVhdGVUZXh0Tm9kZSIsImZyb21Qb2ludCIsImRvY0VsbSIsInkiLCJlbGVtZW50RnJvbVBvaW50IiwiU3VnYXJFbGVtZW50IiwiZ2xvYmFsJDUiLCJnbG9iYWwkNCIsImdsb2JhbCQzIiwiZ2xvYmFsJDIiLCJoYXNEaW1lbnNpb25zIiwiZWRpdG9yIiwiZ2V0UGFyYW0iLCJoYXNBZHZUYWIiLCJoYXNVcGxvYWRUYWIiLCJnZXRQcmVwZW5kVXJsIiwiZ2V0Q2xhc3NMaXN0IiwiaGFzRGVzY3JpcHRpb24iLCJoYXNJbWFnZVRpdGxlIiwiaGFzSW1hZ2VDYXB0aW9uIiwiZ2V0SW1hZ2VMaXN0IiwiaGFzVXBsb2FkVXJsIiwiaGFzVXBsb2FkSGFuZGxlciIsInNob3dBY2Nlc3NpYmlsaXR5T3B0aW9ucyIsImlzQXV0b21hdGljVXBsb2Fkc0VuYWJsZWQiLCJwYXJzZUludEFuZEdldE1heCIsInZhbDEiLCJ2YWwyIiwiTWF0aCIsIm1heCIsInBhcnNlSW50IiwiZ2V0SW1hZ2VTaXplIiwidXJsIiwiY2FsbGJhY2siLCJpbWciLCJkb25lIiwiZGltZW5zaW9ucyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ3aWR0aCIsImNsaWVudFdpZHRoIiwiaGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwicmVqZWN0Iiwic3R5bGUiLCJ2aXNpYmlsaXR5IiwicG9zaXRpb24iLCJib3R0b20iLCJsZWZ0IiwiYm9keSIsImFwcGVuZENoaWxkIiwic3JjIiwicmVtb3ZlUGl4ZWxTdWZmaXgiLCJyZXBsYWNlIiwiYWRkUGl4ZWxTdWZmaXgiLCJ0ZXN0IiwibWVyZ2VNYXJnaW5zIiwiY3NzIiwibWFyZ2luIiwic3BsaXRNYXJnaW4iLCJzcGxpdCIsImNyZWF0ZUltYWdlTGlzdCIsImltYWdlTGlzdCIsInNlbmQiLCJzdWNjZXNzIiwiSlNPTiIsInBhcnNlIiwid2FpdExvYWRJbWFnZSIsImRhdGEiLCJpbWdFbG0iLCJzZWxlY3RJbWFnZSIsInNlbGVjdGlvbiIsInNlbGVjdCIsIm5vZGVDaGFuZ2VkIiwic2V0QXR0cmlicyIsImJsb2JUb0RhdGFVcmkiLCJibG9iIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsInJlc3VsdCIsIm1lc3NhZ2UiLCJyZWFkQXNEYXRhVVJMIiwiaXNQbGFjZWhvbGRlckltYWdlIiwibm9kZU5hbWUiLCJoYXNBdHRyaWJ1dGUiLCJpc1NhZmVJbWFnZVVybCIsImlzRG9tU2FmZSIsInNldHRpbmdzIiwiRE9NIiwiZ2V0SHNwYWNlIiwiaW1hZ2UiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJnZXRWc3BhY2UiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJnZXRCb3JkZXIiLCJib3JkZXJXaWR0aCIsImdldEF0dHJpYiIsImdldEF0dHJpYnV0ZSIsImdldFN0eWxlIiwiaGFzQ2FwdGlvbiIsInVwZGF0ZUF0dHJpYiIsIndyYXBJbkZpZ3VyZSIsImZpZ3VyZUVsbSIsImNyZWF0ZSIsImluc2VydEFmdGVyIiwiY29udGVudEVkaXRhYmxlIiwicmVtb3ZlRmlndXJlIiwidG9nZ2xlQ2FwdGlvbiIsIm5vcm1hbGl6ZVN0eWxlIiwibm9ybWFsaXplQ3NzIiwiYXR0clZhbHVlIiwic2V0U2l6ZSIsImdldFNpemUiLCJzZXRIc3BhY2UiLCJweFZhbHVlIiwic2V0VnNwYWNlIiwic2V0Qm9yZGVyIiwic2V0Qm9yZGVyU3R5bGUiLCJib3JkZXJTdHlsZSIsImdldEJvcmRlclN0eWxlIiwiaXNGaWd1cmUiLCJlbG0iLCJpc0ltYWdlIiwiZ2V0SXNEZWNvcmF0aXZlIiwiZ2V0QWx0IiwiZGVmYXVsdERhdGEiLCJhbHQiLCJ0aXRsZSIsImNhcHRpb24iLCJoc3BhY2UiLCJ2c3BhY2UiLCJib3JkZXIiLCJpc0RlY29yYXRpdmUiLCJnZXRTdHlsZVZhbHVlIiwid3JpdGUiLCJzZXRBbHQiLCJmaWd1cmUiLCJyZWFkIiwidXBkYXRlUHJvcCIsIm9sZERhdGEiLCJuZXdEYXRhIiwic2V0QXR0cmliIiwic3VnYXJJbWFnZSIsInVwZGF0ZUFsdCIsIm5vcm1hbGl6ZWQiLCJfbmFtZSIsIl92YWx1ZSIsIm5vcm1hbGl6ZUNzcyQxIiwiY3NzVGV4dCIsInN0eWxlcyIsIm1lcmdlZENzcyIsImNvbXByZXNzZWQiLCJzZXJpYWxpemUiLCJnZXRTZWxlY3RlZEltYWdlIiwiZ2V0Tm9kZSIsImdldFBhcmVudCIsInNwbGl0VGV4dEJsb2NrIiwidGV4dEJsb2NrRWxlbWVudHMiLCJzY2hlbWEiLCJnZXRUZXh0QmxvY2tFbGVtZW50cyIsIl8iLCJwYXJlbnRFbG0iLCJpc1ZhbGlkQ2hpbGQiLCJ0ZXh0QmxvY2siLCJnZXRCb2R5IiwicmVhZEltYWdlRGF0YUZyb21TZWxlY3Rpb24iLCJpbnNlcnRJbWFnZUF0Q2FyZXQiLCJmb2N1cyIsInNldENvbnRlbnQiLCJvdXRlckhUTUwiLCJpbnNlcnRlZEVsbSIsInN5bmNTcmNBdHRyIiwiZGVsZXRlSW1hZ2UiLCJpcyIsImlzRW1wdHkiLCJzZXRDdXJzb3JMb2NhdGlvbiIsIndyaXRlSW1hZ2VEYXRhVG9TZWxlY3Rpb24iLCJzYW5pdGl6ZUltYWdlRGF0YSIsImluc2VydE9yVXBkYXRlSW1hZ2UiLCJwYXJ0aWFsRGF0YSIsInNlbGVjdGVkSW1hZ2VEYXRhIiwic2FuaXRpemVkRGF0YSIsImRlZXAiLCJvbGQiLCJudSIsImJvdGhPYmplY3RzIiwiZGVlcE1lcmdlIiwiYmFzZU1lcmdlIiwibWVyZ2VyIiwib2JqZWN0cyIsIl9pIiwicmV0IiwiaiIsImN1ck9iamVjdCIsImlzTm90RW1wdHkiLCJnbG9iYWwkMSIsImdsb2JhbCIsImdldFZhbHVlIiwiaXRlbSIsImdldFRleHQiLCJzYW5pdGl6ZUxpc3QiLCJsaXN0IiwiZXh0cmFjdFZhbHVlIiwib3V0IiwibWVudSIsIml0ZW1zIiwic2FuaXRpemVyIiwiZXh0cmFjdG9yIiwic2FuaXRpemUiLCJpc0dyb3VwIiwiZmluZEVudHJ5RGVsZWdhdGUiLCJmaW5kRW50cnkiLCJvcHRMaXN0IiwiTGlzdFV0aWxzIiwibWFrZVRhYiQyIiwiX2luZm8iLCJsYWJlbCIsImNvbHVtbnMiLCJpbnB1dE1vZGUiLCJBZHZUYWIiLCJtYWtlVGFiIiwiY29sbGVjdCIsInVybExpc3RTYW5pdGl6ZXIiLCJjb252ZXJ0VVJMIiwiZnV0dXJlSW1hZ2VMaXN0IiwiY29tcGxldGVyIiwiY2xhc3NMaXN0IiwiaGFzQWR2VGFiJDEiLCJoYXNVcGxvYWRUYWIkMSIsImhhc1VwbG9hZFVybCQxIiwiaGFzVXBsb2FkSGFuZGxlciQxIiwiaGFzRGVzY3JpcHRpb24kMSIsImhhc0ltYWdlVGl0bGUkMSIsImhhc0RpbWVuc2lvbnMkMSIsImhhc0ltYWdlQ2FwdGlvbiQxIiwiaGFzQWNjZXNzaWJpbGl0eU9wdGlvbnMiLCJhdXRvbWF0aWNVcGxvYWRzIiwicHJlcGVuZFVSTCIsInByZVVybCIsInRoZW4iLCJtYWtlSXRlbXMiLCJpbmZvIiwiaW1hZ2VVcmwiLCJmaWxldHlwZSIsImltYWdlRGVzY3JpcHRpb24iLCJkaXNhYmxlZCIsImltYWdlVGl0bGUiLCJpbWFnZURpbWVuc2lvbnMiLCJnZXREaWFsb2dDb250YWluZXJUeXBlIiwidXNlQ29sdW1ucyIsIm1ha2VUYWIkMSIsIk1haW5UYWIiLCJVcGxvYWRUYWIiLCJjcmVhdGVTdGF0ZSIsInByZXZJbWFnZSIsInByZXZBbHQiLCJvcGVuIiwiZnJvbUltYWdlRGF0YSIsIm1ldGEiLCJpbWFnZXMiLCJjbGFzc2VzIiwiYm9yZGVyc3R5bGUiLCJmaWxlaW5wdXQiLCJ0b0ltYWdlRGF0YSIsInJlbW92ZUVtcHR5QWx0IiwiYWRkUHJlcGVuZFVybDIiLCJzcmNVUkwiLCJwcmVwZW5kVXJsIiwic3Vic3RyaW5nIiwiYWRkUHJlcGVuZFVybCIsImFwaSIsImdldERhdGEiLCJzZXREYXRhIiwiZm9ybUZpbGxGcm9tTWV0YTIiLCJlbnRyeSIsImZvcm1GaWxsRnJvbU1ldGEiLCJjYWxjdWxhdGVJbWFnZVNpemUiLCJoZWxwZXJzIiwic3RhdGUiLCJpbWFnZVNpemUiLCJzaXplIiwiZSIsInVwZGF0ZUltYWdlc0Ryb3Bkb3duIiwiY2hhbmdlU3JjIiwiY2hhbmdlSW1hZ2VzIiwiY2FsY1ZTcGFjZSIsIm1hdGNoaW5nVG9wQm90dG9tIiwiY2FsY0hTcGFjZSIsIm1hdGNoaW5nTGVmdFJpZ2h0IiwiY2FsY0JvcmRlcldpZHRoIiwiY2FsY0JvcmRlclN0eWxlIiwiY2FsY1N0eWxlIiwicGFyc2VTdHlsZSIsInNlcmlhbGl6ZVN0eWxlIiwiY2hhbmdlU3R5bGUyIiwiZGF0YUNvcHkiLCJjaGFuZ2VTdHlsZSIsImNoYW5nZUFTdHlsZSIsImNoYW5nZUZpbGVJbnB1dCIsImJsb2NrIiwidW5ibG9jayIsImZpbGUiLCJibG9iVXJpIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZmluYWxpemUiLCJyZXZva2VPYmplY3RVUkwiLCJ1cGRhdGVTcmNBbmRTd2l0Y2hUYWIiLCJzaG93VGFiIiwiZGF0YVVybCIsImJsb2JJbmZvIiwiY3JlYXRlQmxvYkNhY2hlIiwidXBsb2FkSW1hZ2UiLCJlcnIiLCJhbGVydEVyciIsImFkZFRvQmxvYkNhY2hlIiwiY2hhbmdlSGFuZGxlciIsImV2dCIsImRpc2FibGUiLCJlbmFibGUiLCJjbG9zZUhhbmRsZXIiLCJtYWtlRGlhbG9nQm9keSIsInRhYlBhbmVsIiwidGFicyIsInBhbmVsIiwibWFrZURpYWxvZyIsImJ1dHRvbnMiLCJwcmltYXJ5IiwiaW5pdGlhbERhdGEiLCJvblN1Ym1pdCIsIm9uQ2hhbmdlIiwib25DbG9zZSIsInN1Ym1pdEhhbmRsZXIiLCJleGVjQ29tbWFuZCIsImVkaXRvclVwbG9hZCIsInVwbG9hZEltYWdlc0F1dG8iLCJjbG9zZSIsImRvY3VtZW50QmFzZVVSSSIsInRvQWJzb2x1dGUiLCJibG9iQ2FjaGUiLCJmaWxlbmFtZSIsImJhc2U2NCIsImFkZCIsIndpbmRvd01hbmFnZXIiLCJhbGVydCIsInN0eWxlc0FyZyIsInVwbG9hZCIsInJlc3VsdHMiLCJzdGF0dXMiLCJEaWFsb2ciLCJyZWdpc3RlciQxIiwiYWRkQ29tbWFuZCIsIl91aSIsInVuZG9NYW5hZ2VyIiwidHJhbnNhY3QiLCJoYXNJbWFnZUNsYXNzIiwiY2xhc3NOYW1lIiwiYXR0ciIsInRvZ2dsZUNvbnRlbnRFZGl0YWJsZVN0YXRlIiwibm9kZXMiLCJ0b2dnbGVDb250ZW50RWRpdGFibGUiLCJnZXRBbGwiLCJzZXR1cCIsIm9uIiwicGFyc2VyIiwiYWRkTm9kZUZpbHRlciIsInNlcmlhbGl6ZXIiLCJyZWdpc3RlciIsInVpIiwicmVnaXN0cnkiLCJhZGRUb2dnbGVCdXR0b24iLCJpY29uIiwidG9vbHRpcCIsIm9uQWN0aW9uIiwib25TZXR1cCIsImJ1dHRvbkFwaSIsInNldEFjdGl2ZSIsInNlbGVjdG9yQ2hhbmdlZFdpdGhVbmJpbmQiLCJ1bmJpbmQiLCJhZGRNZW51SXRlbSIsImFkZENvbnRleHRNZW51IiwidXBkYXRlIiwiUGx1Z2luIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQyxhQUFZO0FBQ1Q7O0FBRUEsTUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUNDLElBQVIsQ0FBYUMsS0FBYixDQUFtQkMsT0FBbkIsQ0FBMkIsdUJBQTNCLENBQWY7O0FBRUEsTUFBSUMsT0FBUSxHQUFHLG9CQUFZO0FBQ3pCQSxJQUFBQSxPQUFRLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxJQUFpQixTQUFTRixRQUFULENBQWtCRyxDQUFsQixFQUFxQjtBQUMvQyxXQUFLLElBQUlDLENBQUosRUFBT0MsQ0FBQyxHQUFHLENBQVgsRUFBY0MsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQWpDLEVBQXlDSCxDQUFDLEdBQUdDLENBQTdDLEVBQWdERCxDQUFDLEVBQWpELEVBQXFEO0FBQ25ERCxRQUFBQSxDQUFDLEdBQUdHLFNBQVMsQ0FBQ0YsQ0FBRCxDQUFiOztBQUNBLGFBQUssSUFBSUksQ0FBVCxJQUFjTCxDQUFkO0FBQ0UsY0FBSUgsTUFBTSxDQUFDUyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNSLENBQXJDLEVBQXdDSyxDQUF4QyxDQUFKLEVBQ0VOLENBQUMsQ0FBQ00sQ0FBRCxDQUFELEdBQU9MLENBQUMsQ0FBQ0ssQ0FBRCxDQUFSO0FBRko7QUFHRDs7QUFDRCxhQUFPTixDQUFQO0FBQ0QsS0FSRDs7QUFTQSxXQUFPSCxPQUFRLENBQUNhLEtBQVQsQ0FBZSxJQUFmLEVBQXFCTixTQUFyQixDQUFQO0FBQ0QsR0FYRDs7QUFhQSxNQUFJTyxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFVQyxDQUFWLEVBQWE7QUFDeEIsUUFBSVosQ0FBQyxXQUFVWSxDQUFWLENBQUw7O0FBQ0EsUUFBSUEsQ0FBQyxLQUFLLElBQVYsRUFBZ0I7QUFDZCxhQUFPLE1BQVA7QUFDRCxLQUZELE1BRU8sSUFBSVosQ0FBQyxLQUFLLFFBQU4sS0FBbUJhLEtBQUssQ0FBQ04sU0FBTixDQUFnQk8sYUFBaEIsQ0FBOEJGLENBQTlCLEtBQW9DQSxDQUFDLENBQUNHLFdBQUYsSUFBaUJILENBQUMsQ0FBQ0csV0FBRixDQUFjQyxJQUFkLEtBQXVCLE9BQS9GLENBQUosRUFBNkc7QUFDbEgsYUFBTyxPQUFQO0FBQ0QsS0FGTSxNQUVBLElBQUloQixDQUFDLEtBQUssUUFBTixLQUFtQmlCLE1BQU0sQ0FBQ1YsU0FBUCxDQUFpQk8sYUFBakIsQ0FBK0JGLENBQS9CLEtBQXFDQSxDQUFDLENBQUNHLFdBQUYsSUFBaUJILENBQUMsQ0FBQ0csV0FBRixDQUFjQyxJQUFkLEtBQXVCLFFBQWhHLENBQUosRUFBK0c7QUFDcEgsYUFBTyxRQUFQO0FBQ0QsS0FGTSxNQUVBO0FBQ0wsYUFBT2hCLENBQVA7QUFDRDtBQUNGLEdBWEQ7O0FBWUEsTUFBSWtCLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVVDLElBQVYsRUFBZ0I7QUFDM0IsV0FBTyxVQUFVQyxLQUFWLEVBQWlCO0FBQ3RCLGFBQU9ULE1BQU0sQ0FBQ1MsS0FBRCxDQUFOLEtBQWtCRCxJQUF6QjtBQUNELEtBRkQ7QUFHRCxHQUpEOztBQUtBLE1BQUlFLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVVGLElBQVYsRUFBZ0I7QUFDakMsV0FBTyxVQUFVQyxLQUFWLEVBQWlCO0FBQ3RCLGFBQU8sUUFBT0EsS0FBUCxNQUFpQkQsSUFBeEI7QUFDRCxLQUZEO0FBR0QsR0FKRDs7QUFLQSxNQUFJRyxFQUFFLEdBQUcsU0FBTEEsRUFBSyxDQUFVdEIsQ0FBVixFQUFhO0FBQ3BCLFdBQU8sVUFBVXVCLENBQVYsRUFBYTtBQUNsQixhQUFPdkIsQ0FBQyxLQUFLdUIsQ0FBYjtBQUNELEtBRkQ7QUFHRCxHQUpEOztBQUtBLE1BQUlDLFFBQVEsR0FBR04sTUFBTSxDQUFDLFFBQUQsQ0FBckI7QUFDQSxNQUFJTyxRQUFRLEdBQUdQLE1BQU0sQ0FBQyxRQUFELENBQXJCO0FBQ0EsTUFBSVEsT0FBTyxHQUFHUixNQUFNLENBQUMsT0FBRCxDQUFwQjtBQUNBLE1BQUlTLE1BQU0sR0FBR0wsRUFBRSxDQUFDLElBQUQsQ0FBZjtBQUNBLE1BQUlNLFNBQVMsR0FBR1AsWUFBWSxDQUFDLFNBQUQsQ0FBNUI7O0FBQ0EsTUFBSVEsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBVU4sQ0FBVixFQUFhO0FBQzVCLFdBQU9BLENBQUMsS0FBSyxJQUFOLElBQWNBLENBQUMsS0FBS08sU0FBM0I7QUFDRCxHQUZEOztBQUdBLE1BQUlDLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBVVIsQ0FBVixFQUFhO0FBQy9CLFdBQU8sQ0FBQ00sVUFBVSxDQUFDTixDQUFELENBQWxCO0FBQ0QsR0FGRDs7QUFHQSxNQUFJUyxVQUFVLEdBQUdYLFlBQVksQ0FBQyxVQUFELENBQTdCO0FBQ0EsTUFBSVksUUFBUSxHQUFHWixZQUFZLENBQUMsUUFBRCxDQUEzQjs7QUFFQSxNQUFJYSxJQUFJLEdBQUcsU0FBUEEsSUFBTyxHQUFZLENBQ3RCLENBREQ7O0FBRUEsTUFBSUMsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBVWYsS0FBVixFQUFpQjtBQUM5QixXQUFPLFlBQVk7QUFDakIsYUFBT0EsS0FBUDtBQUNELEtBRkQ7QUFHRCxHQUpEOztBQUtBLE1BQUlnQixRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFVeEIsQ0FBVixFQUFhO0FBQzFCLFdBQU9BLENBQVA7QUFDRCxHQUZEOztBQUdBLE1BQUl5QixLQUFLLEdBQUdGLFFBQVEsQ0FBQyxLQUFELENBQXBCO0FBQ0EsTUFBSUcsTUFBTSxHQUFHSCxRQUFRLENBQUMsSUFBRCxDQUFyQjs7QUFFQSxNQUFJSSxJQUFJLEdBQUcsU0FBUEEsSUFBTyxHQUFZO0FBQ3JCLFdBQU9DLElBQVA7QUFDRCxHQUZEOztBQUdBLE1BQUlBLElBQUksR0FBRyxZQUFZO0FBQ3JCLFFBQUkvQixJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFVZ0MsS0FBVixFQUFpQjtBQUMxQixhQUFPQSxLQUFLLEVBQVo7QUFDRCxLQUZEOztBQUdBLFFBQUlDLEVBQUUsR0FBR04sUUFBVDtBQUNBLFFBQUlPLEVBQUUsR0FBRztBQUNQQyxNQUFBQSxJQUFJLEVBQUUsY0FBVXpDLENBQVYsRUFBYTBDLEVBQWIsRUFBaUI7QUFDckIsZUFBTzFDLENBQUMsRUFBUjtBQUNELE9BSE07QUFJUDJDLE1BQUFBLE1BQU0sRUFBRVQsS0FKRDtBQUtQVSxNQUFBQSxNQUFNLEVBQUVULE1BTEQ7QUFNUFUsTUFBQUEsS0FBSyxFQUFFTixFQU5BO0FBT1BPLE1BQUFBLFVBQVUsRUFBRXhDLElBUEw7QUFRUHlDLE1BQUFBLFFBQVEsRUFBRSxrQkFBVUMsR0FBVixFQUFlO0FBQ3ZCLGNBQU0sSUFBSUMsS0FBSixDQUFVRCxHQUFHLElBQUksaUNBQWpCLENBQU47QUFDRCxPQVZNO0FBV1BFLE1BQUFBLFNBQVMsRUFBRWxCLFFBQVEsQ0FBQyxJQUFELENBWFo7QUFZUG1CLE1BQUFBLGNBQWMsRUFBRW5CLFFBQVEsQ0FBQ0wsU0FBRCxDQVpqQjtBQWFQeUIsTUFBQUEsRUFBRSxFQUFFYixFQWJHO0FBY1BjLE1BQUFBLE9BQU8sRUFBRS9DLElBZEY7QUFlUGdELE1BQUFBLEdBQUcsRUFBRWxCLElBZkU7QUFnQlBtQixNQUFBQSxJQUFJLEVBQUV4QixJQWhCQztBQWlCUHlCLE1BQUFBLElBQUksRUFBRXBCLElBakJDO0FBa0JQcUIsTUFBQUEsTUFBTSxFQUFFdkIsS0FsQkQ7QUFtQlB3QixNQUFBQSxNQUFNLEVBQUV2QixNQW5CRDtBQW9CUHdCLE1BQUFBLE1BQU0sRUFBRSxrQkFBWTtBQUNsQixlQUFPdkIsSUFBSSxFQUFYO0FBQ0QsT0F0Qk07QUF1QlB3QixNQUFBQSxPQUFPLEVBQUUsbUJBQVk7QUFDbkIsZUFBTyxFQUFQO0FBQ0QsT0F6Qk07QUEwQlBDLE1BQUFBLFFBQVEsRUFBRTdCLFFBQVEsQ0FBQyxRQUFEO0FBMUJYLEtBQVQ7QUE0QkEsV0FBT1EsRUFBUDtBQUNELEdBbENVLEVBQVg7O0FBbUNBLE1BQUlzQixJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFVMUMsQ0FBVixFQUFhO0FBQ3RCLFFBQUkyQyxVQUFVLEdBQUcvQixRQUFRLENBQUNaLENBQUQsQ0FBekI7O0FBQ0EsUUFBSTRDLElBQUksR0FBRyxTQUFQQSxJQUFPLEdBQVk7QUFDckIsYUFBT3hCLEVBQVA7QUFDRCxLQUZEOztBQUdBLFFBQUlnQixJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFVUyxDQUFWLEVBQWE7QUFDdEIsYUFBT0EsQ0FBQyxDQUFDN0MsQ0FBRCxDQUFSO0FBQ0QsS0FGRDs7QUFHQSxRQUFJb0IsRUFBRSxHQUFHO0FBQ1BDLE1BQUFBLElBQUksRUFBRSxjQUFVekMsQ0FBVixFQUFhRixDQUFiLEVBQWdCO0FBQ3BCLGVBQU9BLENBQUMsQ0FBQ3NCLENBQUQsQ0FBUjtBQUNELE9BSE07QUFJUHVCLE1BQUFBLE1BQU0sRUFBRVIsTUFKRDtBQUtQUyxNQUFBQSxNQUFNLEVBQUVWLEtBTEQ7QUFNUFcsTUFBQUEsS0FBSyxFQUFFa0IsVUFOQTtBQU9QakIsTUFBQUEsVUFBVSxFQUFFaUIsVUFQTDtBQVFQaEIsTUFBQUEsUUFBUSxFQUFFZ0IsVUFSSDtBQVNQYixNQUFBQSxTQUFTLEVBQUVhLFVBVEo7QUFVUFosTUFBQUEsY0FBYyxFQUFFWSxVQVZUO0FBV1BYLE1BQUFBLEVBQUUsRUFBRVksSUFYRztBQVlQWCxNQUFBQSxPQUFPLEVBQUVXLElBWkY7QUFhUFYsTUFBQUEsR0FBRyxFQUFFLGFBQVVXLENBQVYsRUFBYTtBQUNoQixlQUFPSCxJQUFJLENBQUNHLENBQUMsQ0FBQzdDLENBQUQsQ0FBRixDQUFYO0FBQ0QsT0FmTTtBQWdCUG1DLE1BQUFBLElBQUksRUFBRSxjQUFVVSxDQUFWLEVBQWE7QUFDakJBLFFBQUFBLENBQUMsQ0FBQzdDLENBQUQsQ0FBRDtBQUNELE9BbEJNO0FBbUJQb0MsTUFBQUEsSUFBSSxFQUFFQSxJQW5CQztBQW9CUEMsTUFBQUEsTUFBTSxFQUFFRCxJQXBCRDtBQXFCUEUsTUFBQUEsTUFBTSxFQUFFRixJQXJCRDtBQXNCUEcsTUFBQUEsTUFBTSxFQUFFLGdCQUFVTSxDQUFWLEVBQWE7QUFDbkIsZUFBT0EsQ0FBQyxDQUFDN0MsQ0FBRCxDQUFELEdBQU9vQixFQUFQLEdBQVlILElBQW5CO0FBQ0QsT0F4Qk07QUF5QlB1QixNQUFBQSxPQUFPLEVBQUUsbUJBQVk7QUFDbkIsZUFBTyxDQUFDeEMsQ0FBRCxDQUFQO0FBQ0QsT0EzQk07QUE0QlB5QyxNQUFBQSxRQUFRLEVBQUUsb0JBQVk7QUFDcEIsZUFBTyxVQUFVekMsQ0FBVixHQUFjLEdBQXJCO0FBQ0Q7QUE5Qk0sS0FBVDtBQWdDQSxXQUFPb0IsRUFBUDtBQUNELEdBekNEOztBQTBDQSxNQUFJMEIsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBVWpELEtBQVYsRUFBaUI7QUFDMUIsV0FBT0EsS0FBSyxLQUFLLElBQVYsSUFBa0JBLEtBQUssS0FBS1UsU0FBNUIsR0FBd0NVLElBQXhDLEdBQStDeUIsSUFBSSxDQUFDN0MsS0FBRCxDQUExRDtBQUNELEdBRkQ7O0FBR0EsTUFBSWtELFFBQVEsR0FBRztBQUNiTCxJQUFBQSxJQUFJLEVBQUVBLElBRE87QUFFYjFCLElBQUFBLElBQUksRUFBRUEsSUFGTztBQUdiOEIsSUFBQUEsSUFBSSxFQUFFQTtBQUhPLEdBQWY7QUFNQSxNQUFJRSxJQUFJLEdBQUd6RSxNQUFNLENBQUN5RSxJQUFsQjtBQUNBLE1BQUkvRCxjQUFjLEdBQUdWLE1BQU0sQ0FBQ1UsY0FBNUI7O0FBQ0EsTUFBSWtELElBQUksR0FBRyxTQUFQQSxJQUFPLENBQVVjLEdBQVYsRUFBZUosQ0FBZixFQUFrQjtBQUMzQixRQUFJSyxLQUFLLEdBQUdGLElBQUksQ0FBQ0MsR0FBRCxDQUFoQjs7QUFDQSxTQUFLLElBQUlFLENBQUMsR0FBRyxDQUFSLEVBQVdDLEdBQUcsR0FBR0YsS0FBSyxDQUFDcEUsTUFBNUIsRUFBb0NxRSxDQUFDLEdBQUdDLEdBQXhDLEVBQTZDRCxDQUFDLEVBQTlDLEVBQWtEO0FBQ2hELFVBQUl4RSxDQUFDLEdBQUd1RSxLQUFLLENBQUNDLENBQUQsQ0FBYjtBQUNBLFVBQUk5RCxDQUFDLEdBQUc0RCxHQUFHLENBQUN0RSxDQUFELENBQVg7QUFDQWtFLE1BQUFBLENBQUMsQ0FBQ3hELENBQUQsRUFBSVYsQ0FBSixDQUFEO0FBQ0Q7QUFDRixHQVBEOztBQVFBLE1BQUkwRSxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFVQyxDQUFWLEVBQWE7QUFDeEIsV0FBTyxVQUFVakUsQ0FBVixFQUFhVixDQUFiLEVBQWdCO0FBQ3JCMkUsTUFBQUEsQ0FBQyxDQUFDM0UsQ0FBRCxDQUFELEdBQU9VLENBQVA7QUFDRCxLQUZEO0FBR0QsR0FKRDs7QUFLQSxNQUFJa0UsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFVTixHQUFWLEVBQWVPLElBQWYsRUFBcUJDLE1BQXJCLEVBQTZCQyxPQUE3QixFQUFzQztBQUN6RCxRQUFJSixDQUFDLEdBQUcsRUFBUjtBQUNBbkIsSUFBQUEsSUFBSSxDQUFDYyxHQUFELEVBQU0sVUFBVTVELENBQVYsRUFBYVYsQ0FBYixFQUFnQjtBQUN4QixPQUFDNkUsSUFBSSxDQUFDbkUsQ0FBRCxFQUFJVixDQUFKLENBQUosR0FBYThFLE1BQWIsR0FBc0JDLE9BQXZCLEVBQWdDckUsQ0FBaEMsRUFBbUNWLENBQW5DO0FBQ0QsS0FGRyxDQUFKO0FBR0EsV0FBTzJFLENBQVA7QUFDRCxHQU5EOztBQU9BLE1BQUlmLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVVVLEdBQVYsRUFBZU8sSUFBZixFQUFxQjtBQUNoQyxRQUFJL0UsQ0FBQyxHQUFHLEVBQVI7QUFDQThFLElBQUFBLGNBQWMsQ0FBQ04sR0FBRCxFQUFNTyxJQUFOLEVBQVlILE1BQU0sQ0FBQzVFLENBQUQsQ0FBbEIsRUFBdUJrQyxJQUF2QixDQUFkO0FBQ0EsV0FBT2xDLENBQVA7QUFDRCxHQUpEOztBQUtBLE1BQUlrRixHQUFHLEdBQUcsU0FBTkEsR0FBTSxDQUFVVixHQUFWLEVBQWVXLEdBQWYsRUFBb0I7QUFDNUIsV0FBTzNFLGNBQWMsQ0FBQ0MsSUFBZixDQUFvQitELEdBQXBCLEVBQXlCVyxHQUF6QixDQUFQO0FBQ0QsR0FGRDs7QUFHQSxNQUFJQyxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLENBQVVaLEdBQVYsRUFBZVcsR0FBZixFQUFvQjtBQUMxQyxXQUFPRCxHQUFHLENBQUNWLEdBQUQsRUFBTVcsR0FBTixDQUFILElBQWlCWCxHQUFHLENBQUNXLEdBQUQsQ0FBSCxLQUFhckQsU0FBOUIsSUFBMkMwQyxHQUFHLENBQUNXLEdBQUQsQ0FBSCxLQUFhLElBQS9EO0FBQ0QsR0FGRDs7QUFJQSxNQUFJRSxVQUFVLEdBQUd4RSxLQUFLLENBQUNOLFNBQU4sQ0FBZ0IrRSxJQUFqQzs7QUFDQSxNQUFJQyxPQUFPLEdBQUcsU0FBVkEsT0FBVSxDQUFVQyxFQUFWLEVBQWM7QUFDMUIsUUFBSVgsQ0FBQyxHQUFHLEVBQVI7O0FBQ0EsU0FBSyxJQUFJM0UsQ0FBQyxHQUFHLENBQVIsRUFBV3lFLEdBQUcsR0FBR2EsRUFBRSxDQUFDbkYsTUFBekIsRUFBaUNILENBQUMsR0FBR3lFLEdBQXJDLEVBQTBDLEVBQUV6RSxDQUE1QyxFQUErQztBQUM3QyxVQUFJLENBQUN3QixPQUFPLENBQUM4RCxFQUFFLENBQUN0RixDQUFELENBQUgsQ0FBWixFQUFxQjtBQUNuQixjQUFNLElBQUlrRCxLQUFKLENBQVUsc0JBQXNCbEQsQ0FBdEIsR0FBMEIsNEJBQTFCLEdBQXlEc0YsRUFBbkUsQ0FBTjtBQUNEOztBQUNESCxNQUFBQSxVQUFVLENBQUMzRSxLQUFYLENBQWlCbUUsQ0FBakIsRUFBb0JXLEVBQUUsQ0FBQ3RGLENBQUQsQ0FBdEI7QUFDRDs7QUFDRCxXQUFPMkUsQ0FBUDtBQUNELEdBVEQ7O0FBVUEsTUFBSVksR0FBRyxHQUFHLFNBQU5BLEdBQU0sQ0FBVUQsRUFBVixFQUFjdEYsQ0FBZCxFQUFpQjtBQUN6QixXQUFPQSxDQUFDLElBQUksQ0FBTCxJQUFVQSxDQUFDLEdBQUdzRixFQUFFLENBQUNuRixNQUFqQixHQUEwQmlFLFFBQVEsQ0FBQ0wsSUFBVCxDQUFjdUIsRUFBRSxDQUFDdEYsQ0FBRCxDQUFoQixDQUExQixHQUFpRG9FLFFBQVEsQ0FBQy9CLElBQVQsRUFBeEQ7QUFDRCxHQUZEOztBQUdBLE1BQUltRCxJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFVRixFQUFWLEVBQWM7QUFDdkIsV0FBT0MsR0FBRyxDQUFDRCxFQUFELEVBQUssQ0FBTCxDQUFWO0FBQ0QsR0FGRDs7QUFHQSxNQUFJRyxPQUFPLEdBQUcsU0FBVkEsT0FBVSxDQUFVQyxHQUFWLEVBQWV4QixDQUFmLEVBQWtCO0FBQzlCLFNBQUssSUFBSWxFLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcwRixHQUFHLENBQUN2RixNQUF4QixFQUFnQ0gsQ0FBQyxFQUFqQyxFQUFxQztBQUNuQyxVQUFJMkUsQ0FBQyxHQUFHVCxDQUFDLENBQUN3QixHQUFHLENBQUMxRixDQUFELENBQUosRUFBU0EsQ0FBVCxDQUFUOztBQUNBLFVBQUkyRSxDQUFDLENBQUMvQixNQUFGLEVBQUosRUFBZ0I7QUFDZCxlQUFPK0IsQ0FBUDtBQUNEO0FBQ0Y7O0FBQ0QsV0FBT1AsUUFBUSxDQUFDL0IsSUFBVCxFQUFQO0FBQ0QsR0FSRDs7QUFVQSxTQUFPc0QsTUFBUCxLQUFrQixXQUFsQixHQUFnQ0EsTUFBaEMsR0FBeUNDLFFBQVEsQ0FBQyxjQUFELENBQVIsRUFBekM7O0FBRUEsTUFBSUMsTUFBTSxHQUFHLFNBQVRBLE1BQVMsQ0FBVUMsR0FBVixFQUFlYixHQUFmLEVBQW9CL0QsS0FBcEIsRUFBMkI7QUFDdEMsUUFBSUksUUFBUSxDQUFDSixLQUFELENBQVIsSUFBbUJRLFNBQVMsQ0FBQ1IsS0FBRCxDQUE1QixJQUF1Q2EsUUFBUSxDQUFDYixLQUFELENBQW5ELEVBQTREO0FBQzFENEUsTUFBQUEsR0FBRyxDQUFDQyxZQUFKLENBQWlCZCxHQUFqQixFQUFzQi9ELEtBQUssR0FBRyxFQUE5QjtBQUNELEtBRkQsTUFFTztBQUNMOEUsTUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWMscUNBQWQsRUFBcURoQixHQUFyRCxFQUEwRCxXQUExRCxFQUF1RS9ELEtBQXZFLEVBQThFLGFBQTlFLEVBQTZGNEUsR0FBN0Y7QUFDQSxZQUFNLElBQUk1QyxLQUFKLENBQVUsZ0NBQVYsQ0FBTjtBQUNEO0FBQ0YsR0FQRDs7QUFRQSxNQUFJZ0QsR0FBRyxHQUFHLFNBQU5BLEdBQU0sQ0FBVUMsT0FBVixFQUFtQmxCLEdBQW5CLEVBQXdCL0QsS0FBeEIsRUFBK0I7QUFDdkMyRSxJQUFBQSxNQUFNLENBQUNNLE9BQU8sQ0FBQ0wsR0FBVCxFQUFjYixHQUFkLEVBQW1CL0QsS0FBbkIsQ0FBTjtBQUNELEdBRkQ7O0FBR0EsTUFBSWtGLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVVELE9BQVYsRUFBbUJsQixHQUFuQixFQUF3QjtBQUNuQ2tCLElBQUFBLE9BQU8sQ0FBQ0wsR0FBUixDQUFZTyxlQUFaLENBQTRCcEIsR0FBNUI7QUFDRCxHQUZEOztBQUlBLE1BQUlxQixRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFVQyxJQUFWLEVBQWdCQyxLQUFoQixFQUF1QjtBQUNwQyxRQUFJQyxHQUFHLEdBQUdELEtBQUssSUFBSUUsUUFBbkI7QUFDQSxRQUFJQyxHQUFHLEdBQUdGLEdBQUcsQ0FBQ0csYUFBSixDQUFrQixLQUFsQixDQUFWO0FBQ0FELElBQUFBLEdBQUcsQ0FBQ0UsU0FBSixHQUFnQk4sSUFBaEI7O0FBQ0EsUUFBSSxDQUFDSSxHQUFHLENBQUNHLGFBQUosRUFBRCxJQUF3QkgsR0FBRyxDQUFDSSxVQUFKLENBQWU1RyxNQUFmLEdBQXdCLENBQXBELEVBQXVEO0FBQ3JENkYsTUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWMsdUNBQWQsRUFBdURNLElBQXZEO0FBQ0EsWUFBTSxJQUFJckQsS0FBSixDQUFVLG1DQUFWLENBQU47QUFDRDs7QUFDRCxXQUFPOEQsT0FBTyxDQUFDTCxHQUFHLENBQUNJLFVBQUosQ0FBZSxDQUFmLENBQUQsQ0FBZDtBQUNELEdBVEQ7O0FBVUEsTUFBSUUsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBVUMsR0FBVixFQUFlVixLQUFmLEVBQXNCO0FBQ2xDLFFBQUlDLEdBQUcsR0FBR0QsS0FBSyxJQUFJRSxRQUFuQjtBQUNBLFFBQUlTLElBQUksR0FBR1YsR0FBRyxDQUFDRyxhQUFKLENBQWtCTSxHQUFsQixDQUFYO0FBQ0EsV0FBT0YsT0FBTyxDQUFDRyxJQUFELENBQWQ7QUFDRCxHQUpEOztBQUtBLE1BQUlDLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVVDLElBQVYsRUFBZ0JiLEtBQWhCLEVBQXVCO0FBQ3BDLFFBQUlDLEdBQUcsR0FBR0QsS0FBSyxJQUFJRSxRQUFuQjtBQUNBLFFBQUlTLElBQUksR0FBR1YsR0FBRyxDQUFDYSxjQUFKLENBQW1CRCxJQUFuQixDQUFYO0FBQ0EsV0FBT0wsT0FBTyxDQUFDRyxJQUFELENBQWQ7QUFDRCxHQUpEOztBQUtBLE1BQUlILE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQVVHLElBQVYsRUFBZ0I7QUFDNUIsUUFBSUEsSUFBSSxLQUFLLElBQVQsSUFBaUJBLElBQUksS0FBS3ZGLFNBQTlCLEVBQXlDO0FBQ3ZDLFlBQU0sSUFBSXNCLEtBQUosQ0FBVSxrQ0FBVixDQUFOO0FBQ0Q7O0FBQ0QsV0FBTztBQUFFNEMsTUFBQUEsR0FBRyxFQUFFcUI7QUFBUCxLQUFQO0FBQ0QsR0FMRDs7QUFNQSxNQUFJSSxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFVQyxNQUFWLEVBQWtCOUcsQ0FBbEIsRUFBcUIrRyxDQUFyQixFQUF3QjtBQUN0QyxXQUFPckQsUUFBUSxDQUFDRCxJQUFULENBQWNxRCxNQUFNLENBQUMxQixHQUFQLENBQVc0QixnQkFBWCxDQUE0QmhILENBQTVCLEVBQStCK0csQ0FBL0IsQ0FBZCxFQUFpRGxFLEdBQWpELENBQXFEeUQsT0FBckQsQ0FBUDtBQUNELEdBRkQ7O0FBR0EsTUFBSVcsWUFBWSxHQUFHO0FBQ2pCckIsSUFBQUEsUUFBUSxFQUFFQSxRQURPO0FBRWpCVyxJQUFBQSxPQUFPLEVBQUVBLE9BRlE7QUFHakJHLElBQUFBLFFBQVEsRUFBRUEsUUFITztBQUlqQkosSUFBQUEsT0FBTyxFQUFFQSxPQUpRO0FBS2pCTyxJQUFBQSxTQUFTLEVBQUVBO0FBTE0sR0FBbkI7QUFRQSxNQUFJSyxRQUFRLEdBQUdySSxPQUFPLENBQUNDLElBQVIsQ0FBYUMsS0FBYixDQUFtQkMsT0FBbkIsQ0FBMkIsc0JBQTNCLENBQWY7QUFFQSxNQUFJbUksUUFBUSxHQUFHdEksT0FBTyxDQUFDQyxJQUFSLENBQWFDLEtBQWIsQ0FBbUJDLE9BQW5CLENBQTJCLHNCQUEzQixDQUFmO0FBRUEsTUFBSW9JLFFBQVEsR0FBR3ZJLE9BQU8sQ0FBQ0MsSUFBUixDQUFhQyxLQUFiLENBQW1CQyxPQUFuQixDQUEyQixrQkFBM0IsQ0FBZjtBQUVBLE1BQUlxSSxRQUFRLEdBQUd4SSxPQUFPLENBQUNDLElBQVIsQ0FBYUMsS0FBYixDQUFtQkMsT0FBbkIsQ0FBMkIsa0JBQTNCLENBQWY7O0FBRUEsTUFBSXNJLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBVUMsTUFBVixFQUFrQjtBQUNwQyxXQUFPQSxNQUFNLENBQUNDLFFBQVAsQ0FBZ0Isa0JBQWhCLEVBQW9DLElBQXBDLEVBQTBDLFNBQTFDLENBQVA7QUFDRCxHQUZEOztBQUdBLE1BQUlDLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQVVGLE1BQVYsRUFBa0I7QUFDaEMsV0FBT0EsTUFBTSxDQUFDQyxRQUFQLENBQWdCLGNBQWhCLEVBQWdDLEtBQWhDLEVBQXVDLFNBQXZDLENBQVA7QUFDRCxHQUZEOztBQUdBLE1BQUlFLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVVILE1BQVYsRUFBa0I7QUFDbkMsV0FBT0EsTUFBTSxDQUFDQyxRQUFQLENBQWdCLGlCQUFoQixFQUFtQyxJQUFuQyxFQUF5QyxTQUF6QyxDQUFQO0FBQ0QsR0FGRDs7QUFHQSxNQUFJRyxhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLENBQVVKLE1BQVYsRUFBa0I7QUFDcEMsV0FBT0EsTUFBTSxDQUFDQyxRQUFQLENBQWdCLG1CQUFoQixFQUFxQyxFQUFyQyxFQUF5QyxRQUF6QyxDQUFQO0FBQ0QsR0FGRDs7QUFHQSxNQUFJSSxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFVTCxNQUFWLEVBQWtCO0FBQ25DLFdBQU9BLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQixrQkFBaEIsQ0FBUDtBQUNELEdBRkQ7O0FBR0EsTUFBSUssY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFVTixNQUFWLEVBQWtCO0FBQ3JDLFdBQU9BLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQixtQkFBaEIsRUFBcUMsSUFBckMsRUFBMkMsU0FBM0MsQ0FBUDtBQUNELEdBRkQ7O0FBR0EsTUFBSU0sYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFVUCxNQUFWLEVBQWtCO0FBQ3BDLFdBQU9BLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQixhQUFoQixFQUErQixLQUEvQixFQUFzQyxTQUF0QyxDQUFQO0FBQ0QsR0FGRDs7QUFHQSxNQUFJTyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQVVSLE1BQVYsRUFBa0I7QUFDdEMsV0FBT0EsTUFBTSxDQUFDQyxRQUFQLENBQWdCLGVBQWhCLEVBQWlDLEtBQWpDLEVBQXdDLFNBQXhDLENBQVA7QUFDRCxHQUZEOztBQUdBLE1BQUlRLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVVULE1BQVYsRUFBa0I7QUFDbkMsV0FBT0EsTUFBTSxDQUFDQyxRQUFQLENBQWdCLFlBQWhCLEVBQThCLEtBQTlCLENBQVA7QUFDRCxHQUZEOztBQUdBLE1BQUlTLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVVWLE1BQVYsRUFBa0I7QUFDbkMsV0FBT3BHLGFBQWEsQ0FBQ29HLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQixtQkFBaEIsQ0FBRCxDQUFwQjtBQUNELEdBRkQ7O0FBR0EsTUFBSVUsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFVWCxNQUFWLEVBQWtCO0FBQ3ZDLFdBQU9wRyxhQUFhLENBQUNvRyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0IsdUJBQWhCLENBQUQsQ0FBcEI7QUFDRCxHQUZEOztBQUdBLE1BQUlXLHdCQUF3QixHQUFHLFNBQTNCQSx3QkFBMkIsQ0FBVVosTUFBVixFQUFrQjtBQUMvQyxXQUFPQSxNQUFNLENBQUNDLFFBQVAsQ0FBZ0IsdUJBQWhCLEVBQXlDLEtBQXpDLEVBQWdELFNBQWhELENBQVA7QUFDRCxHQUZEOztBQUdBLE1BQUlZLHlCQUF5QixHQUFHLFNBQTVCQSx5QkFBNEIsQ0FBVWIsTUFBVixFQUFrQjtBQUNoRCxXQUFPQSxNQUFNLENBQUNDLFFBQVAsQ0FBZ0IsbUJBQWhCLEVBQXFDLElBQXJDLEVBQTJDLFNBQTNDLENBQVA7QUFDRCxHQUZEOztBQUlBLE1BQUlhLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FBVUMsSUFBVixFQUFnQkMsSUFBaEIsRUFBc0I7QUFDNUMsV0FBT0MsSUFBSSxDQUFDQyxHQUFMLENBQVNDLFFBQVEsQ0FBQ0osSUFBRCxFQUFPLEVBQVAsQ0FBakIsRUFBNkJJLFFBQVEsQ0FBQ0gsSUFBRCxFQUFPLEVBQVAsQ0FBckMsQ0FBUDtBQUNELEdBRkQ7O0FBR0EsTUFBSUksWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBVUMsR0FBVixFQUFlO0FBQ2hDLFdBQU8sSUFBSXpCLFFBQUosQ0FBYSxVQUFVMEIsUUFBVixFQUFvQjtBQUN0QyxVQUFJQyxHQUFHLEdBQUc5QyxRQUFRLENBQUNFLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBVjs7QUFDQSxVQUFJNkMsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBVUMsVUFBVixFQUFzQjtBQUMvQkYsUUFBQUEsR0FBRyxDQUFDRyxNQUFKLEdBQWFILEdBQUcsQ0FBQ0ksT0FBSixHQUFjLElBQTNCOztBQUNBLFlBQUlKLEdBQUcsQ0FBQ0ssVUFBUixFQUFvQjtBQUNsQkwsVUFBQUEsR0FBRyxDQUFDSyxVQUFKLENBQWVDLFdBQWYsQ0FBMkJOLEdBQTNCO0FBQ0Q7O0FBQ0RELFFBQUFBLFFBQVEsQ0FBQ0csVUFBRCxDQUFSO0FBQ0QsT0FORDs7QUFPQUYsTUFBQUEsR0FBRyxDQUFDRyxNQUFKLEdBQWEsWUFBWTtBQUN2QixZQUFJSSxLQUFLLEdBQUdoQixpQkFBaUIsQ0FBQ1MsR0FBRyxDQUFDTyxLQUFMLEVBQVlQLEdBQUcsQ0FBQ1EsV0FBaEIsQ0FBN0I7QUFDQSxZQUFJQyxNQUFNLEdBQUdsQixpQkFBaUIsQ0FBQ1MsR0FBRyxDQUFDUyxNQUFMLEVBQWFULEdBQUcsQ0FBQ1UsWUFBakIsQ0FBOUI7QUFDQSxZQUFJUixVQUFVLEdBQUc7QUFDZkssVUFBQUEsS0FBSyxFQUFFQSxLQURRO0FBRWZFLFVBQUFBLE1BQU0sRUFBRUE7QUFGTyxTQUFqQjtBQUlBUixRQUFBQSxJQUFJLENBQUM1QixRQUFRLENBQUNuSSxPQUFULENBQWlCZ0ssVUFBakIsQ0FBRCxDQUFKO0FBQ0QsT0FSRDs7QUFTQUYsTUFBQUEsR0FBRyxDQUFDSSxPQUFKLEdBQWMsWUFBWTtBQUN4QkgsUUFBQUEsSUFBSSxDQUFDNUIsUUFBUSxDQUFDc0MsTUFBVCxDQUFnQix5Q0FBeUNiLEdBQXpELENBQUQsQ0FBSjtBQUNELE9BRkQ7O0FBR0EsVUFBSWMsS0FBSyxHQUFHWixHQUFHLENBQUNZLEtBQWhCO0FBQ0FBLE1BQUFBLEtBQUssQ0FBQ0MsVUFBTixHQUFtQixRQUFuQjtBQUNBRCxNQUFBQSxLQUFLLENBQUNFLFFBQU4sR0FBaUIsT0FBakI7QUFDQUYsTUFBQUEsS0FBSyxDQUFDRyxNQUFOLEdBQWVILEtBQUssQ0FBQ0ksSUFBTixHQUFhLEtBQTVCO0FBQ0FKLE1BQUFBLEtBQUssQ0FBQ0wsS0FBTixHQUFjSyxLQUFLLENBQUNILE1BQU4sR0FBZSxNQUE3QjtBQUNBdkQsTUFBQUEsUUFBUSxDQUFDK0QsSUFBVCxDQUFjQyxXQUFkLENBQTBCbEIsR0FBMUI7QUFDQUEsTUFBQUEsR0FBRyxDQUFDbUIsR0FBSixHQUFVckIsR0FBVjtBQUNELEtBNUJNLENBQVA7QUE2QkQsR0E5QkQ7O0FBK0JBLE1BQUlzQixpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLENBQVUxSixLQUFWLEVBQWlCO0FBQ3ZDLFFBQUlBLEtBQUosRUFBVztBQUNUQSxNQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQzJKLE9BQU4sQ0FBYyxLQUFkLEVBQXFCLEVBQXJCLENBQVI7QUFDRDs7QUFDRCxXQUFPM0osS0FBUDtBQUNELEdBTEQ7O0FBTUEsTUFBSTRKLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBVTVKLEtBQVYsRUFBaUI7QUFDcEMsUUFBSUEsS0FBSyxDQUFDZixNQUFOLEdBQWUsQ0FBZixJQUFvQixXQUFXNEssSUFBWCxDQUFnQjdKLEtBQWhCLENBQXhCLEVBQWdEO0FBQzlDQSxNQUFBQSxLQUFLLElBQUksSUFBVDtBQUNEOztBQUNELFdBQU9BLEtBQVA7QUFDRCxHQUxEOztBQU1BLE1BQUk4SixZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFVQyxHQUFWLEVBQWU7QUFDaEMsUUFBSUEsR0FBRyxDQUFDQyxNQUFSLEVBQWdCO0FBQ2QsVUFBSUMsV0FBVyxHQUFHcEssTUFBTSxDQUFDa0ssR0FBRyxDQUFDQyxNQUFMLENBQU4sQ0FBbUJFLEtBQW5CLENBQXlCLEdBQXpCLENBQWxCOztBQUNBLGNBQVFELFdBQVcsQ0FBQ2hMLE1BQXBCO0FBQ0EsYUFBSyxDQUFMO0FBQ0U4SyxVQUFBQSxHQUFHLENBQUMsWUFBRCxDQUFILEdBQW9CQSxHQUFHLENBQUMsWUFBRCxDQUFILElBQXFCRSxXQUFXLENBQUMsQ0FBRCxDQUFwRDtBQUNBRixVQUFBQSxHQUFHLENBQUMsY0FBRCxDQUFILEdBQXNCQSxHQUFHLENBQUMsY0FBRCxDQUFILElBQXVCRSxXQUFXLENBQUMsQ0FBRCxDQUF4RDtBQUNBRixVQUFBQSxHQUFHLENBQUMsZUFBRCxDQUFILEdBQXVCQSxHQUFHLENBQUMsZUFBRCxDQUFILElBQXdCRSxXQUFXLENBQUMsQ0FBRCxDQUExRDtBQUNBRixVQUFBQSxHQUFHLENBQUMsYUFBRCxDQUFILEdBQXFCQSxHQUFHLENBQUMsYUFBRCxDQUFILElBQXNCRSxXQUFXLENBQUMsQ0FBRCxDQUF0RDtBQUNBOztBQUNGLGFBQUssQ0FBTDtBQUNFRixVQUFBQSxHQUFHLENBQUMsWUFBRCxDQUFILEdBQW9CQSxHQUFHLENBQUMsWUFBRCxDQUFILElBQXFCRSxXQUFXLENBQUMsQ0FBRCxDQUFwRDtBQUNBRixVQUFBQSxHQUFHLENBQUMsY0FBRCxDQUFILEdBQXNCQSxHQUFHLENBQUMsY0FBRCxDQUFILElBQXVCRSxXQUFXLENBQUMsQ0FBRCxDQUF4RDtBQUNBRixVQUFBQSxHQUFHLENBQUMsZUFBRCxDQUFILEdBQXVCQSxHQUFHLENBQUMsZUFBRCxDQUFILElBQXdCRSxXQUFXLENBQUMsQ0FBRCxDQUExRDtBQUNBRixVQUFBQSxHQUFHLENBQUMsYUFBRCxDQUFILEdBQXFCQSxHQUFHLENBQUMsYUFBRCxDQUFILElBQXNCRSxXQUFXLENBQUMsQ0FBRCxDQUF0RDtBQUNBOztBQUNGLGFBQUssQ0FBTDtBQUNFRixVQUFBQSxHQUFHLENBQUMsWUFBRCxDQUFILEdBQW9CQSxHQUFHLENBQUMsWUFBRCxDQUFILElBQXFCRSxXQUFXLENBQUMsQ0FBRCxDQUFwRDtBQUNBRixVQUFBQSxHQUFHLENBQUMsY0FBRCxDQUFILEdBQXNCQSxHQUFHLENBQUMsY0FBRCxDQUFILElBQXVCRSxXQUFXLENBQUMsQ0FBRCxDQUF4RDtBQUNBRixVQUFBQSxHQUFHLENBQUMsZUFBRCxDQUFILEdBQXVCQSxHQUFHLENBQUMsZUFBRCxDQUFILElBQXdCRSxXQUFXLENBQUMsQ0FBRCxDQUExRDtBQUNBRixVQUFBQSxHQUFHLENBQUMsYUFBRCxDQUFILEdBQXFCQSxHQUFHLENBQUMsYUFBRCxDQUFILElBQXNCRSxXQUFXLENBQUMsQ0FBRCxDQUF0RDtBQUNBOztBQUNGLGFBQUssQ0FBTDtBQUNFRixVQUFBQSxHQUFHLENBQUMsWUFBRCxDQUFILEdBQW9CQSxHQUFHLENBQUMsWUFBRCxDQUFILElBQXFCRSxXQUFXLENBQUMsQ0FBRCxDQUFwRDtBQUNBRixVQUFBQSxHQUFHLENBQUMsY0FBRCxDQUFILEdBQXNCQSxHQUFHLENBQUMsY0FBRCxDQUFILElBQXVCRSxXQUFXLENBQUMsQ0FBRCxDQUF4RDtBQUNBRixVQUFBQSxHQUFHLENBQUMsZUFBRCxDQUFILEdBQXVCQSxHQUFHLENBQUMsZUFBRCxDQUFILElBQXdCRSxXQUFXLENBQUMsQ0FBRCxDQUExRDtBQUNBRixVQUFBQSxHQUFHLENBQUMsYUFBRCxDQUFILEdBQXFCQSxHQUFHLENBQUMsYUFBRCxDQUFILElBQXNCRSxXQUFXLENBQUMsQ0FBRCxDQUF0RDtBQXZCRjs7QUF5QkEsYUFBT0YsR0FBRyxDQUFDQyxNQUFYO0FBQ0Q7O0FBQ0QsV0FBT0QsR0FBUDtBQUNELEdBL0JEOztBQWdDQSxNQUFJSSxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQVVwRCxNQUFWLEVBQWtCc0IsUUFBbEIsRUFBNEI7QUFDaEQsUUFBSStCLFNBQVMsR0FBRzVDLFlBQVksQ0FBQ1QsTUFBRCxDQUE1Qjs7QUFDQSxRQUFJM0csUUFBUSxDQUFDZ0ssU0FBRCxDQUFaLEVBQXlCO0FBQ3ZCdkQsTUFBQUEsUUFBUSxDQUFDd0QsSUFBVCxDQUFjO0FBQ1pqQyxRQUFBQSxHQUFHLEVBQUVnQyxTQURPO0FBRVpFLFFBQUFBLE9BQU8sRUFBRSxpQkFBVW5FLElBQVYsRUFBZ0I7QUFDdkJrQyxVQUFBQSxRQUFRLENBQUNrQyxJQUFJLENBQUNDLEtBQUwsQ0FBV3JFLElBQVgsQ0FBRCxDQUFSO0FBQ0Q7QUFKVyxPQUFkO0FBTUQsS0FQRCxNQU9PLElBQUl2RixVQUFVLENBQUN3SixTQUFELENBQWQsRUFBMkI7QUFDaENBLE1BQUFBLFNBQVMsQ0FBQy9CLFFBQUQsQ0FBVDtBQUNELEtBRk0sTUFFQTtBQUNMQSxNQUFBQSxRQUFRLENBQUMrQixTQUFELENBQVI7QUFDRDtBQUNGLEdBZEQ7O0FBZUEsTUFBSUssYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFVMUQsTUFBVixFQUFrQjJELElBQWxCLEVBQXdCQyxNQUF4QixFQUFnQztBQUNsRCxRQUFJQyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxHQUFZO0FBQzVCRCxNQUFBQSxNQUFNLENBQUNsQyxNQUFQLEdBQWdCa0MsTUFBTSxDQUFDakMsT0FBUCxHQUFpQixJQUFqQzs7QUFDQSxVQUFJM0IsTUFBTSxDQUFDOEQsU0FBWCxFQUFzQjtBQUNwQjlELFFBQUFBLE1BQU0sQ0FBQzhELFNBQVAsQ0FBaUJDLE1BQWpCLENBQXdCSCxNQUF4QjtBQUNBNUQsUUFBQUEsTUFBTSxDQUFDZ0UsV0FBUDtBQUNEO0FBQ0YsS0FORDs7QUFPQUosSUFBQUEsTUFBTSxDQUFDbEMsTUFBUCxHQUFnQixZQUFZO0FBQzFCLFVBQUksQ0FBQ2lDLElBQUksQ0FBQzdCLEtBQU4sSUFBZSxDQUFDNkIsSUFBSSxDQUFDM0IsTUFBckIsSUFBK0JqQyxhQUFhLENBQUNDLE1BQUQsQ0FBaEQsRUFBMEQ7QUFDeERBLFFBQUFBLE1BQU0sQ0FBQ25DLEdBQVAsQ0FBV29HLFVBQVgsQ0FBc0JMLE1BQXRCLEVBQThCO0FBQzVCOUIsVUFBQUEsS0FBSyxFQUFFaEosTUFBTSxDQUFDOEssTUFBTSxDQUFDN0IsV0FBUixDQURlO0FBRTVCQyxVQUFBQSxNQUFNLEVBQUVsSixNQUFNLENBQUM4SyxNQUFNLENBQUMzQixZQUFSO0FBRmMsU0FBOUI7QUFJRDs7QUFDRDRCLE1BQUFBLFdBQVc7QUFDWixLQVJEOztBQVNBRCxJQUFBQSxNQUFNLENBQUNqQyxPQUFQLEdBQWlCa0MsV0FBakI7QUFDRCxHQWxCRDs7QUFtQkEsTUFBSUssYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFVQyxJQUFWLEVBQWdCO0FBQ2xDLFdBQU8sSUFBSXZFLFFBQUosQ0FBYSxVQUFVbkksT0FBVixFQUFtQnlLLE1BQW5CLEVBQTJCO0FBQzdDLFVBQUlrQyxNQUFNLEdBQUcsSUFBSUMsVUFBSixFQUFiOztBQUNBRCxNQUFBQSxNQUFNLENBQUMxQyxNQUFQLEdBQWdCLFlBQVk7QUFDMUJqSyxRQUFBQSxPQUFPLENBQUMyTSxNQUFNLENBQUNFLE1BQVIsQ0FBUDtBQUNELE9BRkQ7O0FBR0FGLE1BQUFBLE1BQU0sQ0FBQ3pDLE9BQVAsR0FBaUIsWUFBWTtBQUMzQk8sUUFBQUEsTUFBTSxDQUFDa0MsTUFBTSxDQUFDcEcsS0FBUCxDQUFhdUcsT0FBZCxDQUFOO0FBQ0QsT0FGRDs7QUFHQUgsTUFBQUEsTUFBTSxDQUFDSSxhQUFQLENBQXFCTCxJQUFyQjtBQUNELEtBVE0sQ0FBUDtBQVVELEdBWEQ7O0FBWUEsTUFBSU0sa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixDQUFVYixNQUFWLEVBQWtCO0FBQ3pDLFdBQU9BLE1BQU0sQ0FBQ2MsUUFBUCxLQUFvQixLQUFwQixLQUE4QmQsTUFBTSxDQUFDZSxZQUFQLENBQW9CLGlCQUFwQixLQUEwQ2YsTUFBTSxDQUFDZSxZQUFQLENBQW9CLHNCQUFwQixDQUF4RSxDQUFQO0FBQ0QsR0FGRDs7QUFHQSxNQUFJQyxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQVU1RSxNQUFWLEVBQWtCMEMsR0FBbEIsRUFBdUI7QUFDMUMsV0FBTzdDLFFBQVEsQ0FBQ2dGLFNBQVQsQ0FBbUJuQyxHQUFuQixFQUF3QixLQUF4QixFQUErQjFDLE1BQU0sQ0FBQzhFLFFBQXRDLENBQVA7QUFDRCxHQUZEOztBQUlBLE1BQUlDLEdBQUcsR0FBR3BGLFFBQVEsQ0FBQ29GLEdBQW5COztBQUNBLE1BQUlDLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQVVDLEtBQVYsRUFBaUI7QUFDL0IsUUFBSUEsS0FBSyxDQUFDOUMsS0FBTixDQUFZK0MsVUFBWixJQUEwQkQsS0FBSyxDQUFDOUMsS0FBTixDQUFZZ0QsV0FBdEMsSUFBcURGLEtBQUssQ0FBQzlDLEtBQU4sQ0FBWStDLFVBQVosS0FBMkJELEtBQUssQ0FBQzlDLEtBQU4sQ0FBWWdELFdBQWhHLEVBQTZHO0FBQzNHLGFBQU94QyxpQkFBaUIsQ0FBQ3NDLEtBQUssQ0FBQzlDLEtBQU4sQ0FBWStDLFVBQWIsQ0FBeEI7QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPLEVBQVA7QUFDRDtBQUNGLEdBTkQ7O0FBT0EsTUFBSUUsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBVUgsS0FBVixFQUFpQjtBQUMvQixRQUFJQSxLQUFLLENBQUM5QyxLQUFOLENBQVlrRCxTQUFaLElBQXlCSixLQUFLLENBQUM5QyxLQUFOLENBQVltRCxZQUFyQyxJQUFxREwsS0FBSyxDQUFDOUMsS0FBTixDQUFZa0QsU0FBWixLQUEwQkosS0FBSyxDQUFDOUMsS0FBTixDQUFZbUQsWUFBL0YsRUFBNkc7QUFDM0csYUFBTzNDLGlCQUFpQixDQUFDc0MsS0FBSyxDQUFDOUMsS0FBTixDQUFZa0QsU0FBYixDQUF4QjtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU8sRUFBUDtBQUNEO0FBQ0YsR0FORDs7QUFPQSxNQUFJRSxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFVTixLQUFWLEVBQWlCO0FBQy9CLFFBQUlBLEtBQUssQ0FBQzlDLEtBQU4sQ0FBWXFELFdBQWhCLEVBQTZCO0FBQzNCLGFBQU83QyxpQkFBaUIsQ0FBQ3NDLEtBQUssQ0FBQzlDLEtBQU4sQ0FBWXFELFdBQWIsQ0FBeEI7QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPLEVBQVA7QUFDRDtBQUNGLEdBTkQ7O0FBT0EsTUFBSUMsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBVVIsS0FBVixFQUFpQnBNLElBQWpCLEVBQXVCO0FBQ3JDLFFBQUlvTSxLQUFLLENBQUNOLFlBQU4sQ0FBbUI5TCxJQUFuQixDQUFKLEVBQThCO0FBQzVCLGFBQU9vTSxLQUFLLENBQUNTLFlBQU4sQ0FBbUI3TSxJQUFuQixDQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBTyxFQUFQO0FBQ0Q7QUFDRixHQU5EOztBQU9BLE1BQUk4TSxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFVVixLQUFWLEVBQWlCcE0sSUFBakIsRUFBdUI7QUFDcEMsV0FBT29NLEtBQUssQ0FBQzlDLEtBQU4sQ0FBWXRKLElBQVosSUFBb0JvTSxLQUFLLENBQUM5QyxLQUFOLENBQVl0SixJQUFaLENBQXBCLEdBQXdDLEVBQS9DO0FBQ0QsR0FGRDs7QUFHQSxNQUFJK00sVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBVVgsS0FBVixFQUFpQjtBQUNoQyxXQUFPQSxLQUFLLENBQUNyRCxVQUFOLEtBQXFCLElBQXJCLElBQTZCcUQsS0FBSyxDQUFDckQsVUFBTixDQUFpQjhDLFFBQWpCLEtBQThCLFFBQWxFO0FBQ0QsR0FGRDs7QUFHQSxNQUFJbUIsWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBVVosS0FBVixFQUFpQnBNLElBQWpCLEVBQXVCSSxLQUF2QixFQUE4QjtBQUMvQyxRQUFJQSxLQUFLLEtBQUssRUFBZCxFQUFrQjtBQUNoQmdNLE1BQUFBLEtBQUssQ0FBQzdHLGVBQU4sQ0FBc0J2RixJQUF0QjtBQUNELEtBRkQsTUFFTztBQUNMb00sTUFBQUEsS0FBSyxDQUFDbkgsWUFBTixDQUFtQmpGLElBQW5CLEVBQXlCSSxLQUF6QjtBQUNEO0FBQ0YsR0FORDs7QUFPQSxNQUFJNk0sWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBVWIsS0FBVixFQUFpQjtBQUNsQyxRQUFJYyxTQUFTLEdBQUdoQixHQUFHLENBQUNpQixNQUFKLENBQVcsUUFBWCxFQUFxQjtBQUFFLGVBQU87QUFBVCxLQUFyQixDQUFoQjtBQUNBakIsSUFBQUEsR0FBRyxDQUFDa0IsV0FBSixDQUFnQkYsU0FBaEIsRUFBMkJkLEtBQTNCO0FBQ0FjLElBQUFBLFNBQVMsQ0FBQ3RELFdBQVYsQ0FBc0J3QyxLQUF0QjtBQUNBYyxJQUFBQSxTQUFTLENBQUN0RCxXQUFWLENBQXNCc0MsR0FBRyxDQUFDaUIsTUFBSixDQUFXLFlBQVgsRUFBeUI7QUFBRUUsTUFBQUEsZUFBZSxFQUFFO0FBQW5CLEtBQXpCLEVBQXNELFNBQXRELENBQXRCO0FBQ0FILElBQUFBLFNBQVMsQ0FBQ0csZUFBVixHQUE0QixPQUE1QjtBQUNELEdBTkQ7O0FBT0EsTUFBSUMsWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBVWxCLEtBQVYsRUFBaUI7QUFDbEMsUUFBSWMsU0FBUyxHQUFHZCxLQUFLLENBQUNyRCxVQUF0QjtBQUNBbUQsSUFBQUEsR0FBRyxDQUFDa0IsV0FBSixDQUFnQmhCLEtBQWhCLEVBQXVCYyxTQUF2QjtBQUNBaEIsSUFBQUEsR0FBRyxDQUFDNUcsTUFBSixDQUFXNEgsU0FBWDtBQUNELEdBSkQ7O0FBS0EsTUFBSUssYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFVbkIsS0FBVixFQUFpQjtBQUNuQyxRQUFJVyxVQUFVLENBQUNYLEtBQUQsQ0FBZCxFQUF1QjtBQUNyQmtCLE1BQUFBLFlBQVksQ0FBQ2xCLEtBQUQsQ0FBWjtBQUNELEtBRkQsTUFFTztBQUNMYSxNQUFBQSxZQUFZLENBQUNiLEtBQUQsQ0FBWjtBQUNEO0FBQ0YsR0FORDs7QUFPQSxNQUFJb0IsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFVcEIsS0FBVixFQUFpQnFCLFlBQWpCLEVBQStCO0FBQ2xELFFBQUlDLFNBQVMsR0FBR3RCLEtBQUssQ0FBQ1MsWUFBTixDQUFtQixPQUFuQixDQUFoQjtBQUNBLFFBQUl6TSxLQUFLLEdBQUdxTixZQUFZLENBQUNDLFNBQVMsS0FBSyxJQUFkLEdBQXFCQSxTQUFyQixHQUFpQyxFQUFsQyxDQUF4Qjs7QUFDQSxRQUFJdE4sS0FBSyxDQUFDZixNQUFOLEdBQWUsQ0FBbkIsRUFBc0I7QUFDcEIrTSxNQUFBQSxLQUFLLENBQUNuSCxZQUFOLENBQW1CLE9BQW5CLEVBQTRCN0UsS0FBNUI7QUFDQWdNLE1BQUFBLEtBQUssQ0FBQ25ILFlBQU4sQ0FBbUIsZ0JBQW5CLEVBQXFDN0UsS0FBckM7QUFDRCxLQUhELE1BR087QUFDTGdNLE1BQUFBLEtBQUssQ0FBQzdHLGVBQU4sQ0FBc0IsT0FBdEI7QUFDRDtBQUNGLEdBVEQ7O0FBVUEsTUFBSW9JLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQVUzTixJQUFWLEVBQWdCeU4sWUFBaEIsRUFBOEI7QUFDMUMsV0FBTyxVQUFVckIsS0FBVixFQUFpQnBNLElBQWpCLEVBQXVCSSxLQUF2QixFQUE4QjtBQUNuQyxVQUFJZ00sS0FBSyxDQUFDOUMsS0FBTixDQUFZdEosSUFBWixDQUFKLEVBQXVCO0FBQ3JCb00sUUFBQUEsS0FBSyxDQUFDOUMsS0FBTixDQUFZdEosSUFBWixJQUFvQmdLLGNBQWMsQ0FBQzVKLEtBQUQsQ0FBbEM7QUFDQW9OLFFBQUFBLGNBQWMsQ0FBQ3BCLEtBQUQsRUFBUXFCLFlBQVIsQ0FBZDtBQUNELE9BSEQsTUFHTztBQUNMVCxRQUFBQSxZQUFZLENBQUNaLEtBQUQsRUFBUXBNLElBQVIsRUFBY0ksS0FBZCxDQUFaO0FBQ0Q7QUFDRixLQVBEO0FBUUQsR0FURDs7QUFVQSxNQUFJd04sT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBVXhCLEtBQVYsRUFBaUJwTSxJQUFqQixFQUF1QjtBQUNuQyxRQUFJb00sS0FBSyxDQUFDOUMsS0FBTixDQUFZdEosSUFBWixDQUFKLEVBQXVCO0FBQ3JCLGFBQU84SixpQkFBaUIsQ0FBQ3NDLEtBQUssQ0FBQzlDLEtBQU4sQ0FBWXRKLElBQVosQ0FBRCxDQUF4QjtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU80TSxTQUFTLENBQUNSLEtBQUQsRUFBUXBNLElBQVIsQ0FBaEI7QUFDRDtBQUNGLEdBTkQ7O0FBT0EsTUFBSTZOLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQVV6QixLQUFWLEVBQWlCaE0sS0FBakIsRUFBd0I7QUFDdEMsUUFBSTBOLE9BQU8sR0FBRzlELGNBQWMsQ0FBQzVKLEtBQUQsQ0FBNUI7QUFDQWdNLElBQUFBLEtBQUssQ0FBQzlDLEtBQU4sQ0FBWStDLFVBQVosR0FBeUJ5QixPQUF6QjtBQUNBMUIsSUFBQUEsS0FBSyxDQUFDOUMsS0FBTixDQUFZZ0QsV0FBWixHQUEwQndCLE9BQTFCO0FBQ0QsR0FKRDs7QUFLQSxNQUFJQyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFVM0IsS0FBVixFQUFpQmhNLEtBQWpCLEVBQXdCO0FBQ3RDLFFBQUkwTixPQUFPLEdBQUc5RCxjQUFjLENBQUM1SixLQUFELENBQTVCO0FBQ0FnTSxJQUFBQSxLQUFLLENBQUM5QyxLQUFOLENBQVlrRCxTQUFaLEdBQXdCc0IsT0FBeEI7QUFDQTFCLElBQUFBLEtBQUssQ0FBQzlDLEtBQU4sQ0FBWW1ELFlBQVosR0FBMkJxQixPQUEzQjtBQUNELEdBSkQ7O0FBS0EsTUFBSUUsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBVTVCLEtBQVYsRUFBaUJoTSxLQUFqQixFQUF3QjtBQUN0QyxRQUFJME4sT0FBTyxHQUFHOUQsY0FBYyxDQUFDNUosS0FBRCxDQUE1QjtBQUNBZ00sSUFBQUEsS0FBSyxDQUFDOUMsS0FBTixDQUFZcUQsV0FBWixHQUEwQm1CLE9BQTFCO0FBQ0QsR0FIRDs7QUFJQSxNQUFJRyxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQVU3QixLQUFWLEVBQWlCaE0sS0FBakIsRUFBd0I7QUFDM0NnTSxJQUFBQSxLQUFLLENBQUM5QyxLQUFOLENBQVk0RSxXQUFaLEdBQTBCOU4sS0FBMUI7QUFDRCxHQUZEOztBQUdBLE1BQUkrTixjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQVUvQixLQUFWLEVBQWlCO0FBQ3BDLFdBQU9VLFFBQVEsQ0FBQ1YsS0FBRCxFQUFRLGFBQVIsQ0FBZjtBQUNELEdBRkQ7O0FBR0EsTUFBSWdDLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVVDLEdBQVYsRUFBZTtBQUM1QixXQUFPQSxHQUFHLENBQUN4QyxRQUFKLEtBQWlCLFFBQXhCO0FBQ0QsR0FGRDs7QUFHQSxNQUFJeUMsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBVUQsR0FBVixFQUFlO0FBQzNCLFdBQU9BLEdBQUcsQ0FBQ3hDLFFBQUosS0FBaUIsS0FBeEI7QUFDRCxHQUZEOztBQUdBLE1BQUkwQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQVVuQyxLQUFWLEVBQWlCO0FBQ3JDLFdBQU9GLEdBQUcsQ0FBQ1UsU0FBSixDQUFjUixLQUFkLEVBQXFCLEtBQXJCLEVBQTRCL00sTUFBNUIsS0FBdUMsQ0FBdkMsSUFBNEM2TSxHQUFHLENBQUNVLFNBQUosQ0FBY1IsS0FBZCxFQUFxQixNQUFyQixNQUFpQyxjQUFwRjtBQUNELEdBRkQ7O0FBR0EsTUFBSW9DLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVVwQyxLQUFWLEVBQWlCO0FBQzVCLFFBQUltQyxlQUFlLENBQUNuQyxLQUFELENBQW5CLEVBQTRCO0FBQzFCLGFBQU8sRUFBUDtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU9RLFNBQVMsQ0FBQ1IsS0FBRCxFQUFRLEtBQVIsQ0FBaEI7QUFDRDtBQUNGLEdBTkQ7O0FBT0EsTUFBSXFDLFdBQVcsR0FBRyxTQUFkQSxXQUFjLEdBQVk7QUFDNUIsV0FBTztBQUNMNUUsTUFBQUEsR0FBRyxFQUFFLEVBREE7QUFFTDZFLE1BQUFBLEdBQUcsRUFBRSxFQUZBO0FBR0xDLE1BQUFBLEtBQUssRUFBRSxFQUhGO0FBSUwxRixNQUFBQSxLQUFLLEVBQUUsRUFKRjtBQUtMRSxNQUFBQSxNQUFNLEVBQUUsRUFMSDtBQU1MLGVBQU8sRUFORjtBQU9MRyxNQUFBQSxLQUFLLEVBQUUsRUFQRjtBQVFMc0YsTUFBQUEsT0FBTyxFQUFFLEtBUko7QUFTTEMsTUFBQUEsTUFBTSxFQUFFLEVBVEg7QUFVTEMsTUFBQUEsTUFBTSxFQUFFLEVBVkg7QUFXTEMsTUFBQUEsTUFBTSxFQUFFLEVBWEg7QUFZTGIsTUFBQUEsV0FBVyxFQUFFLEVBWlI7QUFhTGMsTUFBQUEsWUFBWSxFQUFFO0FBYlQsS0FBUDtBQWVELEdBaEJEOztBQWlCQSxNQUFJQyxhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLENBQVV4QixZQUFWLEVBQXdCM0MsSUFBeEIsRUFBOEI7QUFDaEQsUUFBSXNCLEtBQUssR0FBR3hHLFFBQVEsQ0FBQ0UsYUFBVCxDQUF1QixLQUF2QixDQUFaO0FBQ0FrSCxJQUFBQSxZQUFZLENBQUNaLEtBQUQsRUFBUSxPQUFSLEVBQWlCdEIsSUFBSSxDQUFDeEIsS0FBdEIsQ0FBWjs7QUFDQSxRQUFJNkMsU0FBUyxDQUFDQyxLQUFELENBQVQsSUFBb0J0QixJQUFJLENBQUMrRCxNQUFMLEtBQWdCLEVBQXhDLEVBQTRDO0FBQzFDaEIsTUFBQUEsU0FBUyxDQUFDekIsS0FBRCxFQUFRdEIsSUFBSSxDQUFDK0QsTUFBYixDQUFUO0FBQ0Q7O0FBQ0QsUUFBSXRDLFNBQVMsQ0FBQ0gsS0FBRCxDQUFULElBQW9CdEIsSUFBSSxDQUFDZ0UsTUFBTCxLQUFnQixFQUF4QyxFQUE0QztBQUMxQ2YsTUFBQUEsU0FBUyxDQUFDM0IsS0FBRCxFQUFRdEIsSUFBSSxDQUFDZ0UsTUFBYixDQUFUO0FBQ0Q7O0FBQ0QsUUFBSXBDLFNBQVMsQ0FBQ04sS0FBRCxDQUFULElBQW9CdEIsSUFBSSxDQUFDaUUsTUFBTCxLQUFnQixFQUF4QyxFQUE0QztBQUMxQ2YsTUFBQUEsU0FBUyxDQUFDNUIsS0FBRCxFQUFRdEIsSUFBSSxDQUFDaUUsTUFBYixDQUFUO0FBQ0Q7O0FBQ0QsUUFBSVosY0FBYyxDQUFDL0IsS0FBRCxDQUFkLElBQXlCdEIsSUFBSSxDQUFDb0QsV0FBTCxLQUFxQixFQUFsRCxFQUFzRDtBQUNwREQsTUFBQUEsY0FBYyxDQUFDN0IsS0FBRCxFQUFRdEIsSUFBSSxDQUFDb0QsV0FBYixDQUFkO0FBQ0Q7O0FBQ0QsV0FBT1QsWUFBWSxDQUFDckIsS0FBSyxDQUFDUyxZQUFOLENBQW1CLE9BQW5CLENBQUQsQ0FBbkI7QUFDRCxHQWhCRDs7QUFpQkEsTUFBSU0sTUFBTSxHQUFHLFNBQVRBLE1BQVMsQ0FBVU0sWUFBVixFQUF3QjNDLElBQXhCLEVBQThCO0FBQ3pDLFFBQUlzQixLQUFLLEdBQUd4RyxRQUFRLENBQUNFLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBWjtBQUNBb0osSUFBQUEsS0FBSyxDQUFDekIsWUFBRCxFQUFlNU8sT0FBUSxDQUFDQSxPQUFRLENBQUMsRUFBRCxFQUFLaU0sSUFBTCxDQUFULEVBQXFCO0FBQUU4RCxNQUFBQSxPQUFPLEVBQUU7QUFBWCxLQUFyQixDQUF2QixFQUFpRXhDLEtBQWpFLENBQUw7QUFDQStDLElBQUFBLE1BQU0sQ0FBQy9DLEtBQUQsRUFBUXRCLElBQUksQ0FBQzRELEdBQWIsRUFBa0I1RCxJQUFJLENBQUNrRSxZQUF2QixDQUFOOztBQUNBLFFBQUlsRSxJQUFJLENBQUM4RCxPQUFULEVBQWtCO0FBQ2hCLFVBQUlRLE1BQU0sR0FBR2xELEdBQUcsQ0FBQ2lCLE1BQUosQ0FBVyxRQUFYLEVBQXFCO0FBQUUsaUJBQU87QUFBVCxPQUFyQixDQUFiO0FBQ0FpQyxNQUFBQSxNQUFNLENBQUN4RixXQUFQLENBQW1Cd0MsS0FBbkI7QUFDQWdELE1BQUFBLE1BQU0sQ0FBQ3hGLFdBQVAsQ0FBbUJzQyxHQUFHLENBQUNpQixNQUFKLENBQVcsWUFBWCxFQUF5QjtBQUFFRSxRQUFBQSxlQUFlLEVBQUU7QUFBbkIsT0FBekIsRUFBc0QsU0FBdEQsQ0FBbkI7QUFDQStCLE1BQUFBLE1BQU0sQ0FBQy9CLGVBQVAsR0FBeUIsT0FBekI7QUFDQSxhQUFPK0IsTUFBUDtBQUNELEtBTkQsTUFNTztBQUNMLGFBQU9oRCxLQUFQO0FBQ0Q7QUFDRixHQWJEOztBQWNBLE1BQUlpRCxJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFVNUIsWUFBVixFQUF3QnJCLEtBQXhCLEVBQStCO0FBQ3hDLFdBQU87QUFDTHZDLE1BQUFBLEdBQUcsRUFBRStDLFNBQVMsQ0FBQ1IsS0FBRCxFQUFRLEtBQVIsQ0FEVDtBQUVMc0MsTUFBQUEsR0FBRyxFQUFFRixNQUFNLENBQUNwQyxLQUFELENBRk47QUFHTHVDLE1BQUFBLEtBQUssRUFBRS9CLFNBQVMsQ0FBQ1IsS0FBRCxFQUFRLE9BQVIsQ0FIWDtBQUlMbkQsTUFBQUEsS0FBSyxFQUFFMkUsT0FBTyxDQUFDeEIsS0FBRCxFQUFRLE9BQVIsQ0FKVDtBQUtMakQsTUFBQUEsTUFBTSxFQUFFeUUsT0FBTyxDQUFDeEIsS0FBRCxFQUFRLFFBQVIsQ0FMVjtBQU1MLGVBQU9RLFNBQVMsQ0FBQ1IsS0FBRCxFQUFRLE9BQVIsQ0FOWDtBQU9MOUMsTUFBQUEsS0FBSyxFQUFFbUUsWUFBWSxDQUFDYixTQUFTLENBQUNSLEtBQUQsRUFBUSxPQUFSLENBQVYsQ0FQZDtBQVFMd0MsTUFBQUEsT0FBTyxFQUFFN0IsVUFBVSxDQUFDWCxLQUFELENBUmQ7QUFTTHlDLE1BQUFBLE1BQU0sRUFBRTFDLFNBQVMsQ0FBQ0MsS0FBRCxDQVRaO0FBVUwwQyxNQUFBQSxNQUFNLEVBQUV2QyxTQUFTLENBQUNILEtBQUQsQ0FWWjtBQVdMMkMsTUFBQUEsTUFBTSxFQUFFckMsU0FBUyxDQUFDTixLQUFELENBWFo7QUFZTDhCLE1BQUFBLFdBQVcsRUFBRXBCLFFBQVEsQ0FBQ1YsS0FBRCxFQUFRLGFBQVIsQ0FaaEI7QUFhTDRDLE1BQUFBLFlBQVksRUFBRVQsZUFBZSxDQUFDbkMsS0FBRDtBQWJ4QixLQUFQO0FBZUQsR0FoQkQ7O0FBaUJBLE1BQUlrRCxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFVbEQsS0FBVixFQUFpQm1ELE9BQWpCLEVBQTBCQyxPQUExQixFQUFtQ3hQLElBQW5DLEVBQXlDb0YsR0FBekMsRUFBOEM7QUFDN0QsUUFBSW9LLE9BQU8sQ0FBQ3hQLElBQUQsQ0FBUCxLQUFrQnVQLE9BQU8sQ0FBQ3ZQLElBQUQsQ0FBN0IsRUFBcUM7QUFDbkNvRixNQUFBQSxHQUFHLENBQUNnSCxLQUFELEVBQVFwTSxJQUFSLEVBQWN3UCxPQUFPLENBQUN4UCxJQUFELENBQXJCLENBQUg7QUFDRDtBQUNGLEdBSkQ7O0FBS0EsTUFBSW1QLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVUvQyxLQUFWLEVBQWlCc0MsR0FBakIsRUFBc0JNLFlBQXRCLEVBQW9DO0FBQy9DLFFBQUlBLFlBQUosRUFBa0I7QUFDaEI5QyxNQUFBQSxHQUFHLENBQUN1RCxTQUFKLENBQWNyRCxLQUFkLEVBQXFCLE1BQXJCLEVBQTZCLGNBQTdCO0FBQ0EsVUFBSXNELFVBQVUsR0FBRzdJLFlBQVksQ0FBQ1gsT0FBYixDQUFxQmtHLEtBQXJCLENBQWpCO0FBQ0FoSCxNQUFBQSxHQUFHLENBQUNzSyxVQUFELEVBQWEsS0FBYixFQUFvQixFQUFwQixDQUFIO0FBQ0QsS0FKRCxNQUlPO0FBQ0wsVUFBSS9PLE1BQU0sQ0FBQytOLEdBQUQsQ0FBVixFQUFpQjtBQUNmLFlBQUlnQixVQUFVLEdBQUc3SSxZQUFZLENBQUNYLE9BQWIsQ0FBcUJrRyxLQUFyQixDQUFqQjtBQUNBOUcsUUFBQUEsTUFBTSxDQUFDb0ssVUFBRCxFQUFhLEtBQWIsQ0FBTjtBQUNELE9BSEQsTUFHTztBQUNMLFlBQUlBLFVBQVUsR0FBRzdJLFlBQVksQ0FBQ1gsT0FBYixDQUFxQmtHLEtBQXJCLENBQWpCO0FBQ0FoSCxRQUFBQSxHQUFHLENBQUNzSyxVQUFELEVBQWEsS0FBYixFQUFvQmhCLEdBQXBCLENBQUg7QUFDRDs7QUFDRCxVQUFJeEMsR0FBRyxDQUFDVSxTQUFKLENBQWNSLEtBQWQsRUFBcUIsTUFBckIsTUFBaUMsY0FBckMsRUFBcUQ7QUFDbkRGLFFBQUFBLEdBQUcsQ0FBQ3VELFNBQUosQ0FBY3JELEtBQWQsRUFBcUIsTUFBckIsRUFBNkIsRUFBN0I7QUFDRDtBQUNGO0FBQ0YsR0FqQkQ7O0FBa0JBLE1BQUl1RCxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFVdkQsS0FBVixFQUFpQm1ELE9BQWpCLEVBQTBCQyxPQUExQixFQUFtQztBQUNqRCxRQUFJQSxPQUFPLENBQUNkLEdBQVIsS0FBZ0JhLE9BQU8sQ0FBQ2IsR0FBeEIsSUFBK0JjLE9BQU8sQ0FBQ1IsWUFBUixLQUF5Qk8sT0FBTyxDQUFDUCxZQUFwRSxFQUFrRjtBQUNoRkcsTUFBQUEsTUFBTSxDQUFDL0MsS0FBRCxFQUFRb0QsT0FBTyxDQUFDZCxHQUFoQixFQUFxQmMsT0FBTyxDQUFDUixZQUE3QixDQUFOO0FBQ0Q7QUFDRixHQUpEOztBQUtBLE1BQUlZLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQVV4SyxHQUFWLEVBQWVxSSxZQUFmLEVBQTZCO0FBQzVDLFdBQU8sVUFBVXJCLEtBQVYsRUFBaUJwTSxJQUFqQixFQUF1QkksS0FBdkIsRUFBOEI7QUFDbkNnRixNQUFBQSxHQUFHLENBQUNnSCxLQUFELEVBQVFoTSxLQUFSLENBQUg7QUFDQW9OLE1BQUFBLGNBQWMsQ0FBQ3BCLEtBQUQsRUFBUXFCLFlBQVIsQ0FBZDtBQUNELEtBSEQ7QUFJRCxHQUxEOztBQU1BLE1BQUl5QixLQUFLLEdBQUcsU0FBUkEsS0FBUSxDQUFVekIsWUFBVixFQUF3QitCLE9BQXhCLEVBQWlDcEQsS0FBakMsRUFBd0M7QUFDbEQsUUFBSW1ELE9BQU8sR0FBR0YsSUFBSSxDQUFDNUIsWUFBRCxFQUFlckIsS0FBZixDQUFsQjtBQUNBa0QsSUFBQUEsVUFBVSxDQUFDbEQsS0FBRCxFQUFRbUQsT0FBUixFQUFpQkMsT0FBakIsRUFBMEIsU0FBMUIsRUFBcUMsVUFBVXBELEtBQVYsRUFBaUJ5RCxLQUFqQixFQUF3QkMsTUFBeEIsRUFBZ0M7QUFDN0UsYUFBT3ZDLGFBQWEsQ0FBQ25CLEtBQUQsQ0FBcEI7QUFDRCxLQUZTLENBQVY7QUFHQWtELElBQUFBLFVBQVUsQ0FBQ2xELEtBQUQsRUFBUW1ELE9BQVIsRUFBaUJDLE9BQWpCLEVBQTBCLEtBQTFCLEVBQWlDeEMsWUFBakMsQ0FBVjtBQUNBc0MsSUFBQUEsVUFBVSxDQUFDbEQsS0FBRCxFQUFRbUQsT0FBUixFQUFpQkMsT0FBakIsRUFBMEIsT0FBMUIsRUFBbUN4QyxZQUFuQyxDQUFWO0FBQ0FzQyxJQUFBQSxVQUFVLENBQUNsRCxLQUFELEVBQVFtRCxPQUFSLEVBQWlCQyxPQUFqQixFQUEwQixPQUExQixFQUFtQzdCLE9BQU8sQ0FBQyxPQUFELEVBQVVGLFlBQVYsQ0FBMUMsQ0FBVjtBQUNBNkIsSUFBQUEsVUFBVSxDQUFDbEQsS0FBRCxFQUFRbUQsT0FBUixFQUFpQkMsT0FBakIsRUFBMEIsUUFBMUIsRUFBb0M3QixPQUFPLENBQUMsUUFBRCxFQUFXRixZQUFYLENBQTNDLENBQVY7QUFDQTZCLElBQUFBLFVBQVUsQ0FBQ2xELEtBQUQsRUFBUW1ELE9BQVIsRUFBaUJDLE9BQWpCLEVBQTBCLE9BQTFCLEVBQW1DeEMsWUFBbkMsQ0FBVjtBQUNBc0MsSUFBQUEsVUFBVSxDQUFDbEQsS0FBRCxFQUFRbUQsT0FBUixFQUFpQkMsT0FBakIsRUFBMEIsT0FBMUIsRUFBbUNJLFVBQVUsQ0FBQyxVQUFVeEQsS0FBVixFQUFpQmhNLEtBQWpCLEVBQXdCO0FBQzlFLGFBQU80TSxZQUFZLENBQUNaLEtBQUQsRUFBUSxPQUFSLEVBQWlCaE0sS0FBakIsQ0FBbkI7QUFDRCxLQUZzRCxFQUVwRHFOLFlBRm9ELENBQTdDLENBQVY7QUFHQTZCLElBQUFBLFVBQVUsQ0FBQ2xELEtBQUQsRUFBUW1ELE9BQVIsRUFBaUJDLE9BQWpCLEVBQTBCLFFBQTFCLEVBQW9DSSxVQUFVLENBQUMvQixTQUFELEVBQVlKLFlBQVosQ0FBOUMsQ0FBVjtBQUNBNkIsSUFBQUEsVUFBVSxDQUFDbEQsS0FBRCxFQUFRbUQsT0FBUixFQUFpQkMsT0FBakIsRUFBMEIsUUFBMUIsRUFBb0NJLFVBQVUsQ0FBQzdCLFNBQUQsRUFBWU4sWUFBWixDQUE5QyxDQUFWO0FBQ0E2QixJQUFBQSxVQUFVLENBQUNsRCxLQUFELEVBQVFtRCxPQUFSLEVBQWlCQyxPQUFqQixFQUEwQixRQUExQixFQUFvQ0ksVUFBVSxDQUFDNUIsU0FBRCxFQUFZUCxZQUFaLENBQTlDLENBQVY7QUFDQTZCLElBQUFBLFVBQVUsQ0FBQ2xELEtBQUQsRUFBUW1ELE9BQVIsRUFBaUJDLE9BQWpCLEVBQTBCLGFBQTFCLEVBQXlDSSxVQUFVLENBQUMzQixjQUFELEVBQWlCUixZQUFqQixDQUFuRCxDQUFWO0FBQ0FrQyxJQUFBQSxTQUFTLENBQUN2RCxLQUFELEVBQVFtRCxPQUFSLEVBQWlCQyxPQUFqQixDQUFUO0FBQ0QsR0FsQkQ7O0FBb0JBLE1BQUlPLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBVTVJLE1BQVYsRUFBa0I2SSxPQUFsQixFQUEyQjtBQUM5QyxRQUFJN0YsR0FBRyxHQUFHaEQsTUFBTSxDQUFDbkMsR0FBUCxDQUFXaUwsTUFBWCxDQUFrQnJGLEtBQWxCLENBQXdCb0YsT0FBeEIsQ0FBVjtBQUNBLFFBQUlFLFNBQVMsR0FBR2hHLFlBQVksQ0FBQ0MsR0FBRCxDQUE1QjtBQUNBLFFBQUlnRyxVQUFVLEdBQUdoSixNQUFNLENBQUNuQyxHQUFQLENBQVdpTCxNQUFYLENBQWtCckYsS0FBbEIsQ0FBd0J6RCxNQUFNLENBQUNuQyxHQUFQLENBQVdpTCxNQUFYLENBQWtCRyxTQUFsQixDQUE0QkYsU0FBNUIsQ0FBeEIsQ0FBakI7QUFDQSxXQUFPL0ksTUFBTSxDQUFDbkMsR0FBUCxDQUFXaUwsTUFBWCxDQUFrQkcsU0FBbEIsQ0FBNEJELFVBQTVCLENBQVA7QUFDRCxHQUxEOztBQU1BLE1BQUlFLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBVWxKLE1BQVYsRUFBa0I7QUFDdkMsUUFBSTRELE1BQU0sR0FBRzVELE1BQU0sQ0FBQzhELFNBQVAsQ0FBaUJxRixPQUFqQixFQUFiO0FBQ0EsUUFBSXBELFNBQVMsR0FBRy9GLE1BQU0sQ0FBQ25DLEdBQVAsQ0FBV3VMLFNBQVgsQ0FBcUJ4RixNQUFyQixFQUE2QixjQUE3QixDQUFoQjs7QUFDQSxRQUFJbUMsU0FBSixFQUFlO0FBQ2IsYUFBTy9GLE1BQU0sQ0FBQ25DLEdBQVAsQ0FBV2tHLE1BQVgsQ0FBa0IsS0FBbEIsRUFBeUJnQyxTQUF6QixFQUFvQyxDQUFwQyxDQUFQO0FBQ0Q7O0FBQ0QsUUFBSW5DLE1BQU0sS0FBS0EsTUFBTSxDQUFDYyxRQUFQLEtBQW9CLEtBQXBCLElBQTZCRCxrQkFBa0IsQ0FBQ2IsTUFBRCxDQUFwRCxDQUFWLEVBQXlFO0FBQ3ZFLGFBQU8sSUFBUDtBQUNEOztBQUNELFdBQU9BLE1BQVA7QUFDRCxHQVZEOztBQVdBLE1BQUl5RixjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQVVySixNQUFWLEVBQWtCaUksTUFBbEIsRUFBMEI7QUFDN0MsUUFBSXBLLEdBQUcsR0FBR21DLE1BQU0sQ0FBQ25DLEdBQWpCO0FBQ0EsUUFBSXlMLGlCQUFpQixHQUFHM04sTUFBTSxDQUFDcUUsTUFBTSxDQUFDdUosTUFBUCxDQUFjQyxvQkFBZCxFQUFELEVBQXVDLFVBQVVDLENBQVYsRUFBYUMsU0FBYixFQUF3QjtBQUMzRixhQUFPLENBQUMxSixNQUFNLENBQUN1SixNQUFQLENBQWNJLFlBQWQsQ0FBMkJELFNBQTNCLEVBQXNDLFFBQXRDLENBQVI7QUFDRCxLQUY2QixDQUE5QjtBQUdBLFFBQUlFLFNBQVMsR0FBRy9MLEdBQUcsQ0FBQ3VMLFNBQUosQ0FBY25CLE1BQU0sQ0FBQ3JHLFVBQXJCLEVBQWlDLFVBQVUxQyxJQUFWLEVBQWdCO0FBQy9ELGFBQU9qQyxpQkFBaUIsQ0FBQ3FNLGlCQUFELEVBQW9CcEssSUFBSSxDQUFDd0YsUUFBekIsQ0FBeEI7QUFDRCxLQUZlLEVBRWIxRSxNQUFNLENBQUM2SixPQUFQLEVBRmEsQ0FBaEI7O0FBR0EsUUFBSUQsU0FBSixFQUFlO0FBQ2IsYUFBTy9MLEdBQUcsQ0FBQ3NGLEtBQUosQ0FBVXlHLFNBQVYsRUFBcUIzQixNQUFyQixDQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBT0EsTUFBUDtBQUNEO0FBQ0YsR0FiRDs7QUFjQSxNQUFJNkIsMEJBQTBCLEdBQUcsU0FBN0JBLDBCQUE2QixDQUFVOUosTUFBVixFQUFrQjtBQUNqRCxRQUFJaUYsS0FBSyxHQUFHaUUsZ0JBQWdCLENBQUNsSixNQUFELENBQTVCO0FBQ0EsV0FBT2lGLEtBQUssR0FBR2lELElBQUksQ0FBQyxVQUFVbEYsR0FBVixFQUFlO0FBQ2pDLGFBQU80RixjQUFjLENBQUM1SSxNQUFELEVBQVNnRCxHQUFULENBQXJCO0FBQ0QsS0FGa0IsRUFFaEJpQyxLQUZnQixDQUFQLEdBRUFxQyxXQUFXLEVBRnZCO0FBR0QsR0FMRDs7QUFNQSxNQUFJeUMsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixDQUFVL0osTUFBVixFQUFrQjJELElBQWxCLEVBQXdCO0FBQy9DLFFBQUl1RCxHQUFHLEdBQUdsQixNQUFNLENBQUMsVUFBVWhELEdBQVYsRUFBZTtBQUM5QixhQUFPNEYsY0FBYyxDQUFDNUksTUFBRCxFQUFTZ0QsR0FBVCxDQUFyQjtBQUNELEtBRmUsRUFFYlcsSUFGYSxDQUFoQjtBQUdBM0QsSUFBQUEsTUFBTSxDQUFDbkMsR0FBUCxDQUFXeUssU0FBWCxDQUFxQnBCLEdBQXJCLEVBQTBCLGFBQTFCLEVBQXlDLFVBQXpDO0FBQ0FsSCxJQUFBQSxNQUFNLENBQUNnSyxLQUFQO0FBQ0FoSyxJQUFBQSxNQUFNLENBQUM4RCxTQUFQLENBQWlCbUcsVUFBakIsQ0FBNEIvQyxHQUFHLENBQUNnRCxTQUFoQztBQUNBLFFBQUlDLFdBQVcsR0FBR25LLE1BQU0sQ0FBQ25DLEdBQVAsQ0FBV2tHLE1BQVgsQ0FBa0IsMkJBQWxCLEVBQStDLENBQS9DLENBQWxCO0FBQ0EvRCxJQUFBQSxNQUFNLENBQUNuQyxHQUFQLENBQVd5SyxTQUFYLENBQXFCNkIsV0FBckIsRUFBa0MsYUFBbEMsRUFBaUQsSUFBakQ7O0FBQ0EsUUFBSWxELFFBQVEsQ0FBQ2tELFdBQUQsQ0FBWixFQUEyQjtBQUN6QixVQUFJbEMsTUFBTSxHQUFHb0IsY0FBYyxDQUFDckosTUFBRCxFQUFTbUssV0FBVCxDQUEzQjtBQUNBbkssTUFBQUEsTUFBTSxDQUFDOEQsU0FBUCxDQUFpQkMsTUFBakIsQ0FBd0JrRSxNQUF4QjtBQUNELEtBSEQsTUFHTztBQUNMakksTUFBQUEsTUFBTSxDQUFDOEQsU0FBUCxDQUFpQkMsTUFBakIsQ0FBd0JvRyxXQUF4QjtBQUNEO0FBQ0YsR0FmRDs7QUFnQkEsTUFBSUMsV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBVXBLLE1BQVYsRUFBa0JpRixLQUFsQixFQUF5QjtBQUN6Q2pGLElBQUFBLE1BQU0sQ0FBQ25DLEdBQVAsQ0FBV3lLLFNBQVgsQ0FBcUJyRCxLQUFyQixFQUE0QixLQUE1QixFQUFtQ0EsS0FBSyxDQUFDUyxZQUFOLENBQW1CLEtBQW5CLENBQW5DO0FBQ0QsR0FGRDs7QUFHQSxNQUFJMkUsV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBVXJLLE1BQVYsRUFBa0JpRixLQUFsQixFQUF5QjtBQUN6QyxRQUFJQSxLQUFKLEVBQVc7QUFDVCxVQUFJaUMsR0FBRyxHQUFHbEgsTUFBTSxDQUFDbkMsR0FBUCxDQUFXeU0sRUFBWCxDQUFjckYsS0FBSyxDQUFDckQsVUFBcEIsRUFBZ0MsY0FBaEMsSUFBa0RxRCxLQUFLLENBQUNyRCxVQUF4RCxHQUFxRXFELEtBQS9FO0FBQ0FqRixNQUFBQSxNQUFNLENBQUNuQyxHQUFQLENBQVdNLE1BQVgsQ0FBa0IrSSxHQUFsQjtBQUNBbEgsTUFBQUEsTUFBTSxDQUFDZ0ssS0FBUDtBQUNBaEssTUFBQUEsTUFBTSxDQUFDZ0UsV0FBUDs7QUFDQSxVQUFJaEUsTUFBTSxDQUFDbkMsR0FBUCxDQUFXME0sT0FBWCxDQUFtQnZLLE1BQU0sQ0FBQzZKLE9BQVAsRUFBbkIsQ0FBSixFQUEwQztBQUN4QzdKLFFBQUFBLE1BQU0sQ0FBQ2lLLFVBQVAsQ0FBa0IsRUFBbEI7QUFDQWpLLFFBQUFBLE1BQU0sQ0FBQzhELFNBQVAsQ0FBaUIwRyxpQkFBakI7QUFDRDtBQUNGO0FBQ0YsR0FYRDs7QUFZQSxNQUFJQyx5QkFBeUIsR0FBRyxTQUE1QkEseUJBQTRCLENBQVV6SyxNQUFWLEVBQWtCMkQsSUFBbEIsRUFBd0I7QUFDdEQsUUFBSXNCLEtBQUssR0FBR2lFLGdCQUFnQixDQUFDbEosTUFBRCxDQUE1QjtBQUNBK0gsSUFBQUEsS0FBSyxDQUFDLFVBQVUvRSxHQUFWLEVBQWU7QUFDbkIsYUFBTzRGLGNBQWMsQ0FBQzVJLE1BQUQsRUFBU2dELEdBQVQsQ0FBckI7QUFDRCxLQUZJLEVBRUZXLElBRkUsRUFFSXNCLEtBRkosQ0FBTDtBQUdBbUYsSUFBQUEsV0FBVyxDQUFDcEssTUFBRCxFQUFTaUYsS0FBVCxDQUFYOztBQUNBLFFBQUlnQyxRQUFRLENBQUNoQyxLQUFLLENBQUNyRCxVQUFQLENBQVosRUFBZ0M7QUFDOUIsVUFBSXFHLE1BQU0sR0FBR2hELEtBQUssQ0FBQ3JELFVBQW5CO0FBQ0F5SCxNQUFBQSxjQUFjLENBQUNySixNQUFELEVBQVNpSSxNQUFULENBQWQ7QUFDQWpJLE1BQUFBLE1BQU0sQ0FBQzhELFNBQVAsQ0FBaUJDLE1BQWpCLENBQXdCa0IsS0FBSyxDQUFDckQsVUFBOUI7QUFDRCxLQUpELE1BSU87QUFDTDVCLE1BQUFBLE1BQU0sQ0FBQzhELFNBQVAsQ0FBaUJDLE1BQWpCLENBQXdCa0IsS0FBeEI7QUFDQXZCLE1BQUFBLGFBQWEsQ0FBQzFELE1BQUQsRUFBUzJELElBQVQsRUFBZXNCLEtBQWYsQ0FBYjtBQUNEO0FBQ0YsR0FkRDs7QUFlQSxNQUFJeUYsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixDQUFVMUssTUFBVixFQUFrQjJELElBQWxCLEVBQXdCO0FBQzlDLFFBQUlqQixHQUFHLEdBQUdpQixJQUFJLENBQUNqQixHQUFmO0FBQ0EsV0FBT2hMLE9BQVEsQ0FBQ0EsT0FBUSxDQUFDLEVBQUQsRUFBS2lNLElBQUwsQ0FBVCxFQUFxQjtBQUFFakIsTUFBQUEsR0FBRyxFQUFFa0MsY0FBYyxDQUFDNUUsTUFBRCxFQUFTMEMsR0FBVCxDQUFkLEdBQThCQSxHQUE5QixHQUFvQztBQUEzQyxLQUFyQixDQUFmO0FBQ0QsR0FIRDs7QUFJQSxNQUFJaUksbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFzQixDQUFVM0ssTUFBVixFQUFrQjRLLFdBQWxCLEVBQStCO0FBQ3ZELFFBQUkzRixLQUFLLEdBQUdpRSxnQkFBZ0IsQ0FBQ2xKLE1BQUQsQ0FBNUI7O0FBQ0EsUUFBSWlGLEtBQUosRUFBVztBQUNULFVBQUk0RixpQkFBaUIsR0FBRzNDLElBQUksQ0FBQyxVQUFVbEYsR0FBVixFQUFlO0FBQzFDLGVBQU80RixjQUFjLENBQUM1SSxNQUFELEVBQVNnRCxHQUFULENBQXJCO0FBQ0QsT0FGMkIsRUFFekJpQyxLQUZ5QixDQUE1Qjs7QUFHQSxVQUFJdEIsSUFBSSxHQUFHak0sT0FBUSxDQUFDQSxPQUFRLENBQUMsRUFBRCxFQUFLbVQsaUJBQUwsQ0FBVCxFQUFrQ0QsV0FBbEMsQ0FBbkI7O0FBQ0EsVUFBSUUsYUFBYSxHQUFHSixpQkFBaUIsQ0FBQzFLLE1BQUQsRUFBUzJELElBQVQsQ0FBckM7O0FBQ0EsVUFBSUEsSUFBSSxDQUFDakIsR0FBVCxFQUFjO0FBQ1orSCxRQUFBQSx5QkFBeUIsQ0FBQ3pLLE1BQUQsRUFBUzhLLGFBQVQsQ0FBekI7QUFDRCxPQUZELE1BRU87QUFDTFQsUUFBQUEsV0FBVyxDQUFDckssTUFBRCxFQUFTaUYsS0FBVCxDQUFYO0FBQ0Q7QUFDRixLQVhELE1BV08sSUFBSTJGLFdBQVcsQ0FBQ2xJLEdBQWhCLEVBQXFCO0FBQzFCcUgsTUFBQUEsa0JBQWtCLENBQUMvSixNQUFELEVBQVN0SSxPQUFRLENBQUNBLE9BQVEsQ0FBQyxFQUFELEVBQUs0UCxXQUFXLEVBQWhCLENBQVQsRUFBOEJzRCxXQUE5QixDQUFqQixDQUFsQjtBQUNEO0FBQ0YsR0FoQkQ7O0FBa0JBLE1BQUlHLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQVVDLEdBQVYsRUFBZUMsRUFBZixFQUFtQjtBQUM1QixRQUFJQyxXQUFXLEdBQUc1UixRQUFRLENBQUMwUixHQUFELENBQVIsSUFBaUIxUixRQUFRLENBQUMyUixFQUFELENBQTNDO0FBQ0EsV0FBT0MsV0FBVyxHQUFHQyxTQUFTLENBQUNILEdBQUQsRUFBTUMsRUFBTixDQUFaLEdBQXdCQSxFQUExQztBQUNELEdBSEQ7O0FBSUEsTUFBSUcsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBVUMsTUFBVixFQUFrQjtBQUNoQyxXQUFPLFlBQVk7QUFDakIsVUFBSUMsT0FBTyxHQUFHLEVBQWQ7O0FBQ0EsV0FBSyxJQUFJQyxFQUFFLEdBQUcsQ0FBZCxFQUFpQkEsRUFBRSxHQUFHdFQsU0FBUyxDQUFDQyxNQUFoQyxFQUF3Q3FULEVBQUUsRUFBMUMsRUFBOEM7QUFDNUNELFFBQUFBLE9BQU8sQ0FBQ0MsRUFBRCxDQUFQLEdBQWN0VCxTQUFTLENBQUNzVCxFQUFELENBQXZCO0FBQ0Q7O0FBQ0QsVUFBSUQsT0FBTyxDQUFDcFQsTUFBUixLQUFtQixDQUF2QixFQUEwQjtBQUN4QixjQUFNLElBQUkrQyxLQUFKLENBQVUsMkJBQVYsQ0FBTjtBQUNEOztBQUNELFVBQUl1USxHQUFHLEdBQUcsRUFBVjs7QUFDQSxXQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdILE9BQU8sQ0FBQ3BULE1BQTVCLEVBQW9DdVQsQ0FBQyxFQUFyQyxFQUF5QztBQUN2QyxZQUFJQyxTQUFTLEdBQUdKLE9BQU8sQ0FBQ0csQ0FBRCxDQUF2Qjs7QUFDQSxhQUFLLElBQUl6TyxHQUFULElBQWdCME8sU0FBaEIsRUFBMkI7QUFDekIsY0FBSTNPLEdBQUcsQ0FBQzJPLFNBQUQsRUFBWTFPLEdBQVosQ0FBUCxFQUF5QjtBQUN2QndPLFlBQUFBLEdBQUcsQ0FBQ3hPLEdBQUQsQ0FBSCxHQUFXcU8sTUFBTSxDQUFDRyxHQUFHLENBQUN4TyxHQUFELENBQUosRUFBVzBPLFNBQVMsQ0FBQzFPLEdBQUQsQ0FBcEIsQ0FBakI7QUFDRDtBQUNGO0FBQ0Y7O0FBQ0QsYUFBT3dPLEdBQVA7QUFDRCxLQWxCRDtBQW1CRCxHQXBCRDs7QUFxQkEsTUFBSUwsU0FBUyxHQUFHQyxTQUFTLENBQUNMLElBQUQsQ0FBekI7O0FBRUEsTUFBSVksVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBVTdULENBQVYsRUFBYTtBQUM1QixXQUFPQSxDQUFDLENBQUNJLE1BQUYsR0FBVyxDQUFsQjtBQUNELEdBRkQ7O0FBSUEsTUFBSTBULFFBQVEsR0FBR3RVLE9BQU8sQ0FBQ0MsSUFBUixDQUFhQyxLQUFiLENBQW1CQyxPQUFuQixDQUEyQiw0QkFBM0IsQ0FBZjtBQUVBLE1BQUlvVSxNQUFNLEdBQUd2VSxPQUFPLENBQUNDLElBQVIsQ0FBYUMsS0FBYixDQUFtQkMsT0FBbkIsQ0FBMkIsb0JBQTNCLENBQWI7O0FBRUEsTUFBSXFVLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVVDLElBQVYsRUFBZ0I7QUFDN0IsV0FBTzFTLFFBQVEsQ0FBQzBTLElBQUksQ0FBQzlTLEtBQU4sQ0FBUixHQUF1QjhTLElBQUksQ0FBQzlTLEtBQTVCLEdBQW9DLEVBQTNDO0FBQ0QsR0FGRDs7QUFHQSxNQUFJK1MsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBVUQsSUFBVixFQUFnQjtBQUM1QixRQUFJMVMsUUFBUSxDQUFDMFMsSUFBSSxDQUFDM00sSUFBTixDQUFaLEVBQXlCO0FBQ3ZCLGFBQU8yTSxJQUFJLENBQUMzTSxJQUFaO0FBQ0QsS0FGRCxNQUVPLElBQUkvRixRQUFRLENBQUMwUyxJQUFJLENBQUN2RSxLQUFOLENBQVosRUFBMEI7QUFDL0IsYUFBT3VFLElBQUksQ0FBQ3ZFLEtBQVo7QUFDRCxLQUZNLE1BRUE7QUFDTCxhQUFPLEVBQVA7QUFDRDtBQUNGLEdBUkQ7O0FBU0EsTUFBSXlFLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVVDLElBQVYsRUFBZ0JDLFlBQWhCLEVBQThCO0FBQy9DLFFBQUlDLEdBQUcsR0FBRyxFQUFWO0FBQ0FQLElBQUFBLE1BQU0sQ0FBQ3RRLElBQVAsQ0FBWTJRLElBQVosRUFBa0IsVUFBVUgsSUFBVixFQUFnQjtBQUNoQyxVQUFJM00sSUFBSSxHQUFHNE0sT0FBTyxDQUFDRCxJQUFELENBQWxCOztBQUNBLFVBQUlBLElBQUksQ0FBQ00sSUFBTCxLQUFjMVMsU0FBbEIsRUFBNkI7QUFDM0IsWUFBSTJTLEtBQUssR0FBR0wsWUFBWSxDQUFDRixJQUFJLENBQUNNLElBQU4sRUFBWUYsWUFBWixDQUF4QjtBQUNBQyxRQUFBQSxHQUFHLENBQUNqUCxJQUFKLENBQVM7QUFDUGlDLFVBQUFBLElBQUksRUFBRUEsSUFEQztBQUVQa04sVUFBQUEsS0FBSyxFQUFFQTtBQUZBLFNBQVQ7QUFJRCxPQU5ELE1BTU87QUFDTCxZQUFJclQsS0FBSyxHQUFHa1QsWUFBWSxDQUFDSixJQUFELENBQXhCO0FBQ0FLLFFBQUFBLEdBQUcsQ0FBQ2pQLElBQUosQ0FBUztBQUNQaUMsVUFBQUEsSUFBSSxFQUFFQSxJQURDO0FBRVBuRyxVQUFBQSxLQUFLLEVBQUVBO0FBRkEsU0FBVDtBQUlEO0FBQ0YsS0FmRDtBQWdCQSxXQUFPbVQsR0FBUDtBQUNELEdBbkJEOztBQW9CQSxNQUFJRyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFVQyxTQUFWLEVBQXFCO0FBQ25DLFFBQUlBLFNBQVMsS0FBSyxLQUFLLENBQXZCLEVBQTBCO0FBQ3hCQSxNQUFBQSxTQUFTLEdBQUdWLFFBQVo7QUFDRDs7QUFDRCxXQUFPLFVBQVVJLElBQVYsRUFBZ0I7QUFDckIsVUFBSUEsSUFBSixFQUFVO0FBQ1IsZUFBTy9QLFFBQVEsQ0FBQ0QsSUFBVCxDQUFjZ1EsSUFBZCxFQUFvQjVRLEdBQXBCLENBQXdCLFVBQVU0USxJQUFWLEVBQWdCO0FBQzdDLGlCQUFPRCxZQUFZLENBQUNDLElBQUQsRUFBT00sU0FBUCxDQUFuQjtBQUNELFNBRk0sQ0FBUDtBQUdELE9BSkQsTUFJTztBQUNMLGVBQU9yUSxRQUFRLENBQUMvQixJQUFULEVBQVA7QUFDRDtBQUNGLEtBUkQ7QUFTRCxHQWJEOztBQWNBLE1BQUlxUyxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFVUCxJQUFWLEVBQWdCO0FBQzdCLFdBQU9LLFNBQVMsQ0FBQ1QsUUFBRCxDQUFULENBQW9CSSxJQUFwQixDQUFQO0FBQ0QsR0FGRDs7QUFHQSxNQUFJUSxPQUFPLEdBQUcsU0FBVkEsT0FBVSxDQUFVWCxJQUFWLEVBQWdCO0FBQzVCLFdBQU9oUCxHQUFHLENBQUNnUCxJQUFELEVBQU8sT0FBUCxDQUFWO0FBQ0QsR0FGRDs7QUFHQSxNQUFJWSxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLENBQVVULElBQVYsRUFBZ0JqVCxLQUFoQixFQUF1QjtBQUM3QyxXQUFPdUUsT0FBTyxDQUFDME8sSUFBRCxFQUFPLFVBQVVILElBQVYsRUFBZ0I7QUFDbkMsVUFBSVcsT0FBTyxDQUFDWCxJQUFELENBQVgsRUFBbUI7QUFDakIsZUFBT1ksaUJBQWlCLENBQUNaLElBQUksQ0FBQ08sS0FBTixFQUFhclQsS0FBYixDQUF4QjtBQUNELE9BRkQsTUFFTyxJQUFJOFMsSUFBSSxDQUFDOVMsS0FBTCxLQUFlQSxLQUFuQixFQUEwQjtBQUMvQixlQUFPa0QsUUFBUSxDQUFDTCxJQUFULENBQWNpUSxJQUFkLENBQVA7QUFDRCxPQUZNLE1BRUE7QUFDTCxlQUFPNVAsUUFBUSxDQUFDL0IsSUFBVCxFQUFQO0FBQ0Q7QUFDRixLQVJhLENBQWQ7QUFTRCxHQVZEOztBQVdBLE1BQUl3UyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFVQyxPQUFWLEVBQW1CNVQsS0FBbkIsRUFBMEI7QUFDeEMsV0FBTzRULE9BQU8sQ0FBQ3JSLElBQVIsQ0FBYSxVQUFVMFEsSUFBVixFQUFnQjtBQUNsQyxhQUFPUyxpQkFBaUIsQ0FBQ1QsSUFBRCxFQUFPalQsS0FBUCxDQUF4QjtBQUNELEtBRk0sQ0FBUDtBQUdELEdBSkQ7O0FBS0EsTUFBSTZULFNBQVMsR0FBRztBQUNkUCxJQUFBQSxTQUFTLEVBQUVBLFNBREc7QUFFZEUsSUFBQUEsUUFBUSxFQUFFQSxRQUZJO0FBR2RHLElBQUFBLFNBQVMsRUFBRUE7QUFIRyxHQUFoQjs7QUFNQSxNQUFJRyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFVQyxLQUFWLEVBQWlCO0FBQy9CLFdBQU87QUFDTHhGLE1BQUFBLEtBQUssRUFBRSxVQURGO0FBRUwzTyxNQUFBQSxJQUFJLEVBQUUsVUFGRDtBQUdMeVQsTUFBQUEsS0FBSyxFQUFFLENBQ0w7QUFDRXRULFFBQUFBLElBQUksRUFBRSxPQURSO0FBRUVpVSxRQUFBQSxLQUFLLEVBQUUsT0FGVDtBQUdFcFUsUUFBQUEsSUFBSSxFQUFFO0FBSFIsT0FESyxFQU1MO0FBQ0VHLFFBQUFBLElBQUksRUFBRSxNQURSO0FBRUVrVSxRQUFBQSxPQUFPLEVBQUUsQ0FGWDtBQUdFWixRQUFBQSxLQUFLLEVBQUUsQ0FDTDtBQUNFdFQsVUFBQUEsSUFBSSxFQUFFLE9BRFI7QUFFRWlVLFVBQUFBLEtBQUssRUFBRSxnQkFGVDtBQUdFcFUsVUFBQUEsSUFBSSxFQUFFLFFBSFI7QUFJRXNVLFVBQUFBLFNBQVMsRUFBRTtBQUpiLFNBREssRUFPTDtBQUNFblUsVUFBQUEsSUFBSSxFQUFFLE9BRFI7QUFFRWlVLFVBQUFBLEtBQUssRUFBRSxrQkFGVDtBQUdFcFUsVUFBQUEsSUFBSSxFQUFFLFFBSFI7QUFJRXNVLFVBQUFBLFNBQVMsRUFBRTtBQUpiLFNBUEssRUFhTDtBQUNFblUsVUFBQUEsSUFBSSxFQUFFLE9BRFI7QUFFRWlVLFVBQUFBLEtBQUssRUFBRSxjQUZUO0FBR0VwVSxVQUFBQSxJQUFJLEVBQUUsUUFIUjtBQUlFc1UsVUFBQUEsU0FBUyxFQUFFO0FBSmIsU0FiSyxFQW1CTDtBQUNFblUsVUFBQUEsSUFBSSxFQUFFLFNBRFI7QUFFRUgsVUFBQUEsSUFBSSxFQUFFLGFBRlI7QUFHRW9VLFVBQUFBLEtBQUssRUFBRSxjQUhUO0FBSUVYLFVBQUFBLEtBQUssRUFBRSxDQUNMO0FBQ0VsTixZQUFBQSxJQUFJLEVBQUUsV0FEUjtBQUVFbkcsWUFBQUEsS0FBSyxFQUFFO0FBRlQsV0FESyxFQUtMO0FBQ0VtRyxZQUFBQSxJQUFJLEVBQUUsT0FEUjtBQUVFbkcsWUFBQUEsS0FBSyxFQUFFO0FBRlQsV0FMSyxFQVNMO0FBQ0VtRyxZQUFBQSxJQUFJLEVBQUUsUUFEUjtBQUVFbkcsWUFBQUEsS0FBSyxFQUFFO0FBRlQsV0FUSyxFQWFMO0FBQ0VtRyxZQUFBQSxJQUFJLEVBQUUsUUFEUjtBQUVFbkcsWUFBQUEsS0FBSyxFQUFFO0FBRlQsV0FiSyxFQWlCTDtBQUNFbUcsWUFBQUEsSUFBSSxFQUFFLFFBRFI7QUFFRW5HLFlBQUFBLEtBQUssRUFBRTtBQUZULFdBakJLLEVBcUJMO0FBQ0VtRyxZQUFBQSxJQUFJLEVBQUUsUUFEUjtBQUVFbkcsWUFBQUEsS0FBSyxFQUFFO0FBRlQsV0FyQkssRUF5Qkw7QUFDRW1HLFlBQUFBLElBQUksRUFBRSxPQURSO0FBRUVuRyxZQUFBQSxLQUFLLEVBQUU7QUFGVCxXQXpCSyxFQTZCTDtBQUNFbUcsWUFBQUEsSUFBSSxFQUFFLE9BRFI7QUFFRW5HLFlBQUFBLEtBQUssRUFBRTtBQUZULFdBN0JLLEVBaUNMO0FBQ0VtRyxZQUFBQSxJQUFJLEVBQUUsUUFEUjtBQUVFbkcsWUFBQUEsS0FBSyxFQUFFO0FBRlQsV0FqQ0ssRUFxQ0w7QUFDRW1HLFlBQUFBLElBQUksRUFBRSxNQURSO0FBRUVuRyxZQUFBQSxLQUFLLEVBQUU7QUFGVCxXQXJDSyxFQXlDTDtBQUNFbUcsWUFBQUEsSUFBSSxFQUFFLFFBRFI7QUFFRW5HLFlBQUFBLEtBQUssRUFBRTtBQUZULFdBekNLO0FBSlQsU0FuQks7QUFIVCxPQU5LO0FBSEYsS0FBUDtBQXNGRCxHQXZGRDs7QUF3RkEsTUFBSW1VLE1BQU0sR0FBRztBQUFFQyxJQUFBQSxPQUFPLEVBQUVOO0FBQVgsR0FBYjs7QUFFQSxNQUFJTyxPQUFPLEdBQUcsU0FBVkEsT0FBVSxDQUFVdE4sTUFBVixFQUFrQjtBQUM5QixRQUFJdU4sZ0JBQWdCLEdBQUdULFNBQVMsQ0FBQ1AsU0FBVixDQUFvQixVQUFVUixJQUFWLEVBQWdCO0FBQ3pELGFBQU8vTCxNQUFNLENBQUN3TixVQUFQLENBQWtCekIsSUFBSSxDQUFDOVMsS0FBTCxJQUFjOFMsSUFBSSxDQUFDMUssR0FBckMsRUFBMEMsS0FBMUMsQ0FBUDtBQUNELEtBRnNCLENBQXZCO0FBR0EsUUFBSW9NLGVBQWUsR0FBRyxJQUFJN04sUUFBSixDQUFhLFVBQVU4TixTQUFWLEVBQXFCO0FBQ3REdEssTUFBQUEsZUFBZSxDQUFDcEQsTUFBRCxFQUFTLFVBQVVxRCxTQUFWLEVBQXFCO0FBQzNDcUssUUFBQUEsU0FBUyxDQUFDSCxnQkFBZ0IsQ0FBQ2xLLFNBQUQsQ0FBaEIsQ0FBNEIvSCxHQUE1QixDQUFnQyxVQUFVZ1IsS0FBVixFQUFpQjtBQUN6RCxpQkFBT2xQLE9BQU8sQ0FBQyxDQUNiLENBQUM7QUFDR2dDLFlBQUFBLElBQUksRUFBRSxNQURUO0FBRUduRyxZQUFBQSxLQUFLLEVBQUU7QUFGVixXQUFELENBRGEsRUFLYnFULEtBTGEsQ0FBRCxDQUFkO0FBT0QsU0FSUyxDQUFELENBQVQ7QUFTRCxPQVZjLENBQWY7QUFXRCxLQVpxQixDQUF0QjtBQWFBLFFBQUlxQixTQUFTLEdBQUdiLFNBQVMsQ0FBQ0wsUUFBVixDQUFtQnBNLFlBQVksQ0FBQ0wsTUFBRCxDQUEvQixDQUFoQjtBQUNBLFFBQUk0TixXQUFXLEdBQUcxTixTQUFTLENBQUNGLE1BQUQsQ0FBM0I7QUFDQSxRQUFJNk4sY0FBYyxHQUFHMU4sWUFBWSxDQUFDSCxNQUFELENBQWpDO0FBQ0EsUUFBSThOLGNBQWMsR0FBR3BOLFlBQVksQ0FBQ1YsTUFBRCxDQUFqQztBQUNBLFFBQUkrTixrQkFBa0IsR0FBR3BOLGdCQUFnQixDQUFDWCxNQUFELENBQXpDO0FBQ0EsUUFBSWlGLEtBQUssR0FBRzZFLDBCQUEwQixDQUFDOUosTUFBRCxDQUF0QztBQUNBLFFBQUlnTyxnQkFBZ0IsR0FBRzFOLGNBQWMsQ0FBQ04sTUFBRCxDQUFyQztBQUNBLFFBQUlpTyxlQUFlLEdBQUcxTixhQUFhLENBQUNQLE1BQUQsQ0FBbkM7QUFDQSxRQUFJa08sZUFBZSxHQUFHbk8sYUFBYSxDQUFDQyxNQUFELENBQW5DO0FBQ0EsUUFBSW1PLGlCQUFpQixHQUFHM04sZUFBZSxDQUFDUixNQUFELENBQXZDO0FBQ0EsUUFBSW9PLHVCQUF1QixHQUFHeE4sd0JBQXdCLENBQUNaLE1BQUQsQ0FBdEQ7QUFDQSxRQUFJcU8sZ0JBQWdCLEdBQUd4Tix5QkFBeUIsQ0FBQ2IsTUFBRCxDQUFoRDtBQUNBLFFBQUlzTyxVQUFVLEdBQUduUyxRQUFRLENBQUNMLElBQVQsQ0FBY3NFLGFBQWEsQ0FBQ0osTUFBRCxDQUEzQixFQUFxQ3JFLE1BQXJDLENBQTRDLFVBQVU0UyxNQUFWLEVBQWtCO0FBQzdFLGFBQU9sVixRQUFRLENBQUNrVixNQUFELENBQVIsSUFBb0JBLE1BQU0sQ0FBQ3JXLE1BQVAsR0FBZ0IsQ0FBM0M7QUFDRCxLQUZnQixDQUFqQjtBQUdBLFdBQU91VixlQUFlLENBQUNlLElBQWhCLENBQXFCLFVBQVVuTCxTQUFWLEVBQXFCO0FBQy9DLGFBQU87QUFDTDRCLFFBQUFBLEtBQUssRUFBRUEsS0FERjtBQUVMNUIsUUFBQUEsU0FBUyxFQUFFQSxTQUZOO0FBR0xzSyxRQUFBQSxTQUFTLEVBQUVBLFNBSE47QUFJTHpOLFFBQUFBLFNBQVMsRUFBRTBOLFdBSk47QUFLTHpOLFFBQUFBLFlBQVksRUFBRTBOLGNBTFQ7QUFNTG5OLFFBQUFBLFlBQVksRUFBRW9OLGNBTlQ7QUFPTG5OLFFBQUFBLGdCQUFnQixFQUFFb04sa0JBUGI7QUFRTHpOLFFBQUFBLGNBQWMsRUFBRTBOLGdCQVJYO0FBU0x6TixRQUFBQSxhQUFhLEVBQUUwTixlQVRWO0FBVUxsTyxRQUFBQSxhQUFhLEVBQUVtTyxlQVZWO0FBV0wxTixRQUFBQSxlQUFlLEVBQUUyTixpQkFYWjtBQVlMRyxRQUFBQSxVQUFVLEVBQUVBLFVBWlA7QUFhTEYsUUFBQUEsdUJBQXVCLEVBQUVBLHVCQWJwQjtBQWNMQyxRQUFBQSxnQkFBZ0IsRUFBRUE7QUFkYixPQUFQO0FBZ0JELEtBakJNLENBQVA7QUFrQkQsR0FsREQ7O0FBb0RBLE1BQUlJLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQVVDLElBQVYsRUFBZ0I7QUFDOUIsUUFBSUMsUUFBUSxHQUFHO0FBQ2I5VixNQUFBQSxJQUFJLEVBQUUsS0FETztBQUViRyxNQUFBQSxJQUFJLEVBQUUsVUFGTztBQUdiNFYsTUFBQUEsUUFBUSxFQUFFLE9BSEc7QUFJYjNCLE1BQUFBLEtBQUssRUFBRTtBQUpNLEtBQWY7QUFNQSxRQUFJNUosU0FBUyxHQUFHcUwsSUFBSSxDQUFDckwsU0FBTCxDQUFlL0gsR0FBZixDQUFtQixVQUFVZ1IsS0FBVixFQUFpQjtBQUNsRCxhQUFPO0FBQ0x6VCxRQUFBQSxJQUFJLEVBQUUsUUFERDtBQUVMRyxRQUFBQSxJQUFJLEVBQUUsU0FGRDtBQUdMaVUsUUFBQUEsS0FBSyxFQUFFLFlBSEY7QUFJTFgsUUFBQUEsS0FBSyxFQUFFQTtBQUpGLE9BQVA7QUFNRCxLQVBlLENBQWhCO0FBUUEsUUFBSXVDLGdCQUFnQixHQUFHO0FBQ3JCaFcsTUFBQUEsSUFBSSxFQUFFLEtBRGU7QUFFckJHLE1BQUFBLElBQUksRUFBRSxPQUZlO0FBR3JCaVUsTUFBQUEsS0FBSyxFQUFFLHlCQUhjO0FBSXJCNkIsTUFBQUEsUUFBUSxFQUFFSixJQUFJLENBQUNOLHVCQUFMLElBQWdDTSxJQUFJLENBQUN6SixLQUFMLENBQVc0QztBQUpoQyxLQUF2QjtBQU1BLFFBQUlrSCxVQUFVLEdBQUc7QUFDZmxXLE1BQUFBLElBQUksRUFBRSxPQURTO0FBRWZHLE1BQUFBLElBQUksRUFBRSxPQUZTO0FBR2ZpVSxNQUFBQSxLQUFLLEVBQUU7QUFIUSxLQUFqQjtBQUtBLFFBQUkrQixlQUFlLEdBQUc7QUFDcEJuVyxNQUFBQSxJQUFJLEVBQUUsWUFEYztBQUVwQkcsTUFBQUEsSUFBSSxFQUFFO0FBRmMsS0FBdEI7QUFJQSxRQUFJNk8sWUFBWSxHQUFHO0FBQ2pCN08sTUFBQUEsSUFBSSxFQUFFLE9BRFc7QUFFakJpVSxNQUFBQSxLQUFLLEVBQUUsZUFGVTtBQUdqQlgsTUFBQUEsS0FBSyxFQUFFLENBQUM7QUFDSnpULFFBQUFBLElBQUksRUFBRSxjQURGO0FBRUpHLFFBQUFBLElBQUksRUFBRSxVQUZGO0FBR0ppVSxRQUFBQSxLQUFLLEVBQUU7QUFISCxPQUFEO0FBSFUsS0FBbkI7QUFTQSxRQUFJVSxTQUFTLEdBQUdlLElBQUksQ0FBQ2YsU0FBTCxDQUFlclMsR0FBZixDQUFtQixVQUFVZ1IsS0FBVixFQUFpQjtBQUNsRCxhQUFPO0FBQ0x6VCxRQUFBQSxJQUFJLEVBQUUsU0FERDtBQUVMRyxRQUFBQSxJQUFJLEVBQUUsU0FGRDtBQUdMaVUsUUFBQUEsS0FBSyxFQUFFLE9BSEY7QUFJTFgsUUFBQUEsS0FBSyxFQUFFQTtBQUpGLE9BQVA7QUFNRCxLQVBlLENBQWhCO0FBUUEsUUFBSTdFLE9BQU8sR0FBRztBQUNaek8sTUFBQUEsSUFBSSxFQUFFLE9BRE07QUFFWmlVLE1BQUFBLEtBQUssRUFBRSxTQUZLO0FBR1pYLE1BQUFBLEtBQUssRUFBRSxDQUFDO0FBQ0p0VCxRQUFBQSxJQUFJLEVBQUUsVUFERjtBQUVKSCxRQUFBQSxJQUFJLEVBQUUsU0FGRjtBQUdKb1UsUUFBQUEsS0FBSyxFQUFFO0FBSEgsT0FBRDtBQUhLLEtBQWQ7O0FBU0EsUUFBSWdDLHNCQUFzQixHQUFHLFNBQXpCQSxzQkFBeUIsQ0FBVUMsVUFBVixFQUFzQjtBQUNqRCxhQUFPQSxVQUFVLEdBQUc7QUFDbEJsVyxRQUFBQSxJQUFJLEVBQUUsTUFEWTtBQUVsQmtVLFFBQUFBLE9BQU8sRUFBRTtBQUZTLE9BQUgsR0FHYjtBQUFFbFUsUUFBQUEsSUFBSSxFQUFFO0FBQVIsT0FISjtBQUlELEtBTEQ7O0FBTUEsV0FBT29FLE9BQU8sQ0FBQyxDQUNiLENBQUN1UixRQUFELENBRGEsRUFFYnRMLFNBQVMsQ0FBQ3pILE9BQVYsRUFGYSxFQUdiOFMsSUFBSSxDQUFDTix1QkFBTCxJQUFnQ00sSUFBSSxDQUFDcE8sY0FBckMsR0FBc0QsQ0FBQ3VILFlBQUQsQ0FBdEQsR0FBdUUsRUFIMUQsRUFJYjZHLElBQUksQ0FBQ3BPLGNBQUwsR0FBc0IsQ0FBQ3VPLGdCQUFELENBQXRCLEdBQTJDLEVBSjlCLEVBS2JILElBQUksQ0FBQ25PLGFBQUwsR0FBcUIsQ0FBQ3dPLFVBQUQsQ0FBckIsR0FBb0MsRUFMdkIsRUFNYkwsSUFBSSxDQUFDM08sYUFBTCxHQUFxQixDQUFDaVAsZUFBRCxDQUFyQixHQUF5QyxFQU41QixFQU9iLENBQUN0WCxPQUFRLENBQUNBLE9BQVEsQ0FBQyxFQUFELEVBQUt1WCxzQkFBc0IsQ0FBQ1AsSUFBSSxDQUFDZixTQUFMLENBQWVoVCxNQUFmLE1BQTJCK1QsSUFBSSxDQUFDbE8sZUFBakMsQ0FBM0IsQ0FBVCxFQUF3RjtBQUM3RjhMLE1BQUFBLEtBQUssRUFBRWxQLE9BQU8sQ0FBQyxDQUNidVEsU0FBUyxDQUFDL1IsT0FBVixFQURhLEVBRWI4UyxJQUFJLENBQUNsTyxlQUFMLEdBQXVCLENBQUNpSCxPQUFELENBQXZCLEdBQW1DLEVBRnRCLENBQUQ7QUFEK0UsS0FBeEYsQ0FBVCxDQVBhLENBQUQsQ0FBZDtBQWNELEdBNUVEOztBQTZFQSxNQUFJMEgsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBVVQsSUFBVixFQUFnQjtBQUM5QixXQUFPO0FBQ0xsSCxNQUFBQSxLQUFLLEVBQUUsU0FERjtBQUVMM08sTUFBQUEsSUFBSSxFQUFFLFNBRkQ7QUFHTHlULE1BQUFBLEtBQUssRUFBRW1DLFNBQVMsQ0FBQ0MsSUFBRDtBQUhYLEtBQVA7QUFLRCxHQU5EOztBQU9BLE1BQUlVLE9BQU8sR0FBRztBQUNaL0IsSUFBQUEsT0FBTyxFQUFFOEIsU0FERztBQUVaVixJQUFBQSxTQUFTLEVBQUVBO0FBRkMsR0FBZDs7QUFLQSxNQUFJcEIsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBVUwsS0FBVixFQUFpQjtBQUM3QixRQUFJVixLQUFLLEdBQUcsQ0FBQztBQUNUdFQsTUFBQUEsSUFBSSxFQUFFLFVBREc7QUFFVEgsTUFBQUEsSUFBSSxFQUFFO0FBRkcsS0FBRCxDQUFaO0FBSUEsV0FBTztBQUNMMk8sTUFBQUEsS0FBSyxFQUFFLFFBREY7QUFFTDNPLE1BQUFBLElBQUksRUFBRSxRQUZEO0FBR0x5VCxNQUFBQSxLQUFLLEVBQUVBO0FBSEYsS0FBUDtBQUtELEdBVkQ7O0FBV0EsTUFBSStDLFNBQVMsR0FBRztBQUFFaEMsSUFBQUEsT0FBTyxFQUFFQTtBQUFYLEdBQWhCOztBQUVBLE1BQUlpQyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFVWixJQUFWLEVBQWdCO0FBQ2hDLFdBQU87QUFDTGEsTUFBQUEsU0FBUyxFQUFFekMsU0FBUyxDQUFDRixTQUFWLENBQW9COEIsSUFBSSxDQUFDckwsU0FBekIsRUFBb0NxTCxJQUFJLENBQUN6SixLQUFMLENBQVd2QyxHQUEvQyxDQUROO0FBRUw4TSxNQUFBQSxPQUFPLEVBQUVkLElBQUksQ0FBQ3pKLEtBQUwsQ0FBV3NDLEdBRmY7QUFHTGtJLE1BQUFBLElBQUksRUFBRTtBQUhELEtBQVA7QUFLRCxHQU5EOztBQU9BLE1BQUlDLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBVXpLLEtBQVYsRUFBaUI7QUFDbkMsV0FBTztBQUNMdkMsTUFBQUEsR0FBRyxFQUFFO0FBQ0h6SixRQUFBQSxLQUFLLEVBQUVnTSxLQUFLLENBQUN2QyxHQURWO0FBRUhpTixRQUFBQSxJQUFJLEVBQUU7QUFGSCxPQURBO0FBS0xDLE1BQUFBLE1BQU0sRUFBRTNLLEtBQUssQ0FBQ3ZDLEdBTFQ7QUFNTDZFLE1BQUFBLEdBQUcsRUFBRXRDLEtBQUssQ0FBQ3NDLEdBTk47QUFPTEMsTUFBQUEsS0FBSyxFQUFFdkMsS0FBSyxDQUFDdUMsS0FQUjtBQVFML0YsTUFBQUEsVUFBVSxFQUFFO0FBQ1ZLLFFBQUFBLEtBQUssRUFBRW1ELEtBQUssQ0FBQ25ELEtBREg7QUFFVkUsUUFBQUEsTUFBTSxFQUFFaUQsS0FBSyxDQUFDakQ7QUFGSixPQVJQO0FBWUw2TixNQUFBQSxPQUFPLEVBQUU1SyxLQUFLLFNBWlQ7QUFhTHdDLE1BQUFBLE9BQU8sRUFBRXhDLEtBQUssQ0FBQ3dDLE9BYlY7QUFjTHRGLE1BQUFBLEtBQUssRUFBRThDLEtBQUssQ0FBQzlDLEtBZFI7QUFlTHdGLE1BQUFBLE1BQU0sRUFBRTFDLEtBQUssQ0FBQzBDLE1BZlQ7QUFnQkxDLE1BQUFBLE1BQU0sRUFBRTNDLEtBQUssQ0FBQzJDLE1BaEJUO0FBaUJMRixNQUFBQSxNQUFNLEVBQUV6QyxLQUFLLENBQUN5QyxNQWpCVDtBQWtCTG9JLE1BQUFBLFdBQVcsRUFBRTdLLEtBQUssQ0FBQzhCLFdBbEJkO0FBbUJMZ0osTUFBQUEsU0FBUyxFQUFFLEVBbkJOO0FBb0JMbEksTUFBQUEsWUFBWSxFQUFFNUMsS0FBSyxDQUFDNEM7QUFwQmYsS0FBUDtBQXNCRCxHQXZCRDs7QUF3QkEsTUFBSW1JLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQVVyTSxJQUFWLEVBQWdCc00sY0FBaEIsRUFBZ0M7QUFDaEQsV0FBTztBQUNMdk4sTUFBQUEsR0FBRyxFQUFFaUIsSUFBSSxDQUFDakIsR0FBTCxDQUFTekosS0FEVDtBQUVMc08sTUFBQUEsR0FBRyxFQUFFNUQsSUFBSSxDQUFDNEQsR0FBTCxDQUFTclAsTUFBVCxLQUFvQixDQUFwQixJQUF5QitYLGNBQXpCLEdBQTBDLElBQTFDLEdBQWlEdE0sSUFBSSxDQUFDNEQsR0FGdEQ7QUFHTEMsTUFBQUEsS0FBSyxFQUFFN0QsSUFBSSxDQUFDNkQsS0FIUDtBQUlMMUYsTUFBQUEsS0FBSyxFQUFFNkIsSUFBSSxDQUFDbEMsVUFBTCxDQUFnQkssS0FKbEI7QUFLTEUsTUFBQUEsTUFBTSxFQUFFMkIsSUFBSSxDQUFDbEMsVUFBTCxDQUFnQk8sTUFMbkI7QUFNTCxlQUFPMkIsSUFBSSxDQUFDa00sT0FOUDtBQU9MMU4sTUFBQUEsS0FBSyxFQUFFd0IsSUFBSSxDQUFDeEIsS0FQUDtBQVFMc0YsTUFBQUEsT0FBTyxFQUFFOUQsSUFBSSxDQUFDOEQsT0FSVDtBQVNMQyxNQUFBQSxNQUFNLEVBQUUvRCxJQUFJLENBQUMrRCxNQVRSO0FBVUxDLE1BQUFBLE1BQU0sRUFBRWhFLElBQUksQ0FBQ2dFLE1BVlI7QUFXTEMsTUFBQUEsTUFBTSxFQUFFakUsSUFBSSxDQUFDaUUsTUFYUjtBQVlMYixNQUFBQSxXQUFXLEVBQUVwRCxJQUFJLENBQUNtTSxXQVpiO0FBYUxqSSxNQUFBQSxZQUFZLEVBQUVsRSxJQUFJLENBQUNrRTtBQWJkLEtBQVA7QUFlRCxHQWhCRDs7QUFpQkEsTUFBSXFJLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBVXhCLElBQVYsRUFBZ0J5QixNQUFoQixFQUF3QjtBQUMzQyxRQUFJLENBQUMsdUJBQXVCck4sSUFBdkIsQ0FBNEJxTixNQUE1QixDQUFMLEVBQTBDO0FBQ3hDLGFBQU96QixJQUFJLENBQUNKLFVBQUwsQ0FBZ0I5UyxJQUFoQixDQUFxQixVQUFVNFUsVUFBVixFQUFzQjtBQUNoRCxZQUFJRCxNQUFNLENBQUNFLFNBQVAsQ0FBaUIsQ0FBakIsRUFBb0JELFVBQVUsQ0FBQ2xZLE1BQS9CLE1BQTJDa1ksVUFBL0MsRUFBMkQ7QUFDekQsaUJBQU9qVSxRQUFRLENBQUNMLElBQVQsQ0FBY3NVLFVBQVUsR0FBR0QsTUFBM0IsQ0FBUDtBQUNEOztBQUNELGVBQU9oVSxRQUFRLENBQUMvQixJQUFULEVBQVA7QUFDRCxPQUxNLENBQVA7QUFNRDs7QUFDRCxXQUFPK0IsUUFBUSxDQUFDL0IsSUFBVCxFQUFQO0FBQ0QsR0FWRDs7QUFXQSxNQUFJa1csYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFVNUIsSUFBVixFQUFnQjZCLEdBQWhCLEVBQXFCO0FBQ3ZDLFFBQUk1TSxJQUFJLEdBQUc0TSxHQUFHLENBQUNDLE9BQUosRUFBWDtBQUNBTixJQUFBQSxjQUFjLENBQUN4QixJQUFELEVBQU8vSyxJQUFJLENBQUNqQixHQUFMLENBQVN6SixLQUFoQixDQUFkLENBQXFDc0MsSUFBckMsQ0FBMEMsVUFBVTRVLE1BQVYsRUFBa0I7QUFDMURJLE1BQUFBLEdBQUcsQ0FBQ0UsT0FBSixDQUFZO0FBQ1YvTixRQUFBQSxHQUFHLEVBQUU7QUFDSHpKLFVBQUFBLEtBQUssRUFBRWtYLE1BREo7QUFFSFIsVUFBQUEsSUFBSSxFQUFFaE0sSUFBSSxDQUFDakIsR0FBTCxDQUFTaU47QUFGWjtBQURLLE9BQVo7QUFNRCxLQVBEO0FBUUQsR0FWRDs7QUFXQSxNQUFJZSxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLENBQVVoQyxJQUFWLEVBQWdCL0ssSUFBaEIsRUFBc0JnTSxJQUF0QixFQUE0QjtBQUNsRCxRQUFJakIsSUFBSSxDQUFDcE8sY0FBTCxJQUF1QmpILFFBQVEsQ0FBQ3NXLElBQUksQ0FBQ3BJLEdBQU4sQ0FBbkMsRUFBK0M7QUFDN0M1RCxNQUFBQSxJQUFJLENBQUM0RCxHQUFMLEdBQVdvSSxJQUFJLENBQUNwSSxHQUFoQjtBQUNEOztBQUNELFFBQUltSCxJQUFJLENBQUNOLHVCQUFULEVBQWtDO0FBQ2hDekssTUFBQUEsSUFBSSxDQUFDa0UsWUFBTCxHQUFvQjhILElBQUksQ0FBQzlILFlBQUwsSUFBcUJsRSxJQUFJLENBQUNrRSxZQUExQixJQUEwQyxLQUE5RDtBQUNEOztBQUNELFFBQUk2RyxJQUFJLENBQUNuTyxhQUFMLElBQXNCbEgsUUFBUSxDQUFDc1csSUFBSSxDQUFDbkksS0FBTixDQUFsQyxFQUFnRDtBQUM5QzdELE1BQUFBLElBQUksQ0FBQzZELEtBQUwsR0FBYW1JLElBQUksQ0FBQ25JLEtBQWxCO0FBQ0Q7O0FBQ0QsUUFBSWtILElBQUksQ0FBQzNPLGFBQVQsRUFBd0I7QUFDdEIsVUFBSTFHLFFBQVEsQ0FBQ3NXLElBQUksQ0FBQzdOLEtBQU4sQ0FBWixFQUEwQjtBQUN4QjZCLFFBQUFBLElBQUksQ0FBQ2xDLFVBQUwsQ0FBZ0JLLEtBQWhCLEdBQXdCNk4sSUFBSSxDQUFDN04sS0FBN0I7QUFDRDs7QUFDRCxVQUFJekksUUFBUSxDQUFDc1csSUFBSSxDQUFDM04sTUFBTixDQUFaLEVBQTJCO0FBQ3pCMkIsUUFBQUEsSUFBSSxDQUFDbEMsVUFBTCxDQUFnQk8sTUFBaEIsR0FBeUIyTixJQUFJLENBQUMzTixNQUE5QjtBQUNEO0FBQ0Y7O0FBQ0QsUUFBSTNJLFFBQVEsQ0FBQ3NXLElBQUksU0FBTCxDQUFaLEVBQTBCO0FBQ3hCN0MsTUFBQUEsU0FBUyxDQUFDRixTQUFWLENBQW9COEIsSUFBSSxDQUFDZixTQUF6QixFQUFvQ2dDLElBQUksU0FBeEMsRUFBZ0RwVSxJQUFoRCxDQUFxRCxVQUFVb1YsS0FBVixFQUFpQjtBQUNwRWhOLFFBQUFBLElBQUksQ0FBQ2tNLE9BQUwsR0FBZWMsS0FBSyxDQUFDMVgsS0FBckI7QUFDRCxPQUZEO0FBR0Q7O0FBQ0QsUUFBSXlWLElBQUksQ0FBQ2xPLGVBQVQsRUFBMEI7QUFDeEIsVUFBSS9HLFNBQVMsQ0FBQ2tXLElBQUksQ0FBQ2xJLE9BQU4sQ0FBYixFQUE2QjtBQUMzQjlELFFBQUFBLElBQUksQ0FBQzhELE9BQUwsR0FBZWtJLElBQUksQ0FBQ2xJLE9BQXBCO0FBQ0Q7QUFDRjs7QUFDRCxRQUFJaUgsSUFBSSxDQUFDeE8sU0FBVCxFQUFvQjtBQUNsQixVQUFJN0csUUFBUSxDQUFDc1csSUFBSSxDQUFDeE4sS0FBTixDQUFaLEVBQTBCO0FBQ3hCd0IsUUFBQUEsSUFBSSxDQUFDeEIsS0FBTCxHQUFhd04sSUFBSSxDQUFDeE4sS0FBbEI7QUFDRDs7QUFDRCxVQUFJOUksUUFBUSxDQUFDc1csSUFBSSxDQUFDaEksTUFBTixDQUFaLEVBQTJCO0FBQ3pCaEUsUUFBQUEsSUFBSSxDQUFDZ0UsTUFBTCxHQUFjZ0ksSUFBSSxDQUFDaEksTUFBbkI7QUFDRDs7QUFDRCxVQUFJdE8sUUFBUSxDQUFDc1csSUFBSSxDQUFDL0gsTUFBTixDQUFaLEVBQTJCO0FBQ3pCakUsUUFBQUEsSUFBSSxDQUFDaUUsTUFBTCxHQUFjK0gsSUFBSSxDQUFDL0gsTUFBbkI7QUFDRDs7QUFDRCxVQUFJdk8sUUFBUSxDQUFDc1csSUFBSSxDQUFDakksTUFBTixDQUFaLEVBQTJCO0FBQ3pCL0QsUUFBQUEsSUFBSSxDQUFDK0QsTUFBTCxHQUFjaUksSUFBSSxDQUFDakksTUFBbkI7QUFDRDs7QUFDRCxVQUFJck8sUUFBUSxDQUFDc1csSUFBSSxDQUFDRyxXQUFOLENBQVosRUFBZ0M7QUFDOUJuTSxRQUFBQSxJQUFJLENBQUNtTSxXQUFMLEdBQW1CSCxJQUFJLENBQUNHLFdBQXhCO0FBQ0Q7QUFDRjtBQUNGLEdBN0NEOztBQThDQSxNQUFJYyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQVVsQyxJQUFWLEVBQWdCNkIsR0FBaEIsRUFBcUI7QUFDMUMsUUFBSTVNLElBQUksR0FBRzRNLEdBQUcsQ0FBQ0MsT0FBSixFQUFYO0FBQ0EsUUFBSWIsSUFBSSxHQUFHaE0sSUFBSSxDQUFDakIsR0FBTCxDQUFTaU4sSUFBcEI7O0FBQ0EsUUFBSUEsSUFBSSxLQUFLaFcsU0FBYixFQUF3QjtBQUN0QixVQUFJME8sT0FBTyxHQUFHOEMsU0FBUyxDQUFDLEVBQUQsRUFBS3hILElBQUwsQ0FBdkI7QUFDQStNLE1BQUFBLGlCQUFpQixDQUFDaEMsSUFBRCxFQUFPckcsT0FBUCxFQUFnQnNILElBQWhCLENBQWpCO0FBQ0FZLE1BQUFBLEdBQUcsQ0FBQ0UsT0FBSixDQUFZcEksT0FBWjtBQUNEO0FBQ0YsR0FSRDs7QUFTQSxNQUFJd0ksa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixDQUFVQyxPQUFWLEVBQW1CcEMsSUFBbkIsRUFBeUJxQyxLQUF6QixFQUFnQ1IsR0FBaEMsRUFBcUM7QUFDNUQsUUFBSTVNLElBQUksR0FBRzRNLEdBQUcsQ0FBQ0MsT0FBSixFQUFYO0FBQ0EsUUFBSW5QLEdBQUcsR0FBR3NDLElBQUksQ0FBQ2pCLEdBQUwsQ0FBU3pKLEtBQW5CO0FBQ0EsUUFBSTBXLElBQUksR0FBR2hNLElBQUksQ0FBQ2pCLEdBQUwsQ0FBU2lOLElBQVQsSUFBaUIsRUFBNUI7O0FBQ0EsUUFBSSxDQUFDQSxJQUFJLENBQUM3TixLQUFOLElBQWUsQ0FBQzZOLElBQUksQ0FBQzNOLE1BQXJCLElBQStCME0sSUFBSSxDQUFDM08sYUFBeEMsRUFBdUQ7QUFDckQsVUFBSTRMLFVBQVUsQ0FBQ3RLLEdBQUQsQ0FBZCxFQUFxQjtBQUNuQnlQLFFBQUFBLE9BQU8sQ0FBQ0UsU0FBUixDQUFrQjNQLEdBQWxCLEVBQXVCbU4sSUFBdkIsQ0FBNEIsVUFBVXlDLElBQVYsRUFBZ0I7QUFDMUMsY0FBSUYsS0FBSyxDQUFDdEIsSUFBVixFQUFnQjtBQUNkYyxZQUFBQSxHQUFHLENBQUNFLE9BQUosQ0FBWTtBQUFFaFAsY0FBQUEsVUFBVSxFQUFFd1A7QUFBZCxhQUFaO0FBQ0Q7QUFDRixTQUpELFdBSVMsVUFBVUMsQ0FBVixFQUFhO0FBQ3BCLGlCQUFPblQsT0FBTyxDQUFDQyxLQUFSLENBQWNrVCxDQUFkLENBQVA7QUFDRCxTQU5EO0FBT0QsT0FSRCxNQVFPO0FBQ0xYLFFBQUFBLEdBQUcsQ0FBQ0UsT0FBSixDQUFZO0FBQ1ZoUCxVQUFBQSxVQUFVLEVBQUU7QUFDVkssWUFBQUEsS0FBSyxFQUFFLEVBREc7QUFFVkUsWUFBQUEsTUFBTSxFQUFFO0FBRkU7QUFERixTQUFaO0FBTUQ7QUFDRjtBQUNGLEdBdEJEOztBQXVCQSxNQUFJbVAsb0JBQW9CLEdBQUcsU0FBdkJBLG9CQUF1QixDQUFVekMsSUFBVixFQUFnQnFDLEtBQWhCLEVBQXVCUixHQUF2QixFQUE0QjtBQUNyRCxRQUFJNU0sSUFBSSxHQUFHNE0sR0FBRyxDQUFDQyxPQUFKLEVBQVg7QUFDQSxRQUFJdkwsS0FBSyxHQUFHNkgsU0FBUyxDQUFDRixTQUFWLENBQW9COEIsSUFBSSxDQUFDckwsU0FBekIsRUFBb0NNLElBQUksQ0FBQ2pCLEdBQUwsQ0FBU3pKLEtBQTdDLENBQVo7QUFDQThYLElBQUFBLEtBQUssQ0FBQ3hCLFNBQU4sR0FBa0J0SyxLQUFsQjtBQUNBc0wsSUFBQUEsR0FBRyxDQUFDRSxPQUFKLENBQVk7QUFDVmIsTUFBQUEsTUFBTSxFQUFFM0ssS0FBSyxDQUFDM0osR0FBTixDQUFVLFVBQVVxVixLQUFWLEVBQWlCO0FBQ2pDLGVBQU9BLEtBQUssQ0FBQzFYLEtBQWI7QUFDRCxPQUZPLEVBRUw0QixLQUZLLENBRUMsRUFGRDtBQURFLEtBQVo7QUFLRCxHQVREOztBQVVBLE1BQUl1VyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFVTixPQUFWLEVBQW1CcEMsSUFBbkIsRUFBeUJxQyxLQUF6QixFQUFnQ1IsR0FBaEMsRUFBcUM7QUFDbkRELElBQUFBLGFBQWEsQ0FBQzVCLElBQUQsRUFBTzZCLEdBQVAsQ0FBYjtBQUNBSyxJQUFBQSxnQkFBZ0IsQ0FBQ2xDLElBQUQsRUFBTzZCLEdBQVAsQ0FBaEI7QUFDQU0sSUFBQUEsa0JBQWtCLENBQUNDLE9BQUQsRUFBVXBDLElBQVYsRUFBZ0JxQyxLQUFoQixFQUF1QlIsR0FBdkIsQ0FBbEI7QUFDQVksSUFBQUEsb0JBQW9CLENBQUN6QyxJQUFELEVBQU9xQyxLQUFQLEVBQWNSLEdBQWQsQ0FBcEI7QUFDRCxHQUxEOztBQU1BLE1BQUljLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVVQLE9BQVYsRUFBbUJwQyxJQUFuQixFQUF5QnFDLEtBQXpCLEVBQWdDUixHQUFoQyxFQUFxQztBQUN0RCxRQUFJNU0sSUFBSSxHQUFHNE0sR0FBRyxDQUFDQyxPQUFKLEVBQVg7QUFDQSxRQUFJdkwsS0FBSyxHQUFHNkgsU0FBUyxDQUFDRixTQUFWLENBQW9COEIsSUFBSSxDQUFDckwsU0FBekIsRUFBb0NNLElBQUksQ0FBQ2lNLE1BQXpDLENBQVo7QUFDQTNLLElBQUFBLEtBQUssQ0FBQzFKLElBQU4sQ0FBVyxVQUFVZ0csR0FBVixFQUFlO0FBQ3hCLFVBQUlpSCxTQUFTLEdBQUc3RSxJQUFJLENBQUM0RCxHQUFMLEtBQWEsRUFBYixJQUFtQndKLEtBQUssQ0FBQ3hCLFNBQU4sQ0FBZ0JqVSxHQUFoQixDQUFvQixVQUFVMkosS0FBVixFQUFpQjtBQUN0RSxlQUFPQSxLQUFLLENBQUM3RixJQUFOLEtBQWV1RSxJQUFJLENBQUM0RCxHQUEzQjtBQUNELE9BRmtDLEVBRWhDMU0sS0FGZ0MsQ0FFMUIsS0FGMEIsQ0FBbkM7O0FBR0EsVUFBSTJOLFNBQUosRUFBZTtBQUNiLFlBQUlqSCxHQUFHLENBQUN0SSxLQUFKLEtBQWMsRUFBbEIsRUFBc0I7QUFDcEJzWCxVQUFBQSxHQUFHLENBQUNFLE9BQUosQ0FBWTtBQUNWL04sWUFBQUEsR0FBRyxFQUFFbkIsR0FESztBQUVWZ0csWUFBQUEsR0FBRyxFQUFFd0osS0FBSyxDQUFDdkI7QUFGRCxXQUFaO0FBSUQsU0FMRCxNQUtPO0FBQ0xlLFVBQUFBLEdBQUcsQ0FBQ0UsT0FBSixDQUFZO0FBQ1YvTixZQUFBQSxHQUFHLEVBQUVuQixHQURLO0FBRVZnRyxZQUFBQSxHQUFHLEVBQUVoRyxHQUFHLENBQUNuQztBQUZDLFdBQVo7QUFJRDtBQUNGLE9BWkQsTUFZTztBQUNMbVIsUUFBQUEsR0FBRyxDQUFDRSxPQUFKLENBQVk7QUFBRS9OLFVBQUFBLEdBQUcsRUFBRW5CO0FBQVAsU0FBWjtBQUNEO0FBQ0YsS0FuQkQ7QUFvQkF3UCxJQUFBQSxLQUFLLENBQUN4QixTQUFOLEdBQWtCdEssS0FBbEI7QUFDQW1NLElBQUFBLFNBQVMsQ0FBQ04sT0FBRCxFQUFVcEMsSUFBVixFQUFnQnFDLEtBQWhCLEVBQXVCUixHQUF2QixDQUFUO0FBQ0QsR0F6QkQ7O0FBMEJBLE1BQUllLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQVV0TyxHQUFWLEVBQWU7QUFDOUIsUUFBSXVPLGlCQUFpQixHQUFHdk8sR0FBRyxDQUFDLFlBQUQsQ0FBSCxJQUFxQkEsR0FBRyxDQUFDLGVBQUQsQ0FBeEIsSUFBNkNBLEdBQUcsQ0FBQyxZQUFELENBQUgsS0FBc0JBLEdBQUcsQ0FBQyxlQUFELENBQTlGO0FBQ0EsV0FBT3VPLGlCQUFpQixHQUFHNU8saUJBQWlCLENBQUM3SixNQUFNLENBQUNrSyxHQUFHLENBQUMsWUFBRCxDQUFKLENBQVAsQ0FBcEIsR0FBa0QsRUFBMUU7QUFDRCxHQUhEOztBQUlBLE1BQUl3TyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFVeE8sR0FBVixFQUFlO0FBQzlCLFFBQUl5TyxpQkFBaUIsR0FBR3pPLEdBQUcsQ0FBQyxjQUFELENBQUgsSUFBdUJBLEdBQUcsQ0FBQyxhQUFELENBQTFCLElBQTZDQSxHQUFHLENBQUMsY0FBRCxDQUFILEtBQXdCQSxHQUFHLENBQUMsYUFBRCxDQUFoRztBQUNBLFdBQU95TyxpQkFBaUIsR0FBRzlPLGlCQUFpQixDQUFDN0osTUFBTSxDQUFDa0ssR0FBRyxDQUFDLGNBQUQsQ0FBSixDQUFQLENBQXBCLEdBQW9ELEVBQTVFO0FBQ0QsR0FIRDs7QUFJQSxNQUFJME8sZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFVMU8sR0FBVixFQUFlO0FBQ25DLFdBQU9BLEdBQUcsQ0FBQyxjQUFELENBQUgsR0FBc0JMLGlCQUFpQixDQUFDN0osTUFBTSxDQUFDa0ssR0FBRyxDQUFDLGNBQUQsQ0FBSixDQUFQLENBQXZDLEdBQXVFLEVBQTlFO0FBQ0QsR0FGRDs7QUFHQSxNQUFJMk8sZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFVM08sR0FBVixFQUFlO0FBQ25DLFdBQU9BLEdBQUcsQ0FBQyxjQUFELENBQUgsR0FBc0JsSyxNQUFNLENBQUNrSyxHQUFHLENBQUMsY0FBRCxDQUFKLENBQTVCLEdBQW9ELEVBQTNEO0FBQ0QsR0FGRDs7QUFHQSxNQUFJNE8sU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBVUMsVUFBVixFQUFzQkMsY0FBdEIsRUFBc0M5TyxHQUF0QyxFQUEyQztBQUN6RCxXQUFPOE8sY0FBYyxDQUFDRCxVQUFVLENBQUNDLGNBQWMsQ0FBQzlPLEdBQUQsQ0FBZixDQUFYLENBQXJCO0FBQ0QsR0FGRDs7QUFHQSxNQUFJK08sWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBVUYsVUFBVixFQUFzQkMsY0FBdEIsRUFBc0NuTyxJQUF0QyxFQUE0QztBQUM3RCxRQUFJWCxHQUFHLEdBQUdELFlBQVksQ0FBQzhPLFVBQVUsQ0FBQ2xPLElBQUksQ0FBQ3hCLEtBQU4sQ0FBWCxDQUF0QjtBQUNBLFFBQUk2UCxRQUFRLEdBQUc3RyxTQUFTLENBQUMsRUFBRCxFQUFLeEgsSUFBTCxDQUF4QjtBQUNBcU8sSUFBQUEsUUFBUSxDQUFDckssTUFBVCxHQUFrQjJKLFVBQVUsQ0FBQ3RPLEdBQUQsQ0FBNUI7QUFDQWdQLElBQUFBLFFBQVEsQ0FBQ3RLLE1BQVQsR0FBa0I4SixVQUFVLENBQUN4TyxHQUFELENBQTVCO0FBQ0FnUCxJQUFBQSxRQUFRLENBQUNwSyxNQUFULEdBQWtCOEosZUFBZSxDQUFDMU8sR0FBRCxDQUFqQztBQUNBZ1AsSUFBQUEsUUFBUSxDQUFDbEMsV0FBVCxHQUF1QjZCLGVBQWUsQ0FBQzNPLEdBQUQsQ0FBdEM7QUFDQWdQLElBQUFBLFFBQVEsQ0FBQzdQLEtBQVQsR0FBaUJ5UCxTQUFTLENBQUNDLFVBQUQsRUFBYUMsY0FBYixFQUE2QjlPLEdBQTdCLENBQTFCO0FBQ0EsV0FBT2dQLFFBQVA7QUFDRCxHQVREOztBQVVBLE1BQUlDLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQVVuQixPQUFWLEVBQW1CUCxHQUFuQixFQUF3QjtBQUN4QyxRQUFJNU0sSUFBSSxHQUFHNE0sR0FBRyxDQUFDQyxPQUFKLEVBQVg7QUFDQSxRQUFJbkksT0FBTyxHQUFHMEosWUFBWSxDQUFDakIsT0FBTyxDQUFDZSxVQUFULEVBQXFCZixPQUFPLENBQUNnQixjQUE3QixFQUE2Q25PLElBQTdDLENBQTFCO0FBQ0E0TSxJQUFBQSxHQUFHLENBQUNFLE9BQUosQ0FBWXBJLE9BQVo7QUFDRCxHQUpEOztBQUtBLE1BQUk2SixZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFVcEIsT0FBVixFQUFtQnBDLElBQW5CLEVBQXlCNkIsR0FBekIsRUFBOEI7QUFDL0MsUUFBSTVNLElBQUksR0FBR3dILFNBQVMsQ0FBQ3VFLGFBQWEsQ0FBQ2hCLElBQUksQ0FBQ3pKLEtBQU4sQ0FBZCxFQUE0QnNMLEdBQUcsQ0FBQ0MsT0FBSixFQUE1QixDQUFwQjtBQUNBLFFBQUlyTyxLQUFLLEdBQUcyRixhQUFhLENBQUNnSixPQUFPLENBQUN4SyxZQUFULEVBQXVCMEosV0FBVyxDQUFDck0sSUFBRCxFQUFPLEtBQVAsQ0FBbEMsQ0FBekI7QUFDQTRNLElBQUFBLEdBQUcsQ0FBQ0UsT0FBSixDQUFZO0FBQUV0TyxNQUFBQSxLQUFLLEVBQUVBO0FBQVQsS0FBWjtBQUNELEdBSkQ7O0FBS0EsTUFBSWdRLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBVXJCLE9BQVYsRUFBbUJwQyxJQUFuQixFQUF5QnFDLEtBQXpCLEVBQWdDUixHQUFoQyxFQUFxQztBQUN6RCxRQUFJNU0sSUFBSSxHQUFHNE0sR0FBRyxDQUFDQyxPQUFKLEVBQVg7QUFDQUQsSUFBQUEsR0FBRyxDQUFDNkIsS0FBSixDQUFVLGlCQUFWO0FBQ0E3VSxJQUFBQSxJQUFJLENBQUNvRyxJQUFJLENBQUNvTSxTQUFOLENBQUosQ0FBcUJ0VixJQUFyQixDQUEwQixZQUFZO0FBQ3BDOFYsTUFBQUEsR0FBRyxDQUFDOEIsT0FBSjtBQUNELEtBRkQsRUFFRyxVQUFVQyxJQUFWLEVBQWdCO0FBQ2pCLFVBQUlDLE9BQU8sR0FBR0MsR0FBRyxDQUFDQyxlQUFKLENBQW9CSCxJQUFwQixDQUFkOztBQUNBLFVBQUlJLFFBQVEsR0FBRyxTQUFYQSxRQUFXLEdBQVk7QUFDekJuQyxRQUFBQSxHQUFHLENBQUM4QixPQUFKO0FBQ0FHLFFBQUFBLEdBQUcsQ0FBQ0csZUFBSixDQUFvQkosT0FBcEI7QUFDRCxPQUhEOztBQUlBLFVBQUlLLHFCQUFxQixHQUFHLFNBQXhCQSxxQkFBd0IsQ0FBVXZSLEdBQVYsRUFBZTtBQUN6Q2tQLFFBQUFBLEdBQUcsQ0FBQ0UsT0FBSixDQUFZO0FBQ1YvTixVQUFBQSxHQUFHLEVBQUU7QUFDSHpKLFlBQUFBLEtBQUssRUFBRW9JLEdBREo7QUFFSHNPLFlBQUFBLElBQUksRUFBRTtBQUZIO0FBREssU0FBWjtBQU1BWSxRQUFBQSxHQUFHLENBQUNzQyxPQUFKLENBQVksU0FBWjtBQUNBekIsUUFBQUEsU0FBUyxDQUFDTixPQUFELEVBQVVwQyxJQUFWLEVBQWdCcUMsS0FBaEIsRUFBdUJSLEdBQXZCLENBQVQ7QUFDRCxPQVREOztBQVVBck0sTUFBQUEsYUFBYSxDQUFDb08sSUFBRCxDQUFiLENBQW9COUQsSUFBcEIsQ0FBeUIsVUFBVXNFLE9BQVYsRUFBbUI7QUFDMUMsWUFBSUMsUUFBUSxHQUFHakMsT0FBTyxDQUFDa0MsZUFBUixDQUF3QlYsSUFBeEIsRUFBOEJDLE9BQTlCLEVBQXVDTyxPQUF2QyxDQUFmOztBQUNBLFlBQUlwRSxJQUFJLENBQUNMLGdCQUFULEVBQTJCO0FBQ3pCeUMsVUFBQUEsT0FBTyxDQUFDbUMsV0FBUixDQUFvQkYsUUFBcEIsRUFBOEJ2RSxJQUE5QixDQUFtQyxVQUFVbEssTUFBVixFQUFrQjtBQUNuRHNPLFlBQUFBLHFCQUFxQixDQUFDdE8sTUFBTSxDQUFDakQsR0FBUixDQUFyQjtBQUNBcVIsWUFBQUEsUUFBUTtBQUNULFdBSEQsV0FHUyxVQUFVUSxHQUFWLEVBQWU7QUFDdEJSLFlBQUFBLFFBQVE7QUFDUjVCLFlBQUFBLE9BQU8sQ0FBQ3FDLFFBQVIsQ0FBaUJELEdBQWpCO0FBQ0QsV0FORDtBQU9ELFNBUkQsTUFRTztBQUNMcEMsVUFBQUEsT0FBTyxDQUFDc0MsY0FBUixDQUF1QkwsUUFBdkI7QUFDQUgsVUFBQUEscUJBQXFCLENBQUNHLFFBQVEsQ0FBQ1IsT0FBVCxFQUFELENBQXJCO0FBQ0FoQyxVQUFBQSxHQUFHLENBQUM4QixPQUFKO0FBQ0Q7QUFDRixPQWZEO0FBZ0JELEtBbENEO0FBbUNELEdBdENEOztBQXVDQSxNQUFJZ0IsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFVdkMsT0FBVixFQUFtQnBDLElBQW5CLEVBQXlCcUMsS0FBekIsRUFBZ0M7QUFDbEQsV0FBTyxVQUFVUixHQUFWLEVBQWUrQyxHQUFmLEVBQW9CO0FBQ3pCLFVBQUlBLEdBQUcsQ0FBQ3phLElBQUosS0FBYSxLQUFqQixFQUF3QjtBQUN0QnVZLFFBQUFBLFNBQVMsQ0FBQ04sT0FBRCxFQUFVcEMsSUFBVixFQUFnQnFDLEtBQWhCLEVBQXVCUixHQUF2QixDQUFUO0FBQ0QsT0FGRCxNQUVPLElBQUkrQyxHQUFHLENBQUN6YSxJQUFKLEtBQWEsUUFBakIsRUFBMkI7QUFDaEN3WSxRQUFBQSxZQUFZLENBQUNQLE9BQUQsRUFBVXBDLElBQVYsRUFBZ0JxQyxLQUFoQixFQUF1QlIsR0FBdkIsQ0FBWjtBQUNELE9BRk0sTUFFQSxJQUFJK0MsR0FBRyxDQUFDemEsSUFBSixLQUFhLEtBQWpCLEVBQXdCO0FBQzdCa1ksUUFBQUEsS0FBSyxDQUFDdkIsT0FBTixHQUFnQmUsR0FBRyxDQUFDQyxPQUFKLEdBQWNqSixHQUE5QjtBQUNELE9BRk0sTUFFQSxJQUFJK0wsR0FBRyxDQUFDemEsSUFBSixLQUFhLE9BQWpCLEVBQTBCO0FBQy9Cb1osUUFBQUEsV0FBVyxDQUFDbkIsT0FBRCxFQUFVUCxHQUFWLENBQVg7QUFDRCxPQUZNLE1BRUEsSUFBSStDLEdBQUcsQ0FBQ3phLElBQUosS0FBYSxRQUFiLElBQXlCeWEsR0FBRyxDQUFDemEsSUFBSixLQUFhLFFBQXRDLElBQWtEeWEsR0FBRyxDQUFDemEsSUFBSixLQUFhLFFBQS9ELElBQTJFeWEsR0FBRyxDQUFDemEsSUFBSixLQUFhLGFBQTVGLEVBQTJHO0FBQ2hIcVosUUFBQUEsWUFBWSxDQUFDcEIsT0FBRCxFQUFVcEMsSUFBVixFQUFnQjZCLEdBQWhCLENBQVo7QUFDRCxPQUZNLE1BRUEsSUFBSStDLEdBQUcsQ0FBQ3phLElBQUosS0FBYSxXQUFqQixFQUE4QjtBQUNuQ3NaLFFBQUFBLGVBQWUsQ0FBQ3JCLE9BQUQsRUFBVXBDLElBQVYsRUFBZ0JxQyxLQUFoQixFQUF1QlIsR0FBdkIsQ0FBZjtBQUNELE9BRk0sTUFFQSxJQUFJK0MsR0FBRyxDQUFDemEsSUFBSixLQUFhLGNBQWpCLEVBQWlDO0FBQ3RDLFlBQUkwWCxHQUFHLENBQUNDLE9BQUosR0FBYzNJLFlBQWxCLEVBQWdDO0FBQzlCMEksVUFBQUEsR0FBRyxDQUFDZ0QsT0FBSixDQUFZLEtBQVo7QUFDRCxTQUZELE1BRU87QUFDTGhELFVBQUFBLEdBQUcsQ0FBQ2lELE1BQUosQ0FBVyxLQUFYO0FBQ0Q7QUFDRjtBQUNGLEtBcEJEO0FBcUJELEdBdEJEOztBQXVCQSxNQUFJQyxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFVMUMsS0FBVixFQUFpQjtBQUNsQyxXQUFPLFlBQVk7QUFDakJBLE1BQUFBLEtBQUssQ0FBQ3RCLElBQU4sR0FBYSxLQUFiO0FBQ0QsS0FGRDtBQUdELEdBSkQ7O0FBS0EsTUFBSWlFLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBVWhGLElBQVYsRUFBZ0I7QUFDbkMsUUFBSUEsSUFBSSxDQUFDeE8sU0FBTCxJQUFrQndPLElBQUksQ0FBQ2hPLFlBQXZCLElBQXVDZ08sSUFBSSxDQUFDL04sZ0JBQWhELEVBQWtFO0FBQ2hFLFVBQUlnVCxRQUFRLEdBQUc7QUFDYjNhLFFBQUFBLElBQUksRUFBRSxVQURPO0FBRWI0YSxRQUFBQSxJQUFJLEVBQUV4VyxPQUFPLENBQUMsQ0FDWixDQUFDZ1MsT0FBTyxDQUFDL0IsT0FBUixDQUFnQnFCLElBQWhCLENBQUQsQ0FEWSxFQUVaQSxJQUFJLENBQUN4TyxTQUFMLEdBQWlCLENBQUNrTixNQUFNLENBQUNDLE9BQVAsQ0FBZXFCLElBQWYsQ0FBRCxDQUFqQixHQUEwQyxFQUY5QixFQUdaQSxJQUFJLENBQUN2TyxZQUFMLEtBQXNCdU8sSUFBSSxDQUFDaE8sWUFBTCxJQUFxQmdPLElBQUksQ0FBQy9OLGdCQUFoRCxJQUFvRSxDQUFDME8sU0FBUyxDQUFDaEMsT0FBVixDQUFrQnFCLElBQWxCLENBQUQsQ0FBcEUsR0FBZ0csRUFIcEYsQ0FBRDtBQUZBLE9BQWY7QUFRQSxhQUFPaUYsUUFBUDtBQUNELEtBVkQsTUFVTztBQUNMLFVBQUlFLEtBQUssR0FBRztBQUNWN2EsUUFBQUEsSUFBSSxFQUFFLE9BREk7QUFFVnNULFFBQUFBLEtBQUssRUFBRThDLE9BQU8sQ0FBQ1gsU0FBUixDQUFrQkMsSUFBbEI7QUFGRyxPQUFaO0FBSUEsYUFBT21GLEtBQVA7QUFDRDtBQUNGLEdBbEJEOztBQW1CQSxNQUFJQyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFVaEQsT0FBVixFQUFtQjtBQUNsQyxXQUFPLFVBQVVwQyxJQUFWLEVBQWdCO0FBQ3JCLFVBQUlxQyxLQUFLLEdBQUd6QixXQUFXLENBQUNaLElBQUQsQ0FBdkI7QUFDQSxhQUFPO0FBQ0xsSCxRQUFBQSxLQUFLLEVBQUUsbUJBREY7QUFFTHlKLFFBQUFBLElBQUksRUFBRSxRQUZEO0FBR0x6TyxRQUFBQSxJQUFJLEVBQUVrUixjQUFjLENBQUNoRixJQUFELENBSGY7QUFJTHFGLFFBQUFBLE9BQU8sRUFBRSxDQUNQO0FBQ0UvYSxVQUFBQSxJQUFJLEVBQUUsUUFEUjtBQUVFSCxVQUFBQSxJQUFJLEVBQUUsUUFGUjtBQUdFdUcsVUFBQUEsSUFBSSxFQUFFO0FBSFIsU0FETyxFQU1QO0FBQ0VwRyxVQUFBQSxJQUFJLEVBQUUsUUFEUjtBQUVFSCxVQUFBQSxJQUFJLEVBQUUsTUFGUjtBQUdFdUcsVUFBQUEsSUFBSSxFQUFFLE1BSFI7QUFJRTRVLFVBQUFBLE9BQU8sRUFBRTtBQUpYLFNBTk8sQ0FKSjtBQWlCTEMsUUFBQUEsV0FBVyxFQUFFdkUsYUFBYSxDQUFDaEIsSUFBSSxDQUFDekosS0FBTixDQWpCckI7QUFrQkxpUCxRQUFBQSxRQUFRLEVBQUVwRCxPQUFPLENBQUNvRCxRQUFSLENBQWlCeEYsSUFBakIsQ0FsQkw7QUFtQkx5RixRQUFBQSxRQUFRLEVBQUVkLGFBQWEsQ0FBQ3ZDLE9BQUQsRUFBVXBDLElBQVYsRUFBZ0JxQyxLQUFoQixDQW5CbEI7QUFvQkxxRCxRQUFBQSxPQUFPLEVBQUVYLFlBQVksQ0FBQzFDLEtBQUQ7QUFwQmhCLE9BQVA7QUFzQkQsS0F4QkQ7QUF5QkQsR0ExQkQ7O0FBMkJBLE1BQUlzRCxhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLENBQVVyVSxNQUFWLEVBQWtCO0FBQ3BDLFdBQU8sVUFBVTBPLElBQVYsRUFBZ0I7QUFDckIsYUFBTyxVQUFVNkIsR0FBVixFQUFlO0FBQ3BCLFlBQUk1TSxJQUFJLEdBQUd3SCxTQUFTLENBQUN1RSxhQUFhLENBQUNoQixJQUFJLENBQUN6SixLQUFOLENBQWQsRUFBNEJzTCxHQUFHLENBQUNDLE9BQUosRUFBNUIsQ0FBcEI7QUFDQXhRLFFBQUFBLE1BQU0sQ0FBQ3NVLFdBQVAsQ0FBbUIsZ0JBQW5CLEVBQXFDLEtBQXJDLEVBQTRDdEUsV0FBVyxDQUFDck0sSUFBRCxFQUFPK0ssSUFBSSxDQUFDTix1QkFBWixDQUF2RDtBQUNBcE8sUUFBQUEsTUFBTSxDQUFDdVUsWUFBUCxDQUFvQkMsZ0JBQXBCO0FBQ0FqRSxRQUFBQSxHQUFHLENBQUNrRSxLQUFKO0FBQ0QsT0FMRDtBQU1ELEtBUEQ7QUFRRCxHQVREOztBQVVBLE1BQUl6RCxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFVaFIsTUFBVixFQUFrQjtBQUNoQyxXQUFPLFVBQVVxQixHQUFWLEVBQWU7QUFDcEIsVUFBSSxDQUFDdUQsY0FBYyxDQUFDNUUsTUFBRCxFQUFTcUIsR0FBVCxDQUFuQixFQUFrQztBQUNoQyxlQUFPekIsUUFBUSxDQUFDbkksT0FBVCxDQUFpQjtBQUN0QnFLLFVBQUFBLEtBQUssRUFBRSxFQURlO0FBRXRCRSxVQUFBQSxNQUFNLEVBQUU7QUFGYyxTQUFqQixDQUFQO0FBSUQsT0FMRCxNQUtPO0FBQ0wsZUFBT1osWUFBWSxDQUFDcEIsTUFBTSxDQUFDMFUsZUFBUCxDQUF1QkMsVUFBdkIsQ0FBa0N0VCxHQUFsQyxDQUFELENBQVosQ0FBcURtTixJQUFyRCxDQUEwRCxVQUFVL00sVUFBVixFQUFzQjtBQUNyRixpQkFBTztBQUNMSyxZQUFBQSxLQUFLLEVBQUVoSixNQUFNLENBQUMySSxVQUFVLENBQUNLLEtBQVosQ0FEUjtBQUVMRSxZQUFBQSxNQUFNLEVBQUVsSixNQUFNLENBQUMySSxVQUFVLENBQUNPLE1BQVo7QUFGVCxXQUFQO0FBSUQsU0FMTSxDQUFQO0FBTUQ7QUFDRixLQWREO0FBZUQsR0FoQkQ7O0FBaUJBLE1BQUlnUixlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQVVoVCxNQUFWLEVBQWtCO0FBQ3RDLFdBQU8sVUFBVXNTLElBQVYsRUFBZ0JDLE9BQWhCLEVBQXlCTyxPQUF6QixFQUFrQztBQUN2QyxhQUFPOVMsTUFBTSxDQUFDdVUsWUFBUCxDQUFvQkssU0FBcEIsQ0FBOEI1TyxNQUE5QixDQUFxQztBQUMxQzdCLFFBQUFBLElBQUksRUFBRW1PLElBRG9DO0FBRTFDQyxRQUFBQSxPQUFPLEVBQUVBLE9BRmlDO0FBRzFDMVosUUFBQUEsSUFBSSxFQUFFeVosSUFBSSxDQUFDelosSUFBTCxHQUFZeVosSUFBSSxDQUFDelosSUFBTCxDQUFVK0osT0FBVixDQUFrQixXQUFsQixFQUErQixFQUEvQixDQUFaLEdBQWlELElBSGI7QUFJMUNpUyxRQUFBQSxRQUFRLEVBQUV2QyxJQUFJLENBQUN6WixJQUoyQjtBQUsxQ2ljLFFBQUFBLE1BQU0sRUFBRWhDLE9BQU8sQ0FBQzNQLEtBQVIsQ0FBYyxHQUFkLEVBQW1CLENBQW5CO0FBTGtDLE9BQXJDLENBQVA7QUFPRCxLQVJEO0FBU0QsR0FWRDs7QUFXQSxNQUFJaVEsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFVcFQsTUFBVixFQUFrQjtBQUNyQyxXQUFPLFVBQVUrUyxRQUFWLEVBQW9CO0FBQ3pCL1MsTUFBQUEsTUFBTSxDQUFDdVUsWUFBUCxDQUFvQkssU0FBcEIsQ0FBOEJHLEdBQTlCLENBQWtDaEMsUUFBbEM7QUFDRCxLQUZEO0FBR0QsR0FKRDs7QUFLQSxNQUFJSSxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFVblQsTUFBVixFQUFrQjtBQUMvQixXQUFPLFVBQVV1RSxPQUFWLEVBQW1CO0FBQ3hCdkUsTUFBQUEsTUFBTSxDQUFDZ1YsYUFBUCxDQUFxQkMsS0FBckIsQ0FBMkIxUSxPQUEzQjtBQUNELEtBRkQ7QUFHRCxHQUpEOztBQUtBLE1BQUkrQixZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFVdEcsTUFBVixFQUFrQjtBQUNuQyxXQUFPLFVBQVU2SSxPQUFWLEVBQW1CO0FBQ3hCLGFBQU9ELGNBQWMsQ0FBQzVJLE1BQUQsRUFBUzZJLE9BQVQsQ0FBckI7QUFDRCxLQUZEO0FBR0QsR0FKRDs7QUFLQSxNQUFJZ0osVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBVTdSLE1BQVYsRUFBa0I7QUFDakMsV0FBTyxVQUFVNkksT0FBVixFQUFtQjtBQUN4QixhQUFPN0ksTUFBTSxDQUFDbkMsR0FBUCxDQUFXZ1UsVUFBWCxDQUFzQmhKLE9BQXRCLENBQVA7QUFDRCxLQUZEO0FBR0QsR0FKRDs7QUFLQSxNQUFJaUosY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFVOVIsTUFBVixFQUFrQjtBQUNyQyxXQUFPLFVBQVVrVixTQUFWLEVBQXFCcmMsSUFBckIsRUFBMkI7QUFDaEMsYUFBT21ILE1BQU0sQ0FBQ25DLEdBQVAsQ0FBV2lVLGNBQVgsQ0FBMEJvRCxTQUExQixFQUFxQ3JjLElBQXJDLENBQVA7QUFDRCxLQUZEO0FBR0QsR0FKRDs7QUFLQSxNQUFJb2EsV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBVWpULE1BQVYsRUFBa0I7QUFDbEMsV0FBTyxVQUFVK1MsUUFBVixFQUFvQjtBQUN6QixhQUFPbkgsUUFBUSxDQUFDNUwsTUFBRCxDQUFSLENBQWlCbVYsTUFBakIsQ0FBd0IsQ0FBQ3BDLFFBQUQsQ0FBeEIsRUFBb0MsS0FBcEMsRUFBMkN2RSxJQUEzQyxDQUFnRCxVQUFVNEcsT0FBVixFQUFtQjtBQUN4RSxZQUFJQSxPQUFPLENBQUNsZCxNQUFSLEtBQW1CLENBQXZCLEVBQTBCO0FBQ3hCLGlCQUFPMEgsUUFBUSxDQUFDc0MsTUFBVCxDQUFnQix3QkFBaEIsQ0FBUDtBQUNELFNBRkQsTUFFTyxJQUFJa1QsT0FBTyxDQUFDLENBQUQsQ0FBUCxDQUFXQyxNQUFYLEtBQXNCLEtBQTFCLEVBQWlDO0FBQ3RDLGlCQUFPelYsUUFBUSxDQUFDc0MsTUFBVCxDQUFnQmtULE9BQU8sQ0FBQyxDQUFELENBQVAsQ0FBV3BYLEtBQVgsQ0FBaUJ1RyxPQUFqQyxDQUFQO0FBQ0QsU0FGTSxNQUVBO0FBQ0wsaUJBQU82USxPQUFPLENBQUMsQ0FBRCxDQUFkO0FBQ0Q7QUFDRixPQVJNLENBQVA7QUFTRCxLQVZEO0FBV0QsR0FaRDs7QUFhQSxNQUFJRSxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFVdFYsTUFBVixFQUFrQjtBQUM3QixRQUFJOFEsT0FBTyxHQUFHO0FBQ1pvRCxNQUFBQSxRQUFRLEVBQUVHLGFBQWEsQ0FBQ3JVLE1BQUQsQ0FEWDtBQUVaZ1IsTUFBQUEsU0FBUyxFQUFFQSxTQUFTLENBQUNoUixNQUFELENBRlI7QUFHWm9ULE1BQUFBLGNBQWMsRUFBRUEsY0FBYyxDQUFDcFQsTUFBRCxDQUhsQjtBQUlaZ1QsTUFBQUEsZUFBZSxFQUFFQSxlQUFlLENBQUNoVCxNQUFELENBSnBCO0FBS1ptVCxNQUFBQSxRQUFRLEVBQUVBLFFBQVEsQ0FBQ25ULE1BQUQsQ0FMTjtBQU1ac0csTUFBQUEsWUFBWSxFQUFFQSxZQUFZLENBQUN0RyxNQUFELENBTmQ7QUFPWjZSLE1BQUFBLFVBQVUsRUFBRUEsVUFBVSxDQUFDN1IsTUFBRCxDQVBWO0FBUVo4UixNQUFBQSxjQUFjLEVBQUVBLGNBQWMsQ0FBQzlSLE1BQUQsQ0FSbEI7QUFTWmlULE1BQUFBLFdBQVcsRUFBRUEsV0FBVyxDQUFDalQsTUFBRDtBQVRaLEtBQWQ7O0FBV0EsUUFBSXlQLElBQUksR0FBRyxTQUFQQSxJQUFPLEdBQVk7QUFDckJuQyxNQUFBQSxPQUFPLENBQUN0TixNQUFELENBQVAsQ0FBZ0J3TyxJQUFoQixDQUFxQnNGLFVBQVUsQ0FBQ2hELE9BQUQsQ0FBL0IsRUFBMEN0QyxJQUExQyxDQUErQ3hPLE1BQU0sQ0FBQ2dWLGFBQVAsQ0FBcUJ2RixJQUFwRTtBQUNELEtBRkQ7O0FBR0EsV0FBTztBQUFFQSxNQUFBQSxJQUFJLEVBQUVBO0FBQVIsS0FBUDtBQUNELEdBaEJEOztBQWtCQSxNQUFJOEYsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBVXZWLE1BQVYsRUFBa0I7QUFDakNBLElBQUFBLE1BQU0sQ0FBQ3dWLFVBQVAsQ0FBa0IsVUFBbEIsRUFBOEJGLE1BQU0sQ0FBQ3RWLE1BQUQsQ0FBTixDQUFleVAsSUFBN0M7QUFDQXpQLElBQUFBLE1BQU0sQ0FBQ3dWLFVBQVAsQ0FBa0IsZ0JBQWxCLEVBQW9DLFVBQVVDLEdBQVYsRUFBZTlSLElBQWYsRUFBcUI7QUFDdkQzRCxNQUFBQSxNQUFNLENBQUMwVixXQUFQLENBQW1CQyxRQUFuQixDQUE0QixZQUFZO0FBQ3RDLGVBQU9oTCxtQkFBbUIsQ0FBQzNLLE1BQUQsRUFBUzJELElBQVQsQ0FBMUI7QUFDRCxPQUZEO0FBR0QsS0FKRDtBQUtELEdBUEQ7O0FBU0EsTUFBSWlTLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBVTFXLElBQVYsRUFBZ0I7QUFDbEMsUUFBSTJXLFNBQVMsR0FBRzNXLElBQUksQ0FBQzRXLElBQUwsQ0FBVSxPQUFWLENBQWhCO0FBQ0EsV0FBT0QsU0FBUyxJQUFJLFlBQVkvUyxJQUFaLENBQWlCK1MsU0FBakIsQ0FBcEI7QUFDRCxHQUhEOztBQUlBLE1BQUlFLDBCQUEwQixHQUFHLFNBQTdCQSwwQkFBNkIsQ0FBVWhGLEtBQVYsRUFBaUI7QUFDaEQsV0FBTyxVQUFVaUYsS0FBVixFQUFpQjtBQUN0QixVQUFJamUsQ0FBQyxHQUFHaWUsS0FBSyxDQUFDOWQsTUFBZDs7QUFDQSxVQUFJK2QscUJBQXFCLEdBQUcsU0FBeEJBLHFCQUF3QixDQUFVL1csSUFBVixFQUFnQjtBQUMxQ0EsUUFBQUEsSUFBSSxDQUFDNFcsSUFBTCxDQUFVLGlCQUFWLEVBQTZCL0UsS0FBSyxHQUFHLE1BQUgsR0FBWSxJQUE5QztBQUNELE9BRkQ7O0FBR0EsYUFBT2haLENBQUMsRUFBUixFQUFZO0FBQ1YsWUFBSW1ILElBQUksR0FBRzhXLEtBQUssQ0FBQ2plLENBQUQsQ0FBaEI7O0FBQ0EsWUFBSTZkLGFBQWEsQ0FBQzFXLElBQUQsQ0FBakIsRUFBeUI7QUFDdkJBLFVBQUFBLElBQUksQ0FBQzRXLElBQUwsQ0FBVSxpQkFBVixFQUE2Qi9FLEtBQUssR0FBRyxPQUFILEdBQWEsSUFBL0M7QUFDQWxGLFVBQUFBLE1BQU0sQ0FBQ3RRLElBQVAsQ0FBWTJELElBQUksQ0FBQ2dYLE1BQUwsQ0FBWSxZQUFaLENBQVosRUFBdUNELHFCQUF2QztBQUNEO0FBQ0Y7QUFDRixLQVpEO0FBYUQsR0FkRDs7QUFlQSxNQUFJRSxLQUFLLEdBQUcsU0FBUkEsS0FBUSxDQUFVblcsTUFBVixFQUFrQjtBQUM1QkEsSUFBQUEsTUFBTSxDQUFDb1csRUFBUCxDQUFVLFNBQVYsRUFBcUIsWUFBWTtBQUMvQnBXLE1BQUFBLE1BQU0sQ0FBQ3FXLE1BQVAsQ0FBY0MsYUFBZCxDQUE0QixRQUE1QixFQUFzQ1AsMEJBQTBCLENBQUMsSUFBRCxDQUFoRTtBQUNBL1YsTUFBQUEsTUFBTSxDQUFDdVcsVUFBUCxDQUFrQkQsYUFBbEIsQ0FBZ0MsUUFBaEMsRUFBMENQLDBCQUEwQixDQUFDLEtBQUQsQ0FBcEU7QUFDRCxLQUhEO0FBSUQsR0FMRDs7QUFPQSxNQUFJUyxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFVeFcsTUFBVixFQUFrQjtBQUMvQkEsSUFBQUEsTUFBTSxDQUFDeVcsRUFBUCxDQUFVQyxRQUFWLENBQW1CQyxlQUFuQixDQUFtQyxPQUFuQyxFQUE0QztBQUMxQ0MsTUFBQUEsSUFBSSxFQUFFLE9BRG9DO0FBRTFDQyxNQUFBQSxPQUFPLEVBQUUsbUJBRmlDO0FBRzFDQyxNQUFBQSxRQUFRLEVBQUV4QixNQUFNLENBQUN0VixNQUFELENBQU4sQ0FBZXlQLElBSGlCO0FBSTFDc0gsTUFBQUEsT0FBTyxFQUFFLGlCQUFVQyxTQUFWLEVBQXFCO0FBQzVCQSxRQUFBQSxTQUFTLENBQUNDLFNBQVYsQ0FBb0JyZCxhQUFhLENBQUNzUCxnQkFBZ0IsQ0FBQ2xKLE1BQUQsQ0FBakIsQ0FBakM7QUFDQSxlQUFPQSxNQUFNLENBQUM4RCxTQUFQLENBQWlCb1QseUJBQWpCLENBQTJDLGdFQUEzQyxFQUE2R0YsU0FBUyxDQUFDQyxTQUF2SCxFQUFrSUUsTUFBekk7QUFDRDtBQVB5QyxLQUE1QztBQVNBblgsSUFBQUEsTUFBTSxDQUFDeVcsRUFBUCxDQUFVQyxRQUFWLENBQW1CVSxXQUFuQixDQUErQixPQUEvQixFQUF3QztBQUN0Q1IsTUFBQUEsSUFBSSxFQUFFLE9BRGdDO0FBRXRDeFgsTUFBQUEsSUFBSSxFQUFFLFVBRmdDO0FBR3RDMFgsTUFBQUEsUUFBUSxFQUFFeEIsTUFBTSxDQUFDdFYsTUFBRCxDQUFOLENBQWV5UDtBQUhhLEtBQXhDO0FBS0F6UCxJQUFBQSxNQUFNLENBQUN5VyxFQUFQLENBQVVDLFFBQVYsQ0FBbUJXLGNBQW5CLENBQWtDLE9BQWxDLEVBQTJDO0FBQ3pDQyxNQUFBQSxNQUFNLEVBQUUsZ0JBQVVwWixPQUFWLEVBQW1CO0FBQ3pCLGVBQU8rSSxRQUFRLENBQUMvSSxPQUFELENBQVIsSUFBcUJpSixPQUFPLENBQUNqSixPQUFELENBQVAsSUFBb0IsQ0FBQ3VHLGtCQUFrQixDQUFDdkcsT0FBRCxDQUE1RCxHQUF3RSxDQUFDLE9BQUQsQ0FBeEUsR0FBb0YsRUFBM0Y7QUFDRDtBQUh3QyxLQUEzQztBQUtELEdBcEJEOztBQXNCQSxXQUFTcVosTUFBVCxHQUFtQjtBQUNqQmxnQixJQUFBQSxRQUFRLENBQUMwZCxHQUFULENBQWEsT0FBYixFQUFzQixVQUFVL1UsTUFBVixFQUFrQjtBQUN0Q21XLE1BQUFBLEtBQUssQ0FBQ25XLE1BQUQsQ0FBTDtBQUNBd1csTUFBQUEsUUFBUSxDQUFDeFcsTUFBRCxDQUFSO0FBQ0F1VixNQUFBQSxVQUFVLENBQUN2VixNQUFELENBQVY7QUFDRCxLQUpEO0FBS0Q7O0FBRUR1WCxFQUFBQSxNQUFNO0FBRVQsQ0F6bkRBLEdBQUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSBUaW55IFRlY2hub2xvZ2llcywgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTEdQTCBvciBhIGNvbW1lcmNpYWwgbGljZW5zZS5cclxuICogRm9yIExHUEwgc2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqIEZvciBjb21tZXJjaWFsIGxpY2Vuc2VzIHNlZSBodHRwczovL3d3dy50aW55LmNsb3VkL1xyXG4gKlxyXG4gKiBWZXJzaW9uOiA1LjEwLjMgKDIwMjItMDItMDkpXHJcbiAqL1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBnbG9iYWwkNiA9IHRpbnltY2UudXRpbC5Ub29scy5yZXNvbHZlKCd0aW55bWNlLlBsdWdpbk1hbmFnZXInKTtcclxuXHJcbiAgICB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgZm9yICh2YXIgcCBpbiBzKVxyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciB0eXBlT2YgPSBmdW5jdGlvbiAoeCkge1xyXG4gICAgICB2YXIgdCA9IHR5cGVvZiB4O1xyXG4gICAgICBpZiAoeCA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiAnbnVsbCc7XHJcbiAgICAgIH0gZWxzZSBpZiAodCA9PT0gJ29iamVjdCcgJiYgKEFycmF5LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKHgpIHx8IHguY29uc3RydWN0b3IgJiYgeC5jb25zdHJ1Y3Rvci5uYW1lID09PSAnQXJyYXknKSkge1xyXG4gICAgICAgIHJldHVybiAnYXJyYXknO1xyXG4gICAgICB9IGVsc2UgaWYgKHQgPT09ICdvYmplY3QnICYmIChTdHJpbmcucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoeCkgfHwgeC5jb25zdHJ1Y3RvciAmJiB4LmNvbnN0cnVjdG9yLm5hbWUgPT09ICdTdHJpbmcnKSkge1xyXG4gICAgICAgIHJldHVybiAnc3RyaW5nJztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHZhciBpc1R5cGUgPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVPZih2YWx1ZSkgPT09IHR5cGU7XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdmFyIGlzU2ltcGxlVHlwZSA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSB0eXBlO1xyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciBlcSA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgIHJldHVybiB0ID09PSBhO1xyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciBpc1N0cmluZyA9IGlzVHlwZSgnc3RyaW5nJyk7XHJcbiAgICB2YXIgaXNPYmplY3QgPSBpc1R5cGUoJ29iamVjdCcpO1xyXG4gICAgdmFyIGlzQXJyYXkgPSBpc1R5cGUoJ2FycmF5Jyk7XHJcbiAgICB2YXIgaXNOdWxsID0gZXEobnVsbCk7XHJcbiAgICB2YXIgaXNCb29sZWFuID0gaXNTaW1wbGVUeXBlKCdib29sZWFuJyk7XHJcbiAgICB2YXIgaXNOdWxsYWJsZSA9IGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgIHJldHVybiBhID09PSBudWxsIHx8IGEgPT09IHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICB2YXIgaXNOb25OdWxsYWJsZSA9IGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgIHJldHVybiAhaXNOdWxsYWJsZShhKTtcclxuICAgIH07XHJcbiAgICB2YXIgaXNGdW5jdGlvbiA9IGlzU2ltcGxlVHlwZSgnZnVuY3Rpb24nKTtcclxuICAgIHZhciBpc051bWJlciA9IGlzU2ltcGxlVHlwZSgnbnVtYmVyJyk7XHJcblxyXG4gICAgdmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB9O1xyXG4gICAgdmFyIGNvbnN0YW50ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciBpZGVudGl0eSA9IGZ1bmN0aW9uICh4KSB7XHJcbiAgICAgIHJldHVybiB4O1xyXG4gICAgfTtcclxuICAgIHZhciBuZXZlciA9IGNvbnN0YW50KGZhbHNlKTtcclxuICAgIHZhciBhbHdheXMgPSBjb25zdGFudCh0cnVlKTtcclxuXHJcbiAgICB2YXIgbm9uZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIE5PTkU7XHJcbiAgICB9O1xyXG4gICAgdmFyIE5PTkUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBjYWxsID0gZnVuY3Rpb24gKHRodW5rKSB7XHJcbiAgICAgICAgcmV0dXJuIHRodW5rKCk7XHJcbiAgICAgIH07XHJcbiAgICAgIHZhciBpZCA9IGlkZW50aXR5O1xyXG4gICAgICB2YXIgbWUgPSB7XHJcbiAgICAgICAgZm9sZDogZnVuY3Rpb24gKG4sIF9zKSB7XHJcbiAgICAgICAgICByZXR1cm4gbigpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNTb21lOiBuZXZlcixcclxuICAgICAgICBpc05vbmU6IGFsd2F5cyxcclxuICAgICAgICBnZXRPcjogaWQsXHJcbiAgICAgICAgZ2V0T3JUaHVuazogY2FsbCxcclxuICAgICAgICBnZXRPckRpZTogZnVuY3Rpb24gKG1zZykge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnZXJyb3I6IGdldE9yRGllIGNhbGxlZCBvbiBub25lLicpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0T3JOdWxsOiBjb25zdGFudChudWxsKSxcclxuICAgICAgICBnZXRPclVuZGVmaW5lZDogY29uc3RhbnQodW5kZWZpbmVkKSxcclxuICAgICAgICBvcjogaWQsXHJcbiAgICAgICAgb3JUaHVuazogY2FsbCxcclxuICAgICAgICBtYXA6IG5vbmUsXHJcbiAgICAgICAgZWFjaDogbm9vcCxcclxuICAgICAgICBiaW5kOiBub25lLFxyXG4gICAgICAgIGV4aXN0czogbmV2ZXIsXHJcbiAgICAgICAgZm9yYWxsOiBhbHdheXMsXHJcbiAgICAgICAgZmlsdGVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICByZXR1cm4gbm9uZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdG9BcnJheTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdG9TdHJpbmc6IGNvbnN0YW50KCdub25lKCknKVxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gbWU7XHJcbiAgICB9KCk7XHJcbiAgICB2YXIgc29tZSA9IGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgIHZhciBjb25zdGFudF9hID0gY29uc3RhbnQoYSk7XHJcbiAgICAgIHZhciBzZWxmID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBtZTtcclxuICAgICAgfTtcclxuICAgICAgdmFyIGJpbmQgPSBmdW5jdGlvbiAoZikge1xyXG4gICAgICAgIHJldHVybiBmKGEpO1xyXG4gICAgICB9O1xyXG4gICAgICB2YXIgbWUgPSB7XHJcbiAgICAgICAgZm9sZDogZnVuY3Rpb24gKG4sIHMpIHtcclxuICAgICAgICAgIHJldHVybiBzKGEpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNTb21lOiBhbHdheXMsXHJcbiAgICAgICAgaXNOb25lOiBuZXZlcixcclxuICAgICAgICBnZXRPcjogY29uc3RhbnRfYSxcclxuICAgICAgICBnZXRPclRodW5rOiBjb25zdGFudF9hLFxyXG4gICAgICAgIGdldE9yRGllOiBjb25zdGFudF9hLFxyXG4gICAgICAgIGdldE9yTnVsbDogY29uc3RhbnRfYSxcclxuICAgICAgICBnZXRPclVuZGVmaW5lZDogY29uc3RhbnRfYSxcclxuICAgICAgICBvcjogc2VsZixcclxuICAgICAgICBvclRodW5rOiBzZWxmLFxyXG4gICAgICAgIG1hcDogZnVuY3Rpb24gKGYpIHtcclxuICAgICAgICAgIHJldHVybiBzb21lKGYoYSkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWFjaDogZnVuY3Rpb24gKGYpIHtcclxuICAgICAgICAgIGYoYSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBiaW5kOiBiaW5kLFxyXG4gICAgICAgIGV4aXN0czogYmluZCxcclxuICAgICAgICBmb3JhbGw6IGJpbmQsXHJcbiAgICAgICAgZmlsdGVyOiBmdW5jdGlvbiAoZikge1xyXG4gICAgICAgICAgcmV0dXJuIGYoYSkgPyBtZSA6IE5PTkU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0b0FycmF5OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICByZXR1cm4gW2FdO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHJldHVybiAnc29tZSgnICsgYSArICcpJztcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiBtZTtcclxuICAgIH07XHJcbiAgICB2YXIgZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IE5PTkUgOiBzb21lKHZhbHVlKTtcclxuICAgIH07XHJcbiAgICB2YXIgT3B0aW9uYWwgPSB7XHJcbiAgICAgIHNvbWU6IHNvbWUsXHJcbiAgICAgIG5vbmU6IG5vbmUsXHJcbiAgICAgIGZyb206IGZyb21cclxuICAgIH07XHJcblxyXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cztcclxuICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5oYXNPd25Qcm9wZXJ0eTtcclxuICAgIHZhciBlYWNoID0gZnVuY3Rpb24gKG9iaiwgZikge1xyXG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKG9iaik7XHJcbiAgICAgIGZvciAodmFyIGsgPSAwLCBsZW4gPSBwcm9wcy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xyXG4gICAgICAgIHZhciBpID0gcHJvcHNba107XHJcbiAgICAgICAgdmFyIHggPSBvYmpbaV07XHJcbiAgICAgICAgZih4LCBpKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHZhciBvYmpBY2MgPSBmdW5jdGlvbiAocikge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHgsIGkpIHtcclxuICAgICAgICByW2ldID0geDtcclxuICAgICAgfTtcclxuICAgIH07XHJcbiAgICB2YXIgaW50ZXJuYWxGaWx0ZXIgPSBmdW5jdGlvbiAob2JqLCBwcmVkLCBvblRydWUsIG9uRmFsc2UpIHtcclxuICAgICAgdmFyIHIgPSB7fTtcclxuICAgICAgZWFjaChvYmosIGZ1bmN0aW9uICh4LCBpKSB7XHJcbiAgICAgICAgKHByZWQoeCwgaSkgPyBvblRydWUgOiBvbkZhbHNlKSh4LCBpKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiByO1xyXG4gICAgfTtcclxuICAgIHZhciBmaWx0ZXIgPSBmdW5jdGlvbiAob2JqLCBwcmVkKSB7XHJcbiAgICAgIHZhciB0ID0ge307XHJcbiAgICAgIGludGVybmFsRmlsdGVyKG9iaiwgcHJlZCwgb2JqQWNjKHQpLCBub29wKTtcclxuICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgdmFyIGhhcyA9IGZ1bmN0aW9uIChvYmosIGtleSkge1xyXG4gICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGhhc05vbk51bGxhYmxlS2V5ID0gZnVuY3Rpb24gKG9iaiwga2V5KSB7XHJcbiAgICAgIHJldHVybiBoYXMob2JqLCBrZXkpICYmIG9ialtrZXldICE9PSB1bmRlZmluZWQgJiYgb2JqW2tleV0gIT09IG51bGw7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBuYXRpdmVQdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XHJcbiAgICB2YXIgZmxhdHRlbiA9IGZ1bmN0aW9uICh4cykge1xyXG4gICAgICB2YXIgciA9IFtdO1xyXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0geHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgICBpZiAoIWlzQXJyYXkoeHNbaV0pKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Fyci5mbGF0dGVuIGl0ZW0gJyArIGkgKyAnIHdhcyBub3QgYW4gYXJyYXksIGlucHV0OiAnICsgeHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBuYXRpdmVQdXNoLmFwcGx5KHIsIHhzW2ldKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcjtcclxuICAgIH07XHJcbiAgICB2YXIgZ2V0ID0gZnVuY3Rpb24gKHhzLCBpKSB7XHJcbiAgICAgIHJldHVybiBpID49IDAgJiYgaSA8IHhzLmxlbmd0aCA/IE9wdGlvbmFsLnNvbWUoeHNbaV0pIDogT3B0aW9uYWwubm9uZSgpO1xyXG4gICAgfTtcclxuICAgIHZhciBoZWFkID0gZnVuY3Rpb24gKHhzKSB7XHJcbiAgICAgIHJldHVybiBnZXQoeHMsIDApO1xyXG4gICAgfTtcclxuICAgIHZhciBmaW5kTWFwID0gZnVuY3Rpb24gKGFyciwgZikge1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciByID0gZihhcnJbaV0sIGkpO1xyXG4gICAgICAgIGlmIChyLmlzU29tZSgpKSB7XHJcbiAgICAgICAgICByZXR1cm4gcjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIE9wdGlvbmFsLm5vbmUoKTtcclxuICAgIH07XHJcblxyXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBGdW5jdGlvbigncmV0dXJuIHRoaXM7JykoKTtcclxuXHJcbiAgICB2YXIgcmF3U2V0ID0gZnVuY3Rpb24gKGRvbSwga2V5LCB2YWx1ZSkge1xyXG4gICAgICBpZiAoaXNTdHJpbmcodmFsdWUpIHx8IGlzQm9vbGVhbih2YWx1ZSkgfHwgaXNOdW1iZXIodmFsdWUpKSB7XHJcbiAgICAgICAgZG9tLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlICsgJycpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ludmFsaWQgY2FsbCB0byBBdHRyaWJ1dGUuc2V0LiBLZXkgJywga2V5LCAnOjogVmFsdWUgJywgdmFsdWUsICc6OiBFbGVtZW50ICcsIGRvbSk7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdHRyaWJ1dGUgdmFsdWUgd2FzIG5vdCBzaW1wbGUnKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHZhciBzZXQgPSBmdW5jdGlvbiAoZWxlbWVudCwga2V5LCB2YWx1ZSkge1xyXG4gICAgICByYXdTZXQoZWxlbWVudC5kb20sIGtleSwgdmFsdWUpO1xyXG4gICAgfTtcclxuICAgIHZhciByZW1vdmUgPSBmdW5jdGlvbiAoZWxlbWVudCwga2V5KSB7XHJcbiAgICAgIGVsZW1lbnQuZG9tLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZnJvbUh0bWwgPSBmdW5jdGlvbiAoaHRtbCwgc2NvcGUpIHtcclxuICAgICAgdmFyIGRvYyA9IHNjb3BlIHx8IGRvY3VtZW50O1xyXG4gICAgICB2YXIgZGl2ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBkaXYuaW5uZXJIVE1MID0gaHRtbDtcclxuICAgICAgaWYgKCFkaXYuaGFzQ2hpbGROb2RlcygpIHx8IGRpdi5jaGlsZE5vZGVzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdIVE1MIGRvZXMgbm90IGhhdmUgYSBzaW5nbGUgcm9vdCBub2RlJywgaHRtbCk7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIVE1MIG11c3QgaGF2ZSBhIHNpbmdsZSByb290IG5vZGUnKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZnJvbURvbShkaXYuY2hpbGROb2Rlc1swXSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGZyb21UYWcgPSBmdW5jdGlvbiAodGFnLCBzY29wZSkge1xyXG4gICAgICB2YXIgZG9jID0gc2NvcGUgfHwgZG9jdW1lbnQ7XHJcbiAgICAgIHZhciBub2RlID0gZG9jLmNyZWF0ZUVsZW1lbnQodGFnKTtcclxuICAgICAgcmV0dXJuIGZyb21Eb20obm9kZSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGZyb21UZXh0ID0gZnVuY3Rpb24gKHRleHQsIHNjb3BlKSB7XHJcbiAgICAgIHZhciBkb2MgPSBzY29wZSB8fCBkb2N1bWVudDtcclxuICAgICAgdmFyIG5vZGUgPSBkb2MuY3JlYXRlVGV4dE5vZGUodGV4dCk7XHJcbiAgICAgIHJldHVybiBmcm9tRG9tKG5vZGUpO1xyXG4gICAgfTtcclxuICAgIHZhciBmcm9tRG9tID0gZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgaWYgKG5vZGUgPT09IG51bGwgfHwgbm9kZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb2RlIGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCcpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB7IGRvbTogbm9kZSB9O1xyXG4gICAgfTtcclxuICAgIHZhciBmcm9tUG9pbnQgPSBmdW5jdGlvbiAoZG9jRWxtLCB4LCB5KSB7XHJcbiAgICAgIHJldHVybiBPcHRpb25hbC5mcm9tKGRvY0VsbS5kb20uZWxlbWVudEZyb21Qb2ludCh4LCB5KSkubWFwKGZyb21Eb20pO1xyXG4gICAgfTtcclxuICAgIHZhciBTdWdhckVsZW1lbnQgPSB7XHJcbiAgICAgIGZyb21IdG1sOiBmcm9tSHRtbCxcclxuICAgICAgZnJvbVRhZzogZnJvbVRhZyxcclxuICAgICAgZnJvbVRleHQ6IGZyb21UZXh0LFxyXG4gICAgICBmcm9tRG9tOiBmcm9tRG9tLFxyXG4gICAgICBmcm9tUG9pbnQ6IGZyb21Qb2ludFxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZ2xvYmFsJDUgPSB0aW55bWNlLnV0aWwuVG9vbHMucmVzb2x2ZSgndGlueW1jZS5kb20uRE9NVXRpbHMnKTtcclxuXHJcbiAgICB2YXIgZ2xvYmFsJDQgPSB0aW55bWNlLnV0aWwuVG9vbHMucmVzb2x2ZSgndGlueW1jZS51dGlsLlByb21pc2UnKTtcclxuXHJcbiAgICB2YXIgZ2xvYmFsJDMgPSB0aW55bWNlLnV0aWwuVG9vbHMucmVzb2x2ZSgndGlueW1jZS51dGlsLlVSSScpO1xyXG5cclxuICAgIHZhciBnbG9iYWwkMiA9IHRpbnltY2UudXRpbC5Ub29scy5yZXNvbHZlKCd0aW55bWNlLnV0aWwuWEhSJyk7XHJcblxyXG4gICAgdmFyIGhhc0RpbWVuc2lvbnMgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcbiAgICAgIHJldHVybiBlZGl0b3IuZ2V0UGFyYW0oJ2ltYWdlX2RpbWVuc2lvbnMnLCB0cnVlLCAnYm9vbGVhbicpO1xyXG4gICAgfTtcclxuICAgIHZhciBoYXNBZHZUYWIgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcbiAgICAgIHJldHVybiBlZGl0b3IuZ2V0UGFyYW0oJ2ltYWdlX2FkdnRhYicsIGZhbHNlLCAnYm9vbGVhbicpO1xyXG4gICAgfTtcclxuICAgIHZhciBoYXNVcGxvYWRUYWIgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcbiAgICAgIHJldHVybiBlZGl0b3IuZ2V0UGFyYW0oJ2ltYWdlX3VwbG9hZHRhYicsIHRydWUsICdib29sZWFuJyk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGdldFByZXBlbmRVcmwgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcbiAgICAgIHJldHVybiBlZGl0b3IuZ2V0UGFyYW0oJ2ltYWdlX3ByZXBlbmRfdXJsJywgJycsICdzdHJpbmcnKTtcclxuICAgIH07XHJcbiAgICB2YXIgZ2V0Q2xhc3NMaXN0ID0gZnVuY3Rpb24gKGVkaXRvcikge1xyXG4gICAgICByZXR1cm4gZWRpdG9yLmdldFBhcmFtKCdpbWFnZV9jbGFzc19saXN0Jyk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGhhc0Rlc2NyaXB0aW9uID0gZnVuY3Rpb24gKGVkaXRvcikge1xyXG4gICAgICByZXR1cm4gZWRpdG9yLmdldFBhcmFtKCdpbWFnZV9kZXNjcmlwdGlvbicsIHRydWUsICdib29sZWFuJyk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGhhc0ltYWdlVGl0bGUgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcbiAgICAgIHJldHVybiBlZGl0b3IuZ2V0UGFyYW0oJ2ltYWdlX3RpdGxlJywgZmFsc2UsICdib29sZWFuJyk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGhhc0ltYWdlQ2FwdGlvbiA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuICAgICAgcmV0dXJuIGVkaXRvci5nZXRQYXJhbSgnaW1hZ2VfY2FwdGlvbicsIGZhbHNlLCAnYm9vbGVhbicpO1xyXG4gICAgfTtcclxuICAgIHZhciBnZXRJbWFnZUxpc3QgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcbiAgICAgIHJldHVybiBlZGl0b3IuZ2V0UGFyYW0oJ2ltYWdlX2xpc3QnLCBmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGhhc1VwbG9hZFVybCA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuICAgICAgcmV0dXJuIGlzTm9uTnVsbGFibGUoZWRpdG9yLmdldFBhcmFtKCdpbWFnZXNfdXBsb2FkX3VybCcpKTtcclxuICAgIH07XHJcbiAgICB2YXIgaGFzVXBsb2FkSGFuZGxlciA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuICAgICAgcmV0dXJuIGlzTm9uTnVsbGFibGUoZWRpdG9yLmdldFBhcmFtKCdpbWFnZXNfdXBsb2FkX2hhbmRsZXInKSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIHNob3dBY2Nlc3NpYmlsaXR5T3B0aW9ucyA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuICAgICAgcmV0dXJuIGVkaXRvci5nZXRQYXJhbSgnYTExeV9hZHZhbmNlZF9vcHRpb25zJywgZmFsc2UsICdib29sZWFuJyk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGlzQXV0b21hdGljVXBsb2Fkc0VuYWJsZWQgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcbiAgICAgIHJldHVybiBlZGl0b3IuZ2V0UGFyYW0oJ2F1dG9tYXRpY191cGxvYWRzJywgdHJ1ZSwgJ2Jvb2xlYW4nKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHBhcnNlSW50QW5kR2V0TWF4ID0gZnVuY3Rpb24gKHZhbDEsIHZhbDIpIHtcclxuICAgICAgcmV0dXJuIE1hdGgubWF4KHBhcnNlSW50KHZhbDEsIDEwKSwgcGFyc2VJbnQodmFsMiwgMTApKTtcclxuICAgIH07XHJcbiAgICB2YXIgZ2V0SW1hZ2VTaXplID0gZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICByZXR1cm4gbmV3IGdsb2JhbCQ0KGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgICAgICB2YXIgZG9uZSA9IGZ1bmN0aW9uIChkaW1lbnNpb25zKSB7XHJcbiAgICAgICAgICBpbWcub25sb2FkID0gaW1nLm9uZXJyb3IgPSBudWxsO1xyXG4gICAgICAgICAgaWYgKGltZy5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgIGltZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGltZyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjYWxsYmFjayhkaW1lbnNpb25zKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB2YXIgd2lkdGggPSBwYXJzZUludEFuZEdldE1heChpbWcud2lkdGgsIGltZy5jbGllbnRXaWR0aCk7XHJcbiAgICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnRBbmRHZXRNYXgoaW1nLmhlaWdodCwgaW1nLmNsaWVudEhlaWdodCk7XHJcbiAgICAgICAgICB2YXIgZGltZW5zaW9ucyA9IHtcclxuICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIGRvbmUoZ2xvYmFsJDQucmVzb2x2ZShkaW1lbnNpb25zKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpbWcub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGRvbmUoZ2xvYmFsJDQucmVqZWN0KCdGYWlsZWQgdG8gZ2V0IGltYWdlIGRpbWVuc2lvbnMgZm9yOiAnICsgdXJsKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgc3R5bGUgPSBpbWcuc3R5bGU7XHJcbiAgICAgICAgc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICAgIHN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcclxuICAgICAgICBzdHlsZS5ib3R0b20gPSBzdHlsZS5sZWZ0ID0gJzBweCc7XHJcbiAgICAgICAgc3R5bGUud2lkdGggPSBzdHlsZS5oZWlnaHQgPSAnYXV0byc7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpbWcpO1xyXG4gICAgICAgIGltZy5zcmMgPSB1cmw7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHZhciByZW1vdmVQaXhlbFN1ZmZpeCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL3B4JC8sICcnKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9O1xyXG4gICAgdmFyIGFkZFBpeGVsU3VmZml4ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwICYmIC9eWzAtOV0rJC8udGVzdCh2YWx1ZSkpIHtcclxuICAgICAgICB2YWx1ZSArPSAncHgnO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcbiAgICB2YXIgbWVyZ2VNYXJnaW5zID0gZnVuY3Rpb24gKGNzcykge1xyXG4gICAgICBpZiAoY3NzLm1hcmdpbikge1xyXG4gICAgICAgIHZhciBzcGxpdE1hcmdpbiA9IFN0cmluZyhjc3MubWFyZ2luKS5zcGxpdCgnICcpO1xyXG4gICAgICAgIHN3aXRjaCAoc3BsaXRNYXJnaW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgY3NzWydtYXJnaW4tdG9wJ10gPSBjc3NbJ21hcmdpbi10b3AnXSB8fCBzcGxpdE1hcmdpblswXTtcclxuICAgICAgICAgIGNzc1snbWFyZ2luLXJpZ2h0J10gPSBjc3NbJ21hcmdpbi1yaWdodCddIHx8IHNwbGl0TWFyZ2luWzBdO1xyXG4gICAgICAgICAgY3NzWydtYXJnaW4tYm90dG9tJ10gPSBjc3NbJ21hcmdpbi1ib3R0b20nXSB8fCBzcGxpdE1hcmdpblswXTtcclxuICAgICAgICAgIGNzc1snbWFyZ2luLWxlZnQnXSA9IGNzc1snbWFyZ2luLWxlZnQnXSB8fCBzcGxpdE1hcmdpblswXTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgIGNzc1snbWFyZ2luLXRvcCddID0gY3NzWydtYXJnaW4tdG9wJ10gfHwgc3BsaXRNYXJnaW5bMF07XHJcbiAgICAgICAgICBjc3NbJ21hcmdpbi1yaWdodCddID0gY3NzWydtYXJnaW4tcmlnaHQnXSB8fCBzcGxpdE1hcmdpblsxXTtcclxuICAgICAgICAgIGNzc1snbWFyZ2luLWJvdHRvbSddID0gY3NzWydtYXJnaW4tYm90dG9tJ10gfHwgc3BsaXRNYXJnaW5bMF07XHJcbiAgICAgICAgICBjc3NbJ21hcmdpbi1sZWZ0J10gPSBjc3NbJ21hcmdpbi1sZWZ0J10gfHwgc3BsaXRNYXJnaW5bMV07XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICBjc3NbJ21hcmdpbi10b3AnXSA9IGNzc1snbWFyZ2luLXRvcCddIHx8IHNwbGl0TWFyZ2luWzBdO1xyXG4gICAgICAgICAgY3NzWydtYXJnaW4tcmlnaHQnXSA9IGNzc1snbWFyZ2luLXJpZ2h0J10gfHwgc3BsaXRNYXJnaW5bMV07XHJcbiAgICAgICAgICBjc3NbJ21hcmdpbi1ib3R0b20nXSA9IGNzc1snbWFyZ2luLWJvdHRvbSddIHx8IHNwbGl0TWFyZ2luWzJdO1xyXG4gICAgICAgICAgY3NzWydtYXJnaW4tbGVmdCddID0gY3NzWydtYXJnaW4tbGVmdCddIHx8IHNwbGl0TWFyZ2luWzFdO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgY3NzWydtYXJnaW4tdG9wJ10gPSBjc3NbJ21hcmdpbi10b3AnXSB8fCBzcGxpdE1hcmdpblswXTtcclxuICAgICAgICAgIGNzc1snbWFyZ2luLXJpZ2h0J10gPSBjc3NbJ21hcmdpbi1yaWdodCddIHx8IHNwbGl0TWFyZ2luWzFdO1xyXG4gICAgICAgICAgY3NzWydtYXJnaW4tYm90dG9tJ10gPSBjc3NbJ21hcmdpbi1ib3R0b20nXSB8fCBzcGxpdE1hcmdpblsyXTtcclxuICAgICAgICAgIGNzc1snbWFyZ2luLWxlZnQnXSA9IGNzc1snbWFyZ2luLWxlZnQnXSB8fCBzcGxpdE1hcmdpblszXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVsZXRlIGNzcy5tYXJnaW47XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGNzcztcclxuICAgIH07XHJcbiAgICB2YXIgY3JlYXRlSW1hZ2VMaXN0ID0gZnVuY3Rpb24gKGVkaXRvciwgY2FsbGJhY2spIHtcclxuICAgICAgdmFyIGltYWdlTGlzdCA9IGdldEltYWdlTGlzdChlZGl0b3IpO1xyXG4gICAgICBpZiAoaXNTdHJpbmcoaW1hZ2VMaXN0KSkge1xyXG4gICAgICAgIGdsb2JhbCQyLnNlbmQoe1xyXG4gICAgICAgICAgdXJsOiBpbWFnZUxpc3QsXHJcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAodGV4dCkge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhKU09OLnBhcnNlKHRleHQpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKGltYWdlTGlzdCkpIHtcclxuICAgICAgICBpbWFnZUxpc3QoY2FsbGJhY2spO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNhbGxiYWNrKGltYWdlTGlzdCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgd2FpdExvYWRJbWFnZSA9IGZ1bmN0aW9uIChlZGl0b3IsIGRhdGEsIGltZ0VsbSkge1xyXG4gICAgICB2YXIgc2VsZWN0SW1hZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaW1nRWxtLm9ubG9hZCA9IGltZ0VsbS5vbmVycm9yID0gbnVsbDtcclxuICAgICAgICBpZiAoZWRpdG9yLnNlbGVjdGlvbikge1xyXG4gICAgICAgICAgZWRpdG9yLnNlbGVjdGlvbi5zZWxlY3QoaW1nRWxtKTtcclxuICAgICAgICAgIGVkaXRvci5ub2RlQ2hhbmdlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgICAgaW1nRWxtLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIWRhdGEud2lkdGggJiYgIWRhdGEuaGVpZ2h0ICYmIGhhc0RpbWVuc2lvbnMoZWRpdG9yKSkge1xyXG4gICAgICAgICAgZWRpdG9yLmRvbS5zZXRBdHRyaWJzKGltZ0VsbSwge1xyXG4gICAgICAgICAgICB3aWR0aDogU3RyaW5nKGltZ0VsbS5jbGllbnRXaWR0aCksXHJcbiAgICAgICAgICAgIGhlaWdodDogU3RyaW5nKGltZ0VsbS5jbGllbnRIZWlnaHQpXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2VsZWN0SW1hZ2UoKTtcclxuICAgICAgfTtcclxuICAgICAgaW1nRWxtLm9uZXJyb3IgPSBzZWxlY3RJbWFnZTtcclxuICAgIH07XHJcbiAgICB2YXIgYmxvYlRvRGF0YVVyaSA9IGZ1bmN0aW9uIChibG9iKSB7XHJcbiAgICAgIHJldHVybiBuZXcgZ2xvYmFsJDQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICByZWplY3QocmVhZGVyLmVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoYmxvYik7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHZhciBpc1BsYWNlaG9sZGVySW1hZ2UgPSBmdW5jdGlvbiAoaW1nRWxtKSB7XHJcbiAgICAgIHJldHVybiBpbWdFbG0ubm9kZU5hbWUgPT09ICdJTUcnICYmIChpbWdFbG0uaGFzQXR0cmlidXRlKCdkYXRhLW1jZS1vYmplY3QnKSB8fCBpbWdFbG0uaGFzQXR0cmlidXRlKCdkYXRhLW1jZS1wbGFjZWhvbGRlcicpKTtcclxuICAgIH07XHJcbiAgICB2YXIgaXNTYWZlSW1hZ2VVcmwgPSBmdW5jdGlvbiAoZWRpdG9yLCBzcmMpIHtcclxuICAgICAgcmV0dXJuIGdsb2JhbCQzLmlzRG9tU2FmZShzcmMsICdpbWcnLCBlZGl0b3Iuc2V0dGluZ3MpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgRE9NID0gZ2xvYmFsJDUuRE9NO1xyXG4gICAgdmFyIGdldEhzcGFjZSA9IGZ1bmN0aW9uIChpbWFnZSkge1xyXG4gICAgICBpZiAoaW1hZ2Uuc3R5bGUubWFyZ2luTGVmdCAmJiBpbWFnZS5zdHlsZS5tYXJnaW5SaWdodCAmJiBpbWFnZS5zdHlsZS5tYXJnaW5MZWZ0ID09PSBpbWFnZS5zdHlsZS5tYXJnaW5SaWdodCkge1xyXG4gICAgICAgIHJldHVybiByZW1vdmVQaXhlbFN1ZmZpeChpbWFnZS5zdHlsZS5tYXJnaW5MZWZ0KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgZ2V0VnNwYWNlID0gZnVuY3Rpb24gKGltYWdlKSB7XHJcbiAgICAgIGlmIChpbWFnZS5zdHlsZS5tYXJnaW5Ub3AgJiYgaW1hZ2Uuc3R5bGUubWFyZ2luQm90dG9tICYmIGltYWdlLnN0eWxlLm1hcmdpblRvcCA9PT0gaW1hZ2Uuc3R5bGUubWFyZ2luQm90dG9tKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlbW92ZVBpeGVsU3VmZml4KGltYWdlLnN0eWxlLm1hcmdpblRvcCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIGdldEJvcmRlciA9IGZ1bmN0aW9uIChpbWFnZSkge1xyXG4gICAgICBpZiAoaW1hZ2Uuc3R5bGUuYm9yZGVyV2lkdGgpIHtcclxuICAgICAgICByZXR1cm4gcmVtb3ZlUGl4ZWxTdWZmaXgoaW1hZ2Uuc3R5bGUuYm9yZGVyV2lkdGgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHZhciBnZXRBdHRyaWIgPSBmdW5jdGlvbiAoaW1hZ2UsIG5hbWUpIHtcclxuICAgICAgaWYgKGltYWdlLmhhc0F0dHJpYnV0ZShuYW1lKSkge1xyXG4gICAgICAgIHJldHVybiBpbWFnZS5nZXRBdHRyaWJ1dGUobmFtZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIGdldFN0eWxlID0gZnVuY3Rpb24gKGltYWdlLCBuYW1lKSB7XHJcbiAgICAgIHJldHVybiBpbWFnZS5zdHlsZVtuYW1lXSA/IGltYWdlLnN0eWxlW25hbWVdIDogJyc7XHJcbiAgICB9O1xyXG4gICAgdmFyIGhhc0NhcHRpb24gPSBmdW5jdGlvbiAoaW1hZ2UpIHtcclxuICAgICAgcmV0dXJuIGltYWdlLnBhcmVudE5vZGUgIT09IG51bGwgJiYgaW1hZ2UucGFyZW50Tm9kZS5ub2RlTmFtZSA9PT0gJ0ZJR1VSRSc7XHJcbiAgICB9O1xyXG4gICAgdmFyIHVwZGF0ZUF0dHJpYiA9IGZ1bmN0aW9uIChpbWFnZSwgbmFtZSwgdmFsdWUpIHtcclxuICAgICAgaWYgKHZhbHVlID09PSAnJykge1xyXG4gICAgICAgIGltYWdlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpbWFnZS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIHdyYXBJbkZpZ3VyZSA9IGZ1bmN0aW9uIChpbWFnZSkge1xyXG4gICAgICB2YXIgZmlndXJlRWxtID0gRE9NLmNyZWF0ZSgnZmlndXJlJywgeyBjbGFzczogJ2ltYWdlJyB9KTtcclxuICAgICAgRE9NLmluc2VydEFmdGVyKGZpZ3VyZUVsbSwgaW1hZ2UpO1xyXG4gICAgICBmaWd1cmVFbG0uYXBwZW5kQ2hpbGQoaW1hZ2UpO1xyXG4gICAgICBmaWd1cmVFbG0uYXBwZW5kQ2hpbGQoRE9NLmNyZWF0ZSgnZmlnY2FwdGlvbicsIHsgY29udGVudEVkaXRhYmxlOiAndHJ1ZScgfSwgJ0NhcHRpb24nKSk7XHJcbiAgICAgIGZpZ3VyZUVsbS5jb250ZW50RWRpdGFibGUgPSAnZmFsc2UnO1xyXG4gICAgfTtcclxuICAgIHZhciByZW1vdmVGaWd1cmUgPSBmdW5jdGlvbiAoaW1hZ2UpIHtcclxuICAgICAgdmFyIGZpZ3VyZUVsbSA9IGltYWdlLnBhcmVudE5vZGU7XHJcbiAgICAgIERPTS5pbnNlcnRBZnRlcihpbWFnZSwgZmlndXJlRWxtKTtcclxuICAgICAgRE9NLnJlbW92ZShmaWd1cmVFbG0pO1xyXG4gICAgfTtcclxuICAgIHZhciB0b2dnbGVDYXB0aW9uID0gZnVuY3Rpb24gKGltYWdlKSB7XHJcbiAgICAgIGlmIChoYXNDYXB0aW9uKGltYWdlKSkge1xyXG4gICAgICAgIHJlbW92ZUZpZ3VyZShpbWFnZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgd3JhcEluRmlndXJlKGltYWdlKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHZhciBub3JtYWxpemVTdHlsZSA9IGZ1bmN0aW9uIChpbWFnZSwgbm9ybWFsaXplQ3NzKSB7XHJcbiAgICAgIHZhciBhdHRyVmFsdWUgPSBpbWFnZS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5vcm1hbGl6ZUNzcyhhdHRyVmFsdWUgIT09IG51bGwgPyBhdHRyVmFsdWUgOiAnJyk7XHJcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgaW1hZ2Uuc2V0QXR0cmlidXRlKCdzdHlsZScsIHZhbHVlKTtcclxuICAgICAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWNlLXN0eWxlJywgdmFsdWUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGltYWdlLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHZhciBzZXRTaXplID0gZnVuY3Rpb24gKG5hbWUsIG5vcm1hbGl6ZUNzcykge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGltYWdlLCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmIChpbWFnZS5zdHlsZVtuYW1lXSkge1xyXG4gICAgICAgICAgaW1hZ2Uuc3R5bGVbbmFtZV0gPSBhZGRQaXhlbFN1ZmZpeCh2YWx1ZSk7XHJcbiAgICAgICAgICBub3JtYWxpemVTdHlsZShpbWFnZSwgbm9ybWFsaXplQ3NzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdXBkYXRlQXR0cmliKGltYWdlLCBuYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciBnZXRTaXplID0gZnVuY3Rpb24gKGltYWdlLCBuYW1lKSB7XHJcbiAgICAgIGlmIChpbWFnZS5zdHlsZVtuYW1lXSkge1xyXG4gICAgICAgIHJldHVybiByZW1vdmVQaXhlbFN1ZmZpeChpbWFnZS5zdHlsZVtuYW1lXSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGdldEF0dHJpYihpbWFnZSwgbmFtZSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgc2V0SHNwYWNlID0gZnVuY3Rpb24gKGltYWdlLCB2YWx1ZSkge1xyXG4gICAgICB2YXIgcHhWYWx1ZSA9IGFkZFBpeGVsU3VmZml4KHZhbHVlKTtcclxuICAgICAgaW1hZ2Uuc3R5bGUubWFyZ2luTGVmdCA9IHB4VmFsdWU7XHJcbiAgICAgIGltYWdlLnN0eWxlLm1hcmdpblJpZ2h0ID0gcHhWYWx1ZTtcclxuICAgIH07XHJcbiAgICB2YXIgc2V0VnNwYWNlID0gZnVuY3Rpb24gKGltYWdlLCB2YWx1ZSkge1xyXG4gICAgICB2YXIgcHhWYWx1ZSA9IGFkZFBpeGVsU3VmZml4KHZhbHVlKTtcclxuICAgICAgaW1hZ2Uuc3R5bGUubWFyZ2luVG9wID0gcHhWYWx1ZTtcclxuICAgICAgaW1hZ2Uuc3R5bGUubWFyZ2luQm90dG9tID0gcHhWYWx1ZTtcclxuICAgIH07XHJcbiAgICB2YXIgc2V0Qm9yZGVyID0gZnVuY3Rpb24gKGltYWdlLCB2YWx1ZSkge1xyXG4gICAgICB2YXIgcHhWYWx1ZSA9IGFkZFBpeGVsU3VmZml4KHZhbHVlKTtcclxuICAgICAgaW1hZ2Uuc3R5bGUuYm9yZGVyV2lkdGggPSBweFZhbHVlO1xyXG4gICAgfTtcclxuICAgIHZhciBzZXRCb3JkZXJTdHlsZSA9IGZ1bmN0aW9uIChpbWFnZSwgdmFsdWUpIHtcclxuICAgICAgaW1hZ2Uuc3R5bGUuYm9yZGVyU3R5bGUgPSB2YWx1ZTtcclxuICAgIH07XHJcbiAgICB2YXIgZ2V0Qm9yZGVyU3R5bGUgPSBmdW5jdGlvbiAoaW1hZ2UpIHtcclxuICAgICAgcmV0dXJuIGdldFN0eWxlKGltYWdlLCAnYm9yZGVyU3R5bGUnKTtcclxuICAgIH07XHJcbiAgICB2YXIgaXNGaWd1cmUgPSBmdW5jdGlvbiAoZWxtKSB7XHJcbiAgICAgIHJldHVybiBlbG0ubm9kZU5hbWUgPT09ICdGSUdVUkUnO1xyXG4gICAgfTtcclxuICAgIHZhciBpc0ltYWdlID0gZnVuY3Rpb24gKGVsbSkge1xyXG4gICAgICByZXR1cm4gZWxtLm5vZGVOYW1lID09PSAnSU1HJztcclxuICAgIH07XHJcbiAgICB2YXIgZ2V0SXNEZWNvcmF0aXZlID0gZnVuY3Rpb24gKGltYWdlKSB7XHJcbiAgICAgIHJldHVybiBET00uZ2V0QXR0cmliKGltYWdlLCAnYWx0JykubGVuZ3RoID09PSAwICYmIERPTS5nZXRBdHRyaWIoaW1hZ2UsICdyb2xlJykgPT09ICdwcmVzZW50YXRpb24nO1xyXG4gICAgfTtcclxuICAgIHZhciBnZXRBbHQgPSBmdW5jdGlvbiAoaW1hZ2UpIHtcclxuICAgICAgaWYgKGdldElzRGVjb3JhdGl2ZShpbWFnZSkpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGdldEF0dHJpYihpbWFnZSwgJ2FsdCcpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIGRlZmF1bHREYXRhID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHNyYzogJycsXHJcbiAgICAgICAgYWx0OiAnJyxcclxuICAgICAgICB0aXRsZTogJycsXHJcbiAgICAgICAgd2lkdGg6ICcnLFxyXG4gICAgICAgIGhlaWdodDogJycsXHJcbiAgICAgICAgY2xhc3M6ICcnLFxyXG4gICAgICAgIHN0eWxlOiAnJyxcclxuICAgICAgICBjYXB0aW9uOiBmYWxzZSxcclxuICAgICAgICBoc3BhY2U6ICcnLFxyXG4gICAgICAgIHZzcGFjZTogJycsXHJcbiAgICAgICAgYm9yZGVyOiAnJyxcclxuICAgICAgICBib3JkZXJTdHlsZTogJycsXHJcbiAgICAgICAgaXNEZWNvcmF0aXZlOiBmYWxzZVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciBnZXRTdHlsZVZhbHVlID0gZnVuY3Rpb24gKG5vcm1hbGl6ZUNzcywgZGF0YSkge1xyXG4gICAgICB2YXIgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgICAgdXBkYXRlQXR0cmliKGltYWdlLCAnc3R5bGUnLCBkYXRhLnN0eWxlKTtcclxuICAgICAgaWYgKGdldEhzcGFjZShpbWFnZSkgfHwgZGF0YS5oc3BhY2UgIT09ICcnKSB7XHJcbiAgICAgICAgc2V0SHNwYWNlKGltYWdlLCBkYXRhLmhzcGFjZSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGdldFZzcGFjZShpbWFnZSkgfHwgZGF0YS52c3BhY2UgIT09ICcnKSB7XHJcbiAgICAgICAgc2V0VnNwYWNlKGltYWdlLCBkYXRhLnZzcGFjZSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGdldEJvcmRlcihpbWFnZSkgfHwgZGF0YS5ib3JkZXIgIT09ICcnKSB7XHJcbiAgICAgICAgc2V0Qm9yZGVyKGltYWdlLCBkYXRhLmJvcmRlcik7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGdldEJvcmRlclN0eWxlKGltYWdlKSB8fCBkYXRhLmJvcmRlclN0eWxlICE9PSAnJykge1xyXG4gICAgICAgIHNldEJvcmRlclN0eWxlKGltYWdlLCBkYXRhLmJvcmRlclN0eWxlKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbm9ybWFsaXplQ3NzKGltYWdlLmdldEF0dHJpYnV0ZSgnc3R5bGUnKSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIChub3JtYWxpemVDc3MsIGRhdGEpIHtcclxuICAgICAgdmFyIGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcbiAgICAgIHdyaXRlKG5vcm1hbGl6ZUNzcywgX19hc3NpZ24oX19hc3NpZ24oe30sIGRhdGEpLCB7IGNhcHRpb246IGZhbHNlIH0pLCBpbWFnZSk7XHJcbiAgICAgIHNldEFsdChpbWFnZSwgZGF0YS5hbHQsIGRhdGEuaXNEZWNvcmF0aXZlKTtcclxuICAgICAgaWYgKGRhdGEuY2FwdGlvbikge1xyXG4gICAgICAgIHZhciBmaWd1cmUgPSBET00uY3JlYXRlKCdmaWd1cmUnLCB7IGNsYXNzOiAnaW1hZ2UnIH0pO1xyXG4gICAgICAgIGZpZ3VyZS5hcHBlbmRDaGlsZChpbWFnZSk7XHJcbiAgICAgICAgZmlndXJlLmFwcGVuZENoaWxkKERPTS5jcmVhdGUoJ2ZpZ2NhcHRpb24nLCB7IGNvbnRlbnRFZGl0YWJsZTogJ3RydWUnIH0sICdDYXB0aW9uJykpO1xyXG4gICAgICAgIGZpZ3VyZS5jb250ZW50RWRpdGFibGUgPSAnZmFsc2UnO1xyXG4gICAgICAgIHJldHVybiBmaWd1cmU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGltYWdlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIHJlYWQgPSBmdW5jdGlvbiAobm9ybWFsaXplQ3NzLCBpbWFnZSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHNyYzogZ2V0QXR0cmliKGltYWdlLCAnc3JjJyksXHJcbiAgICAgICAgYWx0OiBnZXRBbHQoaW1hZ2UpLFxyXG4gICAgICAgIHRpdGxlOiBnZXRBdHRyaWIoaW1hZ2UsICd0aXRsZScpLFxyXG4gICAgICAgIHdpZHRoOiBnZXRTaXplKGltYWdlLCAnd2lkdGgnKSxcclxuICAgICAgICBoZWlnaHQ6IGdldFNpemUoaW1hZ2UsICdoZWlnaHQnKSxcclxuICAgICAgICBjbGFzczogZ2V0QXR0cmliKGltYWdlLCAnY2xhc3MnKSxcclxuICAgICAgICBzdHlsZTogbm9ybWFsaXplQ3NzKGdldEF0dHJpYihpbWFnZSwgJ3N0eWxlJykpLFxyXG4gICAgICAgIGNhcHRpb246IGhhc0NhcHRpb24oaW1hZ2UpLFxyXG4gICAgICAgIGhzcGFjZTogZ2V0SHNwYWNlKGltYWdlKSxcclxuICAgICAgICB2c3BhY2U6IGdldFZzcGFjZShpbWFnZSksXHJcbiAgICAgICAgYm9yZGVyOiBnZXRCb3JkZXIoaW1hZ2UpLFxyXG4gICAgICAgIGJvcmRlclN0eWxlOiBnZXRTdHlsZShpbWFnZSwgJ2JvcmRlclN0eWxlJyksXHJcbiAgICAgICAgaXNEZWNvcmF0aXZlOiBnZXRJc0RlY29yYXRpdmUoaW1hZ2UpXHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdmFyIHVwZGF0ZVByb3AgPSBmdW5jdGlvbiAoaW1hZ2UsIG9sZERhdGEsIG5ld0RhdGEsIG5hbWUsIHNldCkge1xyXG4gICAgICBpZiAobmV3RGF0YVtuYW1lXSAhPT0gb2xkRGF0YVtuYW1lXSkge1xyXG4gICAgICAgIHNldChpbWFnZSwgbmFtZSwgbmV3RGF0YVtuYW1lXSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgc2V0QWx0ID0gZnVuY3Rpb24gKGltYWdlLCBhbHQsIGlzRGVjb3JhdGl2ZSkge1xyXG4gICAgICBpZiAoaXNEZWNvcmF0aXZlKSB7XHJcbiAgICAgICAgRE9NLnNldEF0dHJpYihpbWFnZSwgJ3JvbGUnLCAncHJlc2VudGF0aW9uJyk7XHJcbiAgICAgICAgdmFyIHN1Z2FySW1hZ2UgPSBTdWdhckVsZW1lbnQuZnJvbURvbShpbWFnZSk7XHJcbiAgICAgICAgc2V0KHN1Z2FySW1hZ2UsICdhbHQnLCAnJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGlzTnVsbChhbHQpKSB7XHJcbiAgICAgICAgICB2YXIgc3VnYXJJbWFnZSA9IFN1Z2FyRWxlbWVudC5mcm9tRG9tKGltYWdlKTtcclxuICAgICAgICAgIHJlbW92ZShzdWdhckltYWdlLCAnYWx0Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHZhciBzdWdhckltYWdlID0gU3VnYXJFbGVtZW50LmZyb21Eb20oaW1hZ2UpO1xyXG4gICAgICAgICAgc2V0KHN1Z2FySW1hZ2UsICdhbHQnLCBhbHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoRE9NLmdldEF0dHJpYihpbWFnZSwgJ3JvbGUnKSA9PT0gJ3ByZXNlbnRhdGlvbicpIHtcclxuICAgICAgICAgIERPTS5zZXRBdHRyaWIoaW1hZ2UsICdyb2xlJywgJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHZhciB1cGRhdGVBbHQgPSBmdW5jdGlvbiAoaW1hZ2UsIG9sZERhdGEsIG5ld0RhdGEpIHtcclxuICAgICAgaWYgKG5ld0RhdGEuYWx0ICE9PSBvbGREYXRhLmFsdCB8fCBuZXdEYXRhLmlzRGVjb3JhdGl2ZSAhPT0gb2xkRGF0YS5pc0RlY29yYXRpdmUpIHtcclxuICAgICAgICBzZXRBbHQoaW1hZ2UsIG5ld0RhdGEuYWx0LCBuZXdEYXRhLmlzRGVjb3JhdGl2ZSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgbm9ybWFsaXplZCA9IGZ1bmN0aW9uIChzZXQsIG5vcm1hbGl6ZUNzcykge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGltYWdlLCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIHNldChpbWFnZSwgdmFsdWUpO1xyXG4gICAgICAgIG5vcm1hbGl6ZVN0eWxlKGltYWdlLCBub3JtYWxpemVDc3MpO1xyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciB3cml0ZSA9IGZ1bmN0aW9uIChub3JtYWxpemVDc3MsIG5ld0RhdGEsIGltYWdlKSB7XHJcbiAgICAgIHZhciBvbGREYXRhID0gcmVhZChub3JtYWxpemVDc3MsIGltYWdlKTtcclxuICAgICAgdXBkYXRlUHJvcChpbWFnZSwgb2xkRGF0YSwgbmV3RGF0YSwgJ2NhcHRpb24nLCBmdW5jdGlvbiAoaW1hZ2UsIF9uYW1lLCBfdmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdG9nZ2xlQ2FwdGlvbihpbWFnZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB1cGRhdGVQcm9wKGltYWdlLCBvbGREYXRhLCBuZXdEYXRhLCAnc3JjJywgdXBkYXRlQXR0cmliKTtcclxuICAgICAgdXBkYXRlUHJvcChpbWFnZSwgb2xkRGF0YSwgbmV3RGF0YSwgJ3RpdGxlJywgdXBkYXRlQXR0cmliKTtcclxuICAgICAgdXBkYXRlUHJvcChpbWFnZSwgb2xkRGF0YSwgbmV3RGF0YSwgJ3dpZHRoJywgc2V0U2l6ZSgnd2lkdGgnLCBub3JtYWxpemVDc3MpKTtcclxuICAgICAgdXBkYXRlUHJvcChpbWFnZSwgb2xkRGF0YSwgbmV3RGF0YSwgJ2hlaWdodCcsIHNldFNpemUoJ2hlaWdodCcsIG5vcm1hbGl6ZUNzcykpO1xyXG4gICAgICB1cGRhdGVQcm9wKGltYWdlLCBvbGREYXRhLCBuZXdEYXRhLCAnY2xhc3MnLCB1cGRhdGVBdHRyaWIpO1xyXG4gICAgICB1cGRhdGVQcm9wKGltYWdlLCBvbGREYXRhLCBuZXdEYXRhLCAnc3R5bGUnLCBub3JtYWxpemVkKGZ1bmN0aW9uIChpbWFnZSwgdmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdXBkYXRlQXR0cmliKGltYWdlLCAnc3R5bGUnLCB2YWx1ZSk7XHJcbiAgICAgIH0sIG5vcm1hbGl6ZUNzcykpO1xyXG4gICAgICB1cGRhdGVQcm9wKGltYWdlLCBvbGREYXRhLCBuZXdEYXRhLCAnaHNwYWNlJywgbm9ybWFsaXplZChzZXRIc3BhY2UsIG5vcm1hbGl6ZUNzcykpO1xyXG4gICAgICB1cGRhdGVQcm9wKGltYWdlLCBvbGREYXRhLCBuZXdEYXRhLCAndnNwYWNlJywgbm9ybWFsaXplZChzZXRWc3BhY2UsIG5vcm1hbGl6ZUNzcykpO1xyXG4gICAgICB1cGRhdGVQcm9wKGltYWdlLCBvbGREYXRhLCBuZXdEYXRhLCAnYm9yZGVyJywgbm9ybWFsaXplZChzZXRCb3JkZXIsIG5vcm1hbGl6ZUNzcykpO1xyXG4gICAgICB1cGRhdGVQcm9wKGltYWdlLCBvbGREYXRhLCBuZXdEYXRhLCAnYm9yZGVyU3R5bGUnLCBub3JtYWxpemVkKHNldEJvcmRlclN0eWxlLCBub3JtYWxpemVDc3MpKTtcclxuICAgICAgdXBkYXRlQWx0KGltYWdlLCBvbGREYXRhLCBuZXdEYXRhKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIG5vcm1hbGl6ZUNzcyQxID0gZnVuY3Rpb24gKGVkaXRvciwgY3NzVGV4dCkge1xyXG4gICAgICB2YXIgY3NzID0gZWRpdG9yLmRvbS5zdHlsZXMucGFyc2UoY3NzVGV4dCk7XHJcbiAgICAgIHZhciBtZXJnZWRDc3MgPSBtZXJnZU1hcmdpbnMoY3NzKTtcclxuICAgICAgdmFyIGNvbXByZXNzZWQgPSBlZGl0b3IuZG9tLnN0eWxlcy5wYXJzZShlZGl0b3IuZG9tLnN0eWxlcy5zZXJpYWxpemUobWVyZ2VkQ3NzKSk7XHJcbiAgICAgIHJldHVybiBlZGl0b3IuZG9tLnN0eWxlcy5zZXJpYWxpemUoY29tcHJlc3NlZCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGdldFNlbGVjdGVkSW1hZ2UgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcbiAgICAgIHZhciBpbWdFbG0gPSBlZGl0b3Iuc2VsZWN0aW9uLmdldE5vZGUoKTtcclxuICAgICAgdmFyIGZpZ3VyZUVsbSA9IGVkaXRvci5kb20uZ2V0UGFyZW50KGltZ0VsbSwgJ2ZpZ3VyZS5pbWFnZScpO1xyXG4gICAgICBpZiAoZmlndXJlRWxtKSB7XHJcbiAgICAgICAgcmV0dXJuIGVkaXRvci5kb20uc2VsZWN0KCdpbWcnLCBmaWd1cmVFbG0pWzBdO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChpbWdFbG0gJiYgKGltZ0VsbS5ub2RlTmFtZSAhPT0gJ0lNRycgfHwgaXNQbGFjZWhvbGRlckltYWdlKGltZ0VsbSkpKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGltZ0VsbTtcclxuICAgIH07XHJcbiAgICB2YXIgc3BsaXRUZXh0QmxvY2sgPSBmdW5jdGlvbiAoZWRpdG9yLCBmaWd1cmUpIHtcclxuICAgICAgdmFyIGRvbSA9IGVkaXRvci5kb207XHJcbiAgICAgIHZhciB0ZXh0QmxvY2tFbGVtZW50cyA9IGZpbHRlcihlZGl0b3Iuc2NoZW1hLmdldFRleHRCbG9ja0VsZW1lbnRzKCksIGZ1bmN0aW9uIChfLCBwYXJlbnRFbG0pIHtcclxuICAgICAgICByZXR1cm4gIWVkaXRvci5zY2hlbWEuaXNWYWxpZENoaWxkKHBhcmVudEVsbSwgJ2ZpZ3VyZScpO1xyXG4gICAgICB9KTtcclxuICAgICAgdmFyIHRleHRCbG9jayA9IGRvbS5nZXRQYXJlbnQoZmlndXJlLnBhcmVudE5vZGUsIGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIGhhc05vbk51bGxhYmxlS2V5KHRleHRCbG9ja0VsZW1lbnRzLCBub2RlLm5vZGVOYW1lKTtcclxuICAgICAgfSwgZWRpdG9yLmdldEJvZHkoKSk7XHJcbiAgICAgIGlmICh0ZXh0QmxvY2spIHtcclxuICAgICAgICByZXR1cm4gZG9tLnNwbGl0KHRleHRCbG9jaywgZmlndXJlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmlndXJlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIHJlYWRJbWFnZURhdGFGcm9tU2VsZWN0aW9uID0gZnVuY3Rpb24gKGVkaXRvcikge1xyXG4gICAgICB2YXIgaW1hZ2UgPSBnZXRTZWxlY3RlZEltYWdlKGVkaXRvcik7XHJcbiAgICAgIHJldHVybiBpbWFnZSA/IHJlYWQoZnVuY3Rpb24gKGNzcykge1xyXG4gICAgICAgIHJldHVybiBub3JtYWxpemVDc3MkMShlZGl0b3IsIGNzcyk7XHJcbiAgICAgIH0sIGltYWdlKSA6IGRlZmF1bHREYXRhKCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGluc2VydEltYWdlQXRDYXJldCA9IGZ1bmN0aW9uIChlZGl0b3IsIGRhdGEpIHtcclxuICAgICAgdmFyIGVsbSA9IGNyZWF0ZShmdW5jdGlvbiAoY3NzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZUNzcyQxKGVkaXRvciwgY3NzKTtcclxuICAgICAgfSwgZGF0YSk7XHJcbiAgICAgIGVkaXRvci5kb20uc2V0QXR0cmliKGVsbSwgJ2RhdGEtbWNlLWlkJywgJ19fbWNlbmV3Jyk7XHJcbiAgICAgIGVkaXRvci5mb2N1cygpO1xyXG4gICAgICBlZGl0b3Iuc2VsZWN0aW9uLnNldENvbnRlbnQoZWxtLm91dGVySFRNTCk7XHJcbiAgICAgIHZhciBpbnNlcnRlZEVsbSA9IGVkaXRvci5kb20uc2VsZWN0KCcqW2RhdGEtbWNlLWlkPVwiX19tY2VuZXdcIl0nKVswXTtcclxuICAgICAgZWRpdG9yLmRvbS5zZXRBdHRyaWIoaW5zZXJ0ZWRFbG0sICdkYXRhLW1jZS1pZCcsIG51bGwpO1xyXG4gICAgICBpZiAoaXNGaWd1cmUoaW5zZXJ0ZWRFbG0pKSB7XHJcbiAgICAgICAgdmFyIGZpZ3VyZSA9IHNwbGl0VGV4dEJsb2NrKGVkaXRvciwgaW5zZXJ0ZWRFbG0pO1xyXG4gICAgICAgIGVkaXRvci5zZWxlY3Rpb24uc2VsZWN0KGZpZ3VyZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZWRpdG9yLnNlbGVjdGlvbi5zZWxlY3QoaW5zZXJ0ZWRFbG0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIHN5bmNTcmNBdHRyID0gZnVuY3Rpb24gKGVkaXRvciwgaW1hZ2UpIHtcclxuICAgICAgZWRpdG9yLmRvbS5zZXRBdHRyaWIoaW1hZ2UsICdzcmMnLCBpbWFnZS5nZXRBdHRyaWJ1dGUoJ3NyYycpKTtcclxuICAgIH07XHJcbiAgICB2YXIgZGVsZXRlSW1hZ2UgPSBmdW5jdGlvbiAoZWRpdG9yLCBpbWFnZSkge1xyXG4gICAgICBpZiAoaW1hZ2UpIHtcclxuICAgICAgICB2YXIgZWxtID0gZWRpdG9yLmRvbS5pcyhpbWFnZS5wYXJlbnROb2RlLCAnZmlndXJlLmltYWdlJykgPyBpbWFnZS5wYXJlbnROb2RlIDogaW1hZ2U7XHJcbiAgICAgICAgZWRpdG9yLmRvbS5yZW1vdmUoZWxtKTtcclxuICAgICAgICBlZGl0b3IuZm9jdXMoKTtcclxuICAgICAgICBlZGl0b3Iubm9kZUNoYW5nZWQoKTtcclxuICAgICAgICBpZiAoZWRpdG9yLmRvbS5pc0VtcHR5KGVkaXRvci5nZXRCb2R5KCkpKSB7XHJcbiAgICAgICAgICBlZGl0b3Iuc2V0Q29udGVudCgnJyk7XHJcbiAgICAgICAgICBlZGl0b3Iuc2VsZWN0aW9uLnNldEN1cnNvckxvY2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIHdyaXRlSW1hZ2VEYXRhVG9TZWxlY3Rpb24gPSBmdW5jdGlvbiAoZWRpdG9yLCBkYXRhKSB7XHJcbiAgICAgIHZhciBpbWFnZSA9IGdldFNlbGVjdGVkSW1hZ2UoZWRpdG9yKTtcclxuICAgICAgd3JpdGUoZnVuY3Rpb24gKGNzcykge1xyXG4gICAgICAgIHJldHVybiBub3JtYWxpemVDc3MkMShlZGl0b3IsIGNzcyk7XHJcbiAgICAgIH0sIGRhdGEsIGltYWdlKTtcclxuICAgICAgc3luY1NyY0F0dHIoZWRpdG9yLCBpbWFnZSk7XHJcbiAgICAgIGlmIChpc0ZpZ3VyZShpbWFnZS5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgIHZhciBmaWd1cmUgPSBpbWFnZS5wYXJlbnROb2RlO1xyXG4gICAgICAgIHNwbGl0VGV4dEJsb2NrKGVkaXRvciwgZmlndXJlKTtcclxuICAgICAgICBlZGl0b3Iuc2VsZWN0aW9uLnNlbGVjdChpbWFnZS5wYXJlbnROb2RlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBlZGl0b3Iuc2VsZWN0aW9uLnNlbGVjdChpbWFnZSk7XHJcbiAgICAgICAgd2FpdExvYWRJbWFnZShlZGl0b3IsIGRhdGEsIGltYWdlKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHZhciBzYW5pdGl6ZUltYWdlRGF0YSA9IGZ1bmN0aW9uIChlZGl0b3IsIGRhdGEpIHtcclxuICAgICAgdmFyIHNyYyA9IGRhdGEuc3JjO1xyXG4gICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIGRhdGEpLCB7IHNyYzogaXNTYWZlSW1hZ2VVcmwoZWRpdG9yLCBzcmMpID8gc3JjIDogJycgfSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGluc2VydE9yVXBkYXRlSW1hZ2UgPSBmdW5jdGlvbiAoZWRpdG9yLCBwYXJ0aWFsRGF0YSkge1xyXG4gICAgICB2YXIgaW1hZ2UgPSBnZXRTZWxlY3RlZEltYWdlKGVkaXRvcik7XHJcbiAgICAgIGlmIChpbWFnZSkge1xyXG4gICAgICAgIHZhciBzZWxlY3RlZEltYWdlRGF0YSA9IHJlYWQoZnVuY3Rpb24gKGNzcykge1xyXG4gICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZUNzcyQxKGVkaXRvciwgY3NzKTtcclxuICAgICAgICB9LCBpbWFnZSk7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc2VsZWN0ZWRJbWFnZURhdGEpLCBwYXJ0aWFsRGF0YSk7XHJcbiAgICAgICAgdmFyIHNhbml0aXplZERhdGEgPSBzYW5pdGl6ZUltYWdlRGF0YShlZGl0b3IsIGRhdGEpO1xyXG4gICAgICAgIGlmIChkYXRhLnNyYykge1xyXG4gICAgICAgICAgd3JpdGVJbWFnZURhdGFUb1NlbGVjdGlvbihlZGl0b3IsIHNhbml0aXplZERhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBkZWxldGVJbWFnZShlZGl0b3IsIGltYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAocGFydGlhbERhdGEuc3JjKSB7XHJcbiAgICAgICAgaW5zZXJ0SW1hZ2VBdENhcmV0KGVkaXRvciwgX19hc3NpZ24oX19hc3NpZ24oe30sIGRlZmF1bHREYXRhKCkpLCBwYXJ0aWFsRGF0YSkpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBkZWVwID0gZnVuY3Rpb24gKG9sZCwgbnUpIHtcclxuICAgICAgdmFyIGJvdGhPYmplY3RzID0gaXNPYmplY3Qob2xkKSAmJiBpc09iamVjdChudSk7XHJcbiAgICAgIHJldHVybiBib3RoT2JqZWN0cyA/IGRlZXBNZXJnZShvbGQsIG51KSA6IG51O1xyXG4gICAgfTtcclxuICAgIHZhciBiYXNlTWVyZ2UgPSBmdW5jdGlvbiAobWVyZ2VyKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG9iamVjdHMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgb2JqZWN0c1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2JqZWN0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuXFwndCBtZXJnZSB6ZXJvIG9iamVjdHMnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJldCA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqZWN0cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgdmFyIGN1ck9iamVjdCA9IG9iamVjdHNbal07XHJcbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gY3VyT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmIChoYXMoY3VyT2JqZWN0LCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgcmV0W2tleV0gPSBtZXJnZXIocmV0W2tleV0sIGN1ck9iamVjdFtrZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciBkZWVwTWVyZ2UgPSBiYXNlTWVyZ2UoZGVlcCk7XHJcblxyXG4gICAgdmFyIGlzTm90RW1wdHkgPSBmdW5jdGlvbiAocykge1xyXG4gICAgICByZXR1cm4gcy5sZW5ndGggPiAwO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZ2xvYmFsJDEgPSB0aW55bWNlLnV0aWwuVG9vbHMucmVzb2x2ZSgndGlueW1jZS51dGlsLkltYWdlVXBsb2FkZXInKTtcclxuXHJcbiAgICB2YXIgZ2xvYmFsID0gdGlueW1jZS51dGlsLlRvb2xzLnJlc29sdmUoJ3RpbnltY2UudXRpbC5Ub29scycpO1xyXG5cclxuICAgIHZhciBnZXRWYWx1ZSA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgIHJldHVybiBpc1N0cmluZyhpdGVtLnZhbHVlKSA/IGl0ZW0udmFsdWUgOiAnJztcclxuICAgIH07XHJcbiAgICB2YXIgZ2V0VGV4dCA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgIGlmIChpc1N0cmluZyhpdGVtLnRleHQpKSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0udGV4dDtcclxuICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhpdGVtLnRpdGxlKSkge1xyXG4gICAgICAgIHJldHVybiBpdGVtLnRpdGxlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHZhciBzYW5pdGl6ZUxpc3QgPSBmdW5jdGlvbiAobGlzdCwgZXh0cmFjdFZhbHVlKSB7XHJcbiAgICAgIHZhciBvdXQgPSBbXTtcclxuICAgICAgZ2xvYmFsLmVhY2gobGlzdCwgZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICB2YXIgdGV4dCA9IGdldFRleHQoaXRlbSk7XHJcbiAgICAgICAgaWYgKGl0ZW0ubWVudSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICB2YXIgaXRlbXMgPSBzYW5pdGl6ZUxpc3QoaXRlbS5tZW51LCBleHRyYWN0VmFsdWUpO1xyXG4gICAgICAgICAgb3V0LnB1c2goe1xyXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0LFxyXG4gICAgICAgICAgICBpdGVtczogaXRlbXNcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2YXIgdmFsdWUgPSBleHRyYWN0VmFsdWUoaXRlbSk7XHJcbiAgICAgICAgICBvdXQucHVzaCh7XHJcbiAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIG91dDtcclxuICAgIH07XHJcbiAgICB2YXIgc2FuaXRpemVyID0gZnVuY3Rpb24gKGV4dHJhY3Rvcikge1xyXG4gICAgICBpZiAoZXh0cmFjdG9yID09PSB2b2lkIDApIHtcclxuICAgICAgICBleHRyYWN0b3IgPSBnZXRWYWx1ZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGxpc3QpIHtcclxuICAgICAgICBpZiAobGlzdCkge1xyXG4gICAgICAgICAgcmV0dXJuIE9wdGlvbmFsLmZyb20obGlzdCkubWFwKGZ1bmN0aW9uIChsaXN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzYW5pdGl6ZUxpc3QobGlzdCwgZXh0cmFjdG9yKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gT3B0aW9uYWwubm9uZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH07XHJcbiAgICB2YXIgc2FuaXRpemUgPSBmdW5jdGlvbiAobGlzdCkge1xyXG4gICAgICByZXR1cm4gc2FuaXRpemVyKGdldFZhbHVlKShsaXN0KTtcclxuICAgIH07XHJcbiAgICB2YXIgaXNHcm91cCA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgIHJldHVybiBoYXMoaXRlbSwgJ2l0ZW1zJyk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGZpbmRFbnRyeURlbGVnYXRlID0gZnVuY3Rpb24gKGxpc3QsIHZhbHVlKSB7XHJcbiAgICAgIHJldHVybiBmaW5kTWFwKGxpc3QsIGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgaWYgKGlzR3JvdXAoaXRlbSkpIHtcclxuICAgICAgICAgIHJldHVybiBmaW5kRW50cnlEZWxlZ2F0ZShpdGVtLml0ZW1zLCB2YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLnZhbHVlID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgcmV0dXJuIE9wdGlvbmFsLnNvbWUoaXRlbSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBPcHRpb25hbC5ub25lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgICB2YXIgZmluZEVudHJ5ID0gZnVuY3Rpb24gKG9wdExpc3QsIHZhbHVlKSB7XHJcbiAgICAgIHJldHVybiBvcHRMaXN0LmJpbmQoZnVuY3Rpb24gKGxpc3QpIHtcclxuICAgICAgICByZXR1cm4gZmluZEVudHJ5RGVsZWdhdGUobGlzdCwgdmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgICB2YXIgTGlzdFV0aWxzID0ge1xyXG4gICAgICBzYW5pdGl6ZXI6IHNhbml0aXplcixcclxuICAgICAgc2FuaXRpemU6IHNhbml0aXplLFxyXG4gICAgICBmaW5kRW50cnk6IGZpbmRFbnRyeVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbWFrZVRhYiQyID0gZnVuY3Rpb24gKF9pbmZvKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdGl0bGU6ICdBZHZhbmNlZCcsXHJcbiAgICAgICAgbmFtZTogJ2FkdmFuY2VkJyxcclxuICAgICAgICBpdGVtczogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICB0eXBlOiAnaW5wdXQnLFxyXG4gICAgICAgICAgICBsYWJlbDogJ1N0eWxlJyxcclxuICAgICAgICAgICAgbmFtZTogJ3N0eWxlJ1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogJ2dyaWQnLFxyXG4gICAgICAgICAgICBjb2x1bW5zOiAyLFxyXG4gICAgICAgICAgICBpdGVtczogW1xyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdpbnB1dCcsXHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1ZlcnRpY2FsIHNwYWNlJyxcclxuICAgICAgICAgICAgICAgIG5hbWU6ICd2c3BhY2UnLFxyXG4gICAgICAgICAgICAgICAgaW5wdXRNb2RlOiAnbnVtZXJpYydcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdpbnB1dCcsXHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0hvcml6b250YWwgc3BhY2UnLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogJ2hzcGFjZScsXHJcbiAgICAgICAgICAgICAgICBpbnB1dE1vZGU6ICdudW1lcmljJ1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2lucHV0JyxcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnQm9yZGVyIHdpZHRoJyxcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdib3JkZXInLFxyXG4gICAgICAgICAgICAgICAgaW5wdXRNb2RlOiAnbnVtZXJpYydcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdsaXN0Ym94JyxcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdib3JkZXJzdHlsZScsXHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0JvcmRlciBzdHlsZScsXHJcbiAgICAgICAgICAgICAgICBpdGVtczogW1xyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1NlbGVjdC4uLicsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICcnXHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnU29saWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnc29saWQnXHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnRG90dGVkJyxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ2RvdHRlZCdcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdEYXNoZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnZGFzaGVkJ1xyXG4gICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0RvdWJsZScsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdkb3VibGUnXHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnR3Jvb3ZlJyxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ2dyb292ZSdcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdSaWRnZScsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdyaWRnZSdcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdJbnNldCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdpbnNldCdcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdPdXRzZXQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnb3V0c2V0J1xyXG4gICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ05vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnbm9uZSdcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdIaWRkZW4nLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnaGlkZGVuJ1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgXVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciBBZHZUYWIgPSB7IG1ha2VUYWI6IG1ha2VUYWIkMiB9O1xyXG5cclxuICAgIHZhciBjb2xsZWN0ID0gZnVuY3Rpb24gKGVkaXRvcikge1xyXG4gICAgICB2YXIgdXJsTGlzdFNhbml0aXplciA9IExpc3RVdGlscy5zYW5pdGl6ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4gZWRpdG9yLmNvbnZlcnRVUkwoaXRlbS52YWx1ZSB8fCBpdGVtLnVybCwgJ3NyYycpO1xyXG4gICAgICB9KTtcclxuICAgICAgdmFyIGZ1dHVyZUltYWdlTGlzdCA9IG5ldyBnbG9iYWwkNChmdW5jdGlvbiAoY29tcGxldGVyKSB7XHJcbiAgICAgICAgY3JlYXRlSW1hZ2VMaXN0KGVkaXRvciwgZnVuY3Rpb24gKGltYWdlTGlzdCkge1xyXG4gICAgICAgICAgY29tcGxldGVyKHVybExpc3RTYW5pdGl6ZXIoaW1hZ2VMaXN0KS5tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmbGF0dGVuKFtcclxuICAgICAgICAgICAgICBbe1xyXG4gICAgICAgICAgICAgICAgICB0ZXh0OiAnTm9uZScsXHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiAnJ1xyXG4gICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgaXRlbXNcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB2YXIgY2xhc3NMaXN0ID0gTGlzdFV0aWxzLnNhbml0aXplKGdldENsYXNzTGlzdChlZGl0b3IpKTtcclxuICAgICAgdmFyIGhhc0FkdlRhYiQxID0gaGFzQWR2VGFiKGVkaXRvcik7XHJcbiAgICAgIHZhciBoYXNVcGxvYWRUYWIkMSA9IGhhc1VwbG9hZFRhYihlZGl0b3IpO1xyXG4gICAgICB2YXIgaGFzVXBsb2FkVXJsJDEgPSBoYXNVcGxvYWRVcmwoZWRpdG9yKTtcclxuICAgICAgdmFyIGhhc1VwbG9hZEhhbmRsZXIkMSA9IGhhc1VwbG9hZEhhbmRsZXIoZWRpdG9yKTtcclxuICAgICAgdmFyIGltYWdlID0gcmVhZEltYWdlRGF0YUZyb21TZWxlY3Rpb24oZWRpdG9yKTtcclxuICAgICAgdmFyIGhhc0Rlc2NyaXB0aW9uJDEgPSBoYXNEZXNjcmlwdGlvbihlZGl0b3IpO1xyXG4gICAgICB2YXIgaGFzSW1hZ2VUaXRsZSQxID0gaGFzSW1hZ2VUaXRsZShlZGl0b3IpO1xyXG4gICAgICB2YXIgaGFzRGltZW5zaW9ucyQxID0gaGFzRGltZW5zaW9ucyhlZGl0b3IpO1xyXG4gICAgICB2YXIgaGFzSW1hZ2VDYXB0aW9uJDEgPSBoYXNJbWFnZUNhcHRpb24oZWRpdG9yKTtcclxuICAgICAgdmFyIGhhc0FjY2Vzc2liaWxpdHlPcHRpb25zID0gc2hvd0FjY2Vzc2liaWxpdHlPcHRpb25zKGVkaXRvcik7XHJcbiAgICAgIHZhciBhdXRvbWF0aWNVcGxvYWRzID0gaXNBdXRvbWF0aWNVcGxvYWRzRW5hYmxlZChlZGl0b3IpO1xyXG4gICAgICB2YXIgcHJlcGVuZFVSTCA9IE9wdGlvbmFsLnNvbWUoZ2V0UHJlcGVuZFVybChlZGl0b3IpKS5maWx0ZXIoZnVuY3Rpb24gKHByZVVybCkge1xyXG4gICAgICAgIHJldHVybiBpc1N0cmluZyhwcmVVcmwpICYmIHByZVVybC5sZW5ndGggPiAwO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGZ1dHVyZUltYWdlTGlzdC50aGVuKGZ1bmN0aW9uIChpbWFnZUxpc3QpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgaW1hZ2U6IGltYWdlLFxyXG4gICAgICAgICAgaW1hZ2VMaXN0OiBpbWFnZUxpc3QsXHJcbiAgICAgICAgICBjbGFzc0xpc3Q6IGNsYXNzTGlzdCxcclxuICAgICAgICAgIGhhc0FkdlRhYjogaGFzQWR2VGFiJDEsXHJcbiAgICAgICAgICBoYXNVcGxvYWRUYWI6IGhhc1VwbG9hZFRhYiQxLFxyXG4gICAgICAgICAgaGFzVXBsb2FkVXJsOiBoYXNVcGxvYWRVcmwkMSxcclxuICAgICAgICAgIGhhc1VwbG9hZEhhbmRsZXI6IGhhc1VwbG9hZEhhbmRsZXIkMSxcclxuICAgICAgICAgIGhhc0Rlc2NyaXB0aW9uOiBoYXNEZXNjcmlwdGlvbiQxLFxyXG4gICAgICAgICAgaGFzSW1hZ2VUaXRsZTogaGFzSW1hZ2VUaXRsZSQxLFxyXG4gICAgICAgICAgaGFzRGltZW5zaW9uczogaGFzRGltZW5zaW9ucyQxLFxyXG4gICAgICAgICAgaGFzSW1hZ2VDYXB0aW9uOiBoYXNJbWFnZUNhcHRpb24kMSxcclxuICAgICAgICAgIHByZXBlbmRVUkw6IHByZXBlbmRVUkwsXHJcbiAgICAgICAgICBoYXNBY2Nlc3NpYmlsaXR5T3B0aW9uczogaGFzQWNjZXNzaWJpbGl0eU9wdGlvbnMsXHJcbiAgICAgICAgICBhdXRvbWF0aWNVcGxvYWRzOiBhdXRvbWF0aWNVcGxvYWRzXHJcbiAgICAgICAgfTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBtYWtlSXRlbXMgPSBmdW5jdGlvbiAoaW5mbykge1xyXG4gICAgICB2YXIgaW1hZ2VVcmwgPSB7XHJcbiAgICAgICAgbmFtZTogJ3NyYycsXHJcbiAgICAgICAgdHlwZTogJ3VybGlucHV0JyxcclxuICAgICAgICBmaWxldHlwZTogJ2ltYWdlJyxcclxuICAgICAgICBsYWJlbDogJ1NvdXJjZSdcclxuICAgICAgfTtcclxuICAgICAgdmFyIGltYWdlTGlzdCA9IGluZm8uaW1hZ2VMaXN0Lm1hcChmdW5jdGlvbiAoaXRlbXMpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgbmFtZTogJ2ltYWdlcycsXHJcbiAgICAgICAgICB0eXBlOiAnbGlzdGJveCcsXHJcbiAgICAgICAgICBsYWJlbDogJ0ltYWdlIGxpc3QnLFxyXG4gICAgICAgICAgaXRlbXM6IGl0ZW1zXHJcbiAgICAgICAgfTtcclxuICAgICAgfSk7XHJcbiAgICAgIHZhciBpbWFnZURlc2NyaXB0aW9uID0ge1xyXG4gICAgICAgIG5hbWU6ICdhbHQnLFxyXG4gICAgICAgIHR5cGU6ICdpbnB1dCcsXHJcbiAgICAgICAgbGFiZWw6ICdBbHRlcm5hdGl2ZSBkZXNjcmlwdGlvbicsXHJcbiAgICAgICAgZGlzYWJsZWQ6IGluZm8uaGFzQWNjZXNzaWJpbGl0eU9wdGlvbnMgJiYgaW5mby5pbWFnZS5pc0RlY29yYXRpdmVcclxuICAgICAgfTtcclxuICAgICAgdmFyIGltYWdlVGl0bGUgPSB7XHJcbiAgICAgICAgbmFtZTogJ3RpdGxlJyxcclxuICAgICAgICB0eXBlOiAnaW5wdXQnLFxyXG4gICAgICAgIGxhYmVsOiAnSW1hZ2UgdGl0bGUnXHJcbiAgICAgIH07XHJcbiAgICAgIHZhciBpbWFnZURpbWVuc2lvbnMgPSB7XHJcbiAgICAgICAgbmFtZTogJ2RpbWVuc2lvbnMnLFxyXG4gICAgICAgIHR5cGU6ICdzaXplaW5wdXQnXHJcbiAgICAgIH07XHJcbiAgICAgIHZhciBpc0RlY29yYXRpdmUgPSB7XHJcbiAgICAgICAgdHlwZTogJ2xhYmVsJyxcclxuICAgICAgICBsYWJlbDogJ0FjY2Vzc2liaWxpdHknLFxyXG4gICAgICAgIGl0ZW1zOiBbe1xyXG4gICAgICAgICAgICBuYW1lOiAnaXNEZWNvcmF0aXZlJyxcclxuICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94JyxcclxuICAgICAgICAgICAgbGFiZWw6ICdJbWFnZSBpcyBkZWNvcmF0aXZlJ1xyXG4gICAgICAgICAgfV1cclxuICAgICAgfTtcclxuICAgICAgdmFyIGNsYXNzTGlzdCA9IGluZm8uY2xhc3NMaXN0Lm1hcChmdW5jdGlvbiAoaXRlbXMpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgbmFtZTogJ2NsYXNzZXMnLFxyXG4gICAgICAgICAgdHlwZTogJ2xpc3Rib3gnLFxyXG4gICAgICAgICAgbGFiZWw6ICdDbGFzcycsXHJcbiAgICAgICAgICBpdGVtczogaXRlbXNcclxuICAgICAgICB9O1xyXG4gICAgICB9KTtcclxuICAgICAgdmFyIGNhcHRpb24gPSB7XHJcbiAgICAgICAgdHlwZTogJ2xhYmVsJyxcclxuICAgICAgICBsYWJlbDogJ0NhcHRpb24nLFxyXG4gICAgICAgIGl0ZW1zOiBbe1xyXG4gICAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLFxyXG4gICAgICAgICAgICBuYW1lOiAnY2FwdGlvbicsXHJcbiAgICAgICAgICAgIGxhYmVsOiAnU2hvdyBjYXB0aW9uJ1xyXG4gICAgICAgICAgfV1cclxuICAgICAgfTtcclxuICAgICAgdmFyIGdldERpYWxvZ0NvbnRhaW5lclR5cGUgPSBmdW5jdGlvbiAodXNlQ29sdW1ucykge1xyXG4gICAgICAgIHJldHVybiB1c2VDb2x1bW5zID8ge1xyXG4gICAgICAgICAgdHlwZTogJ2dyaWQnLFxyXG4gICAgICAgICAgY29sdW1uczogMlxyXG4gICAgICAgIH0gOiB7IHR5cGU6ICdwYW5lbCcgfTtcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIGZsYXR0ZW4oW1xyXG4gICAgICAgIFtpbWFnZVVybF0sXHJcbiAgICAgICAgaW1hZ2VMaXN0LnRvQXJyYXkoKSxcclxuICAgICAgICBpbmZvLmhhc0FjY2Vzc2liaWxpdHlPcHRpb25zICYmIGluZm8uaGFzRGVzY3JpcHRpb24gPyBbaXNEZWNvcmF0aXZlXSA6IFtdLFxyXG4gICAgICAgIGluZm8uaGFzRGVzY3JpcHRpb24gPyBbaW1hZ2VEZXNjcmlwdGlvbl0gOiBbXSxcclxuICAgICAgICBpbmZvLmhhc0ltYWdlVGl0bGUgPyBbaW1hZ2VUaXRsZV0gOiBbXSxcclxuICAgICAgICBpbmZvLmhhc0RpbWVuc2lvbnMgPyBbaW1hZ2VEaW1lbnNpb25zXSA6IFtdLFxyXG4gICAgICAgIFtfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZ2V0RGlhbG9nQ29udGFpbmVyVHlwZShpbmZvLmNsYXNzTGlzdC5pc1NvbWUoKSAmJiBpbmZvLmhhc0ltYWdlQ2FwdGlvbikpLCB7XHJcbiAgICAgICAgICAgIGl0ZW1zOiBmbGF0dGVuKFtcclxuICAgICAgICAgICAgICBjbGFzc0xpc3QudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgIGluZm8uaGFzSW1hZ2VDYXB0aW9uID8gW2NhcHRpb25dIDogW11cclxuICAgICAgICAgICAgXSlcclxuICAgICAgICAgIH0pXVxyXG4gICAgICBdKTtcclxuICAgIH07XHJcbiAgICB2YXIgbWFrZVRhYiQxID0gZnVuY3Rpb24gKGluZm8pIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0aXRsZTogJ0dlbmVyYWwnLFxyXG4gICAgICAgIG5hbWU6ICdnZW5lcmFsJyxcclxuICAgICAgICBpdGVtczogbWFrZUl0ZW1zKGluZm8pXHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdmFyIE1haW5UYWIgPSB7XHJcbiAgICAgIG1ha2VUYWI6IG1ha2VUYWIkMSxcclxuICAgICAgbWFrZUl0ZW1zOiBtYWtlSXRlbXNcclxuICAgIH07XHJcblxyXG4gICAgdmFyIG1ha2VUYWIgPSBmdW5jdGlvbiAoX2luZm8pIHtcclxuICAgICAgdmFyIGl0ZW1zID0gW3tcclxuICAgICAgICAgIHR5cGU6ICdkcm9wem9uZScsXHJcbiAgICAgICAgICBuYW1lOiAnZmlsZWlucHV0J1xyXG4gICAgICAgIH1dO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHRpdGxlOiAnVXBsb2FkJyxcclxuICAgICAgICBuYW1lOiAndXBsb2FkJyxcclxuICAgICAgICBpdGVtczogaXRlbXNcclxuICAgICAgfTtcclxuICAgIH07XHJcbiAgICB2YXIgVXBsb2FkVGFiID0geyBtYWtlVGFiOiBtYWtlVGFiIH07XHJcblxyXG4gICAgdmFyIGNyZWF0ZVN0YXRlID0gZnVuY3Rpb24gKGluZm8pIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBwcmV2SW1hZ2U6IExpc3RVdGlscy5maW5kRW50cnkoaW5mby5pbWFnZUxpc3QsIGluZm8uaW1hZ2Uuc3JjKSxcclxuICAgICAgICBwcmV2QWx0OiBpbmZvLmltYWdlLmFsdCxcclxuICAgICAgICBvcGVuOiB0cnVlXHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdmFyIGZyb21JbWFnZURhdGEgPSBmdW5jdGlvbiAoaW1hZ2UpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzcmM6IHtcclxuICAgICAgICAgIHZhbHVlOiBpbWFnZS5zcmMsXHJcbiAgICAgICAgICBtZXRhOiB7fVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW1hZ2VzOiBpbWFnZS5zcmMsXHJcbiAgICAgICAgYWx0OiBpbWFnZS5hbHQsXHJcbiAgICAgICAgdGl0bGU6IGltYWdlLnRpdGxlLFxyXG4gICAgICAgIGRpbWVuc2lvbnM6IHtcclxuICAgICAgICAgIHdpZHRoOiBpbWFnZS53aWR0aCxcclxuICAgICAgICAgIGhlaWdodDogaW1hZ2UuaGVpZ2h0XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbGFzc2VzOiBpbWFnZS5jbGFzcyxcclxuICAgICAgICBjYXB0aW9uOiBpbWFnZS5jYXB0aW9uLFxyXG4gICAgICAgIHN0eWxlOiBpbWFnZS5zdHlsZSxcclxuICAgICAgICB2c3BhY2U6IGltYWdlLnZzcGFjZSxcclxuICAgICAgICBib3JkZXI6IGltYWdlLmJvcmRlcixcclxuICAgICAgICBoc3BhY2U6IGltYWdlLmhzcGFjZSxcclxuICAgICAgICBib3JkZXJzdHlsZTogaW1hZ2UuYm9yZGVyU3R5bGUsXHJcbiAgICAgICAgZmlsZWlucHV0OiBbXSxcclxuICAgICAgICBpc0RlY29yYXRpdmU6IGltYWdlLmlzRGVjb3JhdGl2ZVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciB0b0ltYWdlRGF0YSA9IGZ1bmN0aW9uIChkYXRhLCByZW1vdmVFbXB0eUFsdCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHNyYzogZGF0YS5zcmMudmFsdWUsXHJcbiAgICAgICAgYWx0OiBkYXRhLmFsdC5sZW5ndGggPT09IDAgJiYgcmVtb3ZlRW1wdHlBbHQgPyBudWxsIDogZGF0YS5hbHQsXHJcbiAgICAgICAgdGl0bGU6IGRhdGEudGl0bGUsXHJcbiAgICAgICAgd2lkdGg6IGRhdGEuZGltZW5zaW9ucy53aWR0aCxcclxuICAgICAgICBoZWlnaHQ6IGRhdGEuZGltZW5zaW9ucy5oZWlnaHQsXHJcbiAgICAgICAgY2xhc3M6IGRhdGEuY2xhc3NlcyxcclxuICAgICAgICBzdHlsZTogZGF0YS5zdHlsZSxcclxuICAgICAgICBjYXB0aW9uOiBkYXRhLmNhcHRpb24sXHJcbiAgICAgICAgaHNwYWNlOiBkYXRhLmhzcGFjZSxcclxuICAgICAgICB2c3BhY2U6IGRhdGEudnNwYWNlLFxyXG4gICAgICAgIGJvcmRlcjogZGF0YS5ib3JkZXIsXHJcbiAgICAgICAgYm9yZGVyU3R5bGU6IGRhdGEuYm9yZGVyc3R5bGUsXHJcbiAgICAgICAgaXNEZWNvcmF0aXZlOiBkYXRhLmlzRGVjb3JhdGl2ZVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciBhZGRQcmVwZW5kVXJsMiA9IGZ1bmN0aW9uIChpbmZvLCBzcmNVUkwpIHtcclxuICAgICAgaWYgKCEvXig/OlthLXpBLVpdKzopP1xcL1xcLy8udGVzdChzcmNVUkwpKSB7XHJcbiAgICAgICAgcmV0dXJuIGluZm8ucHJlcGVuZFVSTC5iaW5kKGZ1bmN0aW9uIChwcmVwZW5kVXJsKSB7XHJcbiAgICAgICAgICBpZiAoc3JjVVJMLnN1YnN0cmluZygwLCBwcmVwZW5kVXJsLmxlbmd0aCkgIT09IHByZXBlbmRVcmwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE9wdGlvbmFsLnNvbWUocHJlcGVuZFVybCArIHNyY1VSTCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gT3B0aW9uYWwubm9uZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBPcHRpb25hbC5ub25lKCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGFkZFByZXBlbmRVcmwgPSBmdW5jdGlvbiAoaW5mbywgYXBpKSB7XHJcbiAgICAgIHZhciBkYXRhID0gYXBpLmdldERhdGEoKTtcclxuICAgICAgYWRkUHJlcGVuZFVybDIoaW5mbywgZGF0YS5zcmMudmFsdWUpLmVhY2goZnVuY3Rpb24gKHNyY1VSTCkge1xyXG4gICAgICAgIGFwaS5zZXREYXRhKHtcclxuICAgICAgICAgIHNyYzoge1xyXG4gICAgICAgICAgICB2YWx1ZTogc3JjVVJMLFxyXG4gICAgICAgICAgICBtZXRhOiBkYXRhLnNyYy5tZXRhXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHZhciBmb3JtRmlsbEZyb21NZXRhMiA9IGZ1bmN0aW9uIChpbmZvLCBkYXRhLCBtZXRhKSB7XHJcbiAgICAgIGlmIChpbmZvLmhhc0Rlc2NyaXB0aW9uICYmIGlzU3RyaW5nKG1ldGEuYWx0KSkge1xyXG4gICAgICAgIGRhdGEuYWx0ID0gbWV0YS5hbHQ7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGluZm8uaGFzQWNjZXNzaWJpbGl0eU9wdGlvbnMpIHtcclxuICAgICAgICBkYXRhLmlzRGVjb3JhdGl2ZSA9IG1ldGEuaXNEZWNvcmF0aXZlIHx8IGRhdGEuaXNEZWNvcmF0aXZlIHx8IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChpbmZvLmhhc0ltYWdlVGl0bGUgJiYgaXNTdHJpbmcobWV0YS50aXRsZSkpIHtcclxuICAgICAgICBkYXRhLnRpdGxlID0gbWV0YS50aXRsZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaW5mby5oYXNEaW1lbnNpb25zKSB7XHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKG1ldGEud2lkdGgpKSB7XHJcbiAgICAgICAgICBkYXRhLmRpbWVuc2lvbnMud2lkdGggPSBtZXRhLndpZHRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNTdHJpbmcobWV0YS5oZWlnaHQpKSB7XHJcbiAgICAgICAgICBkYXRhLmRpbWVuc2lvbnMuaGVpZ2h0ID0gbWV0YS5oZWlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChpc1N0cmluZyhtZXRhLmNsYXNzKSkge1xyXG4gICAgICAgIExpc3RVdGlscy5maW5kRW50cnkoaW5mby5jbGFzc0xpc3QsIG1ldGEuY2xhc3MpLmVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICAgICAgICBkYXRhLmNsYXNzZXMgPSBlbnRyeS52YWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaW5mby5oYXNJbWFnZUNhcHRpb24pIHtcclxuICAgICAgICBpZiAoaXNCb29sZWFuKG1ldGEuY2FwdGlvbikpIHtcclxuICAgICAgICAgIGRhdGEuY2FwdGlvbiA9IG1ldGEuY2FwdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGluZm8uaGFzQWR2VGFiKSB7XHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKG1ldGEuc3R5bGUpKSB7XHJcbiAgICAgICAgICBkYXRhLnN0eWxlID0gbWV0YS5zdHlsZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKG1ldGEudnNwYWNlKSkge1xyXG4gICAgICAgICAgZGF0YS52c3BhY2UgPSBtZXRhLnZzcGFjZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKG1ldGEuYm9yZGVyKSkge1xyXG4gICAgICAgICAgZGF0YS5ib3JkZXIgPSBtZXRhLmJvcmRlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKG1ldGEuaHNwYWNlKSkge1xyXG4gICAgICAgICAgZGF0YS5oc3BhY2UgPSBtZXRhLmhzcGFjZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKG1ldGEuYm9yZGVyc3R5bGUpKSB7XHJcbiAgICAgICAgICBkYXRhLmJvcmRlcnN0eWxlID0gbWV0YS5ib3JkZXJzdHlsZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgZm9ybUZpbGxGcm9tTWV0YSA9IGZ1bmN0aW9uIChpbmZvLCBhcGkpIHtcclxuICAgICAgdmFyIGRhdGEgPSBhcGkuZ2V0RGF0YSgpO1xyXG4gICAgICB2YXIgbWV0YSA9IGRhdGEuc3JjLm1ldGE7XHJcbiAgICAgIGlmIChtZXRhICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2YXIgbmV3RGF0YSA9IGRlZXBNZXJnZSh7fSwgZGF0YSk7XHJcbiAgICAgICAgZm9ybUZpbGxGcm9tTWV0YTIoaW5mbywgbmV3RGF0YSwgbWV0YSk7XHJcbiAgICAgICAgYXBpLnNldERhdGEobmV3RGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgY2FsY3VsYXRlSW1hZ2VTaXplID0gZnVuY3Rpb24gKGhlbHBlcnMsIGluZm8sIHN0YXRlLCBhcGkpIHtcclxuICAgICAgdmFyIGRhdGEgPSBhcGkuZ2V0RGF0YSgpO1xyXG4gICAgICB2YXIgdXJsID0gZGF0YS5zcmMudmFsdWU7XHJcbiAgICAgIHZhciBtZXRhID0gZGF0YS5zcmMubWV0YSB8fCB7fTtcclxuICAgICAgaWYgKCFtZXRhLndpZHRoICYmICFtZXRhLmhlaWdodCAmJiBpbmZvLmhhc0RpbWVuc2lvbnMpIHtcclxuICAgICAgICBpZiAoaXNOb3RFbXB0eSh1cmwpKSB7XHJcbiAgICAgICAgICBoZWxwZXJzLmltYWdlU2l6ZSh1cmwpLnRoZW4oZnVuY3Rpb24gKHNpemUpIHtcclxuICAgICAgICAgICAgaWYgKHN0YXRlLm9wZW4pIHtcclxuICAgICAgICAgICAgICBhcGkuc2V0RGF0YSh7IGRpbWVuc2lvbnM6IHNpemUgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFwaS5zZXREYXRhKHtcclxuICAgICAgICAgICAgZGltZW5zaW9uczoge1xyXG4gICAgICAgICAgICAgIHdpZHRoOiAnJyxcclxuICAgICAgICAgICAgICBoZWlnaHQ6ICcnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHZhciB1cGRhdGVJbWFnZXNEcm9wZG93biA9IGZ1bmN0aW9uIChpbmZvLCBzdGF0ZSwgYXBpKSB7XHJcbiAgICAgIHZhciBkYXRhID0gYXBpLmdldERhdGEoKTtcclxuICAgICAgdmFyIGltYWdlID0gTGlzdFV0aWxzLmZpbmRFbnRyeShpbmZvLmltYWdlTGlzdCwgZGF0YS5zcmMudmFsdWUpO1xyXG4gICAgICBzdGF0ZS5wcmV2SW1hZ2UgPSBpbWFnZTtcclxuICAgICAgYXBpLnNldERhdGEoe1xyXG4gICAgICAgIGltYWdlczogaW1hZ2UubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xyXG4gICAgICAgICAgcmV0dXJuIGVudHJ5LnZhbHVlO1xyXG4gICAgICAgIH0pLmdldE9yKCcnKVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgICB2YXIgY2hhbmdlU3JjID0gZnVuY3Rpb24gKGhlbHBlcnMsIGluZm8sIHN0YXRlLCBhcGkpIHtcclxuICAgICAgYWRkUHJlcGVuZFVybChpbmZvLCBhcGkpO1xyXG4gICAgICBmb3JtRmlsbEZyb21NZXRhKGluZm8sIGFwaSk7XHJcbiAgICAgIGNhbGN1bGF0ZUltYWdlU2l6ZShoZWxwZXJzLCBpbmZvLCBzdGF0ZSwgYXBpKTtcclxuICAgICAgdXBkYXRlSW1hZ2VzRHJvcGRvd24oaW5mbywgc3RhdGUsIGFwaSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGNoYW5nZUltYWdlcyA9IGZ1bmN0aW9uIChoZWxwZXJzLCBpbmZvLCBzdGF0ZSwgYXBpKSB7XHJcbiAgICAgIHZhciBkYXRhID0gYXBpLmdldERhdGEoKTtcclxuICAgICAgdmFyIGltYWdlID0gTGlzdFV0aWxzLmZpbmRFbnRyeShpbmZvLmltYWdlTGlzdCwgZGF0YS5pbWFnZXMpO1xyXG4gICAgICBpbWFnZS5lYWNoKGZ1bmN0aW9uIChpbWcpIHtcclxuICAgICAgICB2YXIgdXBkYXRlQWx0ID0gZGF0YS5hbHQgPT09ICcnIHx8IHN0YXRlLnByZXZJbWFnZS5tYXAoZnVuY3Rpb24gKGltYWdlKSB7XHJcbiAgICAgICAgICByZXR1cm4gaW1hZ2UudGV4dCA9PT0gZGF0YS5hbHQ7XHJcbiAgICAgICAgfSkuZ2V0T3IoZmFsc2UpO1xyXG4gICAgICAgIGlmICh1cGRhdGVBbHQpIHtcclxuICAgICAgICAgIGlmIChpbWcudmFsdWUgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIGFwaS5zZXREYXRhKHtcclxuICAgICAgICAgICAgICBzcmM6IGltZyxcclxuICAgICAgICAgICAgICBhbHQ6IHN0YXRlLnByZXZBbHRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhcGkuc2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgc3JjOiBpbWcsXHJcbiAgICAgICAgICAgICAgYWx0OiBpbWcudGV4dFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYXBpLnNldERhdGEoeyBzcmM6IGltZyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBzdGF0ZS5wcmV2SW1hZ2UgPSBpbWFnZTtcclxuICAgICAgY2hhbmdlU3JjKGhlbHBlcnMsIGluZm8sIHN0YXRlLCBhcGkpO1xyXG4gICAgfTtcclxuICAgIHZhciBjYWxjVlNwYWNlID0gZnVuY3Rpb24gKGNzcykge1xyXG4gICAgICB2YXIgbWF0Y2hpbmdUb3BCb3R0b20gPSBjc3NbJ21hcmdpbi10b3AnXSAmJiBjc3NbJ21hcmdpbi1ib3R0b20nXSAmJiBjc3NbJ21hcmdpbi10b3AnXSA9PT0gY3NzWydtYXJnaW4tYm90dG9tJ107XHJcbiAgICAgIHJldHVybiBtYXRjaGluZ1RvcEJvdHRvbSA/IHJlbW92ZVBpeGVsU3VmZml4KFN0cmluZyhjc3NbJ21hcmdpbi10b3AnXSkpIDogJyc7XHJcbiAgICB9O1xyXG4gICAgdmFyIGNhbGNIU3BhY2UgPSBmdW5jdGlvbiAoY3NzKSB7XHJcbiAgICAgIHZhciBtYXRjaGluZ0xlZnRSaWdodCA9IGNzc1snbWFyZ2luLXJpZ2h0J10gJiYgY3NzWydtYXJnaW4tbGVmdCddICYmIGNzc1snbWFyZ2luLXJpZ2h0J10gPT09IGNzc1snbWFyZ2luLWxlZnQnXTtcclxuICAgICAgcmV0dXJuIG1hdGNoaW5nTGVmdFJpZ2h0ID8gcmVtb3ZlUGl4ZWxTdWZmaXgoU3RyaW5nKGNzc1snbWFyZ2luLXJpZ2h0J10pKSA6ICcnO1xyXG4gICAgfTtcclxuICAgIHZhciBjYWxjQm9yZGVyV2lkdGggPSBmdW5jdGlvbiAoY3NzKSB7XHJcbiAgICAgIHJldHVybiBjc3NbJ2JvcmRlci13aWR0aCddID8gcmVtb3ZlUGl4ZWxTdWZmaXgoU3RyaW5nKGNzc1snYm9yZGVyLXdpZHRoJ10pKSA6ICcnO1xyXG4gICAgfTtcclxuICAgIHZhciBjYWxjQm9yZGVyU3R5bGUgPSBmdW5jdGlvbiAoY3NzKSB7XHJcbiAgICAgIHJldHVybiBjc3NbJ2JvcmRlci1zdHlsZSddID8gU3RyaW5nKGNzc1snYm9yZGVyLXN0eWxlJ10pIDogJyc7XHJcbiAgICB9O1xyXG4gICAgdmFyIGNhbGNTdHlsZSA9IGZ1bmN0aW9uIChwYXJzZVN0eWxlLCBzZXJpYWxpemVTdHlsZSwgY3NzKSB7XHJcbiAgICAgIHJldHVybiBzZXJpYWxpemVTdHlsZShwYXJzZVN0eWxlKHNlcmlhbGl6ZVN0eWxlKGNzcykpKTtcclxuICAgIH07XHJcbiAgICB2YXIgY2hhbmdlU3R5bGUyID0gZnVuY3Rpb24gKHBhcnNlU3R5bGUsIHNlcmlhbGl6ZVN0eWxlLCBkYXRhKSB7XHJcbiAgICAgIHZhciBjc3MgPSBtZXJnZU1hcmdpbnMocGFyc2VTdHlsZShkYXRhLnN0eWxlKSk7XHJcbiAgICAgIHZhciBkYXRhQ29weSA9IGRlZXBNZXJnZSh7fSwgZGF0YSk7XHJcbiAgICAgIGRhdGFDb3B5LnZzcGFjZSA9IGNhbGNWU3BhY2UoY3NzKTtcclxuICAgICAgZGF0YUNvcHkuaHNwYWNlID0gY2FsY0hTcGFjZShjc3MpO1xyXG4gICAgICBkYXRhQ29weS5ib3JkZXIgPSBjYWxjQm9yZGVyV2lkdGgoY3NzKTtcclxuICAgICAgZGF0YUNvcHkuYm9yZGVyc3R5bGUgPSBjYWxjQm9yZGVyU3R5bGUoY3NzKTtcclxuICAgICAgZGF0YUNvcHkuc3R5bGUgPSBjYWxjU3R5bGUocGFyc2VTdHlsZSwgc2VyaWFsaXplU3R5bGUsIGNzcyk7XHJcbiAgICAgIHJldHVybiBkYXRhQ29weTtcclxuICAgIH07XHJcbiAgICB2YXIgY2hhbmdlU3R5bGUgPSBmdW5jdGlvbiAoaGVscGVycywgYXBpKSB7XHJcbiAgICAgIHZhciBkYXRhID0gYXBpLmdldERhdGEoKTtcclxuICAgICAgdmFyIG5ld0RhdGEgPSBjaGFuZ2VTdHlsZTIoaGVscGVycy5wYXJzZVN0eWxlLCBoZWxwZXJzLnNlcmlhbGl6ZVN0eWxlLCBkYXRhKTtcclxuICAgICAgYXBpLnNldERhdGEobmV3RGF0YSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGNoYW5nZUFTdHlsZSA9IGZ1bmN0aW9uIChoZWxwZXJzLCBpbmZvLCBhcGkpIHtcclxuICAgICAgdmFyIGRhdGEgPSBkZWVwTWVyZ2UoZnJvbUltYWdlRGF0YShpbmZvLmltYWdlKSwgYXBpLmdldERhdGEoKSk7XHJcbiAgICAgIHZhciBzdHlsZSA9IGdldFN0eWxlVmFsdWUoaGVscGVycy5ub3JtYWxpemVDc3MsIHRvSW1hZ2VEYXRhKGRhdGEsIGZhbHNlKSk7XHJcbiAgICAgIGFwaS5zZXREYXRhKHsgc3R5bGU6IHN0eWxlIH0pO1xyXG4gICAgfTtcclxuICAgIHZhciBjaGFuZ2VGaWxlSW5wdXQgPSBmdW5jdGlvbiAoaGVscGVycywgaW5mbywgc3RhdGUsIGFwaSkge1xyXG4gICAgICB2YXIgZGF0YSA9IGFwaS5nZXREYXRhKCk7XHJcbiAgICAgIGFwaS5ibG9jaygnVXBsb2FkaW5nIGltYWdlJyk7XHJcbiAgICAgIGhlYWQoZGF0YS5maWxlaW5wdXQpLmZvbGQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGFwaS51bmJsb2NrKCk7XHJcbiAgICAgIH0sIGZ1bmN0aW9uIChmaWxlKSB7XHJcbiAgICAgICAgdmFyIGJsb2JVcmkgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xyXG4gICAgICAgIHZhciBmaW5hbGl6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGFwaS51bmJsb2NrKCk7XHJcbiAgICAgICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKGJsb2JVcmkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHVwZGF0ZVNyY0FuZFN3aXRjaFRhYiA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICAgIGFwaS5zZXREYXRhKHtcclxuICAgICAgICAgICAgc3JjOiB7XHJcbiAgICAgICAgICAgICAgdmFsdWU6IHVybCxcclxuICAgICAgICAgICAgICBtZXRhOiB7fVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGFwaS5zaG93VGFiKCdnZW5lcmFsJyk7XHJcbiAgICAgICAgICBjaGFuZ2VTcmMoaGVscGVycywgaW5mbywgc3RhdGUsIGFwaSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBibG9iVG9EYXRhVXJpKGZpbGUpLnRoZW4oZnVuY3Rpb24gKGRhdGFVcmwpIHtcclxuICAgICAgICAgIHZhciBibG9iSW5mbyA9IGhlbHBlcnMuY3JlYXRlQmxvYkNhY2hlKGZpbGUsIGJsb2JVcmksIGRhdGFVcmwpO1xyXG4gICAgICAgICAgaWYgKGluZm8uYXV0b21hdGljVXBsb2Fkcykge1xyXG4gICAgICAgICAgICBoZWxwZXJzLnVwbG9hZEltYWdlKGJsb2JJbmZvKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICB1cGRhdGVTcmNBbmRTd2l0Y2hUYWIocmVzdWx0LnVybCk7XHJcbiAgICAgICAgICAgICAgZmluYWxpemUoKTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgIGZpbmFsaXplKCk7XHJcbiAgICAgICAgICAgICAgaGVscGVycy5hbGVydEVycihlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGhlbHBlcnMuYWRkVG9CbG9iQ2FjaGUoYmxvYkluZm8pO1xyXG4gICAgICAgICAgICB1cGRhdGVTcmNBbmRTd2l0Y2hUYWIoYmxvYkluZm8uYmxvYlVyaSgpKTtcclxuICAgICAgICAgICAgYXBpLnVuYmxvY2soKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGNoYW5nZUhhbmRsZXIgPSBmdW5jdGlvbiAoaGVscGVycywgaW5mbywgc3RhdGUpIHtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcGksIGV2dCkge1xyXG4gICAgICAgIGlmIChldnQubmFtZSA9PT0gJ3NyYycpIHtcclxuICAgICAgICAgIGNoYW5nZVNyYyhoZWxwZXJzLCBpbmZvLCBzdGF0ZSwgYXBpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGV2dC5uYW1lID09PSAnaW1hZ2VzJykge1xyXG4gICAgICAgICAgY2hhbmdlSW1hZ2VzKGhlbHBlcnMsIGluZm8sIHN0YXRlLCBhcGkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZXZ0Lm5hbWUgPT09ICdhbHQnKSB7XHJcbiAgICAgICAgICBzdGF0ZS5wcmV2QWx0ID0gYXBpLmdldERhdGEoKS5hbHQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChldnQubmFtZSA9PT0gJ3N0eWxlJykge1xyXG4gICAgICAgICAgY2hhbmdlU3R5bGUoaGVscGVycywgYXBpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGV2dC5uYW1lID09PSAndnNwYWNlJyB8fCBldnQubmFtZSA9PT0gJ2hzcGFjZScgfHwgZXZ0Lm5hbWUgPT09ICdib3JkZXInIHx8IGV2dC5uYW1lID09PSAnYm9yZGVyc3R5bGUnKSB7XHJcbiAgICAgICAgICBjaGFuZ2VBU3R5bGUoaGVscGVycywgaW5mbywgYXBpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGV2dC5uYW1lID09PSAnZmlsZWlucHV0Jykge1xyXG4gICAgICAgICAgY2hhbmdlRmlsZUlucHV0KGhlbHBlcnMsIGluZm8sIHN0YXRlLCBhcGkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZXZ0Lm5hbWUgPT09ICdpc0RlY29yYXRpdmUnKSB7XHJcbiAgICAgICAgICBpZiAoYXBpLmdldERhdGEoKS5pc0RlY29yYXRpdmUpIHtcclxuICAgICAgICAgICAgYXBpLmRpc2FibGUoJ2FsdCcpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYXBpLmVuYWJsZSgnYWx0Jyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciBjbG9zZUhhbmRsZXIgPSBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzdGF0ZS5vcGVuID0gZmFsc2U7XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdmFyIG1ha2VEaWFsb2dCb2R5ID0gZnVuY3Rpb24gKGluZm8pIHtcclxuICAgICAgaWYgKGluZm8uaGFzQWR2VGFiIHx8IGluZm8uaGFzVXBsb2FkVXJsIHx8IGluZm8uaGFzVXBsb2FkSGFuZGxlcikge1xyXG4gICAgICAgIHZhciB0YWJQYW5lbCA9IHtcclxuICAgICAgICAgIHR5cGU6ICd0YWJwYW5lbCcsXHJcbiAgICAgICAgICB0YWJzOiBmbGF0dGVuKFtcclxuICAgICAgICAgICAgW01haW5UYWIubWFrZVRhYihpbmZvKV0sXHJcbiAgICAgICAgICAgIGluZm8uaGFzQWR2VGFiID8gW0FkdlRhYi5tYWtlVGFiKGluZm8pXSA6IFtdLFxyXG4gICAgICAgICAgICBpbmZvLmhhc1VwbG9hZFRhYiAmJiAoaW5mby5oYXNVcGxvYWRVcmwgfHwgaW5mby5oYXNVcGxvYWRIYW5kbGVyKSA/IFtVcGxvYWRUYWIubWFrZVRhYihpbmZvKV0gOiBbXVxyXG4gICAgICAgICAgXSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB0YWJQYW5lbDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgcGFuZWwgPSB7XHJcbiAgICAgICAgICB0eXBlOiAncGFuZWwnLFxyXG4gICAgICAgICAgaXRlbXM6IE1haW5UYWIubWFrZUl0ZW1zKGluZm8pXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gcGFuZWw7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgbWFrZURpYWxvZyA9IGZ1bmN0aW9uIChoZWxwZXJzKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5mbykge1xyXG4gICAgICAgIHZhciBzdGF0ZSA9IGNyZWF0ZVN0YXRlKGluZm8pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB0aXRsZTogJ0luc2VydC9FZGl0IEltYWdlJyxcclxuICAgICAgICAgIHNpemU6ICdub3JtYWwnLFxyXG4gICAgICAgICAgYm9keTogbWFrZURpYWxvZ0JvZHkoaW5mbyksXHJcbiAgICAgICAgICBidXR0b25zOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICB0eXBlOiAnY2FuY2VsJyxcclxuICAgICAgICAgICAgICBuYW1lOiAnY2FuY2VsJyxcclxuICAgICAgICAgICAgICB0ZXh0OiAnQ2FuY2VsJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgdHlwZTogJ3N1Ym1pdCcsXHJcbiAgICAgICAgICAgICAgbmFtZTogJ3NhdmUnLFxyXG4gICAgICAgICAgICAgIHRleHQ6ICdTYXZlJyxcclxuICAgICAgICAgICAgICBwcmltYXJ5OiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF0sXHJcbiAgICAgICAgICBpbml0aWFsRGF0YTogZnJvbUltYWdlRGF0YShpbmZvLmltYWdlKSxcclxuICAgICAgICAgIG9uU3VibWl0OiBoZWxwZXJzLm9uU3VibWl0KGluZm8pLFxyXG4gICAgICAgICAgb25DaGFuZ2U6IGNoYW5nZUhhbmRsZXIoaGVscGVycywgaW5mbywgc3RhdGUpLFxyXG4gICAgICAgICAgb25DbG9zZTogY2xvc2VIYW5kbGVyKHN0YXRlKVxyXG4gICAgICAgIH07XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdmFyIHN1Ym1pdEhhbmRsZXIgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5mbykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXBpKSB7XHJcbiAgICAgICAgICB2YXIgZGF0YSA9IGRlZXBNZXJnZShmcm9tSW1hZ2VEYXRhKGluZm8uaW1hZ2UpLCBhcGkuZ2V0RGF0YSgpKTtcclxuICAgICAgICAgIGVkaXRvci5leGVjQ29tbWFuZCgnbWNlVXBkYXRlSW1hZ2UnLCBmYWxzZSwgdG9JbWFnZURhdGEoZGF0YSwgaW5mby5oYXNBY2Nlc3NpYmlsaXR5T3B0aW9ucykpO1xyXG4gICAgICAgICAgZWRpdG9yLmVkaXRvclVwbG9hZC51cGxvYWRJbWFnZXNBdXRvKCk7XHJcbiAgICAgICAgICBhcGkuY2xvc2UoKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciBpbWFnZVNpemUgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgaWYgKCFpc1NhZmVJbWFnZVVybChlZGl0b3IsIHVybCkpIHtcclxuICAgICAgICAgIHJldHVybiBnbG9iYWwkNC5yZXNvbHZlKHtcclxuICAgICAgICAgICAgd2lkdGg6ICcnLFxyXG4gICAgICAgICAgICBoZWlnaHQ6ICcnXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIGdldEltYWdlU2l6ZShlZGl0b3IuZG9jdW1lbnRCYXNlVVJJLnRvQWJzb2x1dGUodXJsKSkudGhlbihmdW5jdGlvbiAoZGltZW5zaW9ucykge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgIHdpZHRoOiBTdHJpbmcoZGltZW5zaW9ucy53aWR0aCksXHJcbiAgICAgICAgICAgICAgaGVpZ2h0OiBTdHJpbmcoZGltZW5zaW9ucy5oZWlnaHQpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdmFyIGNyZWF0ZUJsb2JDYWNoZSA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmaWxlLCBibG9iVXJpLCBkYXRhVXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIGVkaXRvci5lZGl0b3JVcGxvYWQuYmxvYkNhY2hlLmNyZWF0ZSh7XHJcbiAgICAgICAgICBibG9iOiBmaWxlLFxyXG4gICAgICAgICAgYmxvYlVyaTogYmxvYlVyaSxcclxuICAgICAgICAgIG5hbWU6IGZpbGUubmFtZSA/IGZpbGUubmFtZS5yZXBsYWNlKC9cXC5bXlxcLl0rJC8sICcnKSA6IG51bGwsXHJcbiAgICAgICAgICBmaWxlbmFtZTogZmlsZS5uYW1lLFxyXG4gICAgICAgICAgYmFzZTY0OiBkYXRhVXJsLnNwbGl0KCcsJylbMV1cclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH07XHJcbiAgICB2YXIgYWRkVG9CbG9iQ2FjaGUgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYmxvYkluZm8pIHtcclxuICAgICAgICBlZGl0b3IuZWRpdG9yVXBsb2FkLmJsb2JDYWNoZS5hZGQoYmxvYkluZm8pO1xyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciBhbGVydEVyciA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgZWRpdG9yLndpbmRvd01hbmFnZXIuYWxlcnQobWVzc2FnZSk7XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdmFyIG5vcm1hbGl6ZUNzcyA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjc3NUZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZUNzcyQxKGVkaXRvciwgY3NzVGV4dCk7XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdmFyIHBhcnNlU3R5bGUgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoY3NzVGV4dCkge1xyXG4gICAgICAgIHJldHVybiBlZGl0b3IuZG9tLnBhcnNlU3R5bGUoY3NzVGV4dCk7XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdmFyIHNlcmlhbGl6ZVN0eWxlID0gZnVuY3Rpb24gKGVkaXRvcikge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHN0eWxlc0FyZywgbmFtZSkge1xyXG4gICAgICAgIHJldHVybiBlZGl0b3IuZG9tLnNlcmlhbGl6ZVN0eWxlKHN0eWxlc0FyZywgbmFtZSk7XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdmFyIHVwbG9hZEltYWdlID0gZnVuY3Rpb24gKGVkaXRvcikge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGJsb2JJbmZvKSB7XHJcbiAgICAgICAgcmV0dXJuIGdsb2JhbCQxKGVkaXRvcikudXBsb2FkKFtibG9iSW5mb10sIGZhbHNlKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XHJcbiAgICAgICAgICBpZiAocmVzdWx0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbCQ0LnJlamVjdCgnRmFpbGVkIHRvIHVwbG9hZCBpbWFnZScpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHRzWzBdLnN0YXR1cyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbCQ0LnJlamVjdChyZXN1bHRzWzBdLmVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHNbMF07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdmFyIERpYWxvZyA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuICAgICAgdmFyIGhlbHBlcnMgPSB7XHJcbiAgICAgICAgb25TdWJtaXQ6IHN1Ym1pdEhhbmRsZXIoZWRpdG9yKSxcclxuICAgICAgICBpbWFnZVNpemU6IGltYWdlU2l6ZShlZGl0b3IpLFxyXG4gICAgICAgIGFkZFRvQmxvYkNhY2hlOiBhZGRUb0Jsb2JDYWNoZShlZGl0b3IpLFxyXG4gICAgICAgIGNyZWF0ZUJsb2JDYWNoZTogY3JlYXRlQmxvYkNhY2hlKGVkaXRvciksXHJcbiAgICAgICAgYWxlcnRFcnI6IGFsZXJ0RXJyKGVkaXRvciksXHJcbiAgICAgICAgbm9ybWFsaXplQ3NzOiBub3JtYWxpemVDc3MoZWRpdG9yKSxcclxuICAgICAgICBwYXJzZVN0eWxlOiBwYXJzZVN0eWxlKGVkaXRvciksXHJcbiAgICAgICAgc2VyaWFsaXplU3R5bGU6IHNlcmlhbGl6ZVN0eWxlKGVkaXRvciksXHJcbiAgICAgICAgdXBsb2FkSW1hZ2U6IHVwbG9hZEltYWdlKGVkaXRvcilcclxuICAgICAgfTtcclxuICAgICAgdmFyIG9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29sbGVjdChlZGl0b3IpLnRoZW4obWFrZURpYWxvZyhoZWxwZXJzKSkudGhlbihlZGl0b3Iud2luZG93TWFuYWdlci5vcGVuKTtcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIHsgb3Blbjogb3BlbiB9O1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgcmVnaXN0ZXIkMSA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuICAgICAgZWRpdG9yLmFkZENvbW1hbmQoJ21jZUltYWdlJywgRGlhbG9nKGVkaXRvcikub3Blbik7XHJcbiAgICAgIGVkaXRvci5hZGRDb21tYW5kKCdtY2VVcGRhdGVJbWFnZScsIGZ1bmN0aW9uIChfdWksIGRhdGEpIHtcclxuICAgICAgICBlZGl0b3IudW5kb01hbmFnZXIudHJhbnNhY3QoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgcmV0dXJuIGluc2VydE9yVXBkYXRlSW1hZ2UoZWRpdG9yLCBkYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBoYXNJbWFnZUNsYXNzID0gZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgdmFyIGNsYXNzTmFtZSA9IG5vZGUuYXR0cignY2xhc3MnKTtcclxuICAgICAgcmV0dXJuIGNsYXNzTmFtZSAmJiAvXFxiaW1hZ2VcXGIvLnRlc3QoY2xhc3NOYW1lKTtcclxuICAgIH07XHJcbiAgICB2YXIgdG9nZ2xlQ29udGVudEVkaXRhYmxlU3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChub2Rlcykge1xyXG4gICAgICAgIHZhciBpID0gbm9kZXMubGVuZ3RoO1xyXG4gICAgICAgIHZhciB0b2dnbGVDb250ZW50RWRpdGFibGUgPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgICAgbm9kZS5hdHRyKCdjb250ZW50ZWRpdGFibGUnLCBzdGF0ZSA/ICd0cnVlJyA6IG51bGwpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcclxuICAgICAgICAgIGlmIChoYXNJbWFnZUNsYXNzKG5vZGUpKSB7XHJcbiAgICAgICAgICAgIG5vZGUuYXR0cignY29udGVudGVkaXRhYmxlJywgc3RhdGUgPyAnZmFsc2UnIDogbnVsbCk7XHJcbiAgICAgICAgICAgIGdsb2JhbC5lYWNoKG5vZGUuZ2V0QWxsKCdmaWdjYXB0aW9uJyksIHRvZ2dsZUNvbnRlbnRFZGl0YWJsZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciBzZXR1cCA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuICAgICAgZWRpdG9yLm9uKCdQcmVJbml0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGVkaXRvci5wYXJzZXIuYWRkTm9kZUZpbHRlcignZmlndXJlJywgdG9nZ2xlQ29udGVudEVkaXRhYmxlU3RhdGUodHJ1ZSkpO1xyXG4gICAgICAgIGVkaXRvci5zZXJpYWxpemVyLmFkZE5vZGVGaWx0ZXIoJ2ZpZ3VyZScsIHRvZ2dsZUNvbnRlbnRFZGl0YWJsZVN0YXRlKGZhbHNlKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgcmVnaXN0ZXIgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcbiAgICAgIGVkaXRvci51aS5yZWdpc3RyeS5hZGRUb2dnbGVCdXR0b24oJ2ltYWdlJywge1xyXG4gICAgICAgIGljb246ICdpbWFnZScsXHJcbiAgICAgICAgdG9vbHRpcDogJ0luc2VydC9lZGl0IGltYWdlJyxcclxuICAgICAgICBvbkFjdGlvbjogRGlhbG9nKGVkaXRvcikub3BlbixcclxuICAgICAgICBvblNldHVwOiBmdW5jdGlvbiAoYnV0dG9uQXBpKSB7XHJcbiAgICAgICAgICBidXR0b25BcGkuc2V0QWN0aXZlKGlzTm9uTnVsbGFibGUoZ2V0U2VsZWN0ZWRJbWFnZShlZGl0b3IpKSk7XHJcbiAgICAgICAgICByZXR1cm4gZWRpdG9yLnNlbGVjdGlvbi5zZWxlY3RvckNoYW5nZWRXaXRoVW5iaW5kKCdpbWc6bm90KFtkYXRhLW1jZS1vYmplY3RdLFtkYXRhLW1jZS1wbGFjZWhvbGRlcl0pLGZpZ3VyZS5pbWFnZScsIGJ1dHRvbkFwaS5zZXRBY3RpdmUpLnVuYmluZDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBlZGl0b3IudWkucmVnaXN0cnkuYWRkTWVudUl0ZW0oJ2ltYWdlJywge1xyXG4gICAgICAgIGljb246ICdpbWFnZScsXHJcbiAgICAgICAgdGV4dDogJ0ltYWdlLi4uJyxcclxuICAgICAgICBvbkFjdGlvbjogRGlhbG9nKGVkaXRvcikub3BlblxyXG4gICAgICB9KTtcclxuICAgICAgZWRpdG9yLnVpLnJlZ2lzdHJ5LmFkZENvbnRleHRNZW51KCdpbWFnZScsIHtcclxuICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICByZXR1cm4gaXNGaWd1cmUoZWxlbWVudCkgfHwgaXNJbWFnZShlbGVtZW50KSAmJiAhaXNQbGFjZWhvbGRlckltYWdlKGVsZW1lbnQpID8gWydpbWFnZSddIDogW107XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gUGx1Z2luICgpIHtcclxuICAgICAgZ2xvYmFsJDYuYWRkKCdpbWFnZScsIGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuICAgICAgICBzZXR1cChlZGl0b3IpO1xyXG4gICAgICAgIHJlZ2lzdGVyKGVkaXRvcik7XHJcbiAgICAgICAgcmVnaXN0ZXIkMShlZGl0b3IpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBQbHVnaW4oKTtcclxuXHJcbn0oKSk7XHJcbiJdLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL2ltYWdlL3BsdWdpbi5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/image/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/tinymce/plugins/image/index.js");
/******/ 	
/******/ })()
;