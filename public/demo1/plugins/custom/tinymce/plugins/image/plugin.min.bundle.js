/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/image/plugin.min.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/image/plugin.min.js ***!
  \**********************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n!function () {\n  \"use strict\";\n\n  function e(r) {\n    return function (e) {\n      return n = _typeof(t = e), (null === t ? \"null\" : \"object\" == n && (Array.prototype.isPrototypeOf(t) || t.constructor && \"Array\" === t.constructor.name) ? \"array\" : \"object\" == n && (String.prototype.isPrototypeOf(t) || t.constructor && \"String\" === t.constructor.name) ? \"string\" : n) === r;\n      var t, n;\n    };\n  }\n\n  function t(t) {\n    return function (e) {\n      return _typeof(e) === t;\n    };\n  }\n\n  function D(e) {\n    return !(null == e);\n  }\n\n  function l() {}\n\n  function a(e) {\n    return function () {\n      return e;\n    };\n  }\n\n  function n(e) {\n    return e;\n  }\n\n  function r() {\n    return g;\n  }\n\n  var i,\n      o = tinymce.util.Tools.resolve(\"tinymce.PluginManager\"),\n      _v = function v() {\n    return (_v = Object.assign || function (e) {\n      for (var t, n = 1, r = arguments.length; n < r; n++) {\n        for (var i in t = arguments[n]) {\n          Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);\n        }\n      }\n\n      return e;\n    }).apply(this, arguments);\n  },\n      T = e(\"string\"),\n      s = e(\"object\"),\n      c = e(\"array\"),\n      N = t(\"boolean\"),\n      w = t(\"function\"),\n      u = t(\"number\"),\n      m = a(!1),\n      d = a(!(i = null)),\n      g = {\n    fold: function fold(e, t) {\n      return e();\n    },\n    isSome: m,\n    isNone: d,\n    getOr: n,\n    getOrThunk: p,\n    getOrDie: function getOrDie(e) {\n      throw new Error(e || \"error: getOrDie called on none.\");\n    },\n    getOrNull: a(null),\n    getOrUndefined: a(void 0),\n    or: n,\n    orThunk: p,\n    map: r,\n    each: l,\n    bind: r,\n    exists: m,\n    forall: d,\n    filter: function filter() {\n      return g;\n    },\n    toArray: function toArray() {\n      return [];\n    },\n    toString: a(\"none()\")\n  };\n\n  function p(e) {\n    return e();\n  }\n\n  function f(e, a, o, l) {\n    return function (e) {\n      for (var t = y(e), n = 0, r = t.length; n < r; n++) {\n        var i = t[n];\n        !function (e, t) {\n          (a(e, t) ? o : l)(e, t);\n        }(e[i], i);\n      }\n    }(e), 1;\n  }\n\n  function h(e, t) {\n    return A.call(e, t);\n  }\n\n  function S(e) {\n    for (var t = [], n = 0, r = e.length; n < r; ++n) {\n      if (!c(e[n])) throw new Error(\"Arr.flatten item \" + n + \" was not an array, input: \" + e);\n      U.apply(t, e[n]);\n    }\n\n    return t;\n  }\n\n  var b = function b(n) {\n    function e() {\n      return i;\n    }\n\n    function t(e) {\n      return e(n);\n    }\n\n    var r = a(n),\n        i = {\n      fold: function fold(e, t) {\n        return t(n);\n      },\n      isSome: d,\n      isNone: m,\n      getOr: r,\n      getOrThunk: r,\n      getOrDie: r,\n      getOrNull: r,\n      getOrUndefined: r,\n      or: e,\n      orThunk: e,\n      map: function map(e) {\n        return b(e(n));\n      },\n      each: function each(e) {\n        e(n);\n      },\n      bind: t,\n      exists: t,\n      forall: t,\n      filter: function filter(e) {\n        return e(n) ? i : g;\n      },\n      toArray: function toArray() {\n        return [n];\n      },\n      toString: function toString() {\n        return \"some(\" + n + \")\";\n      }\n    };\n    return i;\n  },\n      L = {\n    some: b,\n    none: r,\n    from: function from(e) {\n      return null == e ? g : b(e);\n    }\n  },\n      y = Object.keys,\n      A = Object.hasOwnProperty,\n      U = Array.prototype.push;\n\n  function I(e, t, n) {\n    !function (e, t, n) {\n      if (!(T(n) || N(n) || u(n))) throw console.error(\"Invalid call to Attribute.set. Key \", t, \":: Value \", n, \":: Element \", e), new Error(\"Attribute value was not simple\");\n      e.setAttribute(t, n + \"\");\n    }(e.dom, t, n);\n  }\n\n  function C(e) {\n    return e.getParam(\"image_dimensions\", !0, \"boolean\");\n  }\n\n  function x(e, t) {\n    return Math.max(parseInt(e, 10), parseInt(t, 10));\n  }\n\n  function O(e) {\n    return e && e.replace(/px$/, \"\");\n  }\n\n  function P(e) {\n    return 0 < e.length && /^[0-9]+$/.test(e) && (e += \"px\"), e;\n  }\n\n  function _(e) {\n    if (e.margin) {\n      var t = String(e.margin).split(\" \");\n\n      switch (t.length) {\n        case 1:\n          e[\"margin-top\"] = e[\"margin-top\"] || t[0], e[\"margin-right\"] = e[\"margin-right\"] || t[0], e[\"margin-bottom\"] = e[\"margin-bottom\"] || t[0], e[\"margin-left\"] = e[\"margin-left\"] || t[0];\n          break;\n\n        case 2:\n          e[\"margin-top\"] = e[\"margin-top\"] || t[0], e[\"margin-right\"] = e[\"margin-right\"] || t[1], e[\"margin-bottom\"] = e[\"margin-bottom\"] || t[0], e[\"margin-left\"] = e[\"margin-left\"] || t[1];\n          break;\n\n        case 3:\n          e[\"margin-top\"] = e[\"margin-top\"] || t[0], e[\"margin-right\"] = e[\"margin-right\"] || t[1], e[\"margin-bottom\"] = e[\"margin-bottom\"] || t[2], e[\"margin-left\"] = e[\"margin-left\"] || t[1];\n          break;\n\n        case 4:\n          e[\"margin-top\"] = e[\"margin-top\"] || t[0], e[\"margin-right\"] = e[\"margin-right\"] || t[1], e[\"margin-bottom\"] = e[\"margin-bottom\"] || t[2], e[\"margin-left\"] = e[\"margin-left\"] || t[3];\n      }\n\n      delete e.margin;\n    }\n\n    return e;\n  }\n\n  function E(e) {\n    return \"IMG\" === e.nodeName && (e.hasAttribute(\"data-mce-object\") || e.hasAttribute(\"data-mce-placeholder\"));\n  }\n\n  function R(e, t) {\n    return we.isDomSafe(t, \"img\", e.settings);\n  }\n\n  function k(e) {\n    return e.style.marginLeft && e.style.marginRight && e.style.marginLeft === e.style.marginRight ? O(e.style.marginLeft) : \"\";\n  }\n\n  function z(e) {\n    return e.style.marginTop && e.style.marginBottom && e.style.marginTop === e.style.marginBottom ? O(e.style.marginTop) : \"\";\n  }\n\n  function M(e) {\n    return e.style.borderWidth ? O(e.style.borderWidth) : \"\";\n  }\n\n  function j(e, t) {\n    return e.hasAttribute(t) ? e.getAttribute(t) : \"\";\n  }\n\n  function B(e, t) {\n    return e.style[t] || \"\";\n  }\n\n  function H(e) {\n    return null !== e.parentNode && \"FIGURE\" === e.parentNode.nodeName;\n  }\n\n  function F(e, t, n) {\n    \"\" === n ? e.removeAttribute(t) : e.setAttribute(t, n);\n  }\n\n  function G(e, t) {\n    var n = e.getAttribute(\"style\"),\n        r = t(null !== n ? n : \"\");\n    0 < r.length ? (e.setAttribute(\"style\", r), e.setAttribute(\"data-mce-style\", r)) : e.removeAttribute(\"style\");\n  }\n\n  function W(e, r) {\n    return function (e, t, n) {\n      e.style[t] ? (e.style[t] = P(n), G(e, r)) : F(e, t, n);\n    };\n  }\n\n  function V(e, t) {\n    return e.style[t] ? O(e.style[t]) : j(e, t);\n  }\n\n  function $(e, t) {\n    var n = P(t);\n    e.style.marginLeft = n, e.style.marginRight = n;\n  }\n\n  function J(e, t) {\n    var n = P(t);\n    e.style.marginTop = n, e.style.marginBottom = n;\n  }\n\n  function K(e, t) {\n    var n = P(t);\n    e.style.borderWidth = n;\n  }\n\n  function X(e, t) {\n    e.style.borderStyle = t;\n  }\n\n  function Z(e) {\n    return \"FIGURE\" === e.nodeName;\n  }\n\n  function q(e) {\n    return 0 === Ue.getAttrib(e, \"alt\").length && \"presentation\" === Ue.getAttrib(e, \"role\");\n  }\n\n  function Q() {\n    return {\n      src: \"\",\n      alt: \"\",\n      title: \"\",\n      width: \"\",\n      height: \"\",\n      \"class\": \"\",\n      style: \"\",\n      caption: !1,\n      hspace: \"\",\n      vspace: \"\",\n      border: \"\",\n      borderStyle: \"\",\n      isDecorative: !1\n    };\n  }\n\n  function Y(e, t) {\n    return {\n      src: j(t, \"src\"),\n      alt: q(n = t) ? \"\" : j(n, \"alt\"),\n      title: j(t, \"title\"),\n      width: V(t, \"width\"),\n      height: V(t, \"height\"),\n      \"class\": j(t, \"class\"),\n      style: e(j(t, \"style\")),\n      caption: H(t),\n      hspace: k(t),\n      vspace: z(t),\n      border: M(t),\n      borderStyle: B(t, \"borderStyle\"),\n      isDecorative: q(t)\n    };\n    var n;\n  }\n\n  function ee(e, t, n, r, i) {\n    n[r] !== t[r] && i(e, r, n[r]);\n  }\n\n  function te(r, i) {\n    return function (e, t, n) {\n      r(e, n), G(e, i);\n    };\n  }\n\n  function ne(e, t) {\n    var n = _(e.dom.styles.parse(t)),\n        r = e.dom.styles.parse(e.dom.styles.serialize(n));\n\n    return e.dom.styles.serialize(r);\n  }\n\n  function re(e) {\n    var t = e.selection.getNode(),\n        n = e.dom.getParent(t, \"figure.image\");\n    return n ? e.dom.select(\"img\", n)[0] : t && (\"IMG\" !== t.nodeName || E(t)) ? null : t;\n  }\n\n  function ie(n, e) {\n    var r,\n        t,\n        i = n.dom,\n        a = (f(n.schema.getTextBlockElements(), function (e, t) {\n      return !n.schema.isValidChild(t, \"figure\");\n    }, (r = t = {}, function (e, t) {\n      r[t] = e;\n    }), l), t),\n        o = i.getParent(e.parentNode, function (e) {\n      return h(t = a, n = e.nodeName) && null != t[n];\n      var t, n;\n    }, n.getBody());\n    return o ? i.split(o, e) : e;\n  }\n\n  function ae(r, e) {\n    var t = function (e) {\n      var t = document.createElement(\"img\");\n\n      if (Ce(function (e) {\n        return ne(r, e);\n      }, _v(_v({}, e), {\n        caption: !1\n      }), t), Ie(t, e.alt, e.isDecorative), e.caption) {\n        var n = Ue.create(\"figure\", {\n          \"class\": \"image\"\n        });\n        return n.appendChild(t), n.appendChild(Ue.create(\"figcaption\", {\n          contentEditable: \"true\"\n        }, \"Caption\")), n.contentEditable = \"false\", n;\n      }\n\n      return t;\n    }(e);\n\n    r.dom.setAttrib(t, \"data-mce-id\", \"__mcenew\"), r.focus(), r.selection.setContent(t.outerHTML);\n    var n,\n        i = r.dom.select('*[data-mce-id=\"__mcenew\"]')[0];\n    r.dom.setAttrib(i, \"data-mce-id\", null), Z(i) ? (n = ie(r, i), r.selection.select(n)) : r.selection.select(i);\n  }\n\n  function oe(t, e) {\n    var n,\n        r,\n        i,\n        a,\n        o,\n        l,\n        s,\n        c,\n        u,\n        m,\n        d,\n        g,\n        p,\n        f,\n        h,\n        b = re(t);\n\n    function y() {\n      f.onload = f.onerror = null, g.selection && (g.selection.select(f), g.nodeChanged());\n    }\n\n    b ? (n = Y(function (e) {\n      return ne(t, e);\n    }, b), r = _v(_v({}, n), e), s = t, c = r.src, i = _v(_v({}, r), {\n      src: R(s, c) ? c : \"\"\n    }), r.src ? (m = i, h = re(u = t), Ce(function (e) {\n      return ne(u, e);\n    }, m, h), u.dom.setAttrib(h, \"src\", h.getAttribute(\"src\")), Z(h.parentNode) ? (d = h.parentNode, ie(u, d), u.selection.select(h.parentNode)) : (u.selection.select(h), g = u, p = m, (f = h).onload = function () {\n      p.width || p.height || !C(g) || g.dom.setAttribs(f, {\n        width: String(f.clientWidth),\n        height: String(f.clientHeight)\n      }), y();\n    }, f.onerror = y)) : (a = t, (o = b) && (l = a.dom.is(o.parentNode, \"figure.image\") ? o.parentNode : o, a.dom.remove(l), a.focus(), a.nodeChanged(), a.dom.isEmpty(a.getBody()) && (a.setContent(\"\"), a.selection.setCursorLocation())))) : e.src && ae(t, _v(_v({}, Q()), e));\n  }\n\n  function le(e) {\n    return T(e.value) ? e.value : \"\";\n  }\n\n  function se(t) {\n    return void 0 === t && (t = le), function (e) {\n      return e ? L.from(e).map(function (e) {\n        return Ne(e, t);\n      }) : L.none();\n    };\n  }\n\n  function ce(e) {\n    var t = e.imageList.map(function (e) {\n      return {\n        name: \"images\",\n        type: \"listbox\",\n        label: \"Image list\",\n        items: e\n      };\n    }),\n        n = {\n      name: \"alt\",\n      type: \"input\",\n      label: \"Alternative description\",\n      disabled: e.hasAccessibilityOptions && e.image.isDecorative\n    },\n        r = e.classList.map(function (e) {\n      return {\n        name: \"classes\",\n        type: \"listbox\",\n        label: \"Class\",\n        items: e\n      };\n    });\n    return S([[{\n      name: \"src\",\n      type: \"urlinput\",\n      filetype: \"image\",\n      label: \"Source\"\n    }], t.toArray(), e.hasAccessibilityOptions && e.hasDescription ? [{\n      type: \"label\",\n      label: \"Accessibility\",\n      items: [{\n        name: \"isDecorative\",\n        type: \"checkbox\",\n        label: \"Image is decorative\"\n      }]\n    }] : [], e.hasDescription ? [n] : [], e.hasImageTitle ? [{\n      name: \"title\",\n      type: \"input\",\n      label: \"Image title\"\n    }] : [], e.hasDimensions ? [{\n      name: \"dimensions\",\n      type: \"sizeinput\"\n    }] : [], [_v(_v({}, e.classList.isSome() && e.hasImageCaption ? {\n      type: \"grid\",\n      columns: 2\n    } : {\n      type: \"panel\"\n    }), {\n      items: S([r.toArray(), e.hasImageCaption ? [{\n        type: \"label\",\n        label: \"Caption\",\n        items: [{\n          type: \"checkbox\",\n          name: \"caption\",\n          label: \"Show caption\"\n        }]\n      }] : []])\n    })]]);\n  }\n\n  function ue(e) {\n    return {\n      src: {\n        value: e.src,\n        meta: {}\n      },\n      images: e.src,\n      alt: e.alt,\n      title: e.title,\n      dimensions: {\n        width: e.width,\n        height: e.height\n      },\n      classes: e[\"class\"],\n      caption: e.caption,\n      style: e.style,\n      vspace: e.vspace,\n      border: e.border,\n      hspace: e.hspace,\n      borderstyle: e.borderStyle,\n      fileinput: [],\n      isDecorative: e.isDecorative\n    };\n  }\n\n  function me(e, t) {\n    return {\n      src: e.src.value,\n      alt: 0 === e.alt.length && t ? null : e.alt,\n      title: e.title,\n      width: e.dimensions.width,\n      height: e.dimensions.height,\n      \"class\": e.classes,\n      style: e.style,\n      caption: e.caption,\n      hspace: e.hspace,\n      vspace: e.vspace,\n      border: e.border,\n      borderStyle: e.borderstyle,\n      isDecorative: e.isDecorative\n    };\n  }\n\n  function de(e, t, n, r) {\n    var i, a, o, l, s, c, u, m, d, g, p, f, h, b, y, v, A, D, w, S, U, I, C, x, O;\n    U = t, C = (I = r).getData(), x = U, O = C.src.value, (/^(?:[a-zA-Z]+:)?\\/\\//.test(O) ? L.none() : x.prependURL.bind(function (e) {\n      return O.substring(0, e.length) !== e ? L.some(e + O) : L.none();\n    })).each(function (e) {\n      I.setData({\n        src: {\n          value: e,\n          meta: C.src.meta\n        }\n      });\n    }), h = t, w = (b = r).getData(), void 0 !== (S = w.src.meta) && (y = xe({}, w), A = y, D = S, (v = h).hasDescription && T(D.alt) && (A.alt = D.alt), v.hasAccessibilityOptions && (A.isDecorative = D.isDecorative || A.isDecorative || !1), v.hasImageTitle && T(D.title) && (A.title = D.title), v.hasDimensions && (T(D.width) && (A.dimensions.width = D.width), T(D.height) && (A.dimensions.height = D.height)), T(D[\"class\"]) && Ee(v.classList, D[\"class\"]).each(function (e) {\n      A.classes = e.value;\n    }), v.hasImageCaption && N(D.caption) && (A.caption = D.caption), v.hasAdvTab && (T(D.style) && (A.style = D.style), T(D.vspace) && (A.vspace = D.vspace), T(D.border) && (A.border = D.border), T(D.hspace) && (A.hspace = D.hspace), T(D.borderstyle) && (A.borderstyle = D.borderstyle)), b.setData(y)), i = e, a = t, o = n, c = (s = (l = r).getData()).src.value, (u = s.src.meta || {}).width || u.height || !a.hasDimensions || (0 < c.length ? i.imageSize(c).then(function (e) {\n      o.open && l.setData({\n        dimensions: e\n      });\n    })[\"catch\"](function (e) {\n      return console.error(e);\n    }) : l.setData({\n      dimensions: {\n        width: \"\",\n        height: \"\"\n      }\n    })), m = t, d = n, p = (g = r).getData(), f = Ee(m.imageList, p.src.value), d.prevImage = f, g.setData({\n      images: f.map(function (e) {\n        return e.value;\n      }).getOr(\"\")\n    });\n  }\n\n  function ge(l, s, t, c) {\n    var e,\n        n = c.getData();\n    c.block(\"Uploading image\"), (0 < (e = n.fileinput).length ? L.some(e[0]) : L.none()).fold(function () {\n      c.unblock();\n    }, function (n) {\n      function r() {\n        c.unblock(), URL.revokeObjectURL(a);\n      }\n\n      function i(e) {\n        c.setData({\n          src: {\n            value: e,\n            meta: {}\n          }\n        }), c.showTab(\"general\"), de(l, s, t, c);\n      }\n\n      var a = URL.createObjectURL(n),\n          o = n;\n      new De(function (e, t) {\n        var n = new FileReader();\n        n.onload = function () {\n          e(n.result);\n        }, n.onerror = function () {\n          t(n.error.message);\n        }, n.readAsDataURL(o);\n      }).then(function (e) {\n        var t = l.createBlobCache(n, a, e);\n        s.automaticUploads ? l.uploadImage(t).then(function (e) {\n          i(e.url), r();\n        })[\"catch\"](function (e) {\n          r(), l.alertErr(e);\n        }) : (l.addToBlobCache(t), i(t.blobUri()), c.unblock());\n      });\n    });\n  }\n\n  function pe(S, U, I) {\n    return function (e, t) {\n      var n, r, i, a, o, l, s, c, u, m, d, g, p, f, h, b, y, v, A, D, w;\n      \"src\" === t.name ? de(S, U, I, e) : \"images\" === t.name ? (c = S, u = U, m = I, g = (d = e).getData(), (p = Ee(u.imageList, g.images)).each(function (e) {\n        \"\" === g.alt || m.prevImage.map(function (e) {\n          return e.text === g.alt;\n        }).getOr(!1) ? \"\" === e.value ? d.setData({\n          src: e,\n          alt: m.prevAlt\n        }) : d.setData({\n          src: e,\n          alt: e.text\n        }) : d.setData({\n          src: e\n        });\n      }), m.prevImage = p, de(c, u, m, d)) : \"alt\" === t.name ? I.prevAlt = e.getData().alt : \"style\" === t.name ? (o = S, s = (l = e).getData(), y = o.parseStyle, v = o.serializeStyle, D = _(y((A = s).style)), (w = xe({}, A)).vspace = D[\"margin-top\"] && D[\"margin-bottom\"] && D[\"margin-top\"] === D[\"margin-bottom\"] ? O(String(D[\"margin-top\"])) : \"\", w.hspace = D[\"margin-right\"] && D[\"margin-left\"] && D[\"margin-right\"] === D[\"margin-left\"] ? O(String(D[\"margin-right\"])) : \"\", w.border = D[\"border-width\"] ? O(String(D[\"border-width\"])) : \"\", w.borderstyle = D[\"border-style\"] ? String(D[\"border-style\"]) : \"\", w.style = v(y(v(D))), l.setData(w)) : \"vspace\" === t.name || \"hspace\" === t.name || \"border\" === t.name || \"borderstyle\" === t.name ? (n = S, i = xe(ue(U.image), (r = e).getData()), f = n.normalizeCss, h = me(i, !1), F(b = document.createElement(\"img\"), \"style\", h.style), !k(b) && \"\" === h.hspace || $(b, h.hspace), !z(b) && \"\" === h.vspace || J(b, h.vspace), !M(b) && \"\" === h.border || K(b, h.border), !B(b, \"borderStyle\") && \"\" === h.borderStyle || X(b, h.borderStyle), a = f(b.getAttribute(\"style\")), r.setData({\n        style: a\n      })) : \"fileinput\" === t.name ? ge(S, U, I, e) : \"isDecorative\" === t.name && (e.getData().isDecorative ? e.disable(\"alt\") : e.enable(\"alt\"));\n    };\n  }\n\n  function fe(v) {\n    var t,\n        n,\n        r,\n        i,\n        a,\n        o,\n        l,\n        s,\n        c,\n        A = {\n      onSubmit: function onSubmit(n) {\n        return function (e) {\n          var t = xe(ue(n.image), e.getData());\n          c.execCommand(\"mceUpdateImage\", !1, me(t, n.hasAccessibilityOptions)), c.editorUpload.uploadImagesAuto(), e.close();\n        };\n      },\n      imageSize: function imageSize(e) {\n        return R(s, e) ? (i = s.documentBaseURI.toAbsolute(e), new De(function (t) {\n          function n(e) {\n            r.onload = r.onerror = null, r.parentNode && r.parentNode.removeChild(r), t(e);\n          }\n\n          var r = document.createElement(\"img\");\n          r.onload = function () {\n            var e = x(r.width, r.clientWidth),\n                t = x(r.height, r.clientHeight);\n            n(De.resolve({\n              width: e,\n              height: t\n            }));\n          }, r.onerror = function () {\n            n(De.reject(\"Failed to get image dimensions for: \" + i));\n          };\n          var e = r.style;\n          e.visibility = \"hidden\", e.position = \"fixed\", e.bottom = e.left = \"0px\", e.width = e.height = \"auto\", document.body.appendChild(r), r.src = i;\n        }).then(function (e) {\n          return {\n            width: String(e.width),\n            height: String(e.height)\n          };\n        })) : De.resolve({\n          width: \"\",\n          height: \"\"\n        });\n        var i;\n      },\n      addToBlobCache: function addToBlobCache(e) {\n        l.editorUpload.blobCache.add(e);\n      },\n      createBlobCache: function createBlobCache(e, t, n) {\n        return o.editorUpload.blobCache.create({\n          blob: e,\n          blobUri: t,\n          name: e.name ? e.name.replace(/\\.[^\\.]+$/, \"\") : null,\n          filename: e.name,\n          base64: n.split(\",\")[1]\n        });\n      },\n      alertErr: function alertErr(e) {\n        a.windowManager.alert(e);\n      },\n      normalizeCss: function normalizeCss(e) {\n        return ne(i, e);\n      },\n      parseStyle: function parseStyle(e) {\n        return r.dom.parseStyle(e);\n      },\n      serializeStyle: function serializeStyle(e, t) {\n        return n.dom.serializeStyle(e, t);\n      },\n      uploadImage: (t = n = r = i = a = o = l = s = c = v, function (e) {\n        return Oe(t).upload([e], !1).then(function (e) {\n          return 0 === e.length ? De.reject(\"Failed to upload image\") : !1 === e[0].status ? De.reject(e[0].error.message) : e[0];\n        });\n      })\n    };\n    return {\n      open: function open() {\n        var a, r, t, e, i, n, o, l, s, c, u, m, d, g, p, f, h, b, y;\n        r = v, i = Pe(function (e) {\n          return r.convertURL(e.value || e.url, \"src\");\n        }), n = new De(function (t) {\n          var n = function n(e) {\n            t(i(e).map(function (e) {\n              return S([[{\n                text: \"None\",\n                value: \"\"\n              }], e]);\n            }));\n          },\n              e = r.getParam(\"image_list\", !1);\n\n          T(e) ? Se.send({\n            url: e,\n            success: function success(e) {\n              n(JSON.parse(e));\n            }\n          }) : w(e) ? e(n) : n(e);\n        }), o = _e(r.getParam(\"image_class_list\")), l = r.getParam(\"image_advtab\", !1, \"boolean\"), s = r.getParam(\"image_uploadtab\", !0, \"boolean\"), c = D(r.getParam(\"images_upload_url\")), u = D(r.getParam(\"images_upload_handler\")), m = (e = re(t = r)) ? Y(function (e) {\n          return ne(t, e);\n        }, e) : Q(), d = r.getParam(\"image_description\", !0, \"boolean\"), g = r.getParam(\"image_title\", !1, \"boolean\"), p = C(r), f = r.getParam(\"image_caption\", !1, \"boolean\"), h = r.getParam(\"a11y_advanced_options\", !1, \"boolean\"), b = r.getParam(\"automatic_uploads\", !0, \"boolean\"), y = L.some(r.getParam(\"image_prepend_url\", \"\", \"string\")).filter(function (e) {\n          return T(e) && 0 < e.length;\n        }), n.then(function (e) {\n          return {\n            image: m,\n            imageList: e,\n            classList: o,\n            hasAdvTab: l,\n            hasUploadTab: s,\n            hasUploadUrl: c,\n            hasUploadHandler: u,\n            hasDescription: d,\n            hasImageTitle: g,\n            hasDimensions: p,\n            hasImageCaption: f,\n            prependURL: y,\n            hasAccessibilityOptions: h,\n            automaticUploads: b\n          };\n        }).then((a = A, function (e) {\n          var t,\n              n,\n              r,\n              i = {\n            prevImage: Ee((t = e).imageList, t.image.src),\n            prevAlt: t.image.alt,\n            open: !0\n          };\n          return {\n            title: \"Insert/Edit Image\",\n            size: \"normal\",\n            body: (r = e).hasAdvTab || r.hasUploadUrl || r.hasUploadHandler ? {\n              type: \"tabpanel\",\n              tabs: S([[ke(r)], r.hasAdvTab ? [Re(r)] : [], r.hasUploadTab && (r.hasUploadUrl || r.hasUploadHandler) ? [Me(r)] : []])\n            } : {\n              type: \"panel\",\n              items: ze(r)\n            },\n            buttons: [{\n              type: \"cancel\",\n              name: \"cancel\",\n              text: \"Cancel\"\n            }, {\n              type: \"submit\",\n              name: \"save\",\n              text: \"Save\",\n              primary: !0\n            }],\n            initialData: ue(e.image),\n            onSubmit: a.onSubmit(e),\n            onChange: pe(a, e, i),\n            onClose: (n = i, function () {\n              n.open = !1;\n            })\n          };\n        })).then(v.windowManager.open);\n      }\n    };\n  }\n\n  function he(a) {\n    return function (e) {\n      for (var t = e.length, n = function n(e) {\n        e.attr(\"contenteditable\", a ? \"true\" : null);\n      }; t--;) {\n        var r,\n            i = e[t];\n        (r = i.attr(\"class\")) && /\\bimage\\b/.test(r) && (i.attr(\"contenteditable\", a ? \"false\" : null), Te.each(i.getAll(\"figcaption\"), n));\n      }\n    };\n  }\n\n  \"undefined\" != typeof window || Function(\"return this;\")();\n\n  function be(e) {\n    if (null == e) throw new Error(\"Node cannot be null or undefined\");\n    return {\n      dom: e\n    };\n  }\n\n  var ye,\n      ve = be,\n      Ae = tinymce.util.Tools.resolve(\"tinymce.dom.DOMUtils\"),\n      De = tinymce.util.Tools.resolve(\"tinymce.util.Promise\"),\n      we = tinymce.util.Tools.resolve(\"tinymce.util.URI\"),\n      Se = tinymce.util.Tools.resolve(\"tinymce.util.XHR\"),\n      Ue = Ae.DOM,\n      Ie = function Ie(e, t, n) {\n    n ? (Ue.setAttrib(e, \"role\", \"presentation\"), I(ve(e), \"alt\", \"\")) : (i === t ? ve(e).dom.removeAttribute(\"alt\") : I(ve(e), \"alt\", t), \"presentation\" === Ue.getAttrib(e, \"role\") && Ue.setAttrib(e, \"role\", \"\"));\n  },\n      Ce = function Ce(e, t, n) {\n    var r = Y(e, n);\n    ee(n, r, t, \"caption\", function (e, t, n) {\n      return H(r = e) ? (o = r.parentNode, Ue.insertAfter(r, o), Ue.remove(o)) : (i = r, a = Ue.create(\"figure\", {\n        \"class\": \"image\"\n      }), Ue.insertAfter(a, i), a.appendChild(i), a.appendChild(Ue.create(\"figcaption\", {\n        contentEditable: \"true\"\n      }, \"Caption\")), a.contentEditable = \"false\"), 0;\n      var r, i, a, o;\n    }), ee(n, r, t, \"src\", F), ee(n, r, t, \"title\", F), ee(n, r, t, \"width\", W(0, e)), ee(n, r, t, \"height\", W(0, e)), ee(n, r, t, \"class\", F), ee(n, r, t, \"style\", te(function (e, t) {\n      return F(e, \"style\", t), 0;\n    }, e)), ee(n, r, t, \"hspace\", te($, e)), ee(n, r, t, \"vspace\", te(J, e)), ee(n, r, t, \"border\", te(K, e)), ee(n, r, t, \"borderStyle\", te(X, e)), t.alt === r.alt && t.isDecorative === r.isDecorative || Ie(n, t.alt, t.isDecorative);\n  },\n      xe = (ye = function ye(e, t) {\n    return s(e) && s(t) ? xe(e, t) : t;\n  }, function () {\n    for (var e = [], t = 0; t < arguments.length; t++) {\n      e[t] = arguments[t];\n    }\n\n    if (0 === e.length) throw new Error(\"Can't merge zero objects\");\n\n    for (var n = {}, r = 0; r < e.length; r++) {\n      var i,\n          a = e[r];\n\n      for (i in a) {\n        h(a, i) && (n[i] = ye(n[i], a[i]));\n      }\n    }\n\n    return n;\n  }),\n      Oe = tinymce.util.Tools.resolve(\"tinymce.util.ImageUploader\"),\n      Te = tinymce.util.Tools.resolve(\"tinymce.util.Tools\"),\n      Ne = function Ne(e, a) {\n    var o = [];\n    return Te.each(e, function (e) {\n      var t,\n          n,\n          r,\n          i = T((t = e).text) ? t.text : T(t.title) ? t.title : \"\";\n      void 0 !== e.menu ? (n = Ne(e.menu, a), o.push({\n        text: i,\n        items: n\n      })) : (r = a(e), o.push({\n        text: i,\n        value: r\n      }));\n    }), o;\n  },\n      Le = function Le(e, i) {\n    return function (e) {\n      for (var t, n = 0; n < e.length; n++) {\n        var r = h(t = e[n], \"items\") ? Le(t.items, i) : t.value === i ? L.some(t) : L.none();\n        if (r.isSome()) return r;\n      }\n\n      return L.none();\n    }(e);\n  },\n      Pe = se,\n      _e = function _e(e) {\n    return se(le)(e);\n  },\n      Ee = function Ee(e, t) {\n    return e.bind(function (e) {\n      return Le(e, t);\n    });\n  },\n      Re = function Re(e) {\n    return {\n      title: \"Advanced\",\n      name: \"advanced\",\n      items: [{\n        type: \"input\",\n        label: \"Style\",\n        name: \"style\"\n      }, {\n        type: \"grid\",\n        columns: 2,\n        items: [{\n          type: \"input\",\n          label: \"Vertical space\",\n          name: \"vspace\",\n          inputMode: \"numeric\"\n        }, {\n          type: \"input\",\n          label: \"Horizontal space\",\n          name: \"hspace\",\n          inputMode: \"numeric\"\n        }, {\n          type: \"input\",\n          label: \"Border width\",\n          name: \"border\",\n          inputMode: \"numeric\"\n        }, {\n          type: \"listbox\",\n          name: \"borderstyle\",\n          label: \"Border style\",\n          items: [{\n            text: \"Select...\",\n            value: \"\"\n          }, {\n            text: \"Solid\",\n            value: \"solid\"\n          }, {\n            text: \"Dotted\",\n            value: \"dotted\"\n          }, {\n            text: \"Dashed\",\n            value: \"dashed\"\n          }, {\n            text: \"Double\",\n            value: \"double\"\n          }, {\n            text: \"Groove\",\n            value: \"groove\"\n          }, {\n            text: \"Ridge\",\n            value: \"ridge\"\n          }, {\n            text: \"Inset\",\n            value: \"inset\"\n          }, {\n            text: \"Outset\",\n            value: \"outset\"\n          }, {\n            text: \"None\",\n            value: \"none\"\n          }, {\n            text: \"Hidden\",\n            value: \"hidden\"\n          }]\n        }]\n      }]\n    };\n  },\n      ke = function ke(e) {\n    return {\n      title: \"General\",\n      name: \"general\",\n      items: ce(e)\n    };\n  },\n      ze = ce,\n      Me = function Me(e) {\n    return {\n      title: \"Upload\",\n      name: \"upload\",\n      items: [{\n        type: \"dropzone\",\n        name: \"fileinput\"\n      }]\n    };\n  };\n\n  o.add(\"image\", function (e) {\n    var t, n, r;\n    (t = e).on(\"PreInit\", function () {\n      t.parser.addNodeFilter(\"figure\", he(!0)), t.serializer.addNodeFilter(\"figure\", he(!1));\n    }), (n = e).ui.registry.addToggleButton(\"image\", {\n      icon: \"image\",\n      tooltip: \"Insert/edit image\",\n      onAction: fe(n).open,\n      onSetup: function onSetup(e) {\n        return e.setActive(D(re(n))), n.selection.selectorChangedWithUnbind(\"img:not([data-mce-object],[data-mce-placeholder]),figure.image\", e.setActive).unbind;\n      }\n    }), n.ui.registry.addMenuItem(\"image\", {\n      icon: \"image\",\n      text: \"Image...\",\n      onAction: fe(n).open\n    }), n.ui.registry.addContextMenu(\"image\", {\n      update: function update(e) {\n        return Z(e) || \"IMG\" === e.nodeName && !E(e) ? [\"image\"] : [];\n      }\n    }), (r = e).addCommand(\"mceImage\", fe(r).open), r.addCommand(\"mceUpdateImage\", function (e, t) {\n      r.undoManager.transact(function () {\n        return oe(r, t);\n      });\n    });\n  });\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/image/plugin.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/image/plugin.min.js"]();
/******/ 	
/******/ })()
;