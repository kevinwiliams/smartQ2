/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/link/index.js":
/*!****************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/link/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Exports the \"link\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/link')\n//   ES2015:\n//     import 'tinymce/plugins/link'\n__webpack_require__(/*! ./plugin.js */ \"./resources/assets/core/plugins/custom/tinymce/plugins/link/plugin.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL2xpbmsvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLG1CQUFPLENBQUMsMEZBQUQsQ0FBUCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvY29yZS9wbHVnaW5zL2N1c3RvbS90aW55bWNlL3BsdWdpbnMvbGluay9pbmRleC5qcz82ZThkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEV4cG9ydHMgdGhlIFwibGlua1wiIHBsdWdpbiBmb3IgdXNhZ2Ugd2l0aCBtb2R1bGUgbG9hZGVyc1xyXG4vLyBVc2FnZTpcclxuLy8gICBDb21tb25KUzpcclxuLy8gICAgIHJlcXVpcmUoJ3RpbnltY2UvcGx1Z2lucy9saW5rJylcclxuLy8gICBFUzIwMTU6XHJcbi8vICAgICBpbXBvcnQgJ3RpbnltY2UvcGx1Z2lucy9saW5rJ1xyXG5yZXF1aXJlKCcuL3BsdWdpbi5qcycpOyJdLCJuYW1lcyI6WyJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/link/index.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/link/plugin.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/link/plugin.js ***!
  \*****************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var global$7 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n  var global$6 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n\n  var isType = function isType(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n\n  var isSimpleType = function isSimpleType(type) {\n    return function (value) {\n      return _typeof(value) === type;\n    };\n  };\n\n  var eq = function eq(t) {\n    return function (a) {\n      return t === a;\n    };\n  };\n\n  var isString = isType('string');\n  var isArray = isType('array');\n  var isNull = eq(null);\n  var isBoolean = isSimpleType('boolean');\n  var isFunction = isSimpleType('function');\n\n  var noop = function noop() {};\n\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  var tripleEquals = function tripleEquals(a, b) {\n    return a === b;\n  };\n\n  var never = constant(false);\n  var always = constant(true);\n\n  var none = function none() {\n    return NONE;\n  };\n\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n\n  var some = function some(a) {\n    var constant_a = constant(a);\n\n    var self = function self() {\n      return me;\n    };\n\n    var bind = function bind(f) {\n      return f(a);\n    };\n\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n  var nativeIndexOf = Array.prototype.indexOf;\n  var nativePush = Array.prototype.push;\n\n  var rawIndexOf = function rawIndexOf(ts, t) {\n    return nativeIndexOf.call(ts, t);\n  };\n\n  var contains = function contains(xs, x) {\n    return rawIndexOf(xs, x) > -1;\n  };\n\n  var map = function map(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n\n    return r;\n  };\n\n  var each$1 = function each$1(xs, f) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n\n  var foldl = function foldl(xs, f, acc) {\n    each$1(xs, function (x, i) {\n      acc = f(acc, x, i);\n    });\n    return acc;\n  };\n\n  var flatten = function flatten(xs) {\n    var r = [];\n\n    for (var i = 0, len = xs.length; i < len; ++i) {\n      if (!isArray(xs[i])) {\n        throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n      }\n\n      nativePush.apply(r, xs[i]);\n    }\n\n    return r;\n  };\n\n  var bind = function bind(xs, f) {\n    return flatten(map(xs, f));\n  };\n\n  var findMap = function findMap(arr, f) {\n    for (var i = 0; i < arr.length; i++) {\n      var r = f(arr[i], i);\n\n      if (r.isSome()) {\n        return r;\n      }\n    }\n\n    return Optional.none();\n  };\n\n  var is = function is(lhs, rhs, comparator) {\n    if (comparator === void 0) {\n      comparator = tripleEquals;\n    }\n\n    return lhs.exists(function (left) {\n      return comparator(left, rhs);\n    });\n  };\n\n  var cat = function cat(arr) {\n    var r = [];\n\n    var push = function push(x) {\n      r.push(x);\n    };\n\n    for (var i = 0; i < arr.length; i++) {\n      arr[i].each(push);\n    }\n\n    return r;\n  };\n\n  var someIf = function someIf(b, a) {\n    return b ? Optional.some(a) : Optional.none();\n  };\n\n  var assumeExternalTargets = function assumeExternalTargets(editor) {\n    var externalTargets = editor.getParam('link_assume_external_targets', false);\n\n    if (isBoolean(externalTargets) && externalTargets) {\n      return 1;\n    } else if (isString(externalTargets) && (externalTargets === 'http' || externalTargets === 'https')) {\n      return externalTargets;\n    }\n\n    return 0;\n  };\n\n  var hasContextToolbar = function hasContextToolbar(editor) {\n    return editor.getParam('link_context_toolbar', false, 'boolean');\n  };\n\n  var getLinkList = function getLinkList(editor) {\n    return editor.getParam('link_list');\n  };\n\n  var getDefaultLinkTarget = function getDefaultLinkTarget(editor) {\n    return editor.getParam('default_link_target');\n  };\n\n  var getTargetList = function getTargetList(editor) {\n    return editor.getParam('target_list', true);\n  };\n\n  var getRelList = function getRelList(editor) {\n    return editor.getParam('rel_list', [], 'array');\n  };\n\n  var getLinkClassList = function getLinkClassList(editor) {\n    return editor.getParam('link_class_list', [], 'array');\n  };\n\n  var shouldShowLinkTitle = function shouldShowLinkTitle(editor) {\n    return editor.getParam('link_title', true, 'boolean');\n  };\n\n  var allowUnsafeLinkTarget = function allowUnsafeLinkTarget(editor) {\n    return editor.getParam('allow_unsafe_link_target', false, 'boolean');\n  };\n\n  var useQuickLink = function useQuickLink(editor) {\n    return editor.getParam('link_quicklink', false, 'boolean');\n  };\n\n  var getDefaultLinkProtocol = function getDefaultLinkProtocol(editor) {\n    return editor.getParam('link_default_protocol', 'http', 'string');\n  };\n\n  var global$5 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n  var getValue = function getValue(item) {\n    return isString(item.value) ? item.value : '';\n  };\n\n  var getText = function getText(item) {\n    if (isString(item.text)) {\n      return item.text;\n    } else if (isString(item.title)) {\n      return item.title;\n    } else {\n      return '';\n    }\n  };\n\n  var sanitizeList = function sanitizeList(list, extractValue) {\n    var out = [];\n    global$5.each(list, function (item) {\n      var text = getText(item);\n\n      if (item.menu !== undefined) {\n        var items = sanitizeList(item.menu, extractValue);\n        out.push({\n          text: text,\n          items: items\n        });\n      } else {\n        var value = extractValue(item);\n        out.push({\n          text: text,\n          value: value\n        });\n      }\n    });\n    return out;\n  };\n\n  var sanitizeWith = function sanitizeWith(extracter) {\n    if (extracter === void 0) {\n      extracter = getValue;\n    }\n\n    return function (list) {\n      return Optional.from(list).map(function (list) {\n        return sanitizeList(list, extracter);\n      });\n    };\n  };\n\n  var sanitize = function sanitize(list) {\n    return sanitizeWith(getValue)(list);\n  };\n\n  var createUi = function createUi(name, label) {\n    return function (items) {\n      return {\n        name: name,\n        type: 'listbox',\n        label: label,\n        items: items\n      };\n    };\n  };\n\n  var ListOptions = {\n    sanitize: sanitize,\n    sanitizeWith: sanitizeWith,\n    createUi: createUi,\n    getValue: getValue\n  };\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) {\n          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n      }\n\n      return t;\n    };\n\n    return _assign.apply(this, arguments);\n  };\n\n  var keys = Object.keys;\n  var hasOwnProperty = Object.hasOwnProperty;\n\n  var each = function each(obj, f) {\n    var props = keys(obj);\n\n    for (var k = 0, len = props.length; k < len; k++) {\n      var i = props[k];\n      var x = obj[i];\n      f(x, i);\n    }\n  };\n\n  var objAcc = function objAcc(r) {\n    return function (x, i) {\n      r[i] = x;\n    };\n  };\n\n  var internalFilter = function internalFilter(obj, pred, onTrue, onFalse) {\n    var r = {};\n    each(obj, function (x, i) {\n      (pred(x, i) ? onTrue : onFalse)(x, i);\n    });\n    return r;\n  };\n\n  var filter = function filter(obj, pred) {\n    var t = {};\n    internalFilter(obj, pred, objAcc(t), noop);\n    return t;\n  };\n\n  var has = function has(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  var hasNonNullableKey = function hasNonNullableKey(obj, key) {\n    return has(obj, key) && obj[key] !== undefined && obj[key] !== null;\n  };\n\n  var global$4 = tinymce.util.Tools.resolve('tinymce.dom.TreeWalker');\n  var global$3 = tinymce.util.Tools.resolve('tinymce.util.URI');\n\n  var isAnchor = function isAnchor(elm) {\n    return elm && elm.nodeName.toLowerCase() === 'a';\n  };\n\n  var isLink = function isLink(elm) {\n    return isAnchor(elm) && !!getHref(elm);\n  };\n\n  var collectNodesInRange = function collectNodesInRange(rng, predicate) {\n    if (rng.collapsed) {\n      return [];\n    } else {\n      var contents = rng.cloneContents();\n      var walker = new global$4(contents.firstChild, contents);\n      var elements = [];\n      var current = contents.firstChild;\n\n      do {\n        if (predicate(current)) {\n          elements.push(current);\n        }\n      } while (current = walker.next());\n\n      return elements;\n    }\n  };\n\n  var hasProtocol = function hasProtocol(url) {\n    return /^\\w+:/i.test(url);\n  };\n\n  var getHref = function getHref(elm) {\n    var href = elm.getAttribute('data-mce-href');\n    return href ? href : elm.getAttribute('href');\n  };\n\n  var applyRelTargetRules = function applyRelTargetRules(rel, isUnsafe) {\n    var rules = ['noopener'];\n    var rels = rel ? rel.split(/\\s+/) : [];\n\n    var toString = function toString(rels) {\n      return global$5.trim(rels.sort().join(' '));\n    };\n\n    var addTargetRules = function addTargetRules(rels) {\n      rels = removeTargetRules(rels);\n      return rels.length > 0 ? rels.concat(rules) : rules;\n    };\n\n    var removeTargetRules = function removeTargetRules(rels) {\n      return rels.filter(function (val) {\n        return global$5.inArray(rules, val) === -1;\n      });\n    };\n\n    var newRels = isUnsafe ? addTargetRules(rels) : removeTargetRules(rels);\n    return newRels.length > 0 ? toString(newRels) : '';\n  };\n\n  var trimCaretContainers = function trimCaretContainers(text) {\n    return text.replace(/\\uFEFF/g, '');\n  };\n\n  var getAnchorElement = function getAnchorElement(editor, selectedElm) {\n    selectedElm = selectedElm || editor.selection.getNode();\n\n    if (isImageFigure(selectedElm)) {\n      return editor.dom.select('a[href]', selectedElm)[0];\n    } else {\n      return editor.dom.getParent(selectedElm, 'a[href]');\n    }\n  };\n\n  var getAnchorText = function getAnchorText(selection, anchorElm) {\n    var text = anchorElm ? anchorElm.innerText || anchorElm.textContent : selection.getContent({\n      format: 'text'\n    });\n    return trimCaretContainers(text);\n  };\n\n  var hasLinks = function hasLinks(elements) {\n    return global$5.grep(elements, isLink).length > 0;\n  };\n\n  var hasLinksInSelection = function hasLinksInSelection(rng) {\n    return collectNodesInRange(rng, isLink).length > 0;\n  };\n\n  var isOnlyTextSelected = function isOnlyTextSelected(editor) {\n    var inlineTextElements = editor.schema.getTextInlineElements();\n\n    var isElement = function isElement(elm) {\n      return elm.nodeType === 1 && !isAnchor(elm) && !has(inlineTextElements, elm.nodeName.toLowerCase());\n    };\n\n    var elements = collectNodesInRange(editor.selection.getRng(), isElement);\n    return elements.length === 0;\n  };\n\n  var isImageFigure = function isImageFigure(elm) {\n    return elm && elm.nodeName === 'FIGURE' && /\\bimage\\b/i.test(elm.className);\n  };\n\n  var getLinkAttrs = function getLinkAttrs(data) {\n    var attrs = ['title', 'rel', 'class', 'target'];\n    return foldl(attrs, function (acc, key) {\n      data[key].each(function (value) {\n        acc[key] = value.length > 0 ? value : null;\n      });\n      return acc;\n    }, {\n      href: data.href\n    });\n  };\n\n  var handleExternalTargets = function handleExternalTargets(href, assumeExternalTargets) {\n    if ((assumeExternalTargets === 'http' || assumeExternalTargets === 'https') && !hasProtocol(href)) {\n      return assumeExternalTargets + '://' + href;\n    }\n\n    return href;\n  };\n\n  var applyLinkOverrides = function applyLinkOverrides(editor, linkAttrs) {\n    var newLinkAttrs = _assign({}, linkAttrs);\n\n    if (!(getRelList(editor).length > 0) && allowUnsafeLinkTarget(editor) === false) {\n      var newRel = applyRelTargetRules(newLinkAttrs.rel, newLinkAttrs.target === '_blank');\n      newLinkAttrs.rel = newRel ? newRel : null;\n    }\n\n    if (Optional.from(newLinkAttrs.target).isNone() && getTargetList(editor) === false) {\n      newLinkAttrs.target = getDefaultLinkTarget(editor);\n    }\n\n    newLinkAttrs.href = handleExternalTargets(newLinkAttrs.href, assumeExternalTargets(editor));\n    return newLinkAttrs;\n  };\n\n  var updateLink = function updateLink(editor, anchorElm, text, linkAttrs) {\n    text.each(function (text) {\n      if (has(anchorElm, 'innerText')) {\n        anchorElm.innerText = text;\n      } else {\n        anchorElm.textContent = text;\n      }\n    });\n    editor.dom.setAttribs(anchorElm, linkAttrs);\n    editor.selection.select(anchorElm);\n  };\n\n  var createLink = function createLink(editor, selectedElm, text, linkAttrs) {\n    if (isImageFigure(selectedElm)) {\n      linkImageFigure(editor, selectedElm, linkAttrs);\n    } else {\n      text.fold(function () {\n        editor.execCommand('mceInsertLink', false, linkAttrs);\n      }, function (text) {\n        editor.insertContent(editor.dom.createHTML('a', linkAttrs, editor.dom.encode(text)));\n      });\n    }\n  };\n\n  var linkDomMutation = function linkDomMutation(editor, attachState, data) {\n    var selectedElm = editor.selection.getNode();\n    var anchorElm = getAnchorElement(editor, selectedElm);\n    var linkAttrs = applyLinkOverrides(editor, getLinkAttrs(data));\n    editor.undoManager.transact(function () {\n      if (data.href === attachState.href) {\n        attachState.attach();\n      }\n\n      if (anchorElm) {\n        editor.focus();\n        updateLink(editor, anchorElm, data.text, linkAttrs);\n      } else {\n        createLink(editor, selectedElm, data.text, linkAttrs);\n      }\n    });\n  };\n\n  var unlinkSelection = function unlinkSelection(editor) {\n    var dom = editor.dom,\n        selection = editor.selection;\n    var bookmark = selection.getBookmark();\n    var rng = selection.getRng().cloneRange();\n    var startAnchorElm = dom.getParent(rng.startContainer, 'a[href]', editor.getBody());\n    var endAnchorElm = dom.getParent(rng.endContainer, 'a[href]', editor.getBody());\n\n    if (startAnchorElm) {\n      rng.setStartBefore(startAnchorElm);\n    }\n\n    if (endAnchorElm) {\n      rng.setEndAfter(endAnchorElm);\n    }\n\n    selection.setRng(rng);\n    editor.execCommand('unlink');\n    selection.moveToBookmark(bookmark);\n  };\n\n  var unlinkDomMutation = function unlinkDomMutation(editor) {\n    editor.undoManager.transact(function () {\n      var node = editor.selection.getNode();\n\n      if (isImageFigure(node)) {\n        unlinkImageFigure(editor, node);\n      } else {\n        unlinkSelection(editor);\n      }\n\n      editor.focus();\n    });\n  };\n\n  var unwrapOptions = function unwrapOptions(data) {\n    var cls = data[\"class\"],\n        href = data.href,\n        rel = data.rel,\n        target = data.target,\n        text = data.text,\n        title = data.title;\n    return filter({\n      \"class\": cls.getOrNull(),\n      href: href,\n      rel: rel.getOrNull(),\n      target: target.getOrNull(),\n      text: text.getOrNull(),\n      title: title.getOrNull()\n    }, function (v, _k) {\n      return isNull(v) === false;\n    });\n  };\n\n  var sanitizeData = function sanitizeData(editor, data) {\n    var href = data.href;\n    return _assign(_assign({}, data), {\n      href: global$3.isDomSafe(href, 'a', editor.settings) ? href : ''\n    });\n  };\n\n  var link = function link(editor, attachState, data) {\n    var sanitizedData = sanitizeData(editor, data);\n    editor.hasPlugin('rtc', true) ? editor.execCommand('createlink', false, unwrapOptions(sanitizedData)) : linkDomMutation(editor, attachState, sanitizedData);\n  };\n\n  var unlink = function unlink(editor) {\n    editor.hasPlugin('rtc', true) ? editor.execCommand('unlink') : unlinkDomMutation(editor);\n  };\n\n  var unlinkImageFigure = function unlinkImageFigure(editor, fig) {\n    var img = editor.dom.select('img', fig)[0];\n\n    if (img) {\n      var a = editor.dom.getParents(img, 'a[href]', fig)[0];\n\n      if (a) {\n        a.parentNode.insertBefore(img, a);\n        editor.dom.remove(a);\n      }\n    }\n  };\n\n  var linkImageFigure = function linkImageFigure(editor, fig, attrs) {\n    var img = editor.dom.select('img', fig)[0];\n\n    if (img) {\n      var a = editor.dom.create('a', attrs);\n      img.parentNode.insertBefore(a, img);\n      a.appendChild(img);\n    }\n  };\n\n  var isListGroup = function isListGroup(item) {\n    return hasNonNullableKey(item, 'items');\n  };\n\n  var findTextByValue = function findTextByValue(value, catalog) {\n    return findMap(catalog, function (item) {\n      if (isListGroup(item)) {\n        return findTextByValue(value, item.items);\n      } else {\n        return someIf(item.value === value, item);\n      }\n    });\n  };\n\n  var getDelta = function getDelta(persistentText, fieldName, catalog, data) {\n    var value = data[fieldName];\n    var hasPersistentText = persistentText.length > 0;\n    return value !== undefined ? findTextByValue(value, catalog).map(function (i) {\n      return {\n        url: {\n          value: i.value,\n          meta: {\n            text: hasPersistentText ? persistentText : i.text,\n            attach: noop\n          }\n        },\n        text: hasPersistentText ? persistentText : i.text\n      };\n    }) : Optional.none();\n  };\n\n  var findCatalog = function findCatalog(catalogs, fieldName) {\n    if (fieldName === 'link') {\n      return catalogs.link;\n    } else if (fieldName === 'anchor') {\n      return catalogs.anchor;\n    } else {\n      return Optional.none();\n    }\n  };\n\n  var init = function init(initialData, linkCatalog) {\n    var persistentData = {\n      text: initialData.text,\n      title: initialData.title\n    };\n\n    var getTitleFromUrlChange = function getTitleFromUrlChange(url) {\n      return someIf(persistentData.title.length <= 0, Optional.from(url.meta.title).getOr(''));\n    };\n\n    var getTextFromUrlChange = function getTextFromUrlChange(url) {\n      return someIf(persistentData.text.length <= 0, Optional.from(url.meta.text).getOr(url.value));\n    };\n\n    var onUrlChange = function onUrlChange(data) {\n      var text = getTextFromUrlChange(data.url);\n      var title = getTitleFromUrlChange(data.url);\n\n      if (text.isSome() || title.isSome()) {\n        return Optional.some(_assign(_assign({}, text.map(function (text) {\n          return {\n            text: text\n          };\n        }).getOr({})), title.map(function (title) {\n          return {\n            title: title\n          };\n        }).getOr({})));\n      } else {\n        return Optional.none();\n      }\n    };\n\n    var onCatalogChange = function onCatalogChange(data, change) {\n      var catalog = findCatalog(linkCatalog, change.name).getOr([]);\n      return getDelta(persistentData.text, change.name, catalog, data);\n    };\n\n    var onChange = function onChange(getData, change) {\n      var name = change.name;\n\n      if (name === 'url') {\n        return onUrlChange(getData());\n      } else if (contains(['anchor', 'link'], name)) {\n        return onCatalogChange(getData(), change);\n      } else if (name === 'text' || name === 'title') {\n        persistentData[name] = getData()[name];\n        return Optional.none();\n      } else {\n        return Optional.none();\n      }\n    };\n\n    return {\n      onChange: onChange\n    };\n  };\n\n  var DialogChanges = {\n    init: init,\n    getDelta: getDelta\n  };\n  var global$2 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n  var global$1 = tinymce.util.Tools.resolve('tinymce.util.Promise');\n\n  var delayedConfirm = function delayedConfirm(editor, message, callback) {\n    var rng = editor.selection.getRng();\n    global$2.setEditorTimeout(editor, function () {\n      editor.windowManager.confirm(message, function (state) {\n        editor.selection.setRng(rng);\n        callback(state);\n      });\n    });\n  };\n\n  var tryEmailTransform = function tryEmailTransform(data) {\n    var url = data.href;\n    var suggestMailTo = url.indexOf('@') > 0 && url.indexOf('/') === -1 && url.indexOf('mailto:') === -1;\n    return suggestMailTo ? Optional.some({\n      message: 'The URL you entered seems to be an email address. Do you want to add the required mailto: prefix?',\n      preprocess: function preprocess(oldData) {\n        return _assign(_assign({}, oldData), {\n          href: 'mailto:' + url\n        });\n      }\n    }) : Optional.none();\n  };\n\n  var tryProtocolTransform = function tryProtocolTransform(assumeExternalTargets, defaultLinkProtocol) {\n    return function (data) {\n      var url = data.href;\n      var suggestProtocol = assumeExternalTargets === 1 && !hasProtocol(url) || assumeExternalTargets === 0 && /^\\s*www(\\.|\\d\\.)/i.test(url);\n      return suggestProtocol ? Optional.some({\n        message: 'The URL you entered seems to be an external link. Do you want to add the required ' + defaultLinkProtocol + ':// prefix?',\n        preprocess: function preprocess(oldData) {\n          return _assign(_assign({}, oldData), {\n            href: defaultLinkProtocol + '://' + url\n          });\n        }\n      }) : Optional.none();\n    };\n  };\n\n  var preprocess = function preprocess(editor, data) {\n    return findMap([tryEmailTransform, tryProtocolTransform(assumeExternalTargets(editor), getDefaultLinkProtocol(editor))], function (f) {\n      return f(data);\n    }).fold(function () {\n      return global$1.resolve(data);\n    }, function (transform) {\n      return new global$1(function (callback) {\n        delayedConfirm(editor, transform.message, function (state) {\n          callback(state ? transform.preprocess(data) : data);\n        });\n      });\n    });\n  };\n\n  var DialogConfirms = {\n    preprocess: preprocess\n  };\n\n  var getAnchors = function getAnchors(editor) {\n    var anchorNodes = editor.dom.select('a:not([href])');\n    var anchors = bind(anchorNodes, function (anchor) {\n      var id = anchor.name || anchor.id;\n      return id ? [{\n        text: id,\n        value: '#' + id\n      }] : [];\n    });\n    return anchors.length > 0 ? Optional.some([{\n      text: 'None',\n      value: ''\n    }].concat(anchors)) : Optional.none();\n  };\n\n  var AnchorListOptions = {\n    getAnchors: getAnchors\n  };\n\n  var getClasses = function getClasses(editor) {\n    var list = getLinkClassList(editor);\n\n    if (list.length > 0) {\n      return ListOptions.sanitize(list);\n    }\n\n    return Optional.none();\n  };\n\n  var ClassListOptions = {\n    getClasses: getClasses\n  };\n  var global = tinymce.util.Tools.resolve('tinymce.util.XHR');\n\n  var parseJson = function parseJson(text) {\n    try {\n      return Optional.some(JSON.parse(text));\n    } catch (err) {\n      return Optional.none();\n    }\n  };\n\n  var getLinks = function getLinks(editor) {\n    var extractor = function extractor(item) {\n      return editor.convertURL(item.value || item.url, 'href');\n    };\n\n    var linkList = getLinkList(editor);\n    return new global$1(function (callback) {\n      if (isString(linkList)) {\n        global.send({\n          url: linkList,\n          success: function success(text) {\n            return callback(parseJson(text));\n          },\n          error: function error(_) {\n            return callback(Optional.none());\n          }\n        });\n      } else if (isFunction(linkList)) {\n        linkList(function (output) {\n          return callback(Optional.some(output));\n        });\n      } else {\n        callback(Optional.from(linkList));\n      }\n    }).then(function (optItems) {\n      return optItems.bind(ListOptions.sanitizeWith(extractor)).map(function (items) {\n        if (items.length > 0) {\n          var noneItem = [{\n            text: 'None',\n            value: ''\n          }];\n          return noneItem.concat(items);\n        } else {\n          return items;\n        }\n      });\n    });\n  };\n\n  var LinkListOptions = {\n    getLinks: getLinks\n  };\n\n  var getRels = function getRels(editor, initialTarget) {\n    var list = getRelList(editor);\n\n    if (list.length > 0) {\n      var isTargetBlank_1 = is(initialTarget, '_blank');\n      var enforceSafe = allowUnsafeLinkTarget(editor) === false;\n\n      var safeRelExtractor = function safeRelExtractor(item) {\n        return applyRelTargetRules(ListOptions.getValue(item), isTargetBlank_1);\n      };\n\n      var sanitizer = enforceSafe ? ListOptions.sanitizeWith(safeRelExtractor) : ListOptions.sanitize;\n      return sanitizer(list);\n    }\n\n    return Optional.none();\n  };\n\n  var RelOptions = {\n    getRels: getRels\n  };\n  var fallbacks = [{\n    text: 'Current window',\n    value: ''\n  }, {\n    text: 'New window',\n    value: '_blank'\n  }];\n\n  var getTargets = function getTargets(editor) {\n    var list = getTargetList(editor);\n\n    if (isArray(list)) {\n      return ListOptions.sanitize(list).orThunk(function () {\n        return Optional.some(fallbacks);\n      });\n    } else if (list === false) {\n      return Optional.none();\n    }\n\n    return Optional.some(fallbacks);\n  };\n\n  var TargetOptions = {\n    getTargets: getTargets\n  };\n\n  var nonEmptyAttr = function nonEmptyAttr(dom, elem, name) {\n    var val = dom.getAttrib(elem, name);\n    return val !== null && val.length > 0 ? Optional.some(val) : Optional.none();\n  };\n\n  var extractFromAnchor = function extractFromAnchor(editor, anchor) {\n    var dom = editor.dom;\n    var onlyText = isOnlyTextSelected(editor);\n    var text = onlyText ? Optional.some(getAnchorText(editor.selection, anchor)) : Optional.none();\n    var url = anchor ? Optional.some(dom.getAttrib(anchor, 'href')) : Optional.none();\n    var target = anchor ? Optional.from(dom.getAttrib(anchor, 'target')) : Optional.none();\n    var rel = nonEmptyAttr(dom, anchor, 'rel');\n    var linkClass = nonEmptyAttr(dom, anchor, 'class');\n    var title = nonEmptyAttr(dom, anchor, 'title');\n    return {\n      url: url,\n      text: text,\n      title: title,\n      target: target,\n      rel: rel,\n      linkClass: linkClass\n    };\n  };\n\n  var collect = function collect(editor, linkNode) {\n    return LinkListOptions.getLinks(editor).then(function (links) {\n      var anchor = extractFromAnchor(editor, linkNode);\n      return {\n        anchor: anchor,\n        catalogs: {\n          targets: TargetOptions.getTargets(editor),\n          rels: RelOptions.getRels(editor, anchor.target),\n          classes: ClassListOptions.getClasses(editor),\n          anchor: AnchorListOptions.getAnchors(editor),\n          link: links\n        },\n        optNode: Optional.from(linkNode),\n        flags: {\n          titleEnabled: shouldShowLinkTitle(editor)\n        }\n      };\n    });\n  };\n\n  var DialogInfo = {\n    collect: collect\n  };\n\n  var handleSubmit = function handleSubmit(editor, info) {\n    return function (api) {\n      var data = api.getData();\n\n      if (!data.url.value) {\n        unlink(editor);\n        api.close();\n        return;\n      }\n\n      var getChangedValue = function getChangedValue(key) {\n        return Optional.from(data[key]).filter(function (value) {\n          return !is(info.anchor[key], value);\n        });\n      };\n\n      var changedData = {\n        href: data.url.value,\n        text: getChangedValue('text'),\n        target: getChangedValue('target'),\n        rel: getChangedValue('rel'),\n        \"class\": getChangedValue('linkClass'),\n        title: getChangedValue('title')\n      };\n      var attachState = {\n        href: data.url.value,\n        attach: data.url.meta !== undefined && data.url.meta.attach ? data.url.meta.attach : noop\n      };\n      DialogConfirms.preprocess(editor, changedData).then(function (pData) {\n        link(editor, attachState, pData);\n      });\n      api.close();\n    };\n  };\n\n  var collectData = function collectData(editor) {\n    var anchorNode = getAnchorElement(editor);\n    return DialogInfo.collect(editor, anchorNode);\n  };\n\n  var getInitialData = function getInitialData(info, defaultTarget) {\n    var anchor = info.anchor;\n    var url = anchor.url.getOr('');\n    return {\n      url: {\n        value: url,\n        meta: {\n          original: {\n            value: url\n          }\n        }\n      },\n      text: anchor.text.getOr(''),\n      title: anchor.title.getOr(''),\n      anchor: url,\n      link: url,\n      rel: anchor.rel.getOr(''),\n      target: anchor.target.or(defaultTarget).getOr(''),\n      linkClass: anchor.linkClass.getOr('')\n    };\n  };\n\n  var makeDialog = function makeDialog(settings, onSubmit, editor) {\n    var urlInput = [{\n      name: 'url',\n      type: 'urlinput',\n      filetype: 'file',\n      label: 'URL'\n    }];\n    var displayText = settings.anchor.text.map(function () {\n      return {\n        name: 'text',\n        type: 'input',\n        label: 'Text to display'\n      };\n    }).toArray();\n    var titleText = settings.flags.titleEnabled ? [{\n      name: 'title',\n      type: 'input',\n      label: 'Title'\n    }] : [];\n    var defaultTarget = Optional.from(getDefaultLinkTarget(editor));\n    var initialData = getInitialData(settings, defaultTarget);\n    var catalogs = settings.catalogs;\n    var dialogDelta = DialogChanges.init(initialData, catalogs);\n    var body = {\n      type: 'panel',\n      items: flatten([urlInput, displayText, titleText, cat([catalogs.anchor.map(ListOptions.createUi('anchor', 'Anchors')), catalogs.rels.map(ListOptions.createUi('rel', 'Rel')), catalogs.targets.map(ListOptions.createUi('target', 'Open link in...')), catalogs.link.map(ListOptions.createUi('link', 'Link list')), catalogs.classes.map(ListOptions.createUi('linkClass', 'Class'))])])\n    };\n    return {\n      title: 'Insert/Edit Link',\n      size: 'normal',\n      body: body,\n      buttons: [{\n        type: 'cancel',\n        name: 'cancel',\n        text: 'Cancel'\n      }, {\n        type: 'submit',\n        name: 'save',\n        text: 'Save',\n        primary: true\n      }],\n      initialData: initialData,\n      onChange: function onChange(api, _a) {\n        var name = _a.name;\n        dialogDelta.onChange(api.getData, {\n          name: name\n        }).each(function (newData) {\n          api.setData(newData);\n        });\n      },\n      onSubmit: onSubmit\n    };\n  };\n\n  var open$1 = function open$1(editor) {\n    var data = collectData(editor);\n    data.then(function (info) {\n      var onSubmit = handleSubmit(editor, info);\n      return makeDialog(info, onSubmit, editor);\n    }).then(function (spec) {\n      editor.windowManager.open(spec);\n    });\n  };\n\n  var appendClickRemove = function appendClickRemove(link, evt) {\n    document.body.appendChild(link);\n    link.dispatchEvent(evt);\n    document.body.removeChild(link);\n  };\n\n  var open = function open(url) {\n    var link = document.createElement('a');\n    link.target = '_blank';\n    link.href = url;\n    link.rel = 'noreferrer noopener';\n    var evt = document.createEvent('MouseEvents');\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n    appendClickRemove(link, evt);\n  };\n\n  var getLink = function getLink(editor, elm) {\n    return editor.dom.getParent(elm, 'a[href]');\n  };\n\n  var getSelectedLink = function getSelectedLink(editor) {\n    return getLink(editor, editor.selection.getStart());\n  };\n\n  var hasOnlyAltModifier = function hasOnlyAltModifier(e) {\n    return e.altKey === true && e.shiftKey === false && e.ctrlKey === false && e.metaKey === false;\n  };\n\n  var gotoLink = function gotoLink(editor, a) {\n    if (a) {\n      var href = getHref(a);\n\n      if (/^#/.test(href)) {\n        var targetEl = editor.$(href);\n\n        if (targetEl.length) {\n          editor.selection.scrollIntoView(targetEl[0], true);\n        }\n      } else {\n        open(a.href);\n      }\n    }\n  };\n\n  var openDialog = function openDialog(editor) {\n    return function () {\n      open$1(editor);\n    };\n  };\n\n  var gotoSelectedLink = function gotoSelectedLink(editor) {\n    return function () {\n      gotoLink(editor, getSelectedLink(editor));\n    };\n  };\n\n  var setupGotoLinks = function setupGotoLinks(editor) {\n    editor.on('click', function (e) {\n      var link = getLink(editor, e.target);\n\n      if (link && global$6.metaKeyPressed(e)) {\n        e.preventDefault();\n        gotoLink(editor, link);\n      }\n    });\n    editor.on('keydown', function (e) {\n      var link = getSelectedLink(editor);\n\n      if (link && e.keyCode === 13 && hasOnlyAltModifier(e)) {\n        e.preventDefault();\n        gotoLink(editor, link);\n      }\n    });\n  };\n\n  var toggleState = function toggleState(editor, toggler) {\n    editor.on('NodeChange', toggler);\n    return function () {\n      return editor.off('NodeChange', toggler);\n    };\n  };\n\n  var toggleActiveState = function toggleActiveState(editor) {\n    return function (api) {\n      var updateState = function updateState() {\n        return api.setActive(!editor.mode.isReadOnly() && getAnchorElement(editor, editor.selection.getNode()) !== null);\n      };\n\n      updateState();\n      return toggleState(editor, updateState);\n    };\n  };\n\n  var toggleEnabledState = function toggleEnabledState(editor) {\n    return function (api) {\n      var updateState = function updateState() {\n        return api.setDisabled(getAnchorElement(editor, editor.selection.getNode()) === null);\n      };\n\n      updateState();\n      return toggleState(editor, updateState);\n    };\n  };\n\n  var toggleUnlinkState = function toggleUnlinkState(editor) {\n    return function (api) {\n      var hasLinks$1 = function hasLinks$1(parents) {\n        return hasLinks(parents) || hasLinksInSelection(editor.selection.getRng());\n      };\n\n      var parents = editor.dom.getParents(editor.selection.getStart());\n      api.setDisabled(!hasLinks$1(parents));\n      return toggleState(editor, function (e) {\n        return api.setDisabled(!hasLinks$1(e.parents));\n      });\n    };\n  };\n\n  var register = function register(editor) {\n    editor.addCommand('mceLink', function () {\n      if (useQuickLink(editor)) {\n        editor.fire('contexttoolbar-show', {\n          toolbarKey: 'quicklink'\n        });\n      } else {\n        openDialog(editor)();\n      }\n    });\n  };\n\n  var setup = function setup(editor) {\n    editor.addShortcut('Meta+K', '', function () {\n      editor.execCommand('mceLink');\n    });\n  };\n\n  var setupButtons = function setupButtons(editor) {\n    editor.ui.registry.addToggleButton('link', {\n      icon: 'link',\n      tooltip: 'Insert/edit link',\n      onAction: openDialog(editor),\n      onSetup: toggleActiveState(editor)\n    });\n    editor.ui.registry.addButton('openlink', {\n      icon: 'new-tab',\n      tooltip: 'Open link',\n      onAction: gotoSelectedLink(editor),\n      onSetup: toggleEnabledState(editor)\n    });\n    editor.ui.registry.addButton('unlink', {\n      icon: 'unlink',\n      tooltip: 'Remove link',\n      onAction: function onAction() {\n        return unlink(editor);\n      },\n      onSetup: toggleUnlinkState(editor)\n    });\n  };\n\n  var setupMenuItems = function setupMenuItems(editor) {\n    editor.ui.registry.addMenuItem('openlink', {\n      text: 'Open link',\n      icon: 'new-tab',\n      onAction: gotoSelectedLink(editor),\n      onSetup: toggleEnabledState(editor)\n    });\n    editor.ui.registry.addMenuItem('link', {\n      icon: 'link',\n      text: 'Link...',\n      shortcut: 'Meta+K',\n      onAction: openDialog(editor)\n    });\n    editor.ui.registry.addMenuItem('unlink', {\n      icon: 'unlink',\n      text: 'Remove link',\n      onAction: function onAction() {\n        return unlink(editor);\n      },\n      onSetup: toggleUnlinkState(editor)\n    });\n  };\n\n  var setupContextMenu = function setupContextMenu(editor) {\n    var inLink = 'link unlink openlink';\n    var noLink = 'link';\n    editor.ui.registry.addContextMenu('link', {\n      update: function update(element) {\n        return hasLinks(editor.dom.getParents(element, 'a')) ? inLink : noLink;\n      }\n    });\n  };\n\n  var setupContextToolbars = function setupContextToolbars(editor) {\n    var collapseSelectionToEnd = function collapseSelectionToEnd(editor) {\n      editor.selection.collapse(false);\n    };\n\n    var onSetupLink = function onSetupLink(buttonApi) {\n      var node = editor.selection.getNode();\n      buttonApi.setDisabled(!getAnchorElement(editor, node));\n      return noop;\n    };\n\n    var getLinkText = function getLinkText(value) {\n      var anchor = getAnchorElement(editor);\n      var onlyText = isOnlyTextSelected(editor);\n\n      if (!anchor && onlyText) {\n        var text = getAnchorText(editor.selection, anchor);\n        return Optional.some(text.length > 0 ? text : value);\n      } else {\n        return Optional.none();\n      }\n    };\n\n    editor.ui.registry.addContextForm('quicklink', {\n      launch: {\n        type: 'contextformtogglebutton',\n        icon: 'link',\n        tooltip: 'Link',\n        onSetup: toggleActiveState(editor)\n      },\n      label: 'Link',\n      predicate: function predicate(node) {\n        return !!getAnchorElement(editor, node) && hasContextToolbar(editor);\n      },\n      initValue: function initValue() {\n        var elm = getAnchorElement(editor);\n        return !!elm ? getHref(elm) : '';\n      },\n      commands: [{\n        type: 'contextformtogglebutton',\n        icon: 'link',\n        tooltip: 'Link',\n        primary: true,\n        onSetup: function onSetup(buttonApi) {\n          var node = editor.selection.getNode();\n          buttonApi.setActive(!!getAnchorElement(editor, node));\n          return toggleActiveState(editor)(buttonApi);\n        },\n        onAction: function onAction(formApi) {\n          var value = formApi.getValue();\n          var text = getLinkText(value);\n          var attachState = {\n            href: value,\n            attach: noop\n          };\n          link(editor, attachState, {\n            href: value,\n            text: text,\n            title: Optional.none(),\n            rel: Optional.none(),\n            target: Optional.none(),\n            \"class\": Optional.none()\n          });\n          collapseSelectionToEnd(editor);\n          formApi.hide();\n        }\n      }, {\n        type: 'contextformbutton',\n        icon: 'unlink',\n        tooltip: 'Remove link',\n        onSetup: onSetupLink,\n        onAction: function onAction(formApi) {\n          unlink(editor);\n          formApi.hide();\n        }\n      }, {\n        type: 'contextformbutton',\n        icon: 'new-tab',\n        tooltip: 'Open link',\n        onSetup: onSetupLink,\n        onAction: function onAction(formApi) {\n          gotoSelectedLink(editor)();\n          formApi.hide();\n        }\n      }]\n    });\n  };\n\n  function Plugin() {\n    global$7.add('link', function (editor) {\n      setupButtons(editor);\n      setupMenuItems(editor);\n      setupContextMenu(editor);\n      setupContextToolbars(editor);\n      setupGotoLinks(editor);\n      register(editor);\n      setup(editor);\n    });\n  }\n\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/link/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/tinymce/plugins/link/index.js");
/******/ 	
/******/ })()
;