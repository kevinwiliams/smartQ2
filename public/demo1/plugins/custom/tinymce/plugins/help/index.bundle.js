/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/help/index.js":
/*!****************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/help/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Exports the \"help\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/help')\n//   ES2015:\n//     import 'tinymce/plugins/help'\n__webpack_require__(/*! ./plugin.js */ \"./resources/assets/core/plugins/custom/tinymce/plugins/help/plugin.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL2hlbHAvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLG1CQUFPLENBQUMsMEZBQUQsQ0FBUCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvY29yZS9wbHVnaW5zL2N1c3RvbS90aW55bWNlL3BsdWdpbnMvaGVscC9pbmRleC5qcz9iOWRlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEV4cG9ydHMgdGhlIFwiaGVscFwiIHBsdWdpbiBmb3IgdXNhZ2Ugd2l0aCBtb2R1bGUgbG9hZGVyc1xyXG4vLyBVc2FnZTpcclxuLy8gICBDb21tb25KUzpcclxuLy8gICAgIHJlcXVpcmUoJ3RpbnltY2UvcGx1Z2lucy9oZWxwJylcclxuLy8gICBFUzIwMTU6XHJcbi8vICAgICBpbXBvcnQgJ3RpbnltY2UvcGx1Z2lucy9oZWxwJ1xyXG5yZXF1aXJlKCcuL3BsdWdpbi5qcycpOyJdLCJuYW1lcyI6WyJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/help/index.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/help/plugin.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/help/plugin.js ***!
  \*****************************************************************************/
/***/ (() => {

eval("/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var Cell = function Cell(initial) {\n    var value = initial;\n\n    var get = function get() {\n      return value;\n    };\n\n    var set = function set(v) {\n      value = v;\n    };\n\n    return {\n      get: get,\n      set: set\n    };\n  };\n\n  var global$3 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n  var get$1 = function get$1(customTabs) {\n    var addTab = function addTab(spec) {\n      var currentCustomTabs = customTabs.get();\n      currentCustomTabs[spec.name] = spec;\n      customTabs.set(currentCustomTabs);\n    };\n\n    return {\n      addTab: addTab\n    };\n  };\n\n  var register$1 = function register$1(editor, dialogOpener) {\n    editor.addCommand('mceHelp', dialogOpener);\n  };\n\n  var register = function register(editor, dialogOpener) {\n    editor.ui.registry.addButton('help', {\n      icon: 'help',\n      tooltip: 'Help',\n      onAction: dialogOpener\n    });\n    editor.ui.registry.addMenuItem('help', {\n      text: 'Help',\n      icon: 'help',\n      shortcut: 'Alt+0',\n      onAction: dialogOpener\n    });\n  };\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) {\n          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n      }\n\n      return t;\n    };\n\n    return _assign.apply(this, arguments);\n  };\n\n  var noop = function noop() {};\n\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  var never = constant(false);\n  var always = constant(true);\n\n  var none = function none() {\n    return NONE;\n  };\n\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n\n  var some = function some(a) {\n    var constant_a = constant(a);\n\n    var self = function self() {\n      return me;\n    };\n\n    var bind = function bind(f) {\n      return f(a);\n    };\n\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n  var nativeIndexOf = Array.prototype.indexOf;\n\n  var rawIndexOf = function rawIndexOf(ts, t) {\n    return nativeIndexOf.call(ts, t);\n  };\n\n  var contains = function contains(xs, x) {\n    return rawIndexOf(xs, x) > -1;\n  };\n\n  var map = function map(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n\n    return r;\n  };\n\n  var filter = function filter(xs, pred) {\n    var r = [];\n\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n\n      if (pred(x, i)) {\n        r.push(x);\n      }\n    }\n\n    return r;\n  };\n\n  var findUntil = function findUntil(xs, pred, until) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n\n      if (pred(x, i)) {\n        return Optional.some(x);\n      } else if (until(x, i)) {\n        break;\n      }\n    }\n\n    return Optional.none();\n  };\n\n  var find = function find(xs, pred) {\n    return findUntil(xs, pred, never);\n  };\n\n  var keys = Object.keys;\n  var hasOwnProperty = Object.hasOwnProperty;\n\n  var get = function get(obj, key) {\n    return has(obj, key) ? Optional.from(obj[key]) : Optional.none();\n  };\n\n  var has = function has(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  var cat = function cat(arr) {\n    var r = [];\n\n    var push = function push(x) {\n      r.push(x);\n    };\n\n    for (var i = 0; i < arr.length; i++) {\n      arr[i].each(push);\n    }\n\n    return r;\n  };\n\n  var getHelpTabs = function getHelpTabs(editor) {\n    return Optional.from(editor.getParam('help_tabs'));\n  };\n\n  var getForcedPlugins = function getForcedPlugins(editor) {\n    return editor.getParam('forced_plugins');\n  };\n\n  var description = \"<h1>Editor UI keyboard navigation</h1>\\n\\n<h2>Activating keyboard navigation</h2>\\n\\n<p>The sections of the outer UI of the editor - the menubar, toolbar, sidebar and footer - are all keyboard navigable. As such, there are multiple ways to activate keyboard navigation:</p>\\n<ul>\\n  <li>Focus the menubar: Alt + F9 (Windows) or &#x2325;F9 (MacOS)</li>\\n  <li>Focus the toolbar: Alt + F10 (Windows) or &#x2325;F10 (MacOS)</li>\\n  <li>Focus the footer: Alt + F11 (Windows) or &#x2325;F11 (MacOS)</li>\\n</ul>\\n\\n<p>Focusing the menubar or toolbar will start keyboard navigation at the first item in the menubar or toolbar, which will be highlighted with a gray background. Focusing the footer will start keyboard navigation at the first item in the element path, which will be highlighted with an underline. </p>\\n\\n<h2>Moving between UI sections</h2>\\n\\n<p>When keyboard navigation is active, pressing tab will move the focus to the next major section of the UI, where applicable. These sections are:</p>\\n<ul>\\n  <li>the menubar</li>\\n  <li>each group of the toolbar </li>\\n  <li>the sidebar</li>\\n  <li>the element path in the footer </li>\\n  <li>the wordcount toggle button in the footer </li>\\n  <li>the branding link in the footer </li>\\n  <li>the editor resize handle in the footer</li>\\n</ul>\\n\\n<p>Pressing shift + tab will move backwards through the same sections, except when moving from the footer to the toolbar. Focusing the element path then pressing shift + tab will move focus to the first toolbar group, not the last.</p>\\n\\n<h2>Moving within UI sections</h2>\\n\\n<p>Keyboard navigation within UI sections can usually be achieved using the left and right arrow keys. This includes:</p>\\n<ul>\\n  <li>moving between menus in the menubar</li>\\n  <li>moving between buttons in a toolbar group</li>\\n  <li>moving between items in the element path</li>\\n</ul>\\n\\n<p>In all these UI sections, keyboard navigation will cycle within the section. For example, focusing the last button in a toolbar group then pressing right arrow will move focus to the first item in the same toolbar group. </p>\\n\\n<h1>Executing buttons</h1>\\n\\n<p>To execute a button, navigate the selection to the desired button and hit space or enter.</p>\\n\\n<h1>Opening, navigating and closing menus</h1>\\n\\n<p>When focusing a menubar button or a toolbar button with a menu, pressing space, enter or down arrow will open the menu. When the menu opens the first item will be selected. To move up or down the menu, press the up or down arrow key respectively. This is the same for submenus, which can also be opened and closed using the left and right arrow keys.</p>\\n\\n<p>To close any active menu, hit the escape key. When a menu is closed the selection will be restored to its previous selection. This also works for closing submenus.</p>\\n\\n<h1>Context toolbars and menus</h1>\\n\\n<p>To focus an open context toolbar such as the table context toolbar, press Ctrl + F9 (Windows) or &#x2303;F9 (MacOS).</p>\\n\\n<p>Context toolbar navigation is the same as toolbar navigation, and context menu navigation is the same as standard menu navigation.</p>\\n\\n<h1>Dialog navigation</h1>\\n\\n<p>There are two types of dialog UIs in TinyMCE: tabbed dialogs and non-tabbed dialogs.</p>\\n\\n<p>When a non-tabbed dialog is opened, the first interactive component in the dialog will be focused. Users can navigate between interactive components by pressing tab. This includes any footer buttons. Navigation will cycle back to the first dialog component if tab is pressed while focusing the last component in the dialog. Pressing shift + tab will navigate backwards.</p>\\n\\n<p>When a tabbed dialog is opened, the first button in the tab menu is focused. Pressing tab will navigate to the first interactive component in that tab, and will cycle through the tab\\u2019s components, the footer buttons, then back to the tab button. To switch to another tab, focus the tab button for the current tab, then use the arrow keys to cycle through the tab buttons.</p>\";\n\n  var tab$3 = function tab$3() {\n    var body = {\n      type: 'htmlpanel',\n      presets: 'document',\n      html: description\n    };\n    return {\n      name: 'keyboardnav',\n      title: 'Keyboard Navigation',\n      items: [body]\n    };\n  };\n\n  var global$2 = tinymce.util.Tools.resolve('tinymce.Env');\n\n  var convertText = function convertText(source) {\n    var mac = {\n      alt: '&#x2325;',\n      ctrl: '&#x2303;',\n      shift: '&#x21E7;',\n      meta: '&#x2318;',\n      access: '&#x2303;&#x2325;'\n    };\n    var other = {\n      meta: 'Ctrl ',\n      access: 'Shift + Alt '\n    };\n    var replace = global$2.mac ? mac : other;\n    var shortcut = source.split('+');\n    var updated = map(shortcut, function (segment) {\n      var search = segment.toLowerCase().trim();\n      return has(replace, search) ? replace[search] : segment;\n    });\n    return global$2.mac ? updated.join('').replace(/\\s/, '') : updated.join('+');\n  };\n\n  var shortcuts = [{\n    shortcuts: ['Meta + B'],\n    action: 'Bold'\n  }, {\n    shortcuts: ['Meta + I'],\n    action: 'Italic'\n  }, {\n    shortcuts: ['Meta + U'],\n    action: 'Underline'\n  }, {\n    shortcuts: ['Meta + A'],\n    action: 'Select all'\n  }, {\n    shortcuts: ['Meta + Y', 'Meta + Shift + Z'],\n    action: 'Redo'\n  }, {\n    shortcuts: ['Meta + Z'],\n    action: 'Undo'\n  }, {\n    shortcuts: ['Access + 1'],\n    action: 'Heading 1'\n  }, {\n    shortcuts: ['Access + 2'],\n    action: 'Heading 2'\n  }, {\n    shortcuts: ['Access + 3'],\n    action: 'Heading 3'\n  }, {\n    shortcuts: ['Access + 4'],\n    action: 'Heading 4'\n  }, {\n    shortcuts: ['Access + 5'],\n    action: 'Heading 5'\n  }, {\n    shortcuts: ['Access + 6'],\n    action: 'Heading 6'\n  }, {\n    shortcuts: ['Access + 7'],\n    action: 'Paragraph'\n  }, {\n    shortcuts: ['Access + 8'],\n    action: 'Div'\n  }, {\n    shortcuts: ['Access + 9'],\n    action: 'Address'\n  }, {\n    shortcuts: ['Alt + 0'],\n    action: 'Open help dialog'\n  }, {\n    shortcuts: ['Alt + F9'],\n    action: 'Focus to menubar'\n  }, {\n    shortcuts: ['Alt + F10'],\n    action: 'Focus to toolbar'\n  }, {\n    shortcuts: ['Alt + F11'],\n    action: 'Focus to element path'\n  }, {\n    shortcuts: ['Ctrl + F9'],\n    action: 'Focus to contextual toolbar'\n  }, {\n    shortcuts: ['Shift + Enter'],\n    action: 'Open popup menu for split buttons'\n  }, {\n    shortcuts: ['Meta + K'],\n    action: 'Insert link (if link plugin activated)'\n  }, {\n    shortcuts: ['Meta + S'],\n    action: 'Save (if save plugin activated)'\n  }, {\n    shortcuts: ['Meta + F'],\n    action: 'Find (if searchreplace plugin activated)'\n  }, {\n    shortcuts: ['Meta + Shift + F'],\n    action: 'Switch to or from fullscreen mode'\n  }];\n\n  var tab$2 = function tab$2() {\n    var shortcutList = map(shortcuts, function (shortcut) {\n      var shortcutText = map(shortcut.shortcuts, convertText).join(' or ');\n      return [shortcut.action, shortcutText];\n    });\n    var tablePanel = {\n      type: 'table',\n      header: ['Action', 'Shortcut'],\n      cells: shortcutList\n    };\n    return {\n      name: 'shortcuts',\n      title: 'Handy Shortcuts',\n      items: [tablePanel]\n    };\n  };\n\n  var global$1 = tinymce.util.Tools.resolve('tinymce.util.I18n');\n  var urls = map([{\n    key: 'advlist',\n    name: 'Advanced List'\n  }, {\n    key: 'anchor',\n    name: 'Anchor'\n  }, {\n    key: 'autolink',\n    name: 'Autolink'\n  }, {\n    key: 'autoresize',\n    name: 'Autoresize'\n  }, {\n    key: 'autosave',\n    name: 'Autosave'\n  }, {\n    key: 'bbcode',\n    name: 'BBCode'\n  }, {\n    key: 'charmap',\n    name: 'Character Map'\n  }, {\n    key: 'code',\n    name: 'Code'\n  }, {\n    key: 'codesample',\n    name: 'Code Sample'\n  }, {\n    key: 'colorpicker',\n    name: 'Color Picker'\n  }, {\n    key: 'directionality',\n    name: 'Directionality'\n  }, {\n    key: 'emoticons',\n    name: 'Emoticons'\n  }, {\n    key: 'fullpage',\n    name: 'Full Page'\n  }, {\n    key: 'fullscreen',\n    name: 'Full Screen'\n  }, {\n    key: 'help',\n    name: 'Help'\n  }, {\n    key: 'hr',\n    name: 'Horizontal Rule'\n  }, {\n    key: 'image',\n    name: 'Image'\n  }, {\n    key: 'imagetools',\n    name: 'Image Tools'\n  }, {\n    key: 'importcss',\n    name: 'Import CSS'\n  }, {\n    key: 'insertdatetime',\n    name: 'Insert Date/Time'\n  }, {\n    key: 'legacyoutput',\n    name: 'Legacy Output'\n  }, {\n    key: 'link',\n    name: 'Link'\n  }, {\n    key: 'lists',\n    name: 'Lists'\n  }, {\n    key: 'media',\n    name: 'Media'\n  }, {\n    key: 'nonbreaking',\n    name: 'Nonbreaking'\n  }, {\n    key: 'noneditable',\n    name: 'Noneditable'\n  }, {\n    key: 'pagebreak',\n    name: 'Page Break'\n  }, {\n    key: 'paste',\n    name: 'Paste'\n  }, {\n    key: 'preview',\n    name: 'Preview'\n  }, {\n    key: 'print',\n    name: 'Print'\n  }, {\n    key: 'quickbars',\n    name: 'Quick Toolbars'\n  }, {\n    key: 'save',\n    name: 'Save'\n  }, {\n    key: 'searchreplace',\n    name: 'Search and Replace'\n  }, {\n    key: 'spellchecker',\n    name: 'Spell Checker'\n  }, {\n    key: 'tabfocus',\n    name: 'Tab Focus'\n  }, {\n    key: 'table',\n    name: 'Table'\n  }, {\n    key: 'template',\n    name: 'Template'\n  }, {\n    key: 'textcolor',\n    name: 'Text Color'\n  }, {\n    key: 'textpattern',\n    name: 'Text Pattern'\n  }, {\n    key: 'toc',\n    name: 'Table of Contents'\n  }, {\n    key: 'visualblocks',\n    name: 'Visual Blocks'\n  }, {\n    key: 'visualchars',\n    name: 'Visual Characters'\n  }, {\n    key: 'wordcount',\n    name: 'Word Count'\n  }, {\n    key: 'a11ychecker',\n    name: 'Accessibility Checker',\n    type: 'premium'\n  }, {\n    key: 'advcode',\n    name: 'Advanced Code Editor',\n    type: 'premium'\n  }, {\n    key: 'advtable',\n    name: 'Advanced Tables',\n    type: 'premium'\n  }, {\n    key: 'autocorrect',\n    name: 'Autocorrect',\n    type: 'premium'\n  }, {\n    key: 'casechange',\n    name: 'Case Change',\n    type: 'premium'\n  }, {\n    key: 'checklist',\n    name: 'Checklist',\n    type: 'premium'\n  }, {\n    key: 'export',\n    name: 'Export',\n    type: 'premium'\n  }, {\n    key: 'mediaembed',\n    name: 'Enhanced Media Embed',\n    type: 'premium'\n  }, {\n    key: 'formatpainter',\n    name: 'Format Painter',\n    type: 'premium'\n  }, {\n    key: 'linkchecker',\n    name: 'Link Checker',\n    type: 'premium'\n  }, {\n    key: 'mentions',\n    name: 'Mentions',\n    type: 'premium'\n  }, {\n    key: 'pageembed',\n    name: 'Page Embed',\n    type: 'premium'\n  }, {\n    key: 'permanentpen',\n    name: 'Permanent Pen',\n    type: 'premium'\n  }, {\n    key: 'powerpaste',\n    name: 'PowerPaste',\n    type: 'premium'\n  }, {\n    key: 'rtc',\n    name: 'Real-Time Collaboration',\n    type: 'premium'\n  }, {\n    key: 'tinymcespellchecker',\n    name: 'Spell Checker Pro',\n    type: 'premium'\n  }, {\n    key: 'tinycomments',\n    name: 'Tiny Comments',\n    type: 'premium',\n    slug: 'comments'\n  }, {\n    key: 'tinydrive',\n    name: 'Tiny Drive',\n    type: 'premium'\n  }], function (item) {\n    return _assign(_assign({}, item), {\n      type: item.type || 'opensource',\n      slug: item.slug || item.key\n    });\n  });\n\n  var tab$1 = function tab$1(editor) {\n    var availablePlugins = function availablePlugins() {\n      var premiumPlugins = filter(urls, function (_a) {\n        var key = _a.key,\n            type = _a.type;\n        return key !== 'autocorrect' && type === 'premium';\n      });\n      var premiumPluginList = map(premiumPlugins, function (plugin) {\n        return '<li>' + global$1.translate(plugin.name) + '</li>';\n      }).join('');\n      return '<div data-mce-tabstop=\"1\" tabindex=\"-1\">' + '<p><b>' + global$1.translate('Premium plugins:') + '</b></p>' + '<ul>' + premiumPluginList + '<li class=\"tox-help__more-link\" \"><a href=\"https://www.tiny.cloud/pricing/?utm_campaign=editor_referral&utm_medium=help_dialog&utm_source=tinymce\" target=\"_blank\">' + global$1.translate('Learn more...') + '</a></li>' + '</ul>' + '</div>';\n    };\n\n    var makeLink = function makeLink(p) {\n      return '<a href=\"' + p.url + '\" target=\"_blank\" rel=\"noopener\">' + p.name + '</a>';\n    };\n\n    var maybeUrlize = function maybeUrlize(editor, key) {\n      return find(urls, function (x) {\n        return x.key === key;\n      }).fold(function () {\n        var getMetadata = editor.plugins[key].getMetadata;\n        return typeof getMetadata === 'function' ? makeLink(getMetadata()) : key;\n      }, function (x) {\n        var name = x.type === 'premium' ? x.name + '*' : x.name;\n        return makeLink({\n          name: name,\n          url: 'https://www.tiny.cloud/docs/plugins/' + x.type + '/' + x.slug\n        });\n      });\n    };\n\n    var getPluginKeys = function getPluginKeys(editor) {\n      var keys$1 = keys(editor.plugins);\n      var forced_plugins = getForcedPlugins(editor);\n      return forced_plugins === undefined ? keys$1 : filter(keys$1, function (k) {\n        return !contains(forced_plugins, k);\n      });\n    };\n\n    var pluginLister = function pluginLister(editor) {\n      var pluginKeys = getPluginKeys(editor);\n      var pluginLis = map(pluginKeys, function (key) {\n        return '<li>' + maybeUrlize(editor, key) + '</li>';\n      });\n      var count = pluginLis.length;\n      var pluginsString = pluginLis.join('');\n      var html = '<p><b>' + global$1.translate(['Plugins installed ({0}):', count]) + '</b></p>' + '<ul>' + pluginsString + '</ul>';\n      return html;\n    };\n\n    var installedPlugins = function installedPlugins(editor) {\n      if (editor == null) {\n        return '';\n      }\n\n      return '<div data-mce-tabstop=\"1\" tabindex=\"-1\">' + pluginLister(editor) + '</div>';\n    };\n\n    var htmlPanel = {\n      type: 'htmlpanel',\n      presets: 'document',\n      html: [installedPlugins(editor), availablePlugins()].join('')\n    };\n    return {\n      name: 'plugins',\n      title: 'Plugins',\n      items: [htmlPanel]\n    };\n  };\n\n  var global = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n  var tab = function tab() {\n    var getVersion = function getVersion(major, minor) {\n      return major.indexOf('@') === 0 ? 'X.X.X' : major + '.' + minor;\n    };\n\n    var version = getVersion(global.majorVersion, global.minorVersion);\n    var changeLogLink = '<a href=\"https://www.tiny.cloud/docs/changelog/?utm_campaign=editor_referral&utm_medium=help_dialog&utm_source=tinymce\" target=\"_blank\">TinyMCE ' + version + '</a>';\n    var htmlPanel = {\n      type: 'htmlpanel',\n      html: '<p>' + global$1.translate(['You are using {0}', changeLogLink]) + '</p>',\n      presets: 'document'\n    };\n    return {\n      name: 'versions',\n      title: 'Version',\n      items: [htmlPanel]\n    };\n  };\n\n  var parseHelpTabsSetting = function parseHelpTabsSetting(tabsFromSettings, tabs) {\n    var newTabs = {};\n    var names = map(tabsFromSettings, function (t) {\n      if (typeof t === 'string') {\n        if (has(tabs, t)) {\n          newTabs[t] = tabs[t];\n        }\n\n        return t;\n      } else {\n        newTabs[t.name] = t;\n        return t.name;\n      }\n    });\n    return {\n      tabs: newTabs,\n      names: names\n    };\n  };\n\n  var getNamesFromTabs = function getNamesFromTabs(tabs) {\n    var names = keys(tabs);\n    var idx = names.indexOf('versions');\n\n    if (idx !== -1) {\n      names.splice(idx, 1);\n      names.push('versions');\n    }\n\n    return {\n      tabs: tabs,\n      names: names\n    };\n  };\n\n  var parseCustomTabs = function parseCustomTabs(editor, customTabs) {\n    var _a;\n\n    var shortcuts = tab$2();\n    var nav = tab$3();\n    var plugins = tab$1(editor);\n    var versions = tab();\n\n    var tabs = _assign((_a = {}, _a[shortcuts.name] = shortcuts, _a[nav.name] = nav, _a[plugins.name] = plugins, _a[versions.name] = versions, _a), customTabs.get());\n\n    return getHelpTabs(editor).fold(function () {\n      return getNamesFromTabs(tabs);\n    }, function (tabsFromSettings) {\n      return parseHelpTabsSetting(tabsFromSettings, tabs);\n    });\n  };\n\n  var init = function init(editor, customTabs) {\n    return function () {\n      var _a = parseCustomTabs(editor, customTabs),\n          tabs = _a.tabs,\n          names = _a.names;\n\n      var foundTabs = map(names, function (name) {\n        return get(tabs, name);\n      });\n      var dialogTabs = cat(foundTabs);\n      var body = {\n        type: 'tabpanel',\n        tabs: dialogTabs\n      };\n      editor.windowManager.open({\n        title: 'Help',\n        size: 'medium',\n        body: body,\n        buttons: [{\n          type: 'cancel',\n          name: 'close',\n          text: 'Close',\n          primary: true\n        }],\n        initialData: {}\n      });\n    };\n  };\n\n  function Plugin() {\n    global$3.add('help', function (editor) {\n      var customTabs = Cell({});\n      var api = get$1(customTabs);\n      var dialogOpener = init(editor, customTabs);\n      register(editor, dialogOpener);\n      register$1(editor, dialogOpener);\n      editor.shortcuts.add('Alt+0', 'Open help dialog', 'mceHelp');\n      return api;\n    });\n  }\n\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/help/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/tinymce/plugins/help/index.js");
/******/ 	
/******/ })()
;