/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/autoresize/plugin.js":
/*!***********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/autoresize/plugin.js ***!
  \***********************************************************************************/
/***/ (() => {

eval("/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var Cell = function Cell(initial) {\n    var value = initial;\n\n    var get = function get() {\n      return value;\n    };\n\n    var set = function set(v) {\n      value = v;\n    };\n\n    return {\n      get: get,\n      set: set\n    };\n  };\n\n  var hasOwnProperty = Object.hasOwnProperty;\n\n  var has = function has(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  var global$2 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n  var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n  var global = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n  var fireResizeEditor = function fireResizeEditor(editor) {\n    return editor.fire('ResizeEditor');\n  };\n\n  var getAutoResizeMinHeight = function getAutoResizeMinHeight(editor) {\n    return editor.getParam('min_height', editor.getElement().offsetHeight, 'number');\n  };\n\n  var getAutoResizeMaxHeight = function getAutoResizeMaxHeight(editor) {\n    return editor.getParam('max_height', 0, 'number');\n  };\n\n  var getAutoResizeOverflowPadding = function getAutoResizeOverflowPadding(editor) {\n    return editor.getParam('autoresize_overflow_padding', 1, 'number');\n  };\n\n  var getAutoResizeBottomMargin = function getAutoResizeBottomMargin(editor) {\n    return editor.getParam('autoresize_bottom_margin', 50, 'number');\n  };\n\n  var shouldAutoResizeOnInit = function shouldAutoResizeOnInit(editor) {\n    return editor.getParam('autoresize_on_init', true, 'boolean');\n  };\n\n  var isFullscreen = function isFullscreen(editor) {\n    return editor.plugins.fullscreen && editor.plugins.fullscreen.isFullscreen();\n  };\n\n  var wait = function wait(editor, oldSize, times, interval, callback) {\n    global.setEditorTimeout(editor, function () {\n      resize(editor, oldSize);\n\n      if (times--) {\n        wait(editor, oldSize, times, interval, callback);\n      } else if (callback) {\n        callback();\n      }\n    }, interval);\n  };\n\n  var toggleScrolling = function toggleScrolling(editor, state) {\n    var body = editor.getBody();\n\n    if (body) {\n      body.style.overflowY = state ? '' : 'hidden';\n\n      if (!state) {\n        body.scrollTop = 0;\n      }\n    }\n  };\n\n  var parseCssValueToInt = function parseCssValueToInt(dom, elm, name, computed) {\n    var value = parseInt(dom.getStyle(elm, name, computed), 10);\n    return isNaN(value) ? 0 : value;\n  };\n\n  var shouldScrollIntoView = function shouldScrollIntoView(trigger) {\n    if ((trigger === null || trigger === void 0 ? void 0 : trigger.type.toLowerCase()) === 'setcontent') {\n      var setContentEvent = trigger;\n      return setContentEvent.selection === true || setContentEvent.paste === true;\n    } else {\n      return false;\n    }\n  };\n\n  var resize = function resize(editor, oldSize, trigger) {\n    var dom = editor.dom;\n    var doc = editor.getDoc();\n\n    if (!doc) {\n      return;\n    }\n\n    if (isFullscreen(editor)) {\n      toggleScrolling(editor, true);\n      return;\n    }\n\n    var docEle = doc.documentElement;\n    var resizeBottomMargin = getAutoResizeBottomMargin(editor);\n    var resizeHeight = getAutoResizeMinHeight(editor);\n    var marginTop = parseCssValueToInt(dom, docEle, 'margin-top', true);\n    var marginBottom = parseCssValueToInt(dom, docEle, 'margin-bottom', true);\n    var contentHeight = docEle.offsetHeight + marginTop + marginBottom + resizeBottomMargin;\n\n    if (contentHeight < 0) {\n      contentHeight = 0;\n    }\n\n    var containerHeight = editor.getContainer().offsetHeight;\n    var contentAreaHeight = editor.getContentAreaContainer().offsetHeight;\n    var chromeHeight = containerHeight - contentAreaHeight;\n\n    if (contentHeight + chromeHeight > getAutoResizeMinHeight(editor)) {\n      resizeHeight = contentHeight + chromeHeight;\n    }\n\n    var maxHeight = getAutoResizeMaxHeight(editor);\n\n    if (maxHeight && resizeHeight > maxHeight) {\n      resizeHeight = maxHeight;\n      toggleScrolling(editor, true);\n    } else {\n      toggleScrolling(editor, false);\n    }\n\n    if (resizeHeight !== oldSize.get()) {\n      var deltaSize = resizeHeight - oldSize.get();\n      dom.setStyle(editor.getContainer(), 'height', resizeHeight + 'px');\n      oldSize.set(resizeHeight);\n      fireResizeEditor(editor);\n\n      if (global$1.browser.isSafari() && global$1.mac) {\n        var win = editor.getWin();\n        win.scrollTo(win.pageXOffset, win.pageYOffset);\n      }\n\n      if (editor.hasFocus() && shouldScrollIntoView(trigger)) {\n        editor.selection.scrollIntoView();\n      }\n\n      if (global$1.webkit && deltaSize < 0) {\n        resize(editor, oldSize, trigger);\n      }\n    }\n  };\n\n  var setup = function setup(editor, oldSize) {\n    editor.on('init', function () {\n      var overflowPadding = getAutoResizeOverflowPadding(editor);\n      var dom = editor.dom;\n      dom.setStyles(editor.getDoc().documentElement, {\n        height: 'auto'\n      });\n      dom.setStyles(editor.getBody(), {\n        'paddingLeft': overflowPadding,\n        'paddingRight': overflowPadding,\n        'min-height': 0\n      });\n    });\n    editor.on('NodeChange SetContent keyup FullscreenStateChanged ResizeContent', function (e) {\n      resize(editor, oldSize, e);\n    });\n\n    if (shouldAutoResizeOnInit(editor)) {\n      editor.on('init', function () {\n        wait(editor, oldSize, 20, 100, function () {\n          wait(editor, oldSize, 5, 1000);\n        });\n      });\n    }\n  };\n\n  var register = function register(editor, oldSize) {\n    editor.addCommand('mceAutoResize', function () {\n      resize(editor, oldSize);\n    });\n  };\n\n  function Plugin() {\n    global$2.add('autoresize', function (editor) {\n      if (!has(editor.settings, 'resize')) {\n        editor.settings.resize = false;\n      }\n\n      if (!editor.inline) {\n        var oldSize = Cell(0);\n        register(editor, oldSize);\n        setup(editor, oldSize);\n      }\n    });\n  }\n\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/autoresize/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/autoresize/plugin.js"]();
/******/ 	
/******/ })()
;