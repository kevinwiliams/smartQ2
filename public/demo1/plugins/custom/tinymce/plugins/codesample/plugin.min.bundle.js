/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/codesample/plugin.min.js":
/*!***************************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/codesample/plugin.min.js ***!
  \***************************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n!function () {\n  \"use strict\";\n\n  function o(e) {\n    return function () {\n      return e;\n    };\n  }\n\n  function e(e) {\n    return e;\n  }\n\n  function n() {\n    return l;\n  }\n\n  var t = tinymce.util.Tools.resolve(\"tinymce.PluginManager\"),\n      s = o(!1),\n      i = o(!0),\n      l = {\n    fold: function fold(e, n) {\n      return e();\n    },\n    isSome: s,\n    isNone: i,\n    getOr: e,\n    getOrThunk: a,\n    getOrDie: function getOrDie(e) {\n      throw new Error(e || \"error: getOrDie called on none.\");\n    },\n    getOrNull: o(null),\n    getOrUndefined: o(void 0),\n    or: e,\n    orThunk: a,\n    map: n,\n    each: function each() {},\n    bind: n,\n    exists: s,\n    forall: i,\n    filter: function filter() {\n      return l;\n    },\n    toArray: function toArray() {\n      return [];\n    },\n    toString: o(\"none()\")\n  };\n\n  function a(e) {\n    return e();\n  }\n\n  function u(e) {\n    return e && \"PRE\" === e.nodeName && -1 !== e.className.indexOf(\"language-\");\n  }\n\n  function c(t) {\n    return function (e, n) {\n      return t(n);\n    };\n  }\n\n  var d = function d(t) {\n    function e() {\n      return r;\n    }\n\n    function n(e) {\n      return e(t);\n    }\n\n    var a = o(t),\n        r = {\n      fold: function fold(e, n) {\n        return n(t);\n      },\n      isSome: i,\n      isNone: s,\n      getOr: a,\n      getOrThunk: a,\n      getOrDie: a,\n      getOrNull: a,\n      getOrUndefined: a,\n      or: e,\n      orThunk: e,\n      map: function map(e) {\n        return d(e(t));\n      },\n      each: function each(e) {\n        e(t);\n      },\n      bind: n,\n      exists: n,\n      forall: n,\n      filter: function filter(e) {\n        return e(t) ? r : l;\n      },\n      toArray: function toArray() {\n        return [t];\n      },\n      toString: function toString() {\n        return \"some(\" + t + \")\";\n      }\n    };\n    return r;\n  },\n      p = {\n    some: d,\n    none: n,\n    from: function from(e) {\n      return null == e ? l : d(e);\n    }\n  },\n      g = tinymce.util.Tools.resolve(\"tinymce.dom.DOMUtils\"),\n      r = \"undefined\" != typeof window ? window : Function(\"return this;\")(),\n      b = {},\n      m = {\n    exports: b\n  },\n      f = {};\n\n  function h(e) {\n    return r.Prism && e.getParam(\"codesample_global_prismjs\", !1, \"boolean\") ? r.Prism : k;\n  }\n\n  function y(e) {\n    var n = e.selection ? e.selection.getNode() : null;\n    return u(n) ? p.some(n) : p.none();\n  }\n\n  function w(s) {\n    var t,\n        e,\n        n = s.getParam(\"codesample_languages\") || [{\n      text: \"HTML/XML\",\n      value: \"markup\"\n    }, {\n      text: \"JavaScript\",\n      value: \"javascript\"\n    }, {\n      text: \"CSS\",\n      value: \"css\"\n    }, {\n      text: \"PHP\",\n      value: \"php\"\n    }, {\n      text: \"Ruby\",\n      value: \"ruby\"\n    }, {\n      text: \"Python\",\n      value: \"python\"\n    }, {\n      text: \"Java\",\n      value: \"java\"\n    }, {\n      text: \"C\",\n      value: \"c\"\n    }, {\n      text: \"C#\",\n      value: \"csharp\"\n    }, {\n      text: \"C++\",\n      value: \"cpp\"\n    }],\n        a = (0 < (e = n).length ? p.some(e[0]) : p.none()).fold(o(\"\"), function (e) {\n      return e.value;\n    }),\n        r = (t = a, y(s).fold(function () {\n      return t;\n    }, function (e) {\n      var n = e.className.match(/language-(\\w+)/);\n      return n ? n[1] : t;\n    })),\n        i = y(s).fold(o(\"\"), function (e) {\n      return e.textContent;\n    });\n    s.windowManager.open({\n      title: \"Insert/Edit Code Sample\",\n      size: \"large\",\n      body: {\n        type: \"panel\",\n        items: [{\n          type: \"selectbox\",\n          name: \"language\",\n          label: \"Language\",\n          items: n\n        }, {\n          type: \"textarea\",\n          name: \"code\",\n          label: \"Code view\"\n        }]\n      },\n      buttons: [{\n        type: \"cancel\",\n        name: \"cancel\",\n        text: \"Cancel\"\n      }, {\n        type: \"submit\",\n        name: \"save\",\n        text: \"Save\",\n        primary: !0\n      }],\n      initialData: {\n        language: r,\n        code: i\n      },\n      onSubmit: function onSubmit(e) {\n        var n = e.getData(),\n            t = s,\n            a = n.language,\n            r = n.code;\n        t.undoManager.transact(function () {\n          var e = y(t);\n          return r = g.DOM.encode(r), e.fold(function () {\n            t.insertContent('<pre id=\"__new\" class=\"language-' + a + '\">' + r + \"</pre>\"), t.selection.select(t.$(\"#__new\").removeAttr(\"id\")[0]);\n          }, function (e) {\n            t.dom.setAttrib(e, \"class\", \"language-\" + a), e.innerHTML = r, h(t).highlightElement(e), t.selection.select(e);\n          });\n        }), e.close();\n      }\n    });\n  }\n\n  !function (e, n) {\n    var t,\n        a,\n        r = window.Prism;\n    window.Prism = {\n      manual: !0\n    }, t = this, a = function a() {\n      var e,\n          n,\n          h,\n          t,\n          a,\n          r,\n          s,\n          i,\n          o,\n          l,\n          u = \"undefined\" != typeof globalThis ? globalThis : \"undefined\" != typeof window ? window : f,\n          c = {\n        exports: {}\n      };\n\n      function y(e, n) {\n        return \"___\" + e.toUpperCase() + n + \"___\";\n      }\n\n      return e = c, n = function (u) {\n        var c = /\\blang(?:uage)?-([\\w-]+)\\b/i,\n            n = 0,\n            e = {},\n            j = {\n          manual: u.Prism && u.Prism.manual,\n          disableWorkerMessageHandler: u.Prism && u.Prism.disableWorkerMessageHandler,\n          util: {\n            encode: function e(n) {\n              return n instanceof T ? new T(n.type, e(n.content), n.alias) : Array.isArray(n) ? n.map(e) : n.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n            },\n            type: function type(e) {\n              return Object.prototype.toString.call(e).slice(8, -1);\n            },\n            objId: function objId(e) {\n              return e.__id || Object.defineProperty(e, \"__id\", {\n                value: ++n\n              }), e.__id;\n            },\n            clone: function t(e, a) {\n              var r, n;\n\n              switch (a = a || {}, j.util.type(e)) {\n                case \"Object\":\n                  if (n = j.util.objId(e), a[n]) return a[n];\n\n                  for (var s in r = {}, a[n] = r, e) {\n                    e.hasOwnProperty(s) && (r[s] = t(e[s], a));\n                  }\n\n                  return r;\n\n                case \"Array\":\n                  return n = j.util.objId(e), a[n] || (r = [], a[n] = r, e.forEach(function (e, n) {\n                    r[n] = t(e, a);\n                  }), r);\n\n                default:\n                  return e;\n              }\n            },\n            getLanguage: function getLanguage(e) {\n              for (; e && !c.test(e.className);) {\n                e = e.parentElement;\n              }\n\n              return e ? (e.className.match(c) || [, \"none\"])[1].toLowerCase() : \"none\";\n            },\n            currentScript: function currentScript() {\n              if (\"undefined\" == typeof document) return null;\n              if (\"currentScript\" in document) return document.currentScript;\n\n              try {\n                throw new Error();\n              } catch (e) {\n                var n = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(e.stack) || [])[1];\n\n                if (n) {\n                  var t,\n                      a = document.getElementsByTagName(\"script\");\n\n                  for (t in a) {\n                    if (a[t].src == n) return a[t];\n                  }\n                }\n\n                return null;\n              }\n            },\n            isActive: function isActive(e, n, t) {\n              for (var a = \"no-\" + n; e;) {\n                var r = e.classList;\n                if (r.contains(n)) return !0;\n                if (r.contains(a)) return !1;\n                e = e.parentElement;\n              }\n\n              return !!t;\n            }\n          },\n          languages: {\n            plain: e,\n            plaintext: e,\n            text: e,\n            txt: e,\n            extend: function extend(e, n) {\n              var t,\n                  a = j.util.clone(j.languages[e]);\n\n              for (t in n) {\n                a[t] = n[t];\n              }\n\n              return a;\n            },\n            insertBefore: function insertBefore(t, e, n, a) {\n              var r,\n                  s = (a = a || j.languages)[t],\n                  i = {};\n\n              for (r in s) {\n                if (s.hasOwnProperty(r)) {\n                  if (r == e) for (var o in n) {\n                    n.hasOwnProperty(o) && (i[o] = n[o]);\n                  }\n                  n.hasOwnProperty(r) || (i[r] = s[r]);\n                }\n              }\n\n              var l = a[t];\n              return a[t] = i, j.languages.DFS(j.languages, function (e, n) {\n                n === l && e != t && (this[e] = i);\n              }), i;\n            },\n            DFS: function e(n, t, a, r) {\n              r = r || {};\n              var s,\n                  i,\n                  o,\n                  l = j.util.objId;\n\n              for (s in n) {\n                n.hasOwnProperty(s) && (t.call(n, s, n[s], a || s), i = n[s], \"Object\" !== (o = j.util.type(i)) || r[l(i)] ? \"Array\" !== o || r[l(i)] || (r[l(i)] = !0, e(i, t, s, r)) : (r[l(i)] = !0, e(i, t, null, r)));\n              }\n            }\n          },\n          plugins: {},\n          highlightAll: function highlightAll(e, n) {\n            j.highlightAllUnder(document, e, n);\n          },\n          highlightAllUnder: function highlightAllUnder(e, n, t) {\n            var a = {\n              callback: t,\n              container: e,\n              selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n            };\n            j.hooks.run(\"before-highlightall\", a), a.elements = Array.prototype.slice.apply(a.container.querySelectorAll(a.selector)), j.hooks.run(\"before-all-elements-highlight\", a);\n\n            for (var r, s = 0; r = a.elements[s++];) {\n              j.highlightElement(r, !0 === n, a.callback);\n            }\n          },\n          highlightElement: function highlightElement(e, n, t) {\n            var a = j.util.getLanguage(e),\n                r = j.languages[a];\n            e.className = e.className.replace(c, \"\").replace(/\\s+/g, \" \") + \" language-\" + a;\n            var s = e.parentElement;\n            s && \"pre\" === s.nodeName.toLowerCase() && (s.className = s.className.replace(c, \"\").replace(/\\s+/g, \" \") + \" language-\" + a);\n            var i,\n                o = {\n              element: e,\n              language: a,\n              grammar: r,\n              code: e.textContent\n            };\n\n            function l(e) {\n              o.highlightedCode = e, j.hooks.run(\"before-insert\", o), o.element.innerHTML = o.highlightedCode, j.hooks.run(\"after-highlight\", o), j.hooks.run(\"complete\", o), t && t.call(o.element);\n            }\n\n            if (j.hooks.run(\"before-sanity-check\", o), (s = o.element.parentElement) && \"pre\" === s.nodeName.toLowerCase() && !s.hasAttribute(\"tabindex\") && s.setAttribute(\"tabindex\", \"0\"), !o.code) return j.hooks.run(\"complete\", o), void (t && t.call(o.element));\n            j.hooks.run(\"before-highlight\", o), o.grammar ? n && u.Worker ? ((i = new Worker(j.filename)).onmessage = function (e) {\n              l(e.data);\n            }, i.postMessage(JSON.stringify({\n              language: o.language,\n              code: o.code,\n              immediateClose: !0\n            }))) : l(j.highlight(o.code, o.grammar, o.language)) : l(j.util.encode(o.code));\n          },\n          highlight: function highlight(e, n, t) {\n            var a = {\n              code: e,\n              grammar: n,\n              language: t\n            };\n            return j.hooks.run(\"before-tokenize\", a), a.tokens = j.tokenize(a.code, a.grammar), j.hooks.run(\"after-tokenize\", a), T.stringify(j.util.encode(a.tokens), a.language);\n          },\n          tokenize: function tokenize(e, n) {\n            var t = n.rest;\n\n            if (t) {\n              for (var a in t) {\n                n[a] = t[a];\n              }\n\n              delete n.rest;\n            }\n\n            var r = new s();\n            return N(r, r.head, e), function e(n, t, a, r, s, i) {\n              for (var o in a) {\n                if (a.hasOwnProperty(o) && a[o]) for (var l = a[o], l = Array.isArray(l) ? l : [l], u = 0; u < l.length; ++u) {\n                  if (i && i.cause == o + \",\" + u) return;\n                  var c,\n                      d = l[u],\n                      p = d.inside,\n                      g = !!d.lookbehind,\n                      b = !!d.greedy,\n                      m = d.alias;\n                  b && !d.pattern.global && (c = d.pattern.toString().match(/[imsuy]*$/)[0], d.pattern = RegExp(d.pattern.source, c + \"g\"));\n\n                  for (var f = d.pattern || d, h = r.next, y = s; h !== t.tail && !(i && y >= i.reach); y += h.value.length, h = h.next) {\n                    var w = h.value;\n                    if (t.length > n.length) return;\n\n                    if (!(w instanceof T)) {\n                      var k,\n                          v = 1;\n\n                      if (b) {\n                        if (!(k = O(f, y, n, g))) break;\n                        var _ = k.index,\n                            x = k.index + k[0].length,\n                            F = y;\n\n                        for (F += h.value.length; F <= _;) {\n                          F += (h = h.next).value.length;\n                        }\n\n                        if (y = F -= h.value.length, h.value instanceof T) continue;\n\n                        for (var P = h; P !== t.tail && (F < x || \"string\" == typeof P.value); P = P.next) {\n                          v++, F += P.value.length;\n                        }\n\n                        v--, w = n.slice(y, F), k.index -= y;\n                      } else if (!(k = O(f, 0, w, g))) continue;\n\n                      var _ = k.index,\n                          A = k[0],\n                          S = w.slice(0, _),\n                          $ = w.slice(_ + A.length),\n                          z = y + w.length;\n                      i && z > i.reach && (i.reach = z);\n                      var E = h.prev;\n                      S && (E = N(t, E, S), y += S.length), function (e, n, t) {\n                        for (var a = n.next, r = 0; r < t && a !== e.tail; r++) {\n                          a = a.next;\n                        }\n\n                        (n.next = a).prev = n, e.length -= r;\n                      }(t, E, v);\n                      var C,\n                          h = N(t, E, new T(o, p ? j.tokenize(A, p) : A, m, A));\n                      $ && N(t, h, $), 1 < v && (e(n, t, a, h.prev, y, C = {\n                        cause: o + \",\" + u,\n                        reach: z\n                      }), i && C.reach > i.reach && (i.reach = C.reach));\n                    }\n                  }\n                }\n              }\n            }(e, r, n, r.head, 0), function (e) {\n              for (var n = [], t = e.head.next; t !== e.tail;) {\n                n.push(t.value), t = t.next;\n              }\n\n              return n;\n            }(r);\n          },\n          hooks: {\n            all: {},\n            add: function add(e, n) {\n              var t = j.hooks.all;\n              t[e] = t[e] || [], t[e].push(n);\n            },\n            run: function run(e, n) {\n              var t = j.hooks.all[e];\n              if (t && t.length) for (var a, r = 0; a = t[r++];) {\n                a(n);\n              }\n            }\n          },\n          Token: T\n        };\n\n        function T(e, n, t, a) {\n          this.type = e, this.content = n, this.alias = t, this.length = 0 | (a || \"\").length;\n        }\n\n        function O(e, n, t, a) {\n          e.lastIndex = n;\n          var r,\n              s = e.exec(t);\n          return s && a && s[1] && (r = s[1].length, s.index += r, s[0] = s[0].slice(r)), s;\n        }\n\n        function s() {\n          var e = {\n            value: null,\n            prev: null,\n            next: null\n          },\n              n = {\n            value: null,\n            prev: e,\n            next: null\n          };\n          e.next = n, this.head = e, this.tail = n, this.length = 0;\n        }\n\n        function N(e, n, t) {\n          var a = n.next,\n              r = {\n            value: t,\n            prev: n,\n            next: a\n          };\n          return n.next = r, a.prev = r, e.length++, r;\n        }\n\n        if (u.Prism = j, T.stringify = function n(e, t) {\n          if (\"string\" == typeof e) return e;\n\n          if (Array.isArray(e)) {\n            var a = \"\";\n            return e.forEach(function (e) {\n              a += n(e, t);\n            }), a;\n          }\n\n          var r = {\n            type: e.type,\n            content: n(e.content, t),\n            tag: \"span\",\n            classes: [\"token\", e.type],\n            attributes: {},\n            language: t\n          },\n              s = e.alias;\n          s && (Array.isArray(s) ? Array.prototype.push.apply(r.classes, s) : r.classes.push(s)), j.hooks.run(\"wrap\", r);\n          var i,\n              o = \"\";\n\n          for (i in r.attributes) {\n            o += \" \" + i + '=\"' + (r.attributes[i] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n          }\n\n          return \"<\" + r.tag + ' class=\"' + r.classes.join(\" \") + '\"' + o + \">\" + r.content + \"</\" + r.tag + \">\";\n        }, !u.document) return u.addEventListener && (j.disableWorkerMessageHandler || u.addEventListener(\"message\", function (e) {\n          var n = JSON.parse(e.data),\n              t = n.language,\n              a = n.code,\n              r = n.immediateClose;\n          u.postMessage(j.highlight(a, j.languages[t], t)), r && u.close();\n        }, !1)), j;\n        var t,\n            a = j.util.currentScript();\n\n        function r() {\n          j.manual || j.highlightAll();\n        }\n\n        return a && (j.filename = a.src, a.hasAttribute(\"data-manual\") && (j.manual = !0)), j.manual || (\"loading\" === (t = document.readyState) || \"interactive\" === t && a && a.defer ? document.addEventListener(\"DOMContentLoaded\", r) : window.requestAnimationFrame ? window.requestAnimationFrame(r) : window.setTimeout(r, 16)), j;\n      }(\"undefined\" != typeof window ? window : \"undefined\" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {}), e.exports && (e.exports = n), void 0 !== u && (u.Prism = n), Prism.languages.clike = {\n        comment: [{\n          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: !0,\n          greedy: !0\n        }, {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: !0,\n          greedy: !0\n        }],\n        string: {\n          pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n          greedy: !0\n        },\n        \"class-name\": {\n          pattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n          lookbehind: !0,\n          inside: {\n            punctuation: /[.\\\\]/\n          }\n        },\n        keyword: /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n        \"boolean\": /\\b(?:true|false)\\b/,\n        \"function\": /\\b\\w+(?=\\()/,\n        number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n        operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n        punctuation: /[{}[\\];(),.:]/\n      }, h = Prism, Object.defineProperties(h.languages[\"markup-templating\"] = {}, {\n        buildPlaceholders: {\n          value: function value(a, r, e, s) {\n            var i;\n            a.language === r && (i = a.tokenStack = [], a.code = a.code.replace(e, function (e) {\n              if (\"function\" == typeof s && !s(e)) return e;\n\n              for (var n, t = i.length; -1 !== a.code.indexOf(n = y(r, t));) {\n                ++t;\n              }\n\n              return i[t] = e, n;\n            }), a.grammar = h.languages.markup);\n          }\n        },\n        tokenizePlaceholders: {\n          value: function value(g, b) {\n            var m, f;\n            g.language === b && g.tokenStack && (g.grammar = h.languages[b], m = 0, f = Object.keys(g.tokenStack), function e(n) {\n              for (var t = 0; t < n.length && !(m >= f.length); t++) {\n                var a,\n                    r,\n                    s,\n                    i,\n                    o,\n                    l,\n                    u,\n                    c,\n                    d,\n                    p = n[t];\n                \"string\" == typeof p || p.content && \"string\" == typeof p.content ? (a = f[m], r = g.tokenStack[a], s = \"string\" == typeof p ? p : p.content, i = y(b, a), -1 < (o = s.indexOf(i)) && (++m, l = s.substring(0, o), u = new h.Token(b, h.tokenize(r, g.grammar), \"language-\" + b, r), c = s.substring(o + i.length), d = [], l && d.push.apply(d, e([l])), d.push(u), c && d.push.apply(d, e([c])), \"string\" == typeof p ? n.splice.apply(n, [t, 1].concat(d)) : p.content = d)) : p.content && e(p.content);\n              }\n\n              return n;\n            }(g.tokens));\n          }\n        }\n      }), Prism.languages.c = Prism.languages.extend(\"clike\", {\n        comment: {\n          pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n          greedy: !0\n        },\n        \"class-name\": {\n          pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n          lookbehind: !0\n        },\n        keyword: /\\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n        \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i,\n        number: /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n        operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n      }), Prism.languages.insertBefore(\"c\", \"string\", {\n        macro: {\n          pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: !0,\n          greedy: !0,\n          alias: \"property\",\n          inside: {\n            string: [{\n              pattern: /^(#\\s*include\\s*)<[^>]+>/,\n              lookbehind: !0\n            }, Prism.languages.c.string],\n            comment: Prism.languages.c.comment,\n            \"macro-name\": [{\n              pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n              lookbehind: !0\n            }, {\n              pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n              lookbehind: !0,\n              alias: \"function\"\n            }],\n            directive: {\n              pattern: /^(#\\s*)[a-z]+/,\n              lookbehind: !0,\n              alias: \"keyword\"\n            },\n            \"directive-hash\": /^#/,\n            punctuation: /##|\\\\(?=[\\r\\n])/,\n            expression: {\n              pattern: /\\S[\\s\\S]*/,\n              inside: Prism.languages.c\n            }\n          }\n        },\n        constant: /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n      }), delete Prism.languages.c[\"boolean\"], t = Prism, a = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/, r = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () {\n        return a.source;\n      }), t.languages.cpp = t.languages.extend(\"c\", {\n        \"class-name\": [{\n          pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n            return a.source;\n          })),\n          lookbehind: !0\n        }, /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n        keyword: a,\n        number: {\n          pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n          greedy: !0\n        },\n        operator: />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n        \"boolean\": /\\b(?:true|false)\\b/\n      }), t.languages.insertBefore(\"cpp\", \"string\", {\n        module: {\n          pattern: RegExp(/(\\b(?:module|import)\\s+)/.source + \"(?:\" + /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + \"|\" + /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () {\n            return r;\n          }) + \")\"),\n          lookbehind: !0,\n          greedy: !0,\n          inside: {\n            string: /^[<\"][\\s\\S]+/,\n            operator: /:/,\n            punctuation: /\\./\n          }\n        },\n        \"raw-string\": {\n          pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n          alias: \"string\",\n          greedy: !0\n        }\n      }), t.languages.insertBefore(\"cpp\", \"keyword\", {\n        \"generic-function\": {\n          pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n          inside: {\n            \"function\": /^\\w+/,\n            generic: {\n              pattern: /<[\\s\\S]+/,\n              alias: \"class-name\",\n              inside: t.languages.cpp\n            }\n          }\n        }\n      }), t.languages.insertBefore(\"cpp\", \"operator\", {\n        \"double-colon\": {\n          pattern: /::/,\n          alias: \"punctuation\"\n        }\n      }), t.languages.insertBefore(\"cpp\", \"class-name\", {\n        \"base-clause\": {\n          pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n          lookbehind: !0,\n          greedy: !0,\n          inside: t.languages.extend(\"cpp\", {})\n        }\n      }), t.languages.insertBefore(\"inside\", \"double-colon\", {\n        \"class-name\": /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n      }, t.languages.cpp[\"base-clause\"]), function (t) {\n        function a(e, t) {\n          return e.replace(/<<(\\d+)>>/g, function (e, n) {\n            return \"(?:\" + t[+n] + \")\";\n          });\n        }\n\n        function r(e, n, t) {\n          return RegExp(a(e, n), t || \"\");\n        }\n\n        function e(e, n) {\n          for (var t = 0; t < n; t++) {\n            e = e.replace(/<<self>>/g, function () {\n              return \"(?:\" + e + \")\";\n            });\n          }\n\n          return e.replace(/<<self>>/g, \"[^\\\\s\\\\S]\");\n        }\n\n        var n = \"bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void\",\n            s = \"class enum interface record struct\",\n            i = \"add alias and ascending async await by descending from(?=\\\\s*(?:\\\\w|$)) get global group into init(?=\\\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\\\s*{)\",\n            o = \"abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield\";\n\n        function l(e) {\n          return \"\\\\b(?:\" + e.trim().replace(/ /g, \"|\") + \")\\\\b\";\n        }\n\n        var u = l(s),\n            c = RegExp(l(n + \" \" + s + \" \" + i + \" \" + o)),\n            d = l(s + \" \" + i + \" \" + o),\n            p = l(n + \" \" + s + \" \" + o),\n            g = e(/<(?:[^<>;=+\\-*/%&|^]|<<self>>)*>/.source, 2),\n            b = e(/\\((?:[^()]|<<self>>)*\\)/.source, 2),\n            m = /@?\\b[A-Za-z_]\\w*\\b/.source,\n            f = a(/<<0>>(?:\\s*<<1>>)?/.source, [m, g]),\n            h = a(/(?!<<0>>)<<1>>(?:\\s*\\.\\s*<<1>>)*/.source, [d, f]),\n            y = /\\[\\s*(?:,\\s*)*\\]/.source,\n            w = a(/<<0>>(?:\\s*(?:\\?\\s*)?<<1>>)*(?:\\s*\\?)?/.source, [h, y]),\n            k = a(/[^,()<>[\\];=+\\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source, [g, b, y]),\n            v = a(/\\(<<0>>+(?:,<<0>>+)+\\)/.source, [k]),\n            _ = a(/(?:<<0>>|<<1>>)(?:\\s*(?:\\?\\s*)?<<2>>)*(?:\\s*\\?)?/.source, [v, h, y]),\n            x = {\n          keyword: c,\n          punctuation: /[<>()?,.:[\\]]/\n        },\n            F = /'(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'/.source,\n            P = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/.source;\n\n        t.languages.csharp = t.languages.extend(\"clike\", {\n          string: [{\n            pattern: r(/(^|[^$\\\\])<<0>>/.source, [/@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source]),\n            lookbehind: !0,\n            greedy: !0\n          }, {\n            pattern: r(/(^|[^@$\\\\])<<0>>/.source, [P]),\n            lookbehind: !0,\n            greedy: !0\n          }, {\n            pattern: RegExp(F),\n            greedy: !0,\n            alias: \"character\"\n          }],\n          \"class-name\": [{\n            pattern: r(/(\\busing\\s+static\\s+)<<0>>(?=\\s*;)/.source, [h]),\n            lookbehind: !0,\n            inside: x\n          }, {\n            pattern: r(/(\\busing\\s+<<0>>\\s*=\\s*)<<1>>(?=\\s*;)/.source, [m, _]),\n            lookbehind: !0,\n            inside: x\n          }, {\n            pattern: r(/(\\busing\\s+)<<0>>(?=\\s*=)/.source, [m]),\n            lookbehind: !0\n          }, {\n            pattern: r(/(\\b<<0>>\\s+)<<1>>/.source, [u, f]),\n            lookbehind: !0,\n            inside: x\n          }, {\n            pattern: r(/(\\bcatch\\s*\\(\\s*)<<0>>/.source, [h]),\n            lookbehind: !0,\n            inside: x\n          }, {\n            pattern: r(/(\\bwhere\\s+)<<0>>/.source, [m]),\n            lookbehind: !0\n          }, {\n            pattern: r(/(\\b(?:is(?:\\s+not)?|as)\\s+)<<0>>/.source, [w]),\n            lookbehind: !0,\n            inside: x\n          }, {\n            pattern: r(/\\b<<0>>(?=\\s+(?!<<1>>|with\\s*\\{)<<2>>(?:\\s*[=,;:{)\\]]|\\s+(?:in|when)\\b))/.source, [_, p, m]),\n            inside: x\n          }],\n          keyword: c,\n          number: /(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:ul|lu|[dflmu])?\\b/i,\n          operator: />>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,\n          punctuation: /\\?\\.?|::|[{}[\\];(),.:]/\n        }), t.languages.insertBefore(\"csharp\", \"number\", {\n          range: {\n            pattern: /\\.\\./,\n            alias: \"operator\"\n          }\n        }), t.languages.insertBefore(\"csharp\", \"punctuation\", {\n          \"named-parameter\": {\n            pattern: r(/([(,]\\s*)<<0>>(?=\\s*:)/.source, [m]),\n            lookbehind: !0,\n            alias: \"punctuation\"\n          }\n        }), t.languages.insertBefore(\"csharp\", \"class-name\", {\n          namespace: {\n            pattern: r(/(\\b(?:namespace|using)\\s+)<<0>>(?:\\s*\\.\\s*<<0>>)*(?=\\s*[;{])/.source, [m]),\n            lookbehind: !0,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          \"type-expression\": {\n            pattern: r(/(\\b(?:default|typeof|sizeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<<0>>)*(?=\\s*\\))/.source, [b]),\n            lookbehind: !0,\n            alias: \"class-name\",\n            inside: x\n          },\n          \"return-type\": {\n            pattern: r(/<<0>>(?=\\s+(?:<<1>>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source, [_, h]),\n            inside: x,\n            alias: \"class-name\"\n          },\n          \"constructor-invocation\": {\n            pattern: r(/(\\bnew\\s+)<<0>>(?=\\s*[[({])/.source, [_]),\n            lookbehind: !0,\n            inside: x,\n            alias: \"class-name\"\n          },\n          \"generic-method\": {\n            pattern: r(/<<0>>\\s*<<1>>(?=\\s*\\()/.source, [m, g]),\n            inside: {\n              \"function\": r(/^<<0>>/.source, [m]),\n              generic: {\n                pattern: RegExp(g),\n                alias: \"class-name\",\n                inside: x\n              }\n            }\n          },\n          \"type-list\": {\n            pattern: r(/\\b((?:<<0>>\\s+<<1>>|record\\s+<<1>>\\s*<<5>>|where\\s+<<2>>)\\s*:\\s*)(?:<<3>>|<<4>>|<<1>>\\s*<<5>>|<<6>>)(?:\\s*,\\s*(?:<<3>>|<<4>>|<<6>>))*(?=\\s*(?:where|[{;]|=>|$))/.source, [u, f, m, _, c.source, b, /\\bnew\\s*\\(\\s*\\)/.source]),\n            lookbehind: !0,\n            inside: {\n              \"record-arguments\": {\n                pattern: r(/(^(?!new\\s*\\()<<0>>\\s*)<<1>>/.source, [f, b]),\n                lookbehind: !0,\n                greedy: !0,\n                inside: t.languages.csharp\n              },\n              keyword: c,\n              \"class-name\": {\n                pattern: RegExp(_),\n                greedy: !0,\n                inside: x\n              },\n              punctuation: /[,()]/\n            }\n          },\n          preprocessor: {\n            pattern: /(^[\\t ]*)#.*/m,\n            lookbehind: !0,\n            alias: \"property\",\n            inside: {\n              directive: {\n                pattern: /(#)\\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\\b/,\n                lookbehind: !0,\n                alias: \"keyword\"\n              }\n            }\n          }\n        });\n        var A = P + \"|\" + F,\n            S = a(/\\/(?![*/])|\\/\\/[^\\r\\n]*[\\r\\n]|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>/.source, [A]),\n            $ = e(a(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [S]), 2),\n            z = /\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/.source,\n            E = a(/<<0>>(?:\\s*\\(<<1>>*\\))?/.source, [h, $]);\n        t.languages.insertBefore(\"csharp\", \"class-name\", {\n          attribute: {\n            pattern: r(/((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<<0>>\\s*:\\s*)?<<1>>(?:\\s*,\\s*<<1>>)*(?=\\s*\\])/.source, [z, E]),\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n              target: {\n                pattern: r(/^<<0>>(?=\\s*:)/.source, [z]),\n                alias: \"keyword\"\n              },\n              \"attribute-arguments\": {\n                pattern: r(/\\(<<0>>*\\)/.source, [$]),\n                inside: t.languages.csharp\n              },\n              \"class-name\": {\n                pattern: RegExp(h),\n                inside: {\n                  punctuation: /\\./\n                }\n              },\n              punctuation: /[:,]/\n            }\n          }\n        });\n        var C = /:[^}\\r\\n]+/.source,\n            j = e(a(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [S]), 2),\n            T = a(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [j, C]),\n            O = e(a(/[^\"'/()]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>|\\(<<self>>*\\)/.source, [A]), 2),\n            N = a(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [O, C]);\n\n        function B(e, n) {\n          return {\n            interpolation: {\n              pattern: r(/((?:^|[^{])(?:\\{\\{)*)<<0>>/.source, [e]),\n              lookbehind: !0,\n              inside: {\n                \"format-string\": {\n                  pattern: r(/(^\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\}$)/.source, [n, C]),\n                  lookbehind: !0,\n                  inside: {\n                    punctuation: /^:/\n                  }\n                },\n                punctuation: /^\\{|\\}$/,\n                expression: {\n                  pattern: /[\\s\\S]+/,\n                  alias: \"language-csharp\",\n                  inside: t.languages.csharp\n                }\n              }\n            },\n            string: /[\\s\\S]+/\n          };\n        }\n\n        t.languages.insertBefore(\"csharp\", \"string\", {\n          \"interpolation-string\": [{\n            pattern: r(/(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<<0>>|[^\\\\{\"])*\"/.source, [T]),\n            lookbehind: !0,\n            greedy: !0,\n            inside: B(T, j)\n          }, {\n            pattern: r(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<<0>>|[^\\\\\"{])*\"/.source, [N]),\n            lookbehind: !0,\n            greedy: !0,\n            inside: B(N, O)\n          }]\n        });\n      }(Prism), Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp, function (e) {\n        var n = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n        e.languages.css = {\n          comment: /\\/\\*[\\s\\S]*?\\*\\//,\n          atrule: {\n            pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n            inside: {\n              rule: /^@[\\w-]+/,\n              \"selector-function-argument\": {\n                pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n                lookbehind: !0,\n                alias: \"selector\"\n              },\n              keyword: {\n                pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n                lookbehind: !0\n              }\n            }\n          },\n          url: {\n            pattern: RegExp(\"\\\\burl\\\\((?:\" + n.source + \"|\" + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + \")\\\\)\", \"i\"),\n            greedy: !0,\n            inside: {\n              \"function\": /^url/i,\n              punctuation: /^\\(|\\)$/,\n              string: {\n                pattern: RegExp(\"^\" + n.source + \"$\"),\n                alias: \"url\"\n              }\n            }\n          },\n          selector: {\n            pattern: RegExp(\"(^|[{}\\\\s])[^{}\\\\s](?:[^{};\\\"'\\\\s]|\\\\s+(?![\\\\s{])|\" + n.source + \")*(?=\\\\s*\\\\{)\"),\n            lookbehind: !0\n          },\n          string: {\n            pattern: n,\n            greedy: !0\n          },\n          property: {\n            pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n            lookbehind: !0\n          },\n          important: /!important\\b/i,\n          \"function\": {\n            pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n            lookbehind: !0\n          },\n          punctuation: /[(){};:,]/\n        }, e.languages.css.atrule.inside.rest = e.languages.css;\n        var t = e.languages.markup;\n        t && (t.tag.addInlined(\"style\", \"css\"), t.tag.addAttribute(\"style\", \"css\"));\n      }(Prism), s = Prism, i = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/, o = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source, l = {\n        pattern: RegExp(o + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n        lookbehind: !0,\n        inside: {\n          namespace: {\n            pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          punctuation: /\\./\n        }\n      }, s.languages.java = s.languages.extend(\"clike\", {\n        \"class-name\": [l, {\n          pattern: RegExp(o + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n          lookbehind: !0,\n          inside: l.inside\n        }],\n        keyword: i,\n        \"function\": [s.languages.clike[\"function\"], {\n          pattern: /(::\\s*)[a-z_]\\w*/,\n          lookbehind: !0\n        }],\n        number: /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n        operator: {\n          pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n          lookbehind: !0\n        }\n      }), s.languages.insertBefore(\"java\", \"string\", {\n        \"triple-quoted-string\": {\n          pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n          greedy: !0,\n          alias: \"string\"\n        }\n      }), s.languages.insertBefore(\"java\", \"class-name\", {\n        annotation: {\n          pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n          lookbehind: !0,\n          alias: \"punctuation\"\n        },\n        generics: {\n          pattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n          inside: {\n            \"class-name\": l,\n            keyword: i,\n            punctuation: /[<>(),.:]/,\n            operator: /[?&|]/\n          }\n        },\n        namespace: {\n          pattern: RegExp(/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(/<keyword>/g, function () {\n            return i.source;\n          })),\n          lookbehind: !0,\n          inside: {\n            punctuation: /\\./\n          }\n        }\n      }), Prism.languages.javascript = Prism.languages.extend(\"clike\", {\n        \"class-name\": [Prism.languages.clike[\"class-name\"], {\n          pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,\n          lookbehind: !0\n        }],\n        keyword: [{\n          pattern: /((?:^|\\})\\s*)catch\\b/,\n          lookbehind: !0\n        }, {\n          pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n          lookbehind: !0\n        }],\n        \"function\": /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n        number: /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n        operator: /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n      }), Prism.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/, Prism.languages.insertBefore(\"javascript\", \"keyword\", {\n        regex: {\n          pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n          lookbehind: !0,\n          greedy: !0,\n          inside: {\n            \"regex-source\": {\n              pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n              lookbehind: !0,\n              alias: \"language-regex\",\n              inside: Prism.languages.regex\n            },\n            \"regex-delimiter\": /^\\/|\\/$/,\n            \"regex-flags\": /^[a-z]+$/\n          }\n        },\n        \"function-variable\": {\n          pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n          alias: \"function\"\n        },\n        parameter: [{\n          pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n          lookbehind: !0,\n          inside: Prism.languages.javascript\n        }, {\n          pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n          lookbehind: !0,\n          inside: Prism.languages.javascript\n        }, {\n          pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n          lookbehind: !0,\n          inside: Prism.languages.javascript\n        }, {\n          pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n          lookbehind: !0,\n          inside: Prism.languages.javascript\n        }],\n        constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n      }), Prism.languages.insertBefore(\"javascript\", \"string\", {\n        hashbang: {\n          pattern: /^#!.*/,\n          greedy: !0,\n          alias: \"comment\"\n        },\n        \"template-string\": {\n          pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n          greedy: !0,\n          inside: {\n            \"template-punctuation\": {\n              pattern: /^`|`$/,\n              alias: \"string\"\n            },\n            interpolation: {\n              pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n              lookbehind: !0,\n              inside: {\n                \"interpolation-punctuation\": {\n                  pattern: /^\\$\\{|\\}$/,\n                  alias: \"punctuation\"\n                },\n                rest: Prism.languages.javascript\n              }\n            },\n            string: /[\\s\\S]+/\n          }\n        }\n      }), Prism.languages.markup && (Prism.languages.markup.tag.addInlined(\"script\", \"javascript\"), Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, \"javascript\")), Prism.languages.js = Prism.languages.javascript, Prism.languages.markup = {\n        comment: {\n          pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n          greedy: !0\n        },\n        prolog: {\n          pattern: /<\\?[\\s\\S]+?\\?>/,\n          greedy: !0\n        },\n        doctype: {\n          pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n          greedy: !0,\n          inside: {\n            \"internal-subset\": {\n              pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n              lookbehind: !0,\n              greedy: !0,\n              inside: null\n            },\n            string: {\n              pattern: /\"[^\"]*\"|'[^']*'/,\n              greedy: !0\n            },\n            punctuation: /^<!|>$|[[\\]]/,\n            \"doctype-tag\": /^DOCTYPE/i,\n            name: /[^\\s<>'\"]+/\n          }\n        },\n        cdata: {\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n          greedy: !0\n        },\n        tag: {\n          pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n          greedy: !0,\n          inside: {\n            tag: {\n              pattern: /^<\\/?[^\\s>\\/]+/,\n              inside: {\n                punctuation: /^<\\/?/,\n                namespace: /^[^\\s>\\/:]+:/\n              }\n            },\n            \"special-attr\": [],\n            \"attr-value\": {\n              pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n              inside: {\n                punctuation: [{\n                  pattern: /^=/,\n                  alias: \"attr-equals\"\n                }, /\"|'/]\n              }\n            },\n            punctuation: /\\/?>/,\n            \"attr-name\": {\n              pattern: /[^\\s>\\/]+/,\n              inside: {\n                namespace: /^[^\\s>\\/:]+:/\n              }\n            }\n          }\n        },\n        entity: [{\n          pattern: /&[\\da-z]{1,8};/i,\n          alias: \"named-entity\"\n        }, /&#x?[\\da-f]{1,8};/i]\n      }, Prism.languages.markup.tag.inside[\"attr-value\"].inside.entity = Prism.languages.markup.entity, Prism.languages.markup.doctype.inside[\"internal-subset\"].inside = Prism.languages.markup, Prism.hooks.add(\"wrap\", function (e) {\n        \"entity\" === e.type && (e.attributes.title = e.content.replace(/&amp;/, \"&\"));\n      }), Object.defineProperty(Prism.languages.markup.tag, \"addInlined\", {\n        value: function value(e, n) {\n          var t = {};\n          t[\"language-\" + n] = {\n            pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n            lookbehind: !0,\n            inside: Prism.languages[n]\n          }, t.cdata = /^<!\\[CDATA\\[|\\]\\]>$/i;\n          var a = {\n            \"included-cdata\": {\n              pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n              inside: t\n            }\n          };\n          a[\"language-\" + n] = {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages[n]\n          };\n          var r = {};\n          r[e] = {\n            pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n              return e;\n            }), \"i\"),\n            lookbehind: !0,\n            greedy: !0,\n            inside: a\n          }, Prism.languages.insertBefore(\"markup\", \"cdata\", r);\n        }\n      }), Object.defineProperty(Prism.languages.markup.tag, \"addAttribute\", {\n        value: function value(e, n) {\n          Prism.languages.markup.tag.inside[\"special-attr\"].push({\n            pattern: RegExp(/(^|[\"'\\s])/.source + \"(?:\" + e + \")\" + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, \"i\"),\n            lookbehind: !0,\n            inside: {\n              \"attr-name\": /^[^\\s=]+/,\n              \"attr-value\": {\n                pattern: /=[\\s\\S]+/,\n                inside: {\n                  value: {\n                    pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                    lookbehind: !0,\n                    alias: [n, \"language-\" + n],\n                    inside: Prism.languages[n]\n                  },\n                  punctuation: [{\n                    pattern: /^=/,\n                    alias: \"attr-equals\"\n                  }, /\"|'/]\n                }\n              }\n            }\n          });\n        }\n      }), Prism.languages.html = Prism.languages.markup, Prism.languages.mathml = Prism.languages.markup, Prism.languages.svg = Prism.languages.markup, Prism.languages.xml = Prism.languages.extend(\"markup\", {}), Prism.languages.ssml = Prism.languages.xml, Prism.languages.atom = Prism.languages.xml, Prism.languages.rss = Prism.languages.xml, function (n) {\n        var e = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/,\n            t = [{\n          pattern: /\\b(?:false|true)\\b/i,\n          alias: \"boolean\"\n        }, {\n          pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n          greedy: !0,\n          lookbehind: !0\n        }, {\n          pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n          greedy: !0,\n          lookbehind: !0\n        }, /\\b(?:null)\\b/i, /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/],\n            a = /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n            r = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/,\n            s = /[{}\\[\\](),:;]/;\n        n.languages.php = {\n          delimiter: {\n            pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n            alias: \"important\"\n          },\n          comment: e,\n          variable: /\\$+(?:\\w+\\b|(?=\\{))/i,\n          \"package\": {\n            pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n            lookbehind: !0,\n            inside: {\n              punctuation: /\\\\/\n            }\n          },\n          \"class-name-definition\": {\n            pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n            lookbehind: !0,\n            alias: \"class-name\"\n          },\n          \"function-definition\": {\n            pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n            lookbehind: !0,\n            alias: \"function\"\n          },\n          keyword: [{\n            pattern: /(\\(\\s*)\\b(?:bool|boolean|int|integer|float|string|object|array)\\b(?=\\s*\\))/i,\n            alias: \"type-casting\",\n            greedy: !0,\n            lookbehind: !0\n          }, {\n            pattern: /([(,?]\\s*)\\b(?:bool|int|float|string|object|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b(?=\\s*\\$)/i,\n            alias: \"type-hint\",\n            greedy: !0,\n            lookbehind: !0\n          }, {\n            pattern: /([(,?]\\s*[\\w|]\\|\\s*)(?:null|false)\\b(?=\\s*\\$)/i,\n            alias: \"type-hint\",\n            greedy: !0,\n            lookbehind: !0\n          }, {\n            pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n            alias: \"return-type\",\n            greedy: !0,\n            lookbehind: !0\n          }, {\n            pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?[\\w|]\\|\\s*)(?:null|false)\\b/i,\n            alias: \"return-type\",\n            greedy: !0,\n            lookbehind: !0\n          }, {\n            pattern: /\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n            alias: \"type-declaration\",\n            greedy: !0\n          }, {\n            pattern: /(\\|\\s*)(?:null|false)\\b/i,\n            alias: \"type-declaration\",\n            greedy: !0,\n            lookbehind: !0\n          }, {\n            pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n            alias: \"static-context\",\n            greedy: !0\n          }, {\n            pattern: /(\\byield\\s+)from\\b/i,\n            lookbehind: !0\n          }, /\\bclass\\b/i, {\n            pattern: /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|match|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n            lookbehind: !0\n          }],\n          \"argument-name\": {\n            pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n            lookbehind: !0\n          },\n          \"class-name\": [{\n            pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n            greedy: !0,\n            lookbehind: !0\n          }, {\n            pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n            greedy: !0,\n            lookbehind: !0\n          }, {\n            pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n            greedy: !0\n          }, {\n            pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n            alias: \"class-name-fully-qualified\",\n            greedy: !0,\n            lookbehind: !0,\n            inside: {\n              punctuation: /\\\\/\n            }\n          }, {\n            pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n            alias: \"class-name-fully-qualified\",\n            greedy: !0,\n            inside: {\n              punctuation: /\\\\/\n            }\n          }, {\n            pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n            alias: \"class-name-fully-qualified\",\n            greedy: !0,\n            lookbehind: !0,\n            inside: {\n              punctuation: /\\\\/\n            }\n          }, {\n            pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n            alias: \"type-declaration\",\n            greedy: !0\n          }, {\n            pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n            alias: [\"class-name-fully-qualified\", \"type-declaration\"],\n            greedy: !0,\n            inside: {\n              punctuation: /\\\\/\n            }\n          }, {\n            pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n            alias: \"static-context\",\n            greedy: !0\n          }, {\n            pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n            alias: [\"class-name-fully-qualified\", \"static-context\"],\n            greedy: !0,\n            inside: {\n              punctuation: /\\\\/\n            }\n          }, {\n            pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n            alias: \"type-hint\",\n            greedy: !0,\n            lookbehind: !0\n          }, {\n            pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n            alias: [\"class-name-fully-qualified\", \"type-hint\"],\n            greedy: !0,\n            lookbehind: !0,\n            inside: {\n              punctuation: /\\\\/\n            }\n          }, {\n            pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n            alias: \"return-type\",\n            greedy: !0,\n            lookbehind: !0\n          }, {\n            pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n            alias: [\"class-name-fully-qualified\", \"return-type\"],\n            greedy: !0,\n            lookbehind: !0,\n            inside: {\n              punctuation: /\\\\/\n            }\n          }],\n          constant: t,\n          \"function\": {\n            pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n            lookbehind: !0,\n            inside: {\n              punctuation: /\\\\/\n            }\n          },\n          property: {\n            pattern: /(->\\s*)\\w+/,\n            lookbehind: !0\n          },\n          number: a,\n          operator: r,\n          punctuation: s\n        };\n        var i = {\n          pattern: /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n          lookbehind: !0,\n          inside: n.languages.php\n        },\n            o = [{\n          pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n          alias: \"nowdoc-string\",\n          greedy: !0,\n          inside: {\n            delimiter: {\n              pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n              alias: \"symbol\",\n              inside: {\n                punctuation: /^<<<'?|[';]$/\n              }\n            }\n          }\n        }, {\n          pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n          alias: \"heredoc-string\",\n          greedy: !0,\n          inside: {\n            delimiter: {\n              pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n              alias: \"symbol\",\n              inside: {\n                punctuation: /^<<<\"?|[\";]$/\n              }\n            },\n            interpolation: i\n          }\n        }, {\n          pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n          alias: \"backtick-quoted-string\",\n          greedy: !0\n        }, {\n          pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n          alias: \"single-quoted-string\",\n          greedy: !0\n        }, {\n          pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n          alias: \"double-quoted-string\",\n          greedy: !0,\n          inside: {\n            interpolation: i\n          }\n        }];\n        n.languages.insertBefore(\"php\", \"variable\", {\n          string: o,\n          attribute: {\n            pattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n            greedy: !0,\n            inside: {\n              \"attribute-content\": {\n                pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n                lookbehind: !0,\n                inside: {\n                  comment: e,\n                  string: o,\n                  \"attribute-class-name\": [{\n                    pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                    alias: \"class-name\",\n                    greedy: !0,\n                    lookbehind: !0\n                  }, {\n                    pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                    alias: [\"class-name\", \"class-name-fully-qualified\"],\n                    greedy: !0,\n                    lookbehind: !0,\n                    inside: {\n                      punctuation: /\\\\/\n                    }\n                  }],\n                  constant: t,\n                  number: a,\n                  operator: r,\n                  punctuation: s\n                }\n              },\n              delimiter: {\n                pattern: /^#\\[|\\]$/,\n                alias: \"punctuation\"\n              }\n            }\n          }\n        }), n.hooks.add(\"before-tokenize\", function (e) {\n          /<\\?/.test(e.code) && n.languages[\"markup-templating\"].buildPlaceholders(e, \"php\", /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/gi);\n        }), n.hooks.add(\"after-tokenize\", function (e) {\n          n.languages[\"markup-templating\"].tokenizePlaceholders(e, \"php\");\n        });\n      }(Prism), Prism.languages.python = {\n        comment: {\n          pattern: /(^|[^\\\\])#.*/,\n          lookbehind: !0\n        },\n        \"string-interpolation\": {\n          pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n          greedy: !0,\n          inside: {\n            interpolation: {\n              pattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n              lookbehind: !0,\n              inside: {\n                \"format-spec\": {\n                  pattern: /(:)[^:(){}]+(?=\\}$)/,\n                  lookbehind: !0\n                },\n                \"conversion-option\": {\n                  pattern: /![sra](?=[:}]$)/,\n                  alias: \"punctuation\"\n                },\n                rest: null\n              }\n            },\n            string: /[\\s\\S]+/\n          }\n        },\n        \"triple-quoted-string\": {\n          pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n          greedy: !0,\n          alias: \"string\"\n        },\n        string: {\n          pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n          greedy: !0\n        },\n        \"function\": {\n          pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n          lookbehind: !0\n        },\n        \"class-name\": {\n          pattern: /(\\bclass\\s+)\\w+/i,\n          lookbehind: !0\n        },\n        decorator: {\n          pattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/im,\n          lookbehind: !0,\n          alias: [\"annotation\", \"punctuation\"],\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        keyword: /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n        builtin: /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n        \"boolean\": /\\b(?:True|False|None)\\b/,\n        number: /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?\\b/i,\n        operator: /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n        punctuation: /[{}[\\];(),.:]/\n      }, Prism.languages.python[\"string-interpolation\"].inside.interpolation.inside.rest = Prism.languages.python, Prism.languages.py = Prism.languages.python, function (e) {\n        e.languages.ruby = e.languages.extend(\"clike\", {\n          comment: [/#.*/, {\n            pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n            greedy: !0\n          }],\n          \"class-name\": {\n            pattern: /(\\b(?:class)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n            lookbehind: !0,\n            inside: {\n              punctuation: /[.\\\\]/\n            }\n          },\n          keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/\n        });\n        var n = {\n          pattern: /#\\{[^}]+\\}/,\n          inside: {\n            delimiter: {\n              pattern: /^#\\{|\\}$/,\n              alias: \"tag\"\n            },\n            rest: e.languages.ruby\n          }\n        };\n        delete e.languages.ruby[\"function\"], e.languages.insertBefore(\"ruby\", \"keyword\", {\n          regex: [{\n            pattern: RegExp(/%r/.source + \"(?:\" + [/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source, /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source, /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source, /<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source].join(\"|\") + \")\" + /[egimnosux]{0,6}/.source),\n            greedy: !0,\n            inside: {\n              interpolation: n\n            }\n          }, {\n            pattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n              interpolation: n\n            }\n          }],\n          variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n          symbol: {\n            pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n            lookbehind: !0\n          },\n          \"method-definition\": {\n            pattern: /(\\bdef\\s+)[\\w.]+/,\n            lookbehind: !0,\n            inside: {\n              \"function\": /\\w+$/,\n              rest: e.languages.ruby\n            }\n          }\n        }), e.languages.insertBefore(\"ruby\", \"number\", {\n          builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n          constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n        }), e.languages.ruby.string = [{\n          pattern: RegExp(/%[qQiIwWxs]?/.source + \"(?:\" + [/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source, /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source, /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source, /<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source].join(\"|\") + \")\"),\n          greedy: !0,\n          inside: {\n            interpolation: n\n          }\n        }, {\n          pattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n          greedy: !0,\n          inside: {\n            interpolation: n\n          }\n        }, {\n          pattern: /<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n          alias: \"heredoc-string\",\n          greedy: !0,\n          inside: {\n            delimiter: {\n              pattern: /^<<[-~]?[a-z_]\\w*|[a-z_]\\w*$/i,\n              alias: \"symbol\",\n              inside: {\n                punctuation: /^<<[-~]?/\n              }\n            },\n            interpolation: n\n          }\n        }, {\n          pattern: /<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n          alias: \"heredoc-string\",\n          greedy: !0,\n          inside: {\n            delimiter: {\n              pattern: /^<<[-~]?'[a-z_]\\w*'|[a-z_]\\w*$/i,\n              alias: \"symbol\",\n              inside: {\n                punctuation: /^<<[-~]?'|'$/\n              }\n            }\n          }\n        }], e.languages.rb = e.languages.ruby;\n      }(Prism), {\n        boltExport: c.exports\n      };\n    }, \"object\" == _typeof(e) && void 0 !== n ? n.exports = a() : (t = \"undefined\" != typeof globalThis ? globalThis : t || self).EphoxContactWrapper = a();\n    window.Prism;\n    window.Prism = r;\n  }(b, m);\n  var k = m.exports.boltExport;\n  t.add(\"codesample\", function (n) {\n    var t, r, a, s;\n\n    function e() {\n      return s.execCommand(\"codesample\");\n    }\n\n    r = (t = n).$, t.on(\"PreProcess\", function (e) {\n      r(\"pre[contenteditable=false]\", e.node).filter(c(u)).each(function (e, n) {\n        var t = r(n),\n            a = n.textContent;\n        t.attr(\"class\", r.trim(t.attr(\"class\"))), t.removeAttr(\"contentEditable\"), t.empty().append(r(\"<code></code>\").each(function () {\n          this.textContent = a;\n        }));\n      });\n    }), t.on(\"SetContent\", function () {\n      var e = r(\"pre\").filter(c(u)).filter(function (e, n) {\n        return \"false\" !== n.contentEditable;\n      });\n      e.length && t.undoManager.transact(function () {\n        e.each(function (e, n) {\n          r(n).find(\"br\").each(function (e, n) {\n            n.parentNode.replaceChild(t.getDoc().createTextNode(\"\\n\"), n);\n          }), n.contentEditable = \"false\", n.innerHTML = t.dom.encode(n.textContent), h(t).highlightElement(n), n.className = r.trim(n.className);\n        });\n      });\n    }), (s = n).ui.registry.addToggleButton(\"codesample\", {\n      icon: \"code-sample\",\n      tooltip: \"Insert/edit code sample\",\n      onAction: e,\n      onSetup: function onSetup(t) {\n        function e() {\n          var e, n;\n          t.setActive((n = (e = s).selection.getStart(), e.dom.is(n, 'pre[class*=\"language-\"]')));\n        }\n\n        return s.on(\"NodeChange\", e), function () {\n          return s.off(\"NodeChange\", e);\n        };\n      }\n    }), s.ui.registry.addMenuItem(\"codesample\", {\n      text: \"Code sample...\",\n      icon: \"code-sample\",\n      onAction: e\n    }), (a = n).addCommand(\"codesample\", function () {\n      var e = a.selection.getNode();\n      a.selection.isCollapsed() || u(e) ? w(a) : a.formatter.toggle(\"code\");\n    }), n.on(\"dblclick\", function (e) {\n      u(e.target) && w(n);\n    });\n  });\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/codesample/plugin.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/codesample/plugin.min.js"]();
/******/ 	
/******/ })()
;