/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/autolink/plugin.js":
/*!*********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/autolink/plugin.js ***!
  \*********************************************************************************/
/***/ (() => {

eval("/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n  var checkRange = function checkRange(str, substr, start) {\n    return substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n  };\n\n  var contains = function contains(str, substr) {\n    return str.indexOf(substr) !== -1;\n  };\n\n  var startsWith = function startsWith(str, prefix) {\n    return checkRange(str, prefix, 0);\n  };\n\n  var global = tinymce.util.Tools.resolve('tinymce.Env');\n\n  var link = function link() {\n    return /(?:[A-Za-z][A-Za-z\\d.+-]{0,14}:\\/\\/(?:[-.~*+=!&;:'%@?^${}(),\\w]+@)?|www\\.|[-;:&=+$,.\\w]+@)[A-Za-z\\d-]+(?:\\.[A-Za-z\\d-]+)*(?::\\d+)?(?:\\/(?:[-+~=.,%()\\/\\w]*[-+~=%()\\/\\w])?)?(?:\\?(?:[-.~*+=!&;:'%@?^${}(),\\/\\w]+))?(?:#(?:[-.~*+=!&;:'%@?^${}(),\\/\\w]+))?/g;\n  };\n\n  var defaultLinkPattern = new RegExp('^' + link().source + '$', 'i');\n\n  var getAutoLinkPattern = function getAutoLinkPattern(editor) {\n    return editor.getParam('autolink_pattern', defaultLinkPattern);\n  };\n\n  var getDefaultLinkTarget = function getDefaultLinkTarget(editor) {\n    return editor.getParam('default_link_target', false);\n  };\n\n  var getDefaultLinkProtocol = function getDefaultLinkProtocol(editor) {\n    return editor.getParam('link_default_protocol', 'http', 'string');\n  };\n\n  var rangeEqualsBracketOrSpace = function rangeEqualsBracketOrSpace(rangeString) {\n    return /^[(\\[{ \\u00a0]$/.test(rangeString);\n  };\n\n  var isTextNode = function isTextNode(node) {\n    return node.nodeType === 3;\n  };\n\n  var isElement = function isElement(node) {\n    return node.nodeType === 1;\n  };\n\n  var handleBracket = function handleBracket(editor) {\n    return parseCurrentLine(editor, -1);\n  };\n\n  var handleSpacebar = function handleSpacebar(editor) {\n    return parseCurrentLine(editor, 0);\n  };\n\n  var handleEnter = function handleEnter(editor) {\n    return parseCurrentLine(editor, -1);\n  };\n\n  var scopeIndex = function scopeIndex(container, index) {\n    if (index < 0) {\n      index = 0;\n    }\n\n    if (isTextNode(container)) {\n      var len = container.data.length;\n\n      if (index > len) {\n        index = len;\n      }\n    }\n\n    return index;\n  };\n\n  var setStart = function setStart(rng, container, offset) {\n    if (!isElement(container) || container.hasChildNodes()) {\n      rng.setStart(container, scopeIndex(container, offset));\n    } else {\n      rng.setStartBefore(container);\n    }\n  };\n\n  var setEnd = function setEnd(rng, container, offset) {\n    if (!isElement(container) || container.hasChildNodes()) {\n      rng.setEnd(container, scopeIndex(container, offset));\n    } else {\n      rng.setEndAfter(container);\n    }\n  };\n\n  var hasProtocol = function hasProtocol(url) {\n    return /^([A-Za-z][A-Za-z\\d.+-]*:\\/\\/)|mailto:/.test(url);\n  };\n\n  var isPunctuation = function isPunctuation(_char) {\n    return /[?!,.;:]/.test(_char);\n  };\n\n  var parseCurrentLine = function parseCurrentLine(editor, endOffset) {\n    var end, endContainer, bookmark, text, prev, len, rngText;\n    var autoLinkPattern = getAutoLinkPattern(editor);\n    var defaultLinkTarget = getDefaultLinkTarget(editor);\n\n    if (editor.dom.getParent(editor.selection.getNode(), 'a[href]') !== null) {\n      return;\n    }\n\n    var rng = editor.selection.getRng().cloneRange();\n\n    if (rng.startOffset < 5) {\n      prev = rng.endContainer.previousSibling;\n\n      if (!prev) {\n        if (!rng.endContainer.firstChild || !rng.endContainer.firstChild.nextSibling) {\n          return;\n        }\n\n        prev = rng.endContainer.firstChild.nextSibling;\n      }\n\n      len = prev.length;\n      setStart(rng, prev, len);\n      setEnd(rng, prev, len);\n\n      if (rng.endOffset < 5) {\n        return;\n      }\n\n      end = rng.endOffset;\n      endContainer = prev;\n    } else {\n      endContainer = rng.endContainer;\n\n      if (!isTextNode(endContainer) && endContainer.firstChild) {\n        while (!isTextNode(endContainer) && endContainer.firstChild) {\n          endContainer = endContainer.firstChild;\n        }\n\n        if (isTextNode(endContainer)) {\n          setStart(rng, endContainer, 0);\n          setEnd(rng, endContainer, endContainer.nodeValue.length);\n        }\n      }\n\n      if (rng.endOffset === 1) {\n        end = 2;\n      } else {\n        end = rng.endOffset - 1 - endOffset;\n      }\n    }\n\n    var start = end;\n\n    do {\n      setStart(rng, endContainer, end >= 2 ? end - 2 : 0);\n      setEnd(rng, endContainer, end >= 1 ? end - 1 : 0);\n      end -= 1;\n      rngText = rng.toString();\n    } while (!rangeEqualsBracketOrSpace(rngText) && end - 2 >= 0);\n\n    if (rangeEqualsBracketOrSpace(rng.toString())) {\n      setStart(rng, endContainer, end);\n      setEnd(rng, endContainer, start);\n      end += 1;\n    } else if (rng.startOffset === 0) {\n      setStart(rng, endContainer, 0);\n      setEnd(rng, endContainer, start);\n    } else {\n      setStart(rng, endContainer, end);\n      setEnd(rng, endContainer, start);\n    }\n\n    text = rng.toString();\n\n    if (isPunctuation(text.charAt(text.length - 1))) {\n      setEnd(rng, endContainer, start - 1);\n    }\n\n    text = rng.toString().trim();\n    var matches = text.match(autoLinkPattern);\n    var protocol = getDefaultLinkProtocol(editor);\n\n    if (matches) {\n      var url = matches[0];\n\n      if (startsWith(url, 'www.')) {\n        url = protocol + '://' + url;\n      } else if (contains(url, '@') && !hasProtocol(url)) {\n        url = 'mailto:' + url;\n      }\n\n      bookmark = editor.selection.getBookmark();\n      editor.selection.setRng(rng);\n      editor.execCommand('createlink', false, url);\n\n      if (defaultLinkTarget !== false) {\n        editor.dom.setAttrib(editor.selection.getNode(), 'target', defaultLinkTarget);\n      }\n\n      editor.selection.moveToBookmark(bookmark);\n      editor.nodeChanged();\n    }\n  };\n\n  var setup = function setup(editor) {\n    var autoUrlDetectState;\n    editor.on('keydown', function (e) {\n      if (e.keyCode === 13) {\n        return handleEnter(editor);\n      }\n    });\n\n    if (global.browser.isIE()) {\n      editor.on('focus', function () {\n        if (!autoUrlDetectState) {\n          autoUrlDetectState = true;\n\n          try {\n            editor.execCommand('AutoUrlDetect', false, true);\n          } catch (ex) {}\n        }\n      });\n      return;\n    }\n\n    editor.on('keypress', function (e) {\n      if (e.keyCode === 41 || e.keyCode === 93 || e.keyCode === 125) {\n        return handleBracket(editor);\n      }\n    });\n    editor.on('keyup', function (e) {\n      if (e.keyCode === 32) {\n        return handleSpacebar(editor);\n      }\n    });\n  };\n\n  function Plugin() {\n    global$1.add('autolink', function (editor) {\n      setup(editor);\n    });\n  }\n\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/autolink/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/autolink/plugin.js"]();
/******/ 	
/******/ })()
;