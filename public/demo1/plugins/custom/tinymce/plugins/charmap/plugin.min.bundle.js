/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/charmap/plugin.min.js":
/*!************************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/charmap/plugin.min.js ***!
  \************************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n!function () {\n  \"use strict\";\n\n  function l(e, r) {\n    var n = e.fire(\"insertCustomChar\", {\n      chr: r\n    }).chr;\n    e.execCommand(\"mceInsertContent\", !1, n);\n  }\n\n  function i(e) {\n    return function () {\n      return e;\n    };\n  }\n\n  function e(e) {\n    return e;\n  }\n\n  function r() {\n    return c;\n  }\n\n  var t,\n      g,\n      n = tinymce.util.Tools.resolve(\"tinymce.PluginManager\"),\n      a = function a(e) {\n    return n = _typeof(r = e), (null === r ? \"null\" : \"object\" == n && (Array.prototype.isPrototypeOf(r) || r.constructor && \"Array\" === r.constructor.name) ? \"array\" : \"object\" == n && (String.prototype.isPrototypeOf(r) || r.constructor && \"String\" === r.constructor.name) ? \"string\" : n) === t;\n    var r, n;\n  },\n      m = i(!(t = \"array\")),\n      o = i(!(g = null)),\n      c = {\n    fold: function fold(e, r) {\n      return e();\n    },\n    isSome: m,\n    isNone: o,\n    getOr: e,\n    getOrThunk: u,\n    getOrDie: function getOrDie(e) {\n      throw new Error(e || \"error: getOrDie called on none.\");\n    },\n    getOrNull: i(null),\n    getOrUndefined: i(void 0),\n    or: e,\n    orThunk: u,\n    map: r,\n    each: function each() {},\n    bind: r,\n    exists: m,\n    forall: o,\n    filter: function filter() {\n      return c;\n    },\n    toArray: function toArray() {\n      return [];\n    },\n    toString: i(\"none()\")\n  };\n\n  function u(e) {\n    return e();\n  }\n\n  function f(e, r) {\n    for (var n = e.length, t = new Array(n), a = 0; a < n; a++) {\n      var i = e[a];\n      t[a] = r(i, a);\n    }\n\n    return t;\n  }\n\n  function s(e) {\n    return A(e) ? x.grep(e, function (e) {\n      return A(e) && 2 === e.length;\n    }) : \"function\" == typeof e ? e() : [];\n  }\n\n  function h(e) {\n    var r = function (e, r) {\n      var n = e.getParam(\"charmap\");\n      n && (r = [{\n        name: O,\n        characters: s(n)\n      }]);\n      var t = e.getParam(\"charmap_append\");\n\n      if (t) {\n        var a = x.grep(r, function (e) {\n          return e.name === O;\n        });\n        return a.length ? (a[0].characters = [].concat(a[0].characters).concat(s(t)), r) : r.concat({\n          name: O,\n          characters: s(t)\n        });\n      }\n\n      return r;\n    }(e, [{\n      name: \"Currency\",\n      characters: [[36, \"dollar sign\"], [162, \"cent sign\"], [8364, \"euro sign\"], [163, \"pound sign\"], [165, \"yen sign\"], [164, \"currency sign\"], [8352, \"euro-currency sign\"], [8353, \"colon sign\"], [8354, \"cruzeiro sign\"], [8355, \"french franc sign\"], [8356, \"lira sign\"], [8357, \"mill sign\"], [8358, \"naira sign\"], [8359, \"peseta sign\"], [8360, \"rupee sign\"], [8361, \"won sign\"], [8362, \"new sheqel sign\"], [8363, \"dong sign\"], [8365, \"kip sign\"], [8366, \"tugrik sign\"], [8367, \"drachma sign\"], [8368, \"german penny symbol\"], [8369, \"peso sign\"], [8370, \"guarani sign\"], [8371, \"austral sign\"], [8372, \"hryvnia sign\"], [8373, \"cedi sign\"], [8374, \"livre tournois sign\"], [8375, \"spesmilo sign\"], [8376, \"tenge sign\"], [8377, \"indian rupee sign\"], [8378, \"turkish lira sign\"], [8379, \"nordic mark sign\"], [8380, \"manat sign\"], [8381, \"ruble sign\"], [20870, \"yen character\"], [20803, \"yuan character\"], [22291, \"yuan character, in hong kong and taiwan\"], [22278, \"yen/yuan character variant one\"]]\n    }, {\n      name: \"Text\",\n      characters: [[169, \"copyright sign\"], [174, \"registered sign\"], [8482, \"trade mark sign\"], [8240, \"per mille sign\"], [181, \"micro sign\"], [183, \"middle dot\"], [8226, \"bullet\"], [8230, \"three dot leader\"], [8242, \"minutes / feet\"], [8243, \"seconds / inches\"], [167, \"section sign\"], [182, \"paragraph sign\"], [223, \"sharp s / ess-zed\"]]\n    }, {\n      name: \"Quotations\",\n      characters: [[8249, \"single left-pointing angle quotation mark\"], [8250, \"single right-pointing angle quotation mark\"], [171, \"left pointing guillemet\"], [187, \"right pointing guillemet\"], [8216, \"left single quotation mark\"], [8217, \"right single quotation mark\"], [8220, \"left double quotation mark\"], [8221, \"right double quotation mark\"], [8218, \"single low-9 quotation mark\"], [8222, \"double low-9 quotation mark\"], [60, \"less-than sign\"], [62, \"greater-than sign\"], [8804, \"less-than or equal to\"], [8805, \"greater-than or equal to\"], [8211, \"en dash\"], [8212, \"em dash\"], [175, \"macron\"], [8254, \"overline\"], [164, \"currency sign\"], [166, \"broken bar\"], [168, \"diaeresis\"], [161, \"inverted exclamation mark\"], [191, \"turned question mark\"], [710, \"circumflex accent\"], [732, \"small tilde\"], [176, \"degree sign\"], [8722, \"minus sign\"], [177, \"plus-minus sign\"], [247, \"division sign\"], [8260, \"fraction slash\"], [215, \"multiplication sign\"], [185, \"superscript one\"], [178, \"superscript two\"], [179, \"superscript three\"], [188, \"fraction one quarter\"], [189, \"fraction one half\"], [190, \"fraction three quarters\"]]\n    }, {\n      name: \"Mathematical\",\n      characters: [[402, \"function / florin\"], [8747, \"integral\"], [8721, \"n-ary sumation\"], [8734, \"infinity\"], [8730, \"square root\"], [8764, \"similar to\"], [8773, \"approximately equal to\"], [8776, \"almost equal to\"], [8800, \"not equal to\"], [8801, \"identical to\"], [8712, \"element of\"], [8713, \"not an element of\"], [8715, \"contains as member\"], [8719, \"n-ary product\"], [8743, \"logical and\"], [8744, \"logical or\"], [172, \"not sign\"], [8745, \"intersection\"], [8746, \"union\"], [8706, \"partial differential\"], [8704, \"for all\"], [8707, \"there exists\"], [8709, \"diameter\"], [8711, \"backward difference\"], [8727, \"asterisk operator\"], [8733, \"proportional to\"], [8736, \"angle\"]]\n    }, {\n      name: \"Extended Latin\",\n      characters: [[192, \"A - grave\"], [193, \"A - acute\"], [194, \"A - circumflex\"], [195, \"A - tilde\"], [196, \"A - diaeresis\"], [197, \"A - ring above\"], [256, \"A - macron\"], [198, \"ligature AE\"], [199, \"C - cedilla\"], [200, \"E - grave\"], [201, \"E - acute\"], [202, \"E - circumflex\"], [203, \"E - diaeresis\"], [274, \"E - macron\"], [204, \"I - grave\"], [205, \"I - acute\"], [206, \"I - circumflex\"], [207, \"I - diaeresis\"], [298, \"I - macron\"], [208, \"ETH\"], [209, \"N - tilde\"], [210, \"O - grave\"], [211, \"O - acute\"], [212, \"O - circumflex\"], [213, \"O - tilde\"], [214, \"O - diaeresis\"], [216, \"O - slash\"], [332, \"O - macron\"], [338, \"ligature OE\"], [352, \"S - caron\"], [217, \"U - grave\"], [218, \"U - acute\"], [219, \"U - circumflex\"], [220, \"U - diaeresis\"], [362, \"U - macron\"], [221, \"Y - acute\"], [376, \"Y - diaeresis\"], [562, \"Y - macron\"], [222, \"THORN\"], [224, \"a - grave\"], [225, \"a - acute\"], [226, \"a - circumflex\"], [227, \"a - tilde\"], [228, \"a - diaeresis\"], [229, \"a - ring above\"], [257, \"a - macron\"], [230, \"ligature ae\"], [231, \"c - cedilla\"], [232, \"e - grave\"], [233, \"e - acute\"], [234, \"e - circumflex\"], [235, \"e - diaeresis\"], [275, \"e - macron\"], [236, \"i - grave\"], [237, \"i - acute\"], [238, \"i - circumflex\"], [239, \"i - diaeresis\"], [299, \"i - macron\"], [240, \"eth\"], [241, \"n - tilde\"], [242, \"o - grave\"], [243, \"o - acute\"], [244, \"o - circumflex\"], [245, \"o - tilde\"], [246, \"o - diaeresis\"], [248, \"o slash\"], [333, \"o macron\"], [339, \"ligature oe\"], [353, \"s - caron\"], [249, \"u - grave\"], [250, \"u - acute\"], [251, \"u - circumflex\"], [252, \"u - diaeresis\"], [363, \"u - macron\"], [253, \"y - acute\"], [254, \"thorn\"], [255, \"y - diaeresis\"], [563, \"y - macron\"], [913, \"Alpha\"], [914, \"Beta\"], [915, \"Gamma\"], [916, \"Delta\"], [917, \"Epsilon\"], [918, \"Zeta\"], [919, \"Eta\"], [920, \"Theta\"], [921, \"Iota\"], [922, \"Kappa\"], [923, \"Lambda\"], [924, \"Mu\"], [925, \"Nu\"], [926, \"Xi\"], [927, \"Omicron\"], [928, \"Pi\"], [929, \"Rho\"], [931, \"Sigma\"], [932, \"Tau\"], [933, \"Upsilon\"], [934, \"Phi\"], [935, \"Chi\"], [936, \"Psi\"], [937, \"Omega\"], [945, \"alpha\"], [946, \"beta\"], [947, \"gamma\"], [948, \"delta\"], [949, \"epsilon\"], [950, \"zeta\"], [951, \"eta\"], [952, \"theta\"], [953, \"iota\"], [954, \"kappa\"], [955, \"lambda\"], [956, \"mu\"], [957, \"nu\"], [958, \"xi\"], [959, \"omicron\"], [960, \"pi\"], [961, \"rho\"], [962, \"final sigma\"], [963, \"sigma\"], [964, \"tau\"], [965, \"upsilon\"], [966, \"phi\"], [967, \"chi\"], [968, \"psi\"], [969, \"omega\"]]\n    }, {\n      name: \"Symbols\",\n      characters: [[8501, \"alef symbol\"], [982, \"pi symbol\"], [8476, \"real part symbol\"], [978, \"upsilon - hook symbol\"], [8472, \"Weierstrass p\"], [8465, \"imaginary part\"]]\n    }, {\n      name: \"Arrows\",\n      characters: [[8592, \"leftwards arrow\"], [8593, \"upwards arrow\"], [8594, \"rightwards arrow\"], [8595, \"downwards arrow\"], [8596, \"left right arrow\"], [8629, \"carriage return\"], [8656, \"leftwards double arrow\"], [8657, \"upwards double arrow\"], [8658, \"rightwards double arrow\"], [8659, \"downwards double arrow\"], [8660, \"left right double arrow\"], [8756, \"therefore\"], [8834, \"subset of\"], [8835, \"superset of\"], [8836, \"not a subset of\"], [8838, \"subset of or equal to\"], [8839, \"superset of or equal to\"], [8853, \"circled plus\"], [8855, \"circled times\"], [8869, \"perpendicular\"], [8901, \"dot operator\"], [8968, \"left ceiling\"], [8969, \"right ceiling\"], [8970, \"left floor\"], [8971, \"right floor\"], [9001, \"left-pointing angle bracket\"], [9002, \"right-pointing angle bracket\"], [9674, \"lozenge\"], [9824, \"black spade suit\"], [9827, \"black club suit\"], [9829, \"black heart suit\"], [9830, \"black diamond suit\"], [8194, \"en space\"], [8195, \"em space\"], [8201, \"thin space\"], [8204, \"zero width non-joiner\"], [8205, \"zero width joiner\"], [8206, \"left-to-right mark\"], [8207, \"right-to-left mark\"]]\n    }]);\n\n    return 1 < r.length ? [{\n      name: \"All\",\n      characters: function (e) {\n        for (var r = [], n = 0, t = e.length; n < t; ++n) {\n          if (!a(e[n])) throw new Error(\"Arr.flatten item \" + n + \" was not an array, input: \" + e);\n          C.apply(r, e[n]);\n        }\n\n        return r;\n      }(f(r, function (e) {\n        return e.characters;\n      }))\n    }].concat(r) : r;\n  }\n\n  function p(e) {\n    var r = e;\n    return {\n      get: function get() {\n        return r;\n      },\n      set: function set(e) {\n        r = e;\n      }\n    };\n  }\n\n  function d(e, r) {\n    return -1 !== e.indexOf(r);\n  }\n\n  function y() {\n    for (var e = [], r = 0; r < arguments.length; r++) {\n      e[r] = arguments[r];\n    }\n\n    if (q) return q.apply(void 0, e);\n\n    for (var n = [], t = \"\", a = 0, i = e.length; a !== i; ++a) {\n      var o = +e[a];\n      if (!(o < 1114111 && o >>> 0 === o)) throw RangeError(\"Invalid code point: \" + o);\n      16383 <= (o <= 65535 ? n.push(o) : (o -= 65536, n.push(55296 + (o >> 10), o % 1024 + 56320))) && (t += String.fromCharCode.apply(null, n), n.length = 0);\n    }\n\n    return t + String.fromCharCode.apply(null, n);\n  }\n\n  function v(e, r) {\n    var c = [],\n        u = r.toLowerCase();\n    return function (e) {\n      for (var r, n, t, a, i = 0, o = e.length; i < o; i++) {\n        r = e[i], a = t = n = a = t = n = void 0, n = r[0], t = r[1], a = u, (d(y(n).toLowerCase(), a) || d(t.toLowerCase(), a) || d(t.toLowerCase().replace(/\\s+/g, \"\"), a)) && c.push(r);\n      }\n    }(e.characters), f(c, function (e) {\n      return {\n        text: e[1],\n        value: y(e[0]),\n        icon: y(e[0])\n      };\n    });\n  }\n\n  function w(n, a) {\n    function r() {\n      return [{\n        label: \"Search\",\n        type: \"input\",\n        name: S\n      }, {\n        type: \"collection\",\n        name: \"results\"\n      }];\n    }\n\n    var t,\n        i,\n        o = 1 === a.length ? p(O) : p(\"All\"),\n        c = (t = function t(e) {\n      var r = e.getData().pattern,\n          n = e,\n          t = r;\n      (function (e, r, n) {\n        for (var t = 0, a = e.length; t < a; t++) {\n          var i = e[t];\n          if (r(i, t)) return k.some(i);\n          if (n(i, t)) break;\n        }\n\n        return k.none();\n      })(a, function (e) {\n        return e.name === o.get();\n      }, m).each(function (e) {\n        var r = v(e, t);\n        n.setData({\n          results: r\n        });\n      });\n    }, i = null, {\n      cancel: u,\n      throttle: function throttle() {\n        for (var e = [], r = 0; r < arguments.length; r++) {\n          e[r] = arguments[r];\n        }\n\n        u(), i = setTimeout(function () {\n          i = null, t.apply(null, e);\n        }, 40);\n      }\n    });\n\n    function u() {\n      g === i || (clearTimeout(i), i = null);\n    }\n\n    var e = 1 === a.length ? {\n      type: \"panel\",\n      items: r()\n    } : {\n      type: \"tabpanel\",\n      tabs: f(a, function (e) {\n        return {\n          title: e.name,\n          name: e.name,\n          items: r()\n        };\n      })\n    },\n        s = {\n      pattern: \"\",\n      results: v(a[0], \"\")\n    };\n    n.windowManager.open({\n      title: \"Special Character\",\n      size: \"normal\",\n      body: e,\n      buttons: [{\n        type: \"cancel\",\n        name: \"close\",\n        text: \"Close\",\n        primary: !0\n      }],\n      initialData: s,\n      onAction: function onAction(e, r) {\n        \"results\" === r.name && (l(n, r.value), e.close());\n      },\n      onTabChange: function onTabChange(e, r) {\n        o.set(r.newTabName), c.throttle(e);\n      },\n      onChange: function onChange(e, r) {\n        r.name === S && c.throttle(e);\n      }\n    }).focus(S);\n  }\n\n  var b = function b(n) {\n    function e() {\n      return a;\n    }\n\n    function r(e) {\n      return e(n);\n    }\n\n    var t = i(n),\n        a = {\n      fold: function fold(e, r) {\n        return r(n);\n      },\n      isSome: o,\n      isNone: m,\n      getOr: t,\n      getOrThunk: t,\n      getOrDie: t,\n      getOrNull: t,\n      getOrUndefined: t,\n      or: e,\n      orThunk: e,\n      map: function map(e) {\n        return b(e(n));\n      },\n      each: function each(e) {\n        e(n);\n      },\n      bind: r,\n      exists: r,\n      forall: r,\n      filter: function filter(e) {\n        return e(n) ? a : c;\n      },\n      toArray: function toArray() {\n        return [n];\n      },\n      toString: function toString() {\n        return \"some(\" + n + \")\";\n      }\n    };\n    return a;\n  },\n      k = {\n    some: b,\n    none: r,\n    from: function from(e) {\n      return null == e ? c : b(e);\n    }\n  },\n      C = Array.prototype.push,\n      x = tinymce.util.Tools.resolve(\"tinymce.util.Tools\"),\n      A = x.isArray,\n      O = \"User Defined\",\n      q = String.fromCodePoint,\n      S = \"pattern\",\n      T = tinymce.util.Tools.resolve(\"tinymce.util.Promise\");\n\n  n.add(\"charmap\", function (e) {\n    var r,\n        n,\n        t,\n        a,\n        i,\n        o = h(e),\n        c = o;\n    return (r = e).addCommand(\"mceShowCharmap\", function () {\n      w(r, c);\n    }), (n = e).ui.registry.addButton(\"charmap\", {\n      icon: \"insert-character\",\n      tooltip: \"Special character\",\n      onAction: function onAction() {\n        return n.execCommand(\"mceShowCharmap\");\n      }\n    }), n.ui.registry.addMenuItem(\"charmap\", {\n      icon: \"insert-character\",\n      text: \"Special character...\",\n      onAction: function onAction() {\n        return n.execCommand(\"mceShowCharmap\");\n      }\n    }), t = e, a = o[0], t.ui.registry.addAutocompleter(\"charmap\", {\n      ch: \":\",\n      columns: \"auto\",\n      minChars: 2,\n      fetch: function fetch(n, e) {\n        return new T(function (e, r) {\n          e(v(a, n));\n        });\n      },\n      onAction: function onAction(e, r, n) {\n        t.selection.setRng(r), t.insertContent(n), e.hide();\n      }\n    }), i = e, {\n      getCharMap: function getCharMap() {\n        return h(i);\n      },\n      insertChar: function insertChar(e) {\n        l(i, e);\n      }\n    };\n  });\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/charmap/plugin.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/charmap/plugin.min.js"]();
/******/ 	
/******/ })()
;