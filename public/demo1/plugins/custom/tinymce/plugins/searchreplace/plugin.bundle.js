/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/searchreplace/plugin.js":
/*!**************************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/searchreplace/plugin.js ***!
  \**************************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var Cell = function Cell(initial) {\n    var value = initial;\n\n    var get = function get() {\n      return value;\n    };\n\n    var set = function set(v) {\n      value = v;\n    };\n\n    return {\n      get: get,\n      set: set\n    };\n  };\n\n  var global$3 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) {\n          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n      }\n\n      return t;\n    };\n\n    return _assign.apply(this, arguments);\n  };\n\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n\n  var isType$1 = function isType$1(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n\n  var isSimpleType = function isSimpleType(type) {\n    return function (value) {\n      return _typeof(value) === type;\n    };\n  };\n\n  var isString = isType$1('string');\n  var isArray = isType$1('array');\n  var isBoolean = isSimpleType('boolean');\n  var isNumber = isSimpleType('number');\n\n  var noop = function noop() {};\n\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  var never = constant(false);\n  var always = constant(true);\n  var punctuationStr = \"[!-#%-*,-\\\\/:;?@\\\\[-\\\\]_{}\\xA1\\xAB\\xB7\\xBB\\xBF;\\xB7\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1361-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u3008\\u3009\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30\\u2E31\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]\";\n  var punctuation$1 = constant(punctuationStr);\n\n  var none = function none() {\n    return NONE;\n  };\n\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n\n  var some = function some(a) {\n    var constant_a = constant(a);\n\n    var self = function self() {\n      return me;\n    };\n\n    var bind = function bind(f) {\n      return f(a);\n    };\n\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n  var punctuation = punctuation$1;\n  var global$2 = tinymce.util.Tools.resolve('tinymce.Env');\n  var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n  var nativeSlice = Array.prototype.slice;\n  var nativePush = Array.prototype.push;\n\n  var map = function map(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n\n    return r;\n  };\n\n  var each = function each(xs, f) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n\n  var eachr = function eachr(xs, f) {\n    for (var i = xs.length - 1; i >= 0; i--) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n\n  var groupBy = function groupBy(xs, f) {\n    if (xs.length === 0) {\n      return [];\n    } else {\n      var wasType = f(xs[0]);\n      var r = [];\n      var group = [];\n\n      for (var i = 0, len = xs.length; i < len; i++) {\n        var x = xs[i];\n        var type = f(x);\n\n        if (type !== wasType) {\n          r.push(group);\n          group = [];\n        }\n\n        wasType = type;\n        group.push(x);\n      }\n\n      if (group.length !== 0) {\n        r.push(group);\n      }\n\n      return r;\n    }\n  };\n\n  var foldl = function foldl(xs, f, acc) {\n    each(xs, function (x, i) {\n      acc = f(acc, x, i);\n    });\n    return acc;\n  };\n\n  var flatten = function flatten(xs) {\n    var r = [];\n\n    for (var i = 0, len = xs.length; i < len; ++i) {\n      if (!isArray(xs[i])) {\n        throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n      }\n\n      nativePush.apply(r, xs[i]);\n    }\n\n    return r;\n  };\n\n  var bind = function bind(xs, f) {\n    return flatten(map(xs, f));\n  };\n\n  var sort = function sort(xs, comparator) {\n    var copy = nativeSlice.call(xs, 0);\n    copy.sort(comparator);\n    return copy;\n  };\n\n  var hasOwnProperty = Object.hasOwnProperty;\n\n  var has = function has(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  typeof window !== 'undefined' ? window : Function('return this;')();\n  var DOCUMENT = 9;\n  var DOCUMENT_FRAGMENT = 11;\n  var ELEMENT = 1;\n  var TEXT = 3;\n\n  var type = function type(element) {\n    return element.dom.nodeType;\n  };\n\n  var isType = function isType(t) {\n    return function (element) {\n      return type(element) === t;\n    };\n  };\n\n  var isText$1 = isType(TEXT);\n\n  var rawSet = function rawSet(dom, key, value) {\n    if (isString(value) || isBoolean(value) || isNumber(value)) {\n      dom.setAttribute(key, value + '');\n    } else {\n      console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n      throw new Error('Attribute value was not simple');\n    }\n  };\n\n  var set = function set(element, key, value) {\n    rawSet(element.dom, key, value);\n  };\n\n  var compareDocumentPosition = function compareDocumentPosition(a, b, match) {\n    return (a.compareDocumentPosition(b) & match) !== 0;\n  };\n\n  var documentPositionPreceding = function documentPositionPreceding(a, b) {\n    return compareDocumentPosition(a, b, Node.DOCUMENT_POSITION_PRECEDING);\n  };\n\n  var fromHtml = function fromHtml(html, scope) {\n    var doc = scope || document;\n    var div = doc.createElement('div');\n    div.innerHTML = html;\n\n    if (!div.hasChildNodes() || div.childNodes.length > 1) {\n      console.error('HTML does not have a single root node', html);\n      throw new Error('HTML must have a single root node');\n    }\n\n    return fromDom(div.childNodes[0]);\n  };\n\n  var fromTag = function fromTag(tag, scope) {\n    var doc = scope || document;\n    var node = doc.createElement(tag);\n    return fromDom(node);\n  };\n\n  var fromText = function fromText(text, scope) {\n    var doc = scope || document;\n    var node = doc.createTextNode(text);\n    return fromDom(node);\n  };\n\n  var fromDom = function fromDom(node) {\n    if (node === null || node === undefined) {\n      throw new Error('Node cannot be null or undefined');\n    }\n\n    return {\n      dom: node\n    };\n  };\n\n  var fromPoint = function fromPoint(docElm, x, y) {\n    return Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom);\n  };\n\n  var SugarElement = {\n    fromHtml: fromHtml,\n    fromTag: fromTag,\n    fromText: fromText,\n    fromDom: fromDom,\n    fromPoint: fromPoint\n  };\n\n  var bypassSelector = function bypassSelector(dom) {\n    return dom.nodeType !== ELEMENT && dom.nodeType !== DOCUMENT && dom.nodeType !== DOCUMENT_FRAGMENT || dom.childElementCount === 0;\n  };\n\n  var all = function all(selector, scope) {\n    var base = scope === undefined ? document : scope.dom;\n    return bypassSelector(base) ? [] : map(base.querySelectorAll(selector), SugarElement.fromDom);\n  };\n\n  var parent = function parent(element) {\n    return Optional.from(element.dom.parentNode).map(SugarElement.fromDom);\n  };\n\n  var children = function children(element) {\n    return map(element.dom.childNodes, SugarElement.fromDom);\n  };\n\n  var spot = function spot(element, offset) {\n    return {\n      element: element,\n      offset: offset\n    };\n  };\n\n  var leaf = function leaf(element, offset) {\n    var cs = children(element);\n    return cs.length > 0 && offset < cs.length ? spot(cs[offset], 0) : spot(element, offset);\n  };\n\n  var before = function before(marker, element) {\n    var parent$1 = parent(marker);\n    parent$1.each(function (v) {\n      v.dom.insertBefore(element.dom, marker.dom);\n    });\n  };\n\n  var append = function append(parent, element) {\n    parent.dom.appendChild(element.dom);\n  };\n\n  var wrap = function wrap(element, wrapper) {\n    before(element, wrapper);\n    append(wrapper, element);\n  };\n\n  var NodeValue = function NodeValue(is, name) {\n    var get = function get(element) {\n      if (!is(element)) {\n        throw new Error('Can only get ' + name + ' value of a ' + name + ' node');\n      }\n\n      return getOption(element).getOr('');\n    };\n\n    var getOption = function getOption(element) {\n      return is(element) ? Optional.from(element.dom.nodeValue) : Optional.none();\n    };\n\n    var set = function set(element, value) {\n      if (!is(element)) {\n        throw new Error('Can only set raw ' + name + ' value of a ' + name + ' node');\n      }\n\n      element.dom.nodeValue = value;\n    };\n\n    return {\n      get: get,\n      getOption: getOption,\n      set: set\n    };\n  };\n\n  var api = NodeValue(isText$1, 'text');\n\n  var get$1 = function get$1(element) {\n    return api.get(element);\n  };\n\n  var descendants = function descendants(scope, selector) {\n    return all(selector, scope);\n  };\n\n  var global = tinymce.util.Tools.resolve('tinymce.dom.TreeWalker');\n\n  var isSimpleBoundary = function isSimpleBoundary(dom, node) {\n    return dom.isBlock(node) || has(dom.schema.getShortEndedElements(), node.nodeName);\n  };\n\n  var isContentEditableFalse = function isContentEditableFalse(dom, node) {\n    return dom.getContentEditable(node) === 'false';\n  };\n\n  var isContentEditableTrueInCef = function isContentEditableTrueInCef(dom, node) {\n    return dom.getContentEditable(node) === 'true' && dom.getContentEditableParent(node.parentNode) === 'false';\n  };\n\n  var isHidden = function isHidden(dom, node) {\n    return !dom.isBlock(node) && has(dom.schema.getWhiteSpaceElements(), node.nodeName);\n  };\n\n  var isBoundary = function isBoundary(dom, node) {\n    return isSimpleBoundary(dom, node) || isContentEditableFalse(dom, node) || isHidden(dom, node) || isContentEditableTrueInCef(dom, node);\n  };\n\n  var isText = function isText(node) {\n    return node.nodeType === 3;\n  };\n\n  var nuSection = function nuSection() {\n    return {\n      sOffset: 0,\n      fOffset: 0,\n      elements: []\n    };\n  };\n\n  var toLeaf = function toLeaf(node, offset) {\n    return leaf(SugarElement.fromDom(node), offset);\n  };\n\n  var walk = function walk(dom, walkerFn, startNode, callbacks, endNode, skipStart) {\n    if (skipStart === void 0) {\n      skipStart = true;\n    }\n\n    var next = skipStart ? walkerFn(false) : startNode;\n\n    while (next) {\n      var isCefNode = isContentEditableFalse(dom, next);\n\n      if (isCefNode || isHidden(dom, next)) {\n        var stopWalking = isCefNode ? callbacks.cef(next) : callbacks.boundary(next);\n\n        if (stopWalking) {\n          break;\n        } else {\n          next = walkerFn(true);\n          continue;\n        }\n      } else if (isSimpleBoundary(dom, next)) {\n        if (callbacks.boundary(next)) {\n          break;\n        }\n      } else if (isText(next)) {\n        callbacks.text(next);\n      }\n\n      if (next === endNode) {\n        break;\n      } else {\n        next = walkerFn(false);\n      }\n    }\n  };\n\n  var collectTextToBoundary = function collectTextToBoundary(dom, section, node, rootNode, forwards) {\n    if (isBoundary(dom, node)) {\n      return;\n    }\n\n    var rootBlock = dom.getParent(rootNode, dom.isBlock);\n    var walker = new global(node, rootBlock);\n    var walkerFn = forwards ? walker.next.bind(walker) : walker.prev.bind(walker);\n    walk(dom, walkerFn, node, {\n      boundary: always,\n      cef: always,\n      text: function text(next) {\n        if (forwards) {\n          section.fOffset += next.length;\n        } else {\n          section.sOffset += next.length;\n        }\n\n        section.elements.push(SugarElement.fromDom(next));\n      }\n    });\n  };\n\n  var collect = function collect(dom, rootNode, startNode, endNode, callbacks, skipStart) {\n    if (skipStart === void 0) {\n      skipStart = true;\n    }\n\n    var walker = new global(startNode, rootNode);\n    var sections = [];\n    var current = nuSection();\n    collectTextToBoundary(dom, current, startNode, rootNode, false);\n\n    var finishSection = function finishSection() {\n      if (current.elements.length > 0) {\n        sections.push(current);\n        current = nuSection();\n      }\n\n      return false;\n    };\n\n    walk(dom, walker.next.bind(walker), startNode, {\n      boundary: finishSection,\n      cef: function cef(node) {\n        finishSection();\n\n        if (callbacks) {\n          sections.push.apply(sections, callbacks.cef(node));\n        }\n\n        return false;\n      },\n      text: function text(next) {\n        current.elements.push(SugarElement.fromDom(next));\n\n        if (callbacks) {\n          callbacks.text(next, current);\n        }\n      }\n    }, endNode, skipStart);\n\n    if (endNode) {\n      collectTextToBoundary(dom, current, endNode, rootNode, true);\n    }\n\n    finishSection();\n    return sections;\n  };\n\n  var collectRangeSections = function collectRangeSections(dom, rng) {\n    var start = toLeaf(rng.startContainer, rng.startOffset);\n    var startNode = start.element.dom;\n    var end = toLeaf(rng.endContainer, rng.endOffset);\n    var endNode = end.element.dom;\n    return collect(dom, rng.commonAncestorContainer, startNode, endNode, {\n      text: function text(node, section) {\n        if (node === endNode) {\n          section.fOffset += node.length - end.offset;\n        } else if (node === startNode) {\n          section.sOffset += start.offset;\n        }\n      },\n      cef: function cef(node) {\n        var sections = bind(descendants(SugarElement.fromDom(node), '*[contenteditable=true]'), function (e) {\n          var ceTrueNode = e.dom;\n          return collect(dom, ceTrueNode, ceTrueNode);\n        });\n        return sort(sections, function (a, b) {\n          return documentPositionPreceding(a.elements[0].dom, b.elements[0].dom) ? 1 : -1;\n        });\n      }\n    }, false);\n  };\n\n  var fromRng = function fromRng(dom, rng) {\n    return rng.collapsed ? [] : collectRangeSections(dom, rng);\n  };\n\n  var fromNode = function fromNode(dom, node) {\n    var rng = dom.createRng();\n    rng.selectNode(node);\n    return fromRng(dom, rng);\n  };\n\n  var fromNodes = function fromNodes(dom, nodes) {\n    return bind(nodes, function (node) {\n      return fromNode(dom, node);\n    });\n  };\n\n  var find$2 = function find$2(text, pattern, start, finish) {\n    if (start === void 0) {\n      start = 0;\n    }\n\n    if (finish === void 0) {\n      finish = text.length;\n    }\n\n    var regex = pattern.regex;\n    regex.lastIndex = start;\n    var results = [];\n    var match;\n\n    while (match = regex.exec(text)) {\n      var matchedText = match[pattern.matchIndex];\n      var matchStart = match.index + match[0].indexOf(matchedText);\n      var matchFinish = matchStart + matchedText.length;\n\n      if (matchFinish > finish) {\n        break;\n      }\n\n      results.push({\n        start: matchStart,\n        finish: matchFinish\n      });\n      regex.lastIndex = matchFinish;\n    }\n\n    return results;\n  };\n\n  var extract = function extract(elements, matches) {\n    var nodePositions = foldl(elements, function (acc, element) {\n      var content = get$1(element);\n      var start = acc.last;\n      var finish = start + content.length;\n      var positions = bind(matches, function (match, matchIdx) {\n        if (match.start < finish && match.finish > start) {\n          return [{\n            element: element,\n            start: Math.max(start, match.start) - start,\n            finish: Math.min(finish, match.finish) - start,\n            matchId: matchIdx\n          }];\n        } else {\n          return [];\n        }\n      });\n      return {\n        results: acc.results.concat(positions),\n        last: finish\n      };\n    }, {\n      results: [],\n      last: 0\n    }).results;\n    return groupBy(nodePositions, function (position) {\n      return position.matchId;\n    });\n  };\n\n  var find$1 = function find$1(pattern, sections) {\n    return bind(sections, function (section) {\n      var elements = section.elements;\n      var content = map(elements, get$1).join('');\n      var positions = find$2(content, pattern, section.sOffset, content.length - section.fOffset);\n      return extract(elements, positions);\n    });\n  };\n\n  var mark = function mark(matches, replacementNode) {\n    eachr(matches, function (match, idx) {\n      eachr(match, function (pos) {\n        var wrapper = SugarElement.fromDom(replacementNode.cloneNode(false));\n        set(wrapper, 'data-mce-index', idx);\n        var textNode = pos.element.dom;\n\n        if (textNode.length === pos.finish && pos.start === 0) {\n          wrap(pos.element, wrapper);\n        } else {\n          if (textNode.length !== pos.finish) {\n            textNode.splitText(pos.finish);\n          }\n\n          var matchNode = textNode.splitText(pos.start);\n          wrap(SugarElement.fromDom(matchNode), wrapper);\n        }\n      });\n    });\n  };\n\n  var findAndMark = function findAndMark(dom, pattern, node, replacementNode) {\n    var textSections = fromNode(dom, node);\n    var matches = find$1(pattern, textSections);\n    mark(matches, replacementNode);\n    return matches.length;\n  };\n\n  var findAndMarkInSelection = function findAndMarkInSelection(dom, pattern, selection, replacementNode) {\n    var bookmark = selection.getBookmark();\n    var nodes = dom.select('td[data-mce-selected],th[data-mce-selected]');\n    var textSections = nodes.length > 0 ? fromNodes(dom, nodes) : fromRng(dom, selection.getRng());\n    var matches = find$1(pattern, textSections);\n    mark(matches, replacementNode);\n    selection.moveToBookmark(bookmark);\n    return matches.length;\n  };\n\n  var getElmIndex = function getElmIndex(elm) {\n    var value = elm.getAttribute('data-mce-index');\n\n    if (typeof value === 'number') {\n      return '' + value;\n    }\n\n    return value;\n  };\n\n  var markAllMatches = function markAllMatches(editor, currentSearchState, pattern, inSelection) {\n    var marker = editor.dom.create('span', {\n      'data-mce-bogus': 1\n    });\n    marker.className = 'mce-match-marker';\n    var node = editor.getBody();\n    done(editor, currentSearchState, false);\n\n    if (inSelection) {\n      return findAndMarkInSelection(editor.dom, pattern, editor.selection, marker);\n    } else {\n      return findAndMark(editor.dom, pattern, node, marker);\n    }\n  };\n\n  var unwrap = function unwrap(node) {\n    var parentNode = node.parentNode;\n\n    if (node.firstChild) {\n      parentNode.insertBefore(node.firstChild, node);\n    }\n\n    node.parentNode.removeChild(node);\n  };\n\n  var findSpansByIndex = function findSpansByIndex(editor, index) {\n    var spans = [];\n    var nodes = global$1.toArray(editor.getBody().getElementsByTagName('span'));\n\n    if (nodes.length) {\n      for (var i = 0; i < nodes.length; i++) {\n        var nodeIndex = getElmIndex(nodes[i]);\n\n        if (nodeIndex === null || !nodeIndex.length) {\n          continue;\n        }\n\n        if (nodeIndex === index.toString()) {\n          spans.push(nodes[i]);\n        }\n      }\n    }\n\n    return spans;\n  };\n\n  var moveSelection = function moveSelection(editor, currentSearchState, forward) {\n    var searchState = currentSearchState.get();\n    var testIndex = searchState.index;\n    var dom = editor.dom;\n    forward = forward !== false;\n\n    if (forward) {\n      if (testIndex + 1 === searchState.count) {\n        testIndex = 0;\n      } else {\n        testIndex++;\n      }\n    } else {\n      if (testIndex - 1 === -1) {\n        testIndex = searchState.count - 1;\n      } else {\n        testIndex--;\n      }\n    }\n\n    dom.removeClass(findSpansByIndex(editor, searchState.index), 'mce-match-marker-selected');\n    var spans = findSpansByIndex(editor, testIndex);\n\n    if (spans.length) {\n      dom.addClass(findSpansByIndex(editor, testIndex), 'mce-match-marker-selected');\n      editor.selection.scrollIntoView(spans[0]);\n      return testIndex;\n    }\n\n    return -1;\n  };\n\n  var removeNode = function removeNode(dom, node) {\n    var parent = node.parentNode;\n    dom.remove(node);\n\n    if (dom.isEmpty(parent)) {\n      dom.remove(parent);\n    }\n  };\n\n  var escapeSearchText = function escapeSearchText(text, wholeWord) {\n    var escapedText = text.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&').replace(/\\s/g, \"[^\\\\S\\\\r\\\\n\\\\uFEFF]\");\n    var wordRegex = '(' + escapedText + ')';\n    return wholeWord ? '(?:^|\\\\s|' + punctuation() + ')' + wordRegex + ('(?=$|\\\\s|' + punctuation() + ')') : wordRegex;\n  };\n\n  var find = function find(editor, currentSearchState, text, matchCase, wholeWord, inSelection) {\n    var selection = editor.selection;\n    var escapedText = escapeSearchText(text, wholeWord);\n    var isForwardSelection = selection.isForward();\n    var pattern = {\n      regex: new RegExp(escapedText, matchCase ? 'g' : 'gi'),\n      matchIndex: 1\n    };\n    var count = markAllMatches(editor, currentSearchState, pattern, inSelection);\n\n    if (global$2.browser.isSafari()) {\n      selection.setRng(selection.getRng(), isForwardSelection);\n    }\n\n    if (count) {\n      var newIndex = moveSelection(editor, currentSearchState, true);\n      currentSearchState.set({\n        index: newIndex,\n        count: count,\n        text: text,\n        matchCase: matchCase,\n        wholeWord: wholeWord,\n        inSelection: inSelection\n      });\n    }\n\n    return count;\n  };\n\n  var next = function next(editor, currentSearchState) {\n    var index = moveSelection(editor, currentSearchState, true);\n    currentSearchState.set(_assign(_assign({}, currentSearchState.get()), {\n      index: index\n    }));\n  };\n\n  var prev = function prev(editor, currentSearchState) {\n    var index = moveSelection(editor, currentSearchState, false);\n    currentSearchState.set(_assign(_assign({}, currentSearchState.get()), {\n      index: index\n    }));\n  };\n\n  var isMatchSpan = function isMatchSpan(node) {\n    var matchIndex = getElmIndex(node);\n    return matchIndex !== null && matchIndex.length > 0;\n  };\n\n  var replace = function replace(editor, currentSearchState, text, forward, all) {\n    var searchState = currentSearchState.get();\n    var currentIndex = searchState.index;\n    var currentMatchIndex,\n        nextIndex = currentIndex;\n    forward = forward !== false;\n    var node = editor.getBody();\n    var nodes = global$1.grep(global$1.toArray(node.getElementsByTagName('span')), isMatchSpan);\n\n    for (var i = 0; i < nodes.length; i++) {\n      var nodeIndex = getElmIndex(nodes[i]);\n      var matchIndex = currentMatchIndex = parseInt(nodeIndex, 10);\n\n      if (all || matchIndex === searchState.index) {\n        if (text.length) {\n          nodes[i].firstChild.nodeValue = text;\n          unwrap(nodes[i]);\n        } else {\n          removeNode(editor.dom, nodes[i]);\n        }\n\n        while (nodes[++i]) {\n          matchIndex = parseInt(getElmIndex(nodes[i]), 10);\n\n          if (matchIndex === currentMatchIndex) {\n            removeNode(editor.dom, nodes[i]);\n          } else {\n            i--;\n            break;\n          }\n        }\n\n        if (forward) {\n          nextIndex--;\n        }\n      } else if (currentMatchIndex > currentIndex) {\n        nodes[i].setAttribute('data-mce-index', String(currentMatchIndex - 1));\n      }\n    }\n\n    currentSearchState.set(_assign(_assign({}, searchState), {\n      count: all ? 0 : searchState.count - 1,\n      index: nextIndex\n    }));\n\n    if (forward) {\n      next(editor, currentSearchState);\n    } else {\n      prev(editor, currentSearchState);\n    }\n\n    return !all && currentSearchState.get().count > 0;\n  };\n\n  var done = function done(editor, currentSearchState, keepEditorSelection) {\n    var startContainer, endContainer;\n    var searchState = currentSearchState.get();\n    var nodes = global$1.toArray(editor.getBody().getElementsByTagName('span'));\n\n    for (var i = 0; i < nodes.length; i++) {\n      var nodeIndex = getElmIndex(nodes[i]);\n\n      if (nodeIndex !== null && nodeIndex.length) {\n        if (nodeIndex === searchState.index.toString()) {\n          if (!startContainer) {\n            startContainer = nodes[i].firstChild;\n          }\n\n          endContainer = nodes[i].firstChild;\n        }\n\n        unwrap(nodes[i]);\n      }\n    }\n\n    currentSearchState.set(_assign(_assign({}, searchState), {\n      index: -1,\n      count: 0,\n      text: ''\n    }));\n\n    if (startContainer && endContainer) {\n      var rng = editor.dom.createRng();\n      rng.setStart(startContainer, 0);\n      rng.setEnd(endContainer, endContainer.data.length);\n\n      if (keepEditorSelection !== false) {\n        editor.selection.setRng(rng);\n      }\n\n      return rng;\n    }\n  };\n\n  var hasNext = function hasNext(editor, currentSearchState) {\n    return currentSearchState.get().count > 1;\n  };\n\n  var hasPrev = function hasPrev(editor, currentSearchState) {\n    return currentSearchState.get().count > 1;\n  };\n\n  var get = function get(editor, currentState) {\n    var done$1 = function done$1(keepEditorSelection) {\n      return done(editor, currentState, keepEditorSelection);\n    };\n\n    var find$1 = function find$1(text, matchCase, wholeWord, inSelection) {\n      if (inSelection === void 0) {\n        inSelection = false;\n      }\n\n      return find(editor, currentState, text, matchCase, wholeWord, inSelection);\n    };\n\n    var next$1 = function next$1() {\n      return next(editor, currentState);\n    };\n\n    var prev$1 = function prev$1() {\n      return prev(editor, currentState);\n    };\n\n    var replace$1 = function replace$1(text, forward, all) {\n      return replace(editor, currentState, text, forward, all);\n    };\n\n    return {\n      done: done$1,\n      find: find$1,\n      next: next$1,\n      prev: prev$1,\n      replace: replace$1\n    };\n  };\n\n  var singleton = function singleton(doRevoke) {\n    var subject = Cell(Optional.none());\n\n    var revoke = function revoke() {\n      return subject.get().each(doRevoke);\n    };\n\n    var clear = function clear() {\n      revoke();\n      subject.set(Optional.none());\n    };\n\n    var isSet = function isSet() {\n      return subject.get().isSome();\n    };\n\n    var get = function get() {\n      return subject.get();\n    };\n\n    var set = function set(s) {\n      revoke();\n      subject.set(Optional.some(s));\n    };\n\n    return {\n      clear: clear,\n      isSet: isSet,\n      get: get,\n      set: set\n    };\n  };\n\n  var value = function value() {\n    var subject = singleton(noop);\n\n    var on = function on(f) {\n      return subject.get().each(f);\n    };\n\n    return _assign(_assign({}, subject), {\n      on: on\n    });\n  };\n\n  var open = function open(editor, currentSearchState) {\n    var dialogApi = value();\n    editor.undoManager.add();\n    var selectedText = global$1.trim(editor.selection.getContent({\n      format: 'text'\n    }));\n\n    var updateButtonStates = function updateButtonStates(api) {\n      var updateNext = hasNext(editor, currentSearchState) ? api.enable : api.disable;\n      updateNext('next');\n      var updatePrev = hasPrev(editor, currentSearchState) ? api.enable : api.disable;\n      updatePrev('prev');\n    };\n\n    var updateSearchState = function updateSearchState(api) {\n      var data = api.getData();\n      var current = currentSearchState.get();\n      currentSearchState.set(_assign(_assign({}, current), {\n        matchCase: data.matchcase,\n        wholeWord: data.wholewords,\n        inSelection: data.inselection\n      }));\n    };\n\n    var disableAll = function disableAll(api, disable) {\n      var buttons = ['replace', 'replaceall', 'prev', 'next'];\n      var toggle = disable ? api.disable : api.enable;\n      each(buttons, toggle);\n    };\n\n    var notFoundAlert = function notFoundAlert(api) {\n      editor.windowManager.alert('Could not find the specified string.', function () {\n        api.focus('findtext');\n      });\n    };\n\n    var focusButtonIfRequired = function focusButtonIfRequired(api, name) {\n      if (global$2.browser.isSafari() && global$2.deviceType.isTouch() && (name === 'find' || name === 'replace' || name === 'replaceall')) {\n        api.focus(name);\n      }\n    };\n\n    var reset = function reset(api) {\n      done(editor, currentSearchState, false);\n      disableAll(api, true);\n      updateButtonStates(api);\n    };\n\n    var doFind = function doFind(api) {\n      var data = api.getData();\n      var last = currentSearchState.get();\n\n      if (!data.findtext.length) {\n        reset(api);\n        return;\n      }\n\n      if (last.text === data.findtext && last.matchCase === data.matchcase && last.wholeWord === data.wholewords) {\n        next(editor, currentSearchState);\n      } else {\n        var count = find(editor, currentSearchState, data.findtext, data.matchcase, data.wholewords, data.inselection);\n\n        if (count <= 0) {\n          notFoundAlert(api);\n        }\n\n        disableAll(api, count === 0);\n      }\n\n      updateButtonStates(api);\n    };\n\n    var initialState = currentSearchState.get();\n    var initialData = {\n      findtext: selectedText,\n      replacetext: '',\n      wholewords: initialState.wholeWord,\n      matchcase: initialState.matchCase,\n      inselection: initialState.inSelection\n    };\n    var spec = {\n      title: 'Find and Replace',\n      size: 'normal',\n      body: {\n        type: 'panel',\n        items: [{\n          type: 'bar',\n          items: [{\n            type: 'input',\n            name: 'findtext',\n            placeholder: 'Find',\n            maximized: true,\n            inputMode: 'search'\n          }, {\n            type: 'button',\n            name: 'prev',\n            text: 'Previous',\n            icon: 'action-prev',\n            disabled: true,\n            borderless: true\n          }, {\n            type: 'button',\n            name: 'next',\n            text: 'Next',\n            icon: 'action-next',\n            disabled: true,\n            borderless: true\n          }]\n        }, {\n          type: 'input',\n          name: 'replacetext',\n          placeholder: 'Replace with',\n          inputMode: 'search'\n        }]\n      },\n      buttons: [{\n        type: 'menu',\n        name: 'options',\n        icon: 'preferences',\n        tooltip: 'Preferences',\n        align: 'start',\n        items: [{\n          type: 'togglemenuitem',\n          name: 'matchcase',\n          text: 'Match case'\n        }, {\n          type: 'togglemenuitem',\n          name: 'wholewords',\n          text: 'Find whole words only'\n        }, {\n          type: 'togglemenuitem',\n          name: 'inselection',\n          text: 'Find in selection'\n        }]\n      }, {\n        type: 'custom',\n        name: 'find',\n        text: 'Find',\n        primary: true\n      }, {\n        type: 'custom',\n        name: 'replace',\n        text: 'Replace',\n        disabled: true\n      }, {\n        type: 'custom',\n        name: 'replaceall',\n        text: 'Replace all',\n        disabled: true\n      }],\n      initialData: initialData,\n      onChange: function onChange(api, details) {\n        if (details.name === 'findtext' && currentSearchState.get().count > 0) {\n          reset(api);\n        }\n      },\n      onAction: function onAction(api, details) {\n        var data = api.getData();\n\n        switch (details.name) {\n          case 'find':\n            doFind(api);\n            break;\n\n          case 'replace':\n            if (!replace(editor, currentSearchState, data.replacetext)) {\n              reset(api);\n            } else {\n              updateButtonStates(api);\n            }\n\n            break;\n\n          case 'replaceall':\n            replace(editor, currentSearchState, data.replacetext, true, true);\n            reset(api);\n            break;\n\n          case 'prev':\n            prev(editor, currentSearchState);\n            updateButtonStates(api);\n            break;\n\n          case 'next':\n            next(editor, currentSearchState);\n            updateButtonStates(api);\n            break;\n\n          case 'matchcase':\n          case 'wholewords':\n          case 'inselection':\n            updateSearchState(api);\n            reset(api);\n            break;\n        }\n\n        focusButtonIfRequired(api, details.name);\n      },\n      onSubmit: function onSubmit(api) {\n        doFind(api);\n        focusButtonIfRequired(api, 'find');\n      },\n      onClose: function onClose() {\n        editor.focus();\n        done(editor, currentSearchState);\n        editor.undoManager.add();\n      }\n    };\n    dialogApi.set(editor.windowManager.open(spec, {\n      inline: 'toolbar'\n    }));\n  };\n\n  var register$1 = function register$1(editor, currentSearchState) {\n    editor.addCommand('SearchReplace', function () {\n      open(editor, currentSearchState);\n    });\n  };\n\n  var showDialog = function showDialog(editor, currentSearchState) {\n    return function () {\n      open(editor, currentSearchState);\n    };\n  };\n\n  var register = function register(editor, currentSearchState) {\n    editor.ui.registry.addMenuItem('searchreplace', {\n      text: 'Find and replace...',\n      shortcut: 'Meta+F',\n      onAction: showDialog(editor, currentSearchState),\n      icon: 'search'\n    });\n    editor.ui.registry.addButton('searchreplace', {\n      tooltip: 'Find and replace',\n      onAction: showDialog(editor, currentSearchState),\n      icon: 'search'\n    });\n    editor.shortcuts.add('Meta+F', '', showDialog(editor, currentSearchState));\n  };\n\n  function Plugin() {\n    global$3.add('searchreplace', function (editor) {\n      var currentSearchState = Cell({\n        index: -1,\n        count: 0,\n        text: '',\n        matchCase: false,\n        wholeWord: false,\n        inSelection: false\n      });\n      register$1(editor, currentSearchState);\n      register(editor, currentSearchState);\n      return get(editor, currentSearchState);\n    });\n  }\n\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/searchreplace/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/searchreplace/plugin.js"]();
/******/ 	
/******/ })()
;