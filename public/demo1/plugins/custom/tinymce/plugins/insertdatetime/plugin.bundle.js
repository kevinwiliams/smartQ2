/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/insertdatetime/plugin.js":
/*!***************************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/insertdatetime/plugin.js ***!
  \***************************************************************************************/
/***/ (() => {

eval("/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.3 (2022-02-09)\r\n */\n(function () {\n  'use strict';\n\n  var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n  var getDateFormat = function getDateFormat(editor) {\n    return editor.getParam('insertdatetime_dateformat', editor.translate('%Y-%m-%d'));\n  };\n\n  var getTimeFormat = function getTimeFormat(editor) {\n    return editor.getParam('insertdatetime_timeformat', editor.translate('%H:%M:%S'));\n  };\n\n  var getFormats = function getFormats(editor) {\n    return editor.getParam('insertdatetime_formats', ['%H:%M:%S', '%Y-%m-%d', '%I:%M:%S %p', '%D']);\n  };\n\n  var getDefaultDateTime = function getDefaultDateTime(editor) {\n    var formats = getFormats(editor);\n    return formats.length > 0 ? formats[0] : getTimeFormat(editor);\n  };\n\n  var shouldInsertTimeElement = function shouldInsertTimeElement(editor) {\n    return editor.getParam('insertdatetime_element', false);\n  };\n\n  var daysShort = 'Sun Mon Tue Wed Thu Fri Sat Sun'.split(' ');\n  var daysLong = 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday Sunday'.split(' ');\n  var monthsShort = 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' ');\n  var monthsLong = 'January February March April May June July August September October November December'.split(' ');\n\n  var addZeros = function addZeros(value, len) {\n    value = '' + value;\n\n    if (value.length < len) {\n      for (var i = 0; i < len - value.length; i++) {\n        value = '0' + value;\n      }\n    }\n\n    return value;\n  };\n\n  var getDateTime = function getDateTime(editor, fmt, date) {\n    if (date === void 0) {\n      date = new Date();\n    }\n\n    fmt = fmt.replace('%D', '%m/%d/%Y');\n    fmt = fmt.replace('%r', '%I:%M:%S %p');\n    fmt = fmt.replace('%Y', '' + date.getFullYear());\n    fmt = fmt.replace('%y', '' + date.getYear());\n    fmt = fmt.replace('%m', addZeros(date.getMonth() + 1, 2));\n    fmt = fmt.replace('%d', addZeros(date.getDate(), 2));\n    fmt = fmt.replace('%H', '' + addZeros(date.getHours(), 2));\n    fmt = fmt.replace('%M', '' + addZeros(date.getMinutes(), 2));\n    fmt = fmt.replace('%S', '' + addZeros(date.getSeconds(), 2));\n    fmt = fmt.replace('%I', '' + ((date.getHours() + 11) % 12 + 1));\n    fmt = fmt.replace('%p', '' + (date.getHours() < 12 ? 'AM' : 'PM'));\n    fmt = fmt.replace('%B', '' + editor.translate(monthsLong[date.getMonth()]));\n    fmt = fmt.replace('%b', '' + editor.translate(monthsShort[date.getMonth()]));\n    fmt = fmt.replace('%A', '' + editor.translate(daysLong[date.getDay()]));\n    fmt = fmt.replace('%a', '' + editor.translate(daysShort[date.getDay()]));\n    fmt = fmt.replace('%%', '%');\n    return fmt;\n  };\n\n  var updateElement = function updateElement(editor, timeElm, computerTime, userTime) {\n    var newTimeElm = editor.dom.create('time', {\n      datetime: computerTime\n    }, userTime);\n    timeElm.parentNode.insertBefore(newTimeElm, timeElm);\n    editor.dom.remove(timeElm);\n    editor.selection.select(newTimeElm, true);\n    editor.selection.collapse(false);\n  };\n\n  var insertDateTime = function insertDateTime(editor, format) {\n    if (shouldInsertTimeElement(editor)) {\n      var userTime = getDateTime(editor, format);\n      var computerTime = void 0;\n\n      if (/%[HMSIp]/.test(format)) {\n        computerTime = getDateTime(editor, '%Y-%m-%dT%H:%M');\n      } else {\n        computerTime = getDateTime(editor, '%Y-%m-%d');\n      }\n\n      var timeElm = editor.dom.getParent(editor.selection.getStart(), 'time');\n\n      if (timeElm) {\n        updateElement(editor, timeElm, computerTime, userTime);\n      } else {\n        editor.insertContent('<time datetime=\"' + computerTime + '\">' + userTime + '</time>');\n      }\n    } else {\n      editor.insertContent(getDateTime(editor, format));\n    }\n  };\n\n  var register$1 = function register$1(editor) {\n    editor.addCommand('mceInsertDate', function (_ui, value) {\n      insertDateTime(editor, value !== null && value !== void 0 ? value : getDateFormat(editor));\n    });\n    editor.addCommand('mceInsertTime', function (_ui, value) {\n      insertDateTime(editor, value !== null && value !== void 0 ? value : getTimeFormat(editor));\n    });\n  };\n\n  var Cell = function Cell(initial) {\n    var value = initial;\n\n    var get = function get() {\n      return value;\n    };\n\n    var set = function set(v) {\n      value = v;\n    };\n\n    return {\n      get: get,\n      set: set\n    };\n  };\n\n  var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n  var register = function register(editor) {\n    var formats = getFormats(editor);\n    var defaultFormat = Cell(getDefaultDateTime(editor));\n\n    var insertDateTime = function insertDateTime(format) {\n      return editor.execCommand('mceInsertDate', false, format);\n    };\n\n    editor.ui.registry.addSplitButton('insertdatetime', {\n      icon: 'insert-time',\n      tooltip: 'Insert date/time',\n      select: function select(value) {\n        return value === defaultFormat.get();\n      },\n      fetch: function fetch(done) {\n        done(global.map(formats, function (format) {\n          return {\n            type: 'choiceitem',\n            text: getDateTime(editor, format),\n            value: format\n          };\n        }));\n      },\n      onAction: function onAction(_api) {\n        insertDateTime(defaultFormat.get());\n      },\n      onItemAction: function onItemAction(_api, value) {\n        defaultFormat.set(value);\n        insertDateTime(value);\n      }\n    });\n\n    var makeMenuItemHandler = function makeMenuItemHandler(format) {\n      return function () {\n        defaultFormat.set(format);\n        insertDateTime(format);\n      };\n    };\n\n    editor.ui.registry.addNestedMenuItem('insertdatetime', {\n      icon: 'insert-time',\n      text: 'Date/time',\n      getSubmenuItems: function getSubmenuItems() {\n        return global.map(formats, function (format) {\n          return {\n            type: 'menuitem',\n            text: getDateTime(editor, format),\n            onAction: makeMenuItemHandler(format)\n          };\n        });\n      }\n    });\n  };\n\n  function Plugin() {\n    global$1.add('insertdatetime', function (editor) {\n      register$1(editor);\n      register(editor);\n    });\n  }\n\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/insertdatetime/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/insertdatetime/plugin.js"]();
/******/ 	
/******/ })()
;