/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/extended/js/custom/user-management/users/list/_table.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/extended/js/custom/user-management/users/list/_table.js ***!
  \**********************************************************************************/
/***/ (() => {

eval(" // window.$ = window.jQuery = require( 'jquery' );\n// require( 'datatables.net' );\n\nvar MVUsersList = function () {\n  //     // Define shared variables\n  //     var table = document.getElementById('mv_table_users');\n  //     var datatable;\n  //     var toolbarBase;\n  //     var toolbarSelected;\n  //     var selectedCount;\n  //     // Private functions\n  //     var initUserTable = function () {\n  //         // Set date data order\n  //         const tableRows = table.querySelectorAll('tbody tr');\n  //         tableRows.forEach(row => {\n  //             const dateRow = row.querySelectorAll('td');\n  //             const lastLogin = dateRow[4].innerText.toLowerCase(); // Get last login time\n  //             let timeCount = 0;\n  //             let timeFormat = 'minutes';\n  //             // Determine date & time format -- add more formats when necessary\n  //             if (lastLogin.includes('yesterday')) {\n  //                 timeCount = 1;\n  //                 timeFormat = 'days';\n  //             } else if (lastLogin.includes('mins')) {\n  //                 timeCount = parseInt(lastLogin.replace(/\\D/g, ''));\n  //                 timeFormat = 'minutes';\n  //             } else if (lastLogin.includes('hours')) {\n  //                 timeCount = parseInt(lastLogin.replace(/\\D/g, ''));\n  //                 timeFormat = 'hours';\n  //             } else if (lastLogin.includes('days')) {\n  //                 timeCount = parseInt(lastLogin.replace(/\\D/g, ''));\n  //                 timeFormat = 'days';\n  //             } else if (lastLogin.includes('weeks')) {\n  //                 timeCount = parseInt(lastLogin.replace(/\\D/g, ''));\n  //                 timeFormat = 'weeks';\n  //             }\n  //             // Subtract date/time from today -- more info on moment datetime subtraction: https://momentjs.com/docs/#/durations/subtract/\n  //             const realDate = moment().subtract(timeCount, timeFormat).format();\n  //             // Insert real date to last login attribute\n  //             dateRow[4].setAttribute('data-order', realDate);\n  //             // Set real date for joined column\n  //             const joinedDate = moment(dateRow[5].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 5th column in table\n  //             dateRow[5].setAttribute('data-order', joinedDate);\n  //         });\n  //         // Init datatable --- more info on datatables: https://datatables.net/manual/\n  //         datatable = $(table).DataTable({\n  //             \"info\": false,\n  //             'order': [],\n  //             \"pageLength\": 10,\n  //             \"lengthChange\": false,\n  //             'columnDefs': [\n  //                 { orderable: false, targets: 0 }, // Disable ordering on column 0 (checkbox)\n  //                 { orderable: false, targets: 6 }, // Disable ordering on column 6 (actions)\n  //             ]\n  //         });\n  //         // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\n  //         datatable.on('draw', function () {\n  //             initToggleToolbar();\n  //             handleDeleteRows();\n  //             toggleToolbars();\n  //         });\n  //     }\n  //     // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n  //     var handleSearchDatatable = () => {\n  //         const filterSearch = document.querySelector('[data-mv-user-table-filter=\"search\"]');\n  //         filterSearch.addEventListener('keyup', function (e) {\n  //             datatable.search(e.target.value).draw();\n  //         });\n  //     }\n  //     // Filter Datatable\n  //     var handleFilterDatatable = () => {\n  //         // Select filter options\n  //         const filterForm = document.querySelector('[data-mv-user-table-filter=\"form\"]');\n  //         const filterButton = filterForm.querySelector('[data-mv-user-table-filter=\"filter\"]');\n  //         const selectOptions = filterForm.querySelectorAll('select');\n  //         // Filter datatable on submit\n  //         filterButton.addEventListener('click', function () {\n  //             var filterString = '';\n  //             // Get filter values\n  //             selectOptions.forEach((item, index) => {\n  //                 if (item.value && item.value !== '') {\n  //                     if (index !== 0) {\n  //                         filterString += ' ';\n  //                     }\n  //                     // Build filter value options\n  //                     filterString += item.value;\n  //                 }\n  //             });\n  //             // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\n  //             datatable.search(filterString).draw();\n  //         });\n  //     }\n  //     // Reset Filter\n  //     var handleResetForm = () => {\n  //         // Select reset button\n  //         const resetButton = document.querySelector('[data-mv-user-table-filter=\"reset\"]');\n  //         // Reset datatable\n  //         resetButton.addEventListener('click', function () {\n  //             // Select filter options\n  //             const filterForm = document.querySelector('[data-mv-user-table-filter=\"form\"]');\n  //             const selectOptions = filterForm.querySelectorAll('select');\n  //             // Reset select2 values -- more info: https://select2.org/programmatic-control/add-select-clear-items\n  //             selectOptions.forEach(select => {\n  //                 $(select).val('').trigger('change');\n  //             });\n  //             // Reset datatable --- official docs reference: https://datatables.net/reference/api/search()\n  //             datatable.search('').draw();\n  //         });\n  //     }\n  //     // Delete subscirption\n  //     var handleDeleteRows = () => {\n  //         // Select all delete buttons\n  //         const deleteButtons = table.querySelectorAll('[data-mv-users-table-filter=\"delete_row\"]');\n  //         deleteButtons.forEach(d => {\n  //             // Delete button on click\n  //             d.addEventListener('click', function (e) {\n  //                 e.preventDefault();\n  //                 // Select parent row\n  //                 const parent = e.target.closest('tr');\n  //                 // Get user name\n  //                 const userName = parent.querySelectorAll('td')[1].querySelectorAll('a')[1].innerText;\n  //                 // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n  //                 Swal.fire({\n  //                     text: \"Are you sure you want to delete \" + userName + \"?\",\n  //                     icon: \"warning\",\n  //                     showCancelButton: true,\n  //                     buttonsStyling: false,\n  //                     confirmButtonText: \"Yes, delete!\",\n  //                     cancelButtonText: \"No, cancel\",\n  //                     customClass: {\n  //                         confirmButton: \"btn fw-bold btn-danger\",\n  //                         cancelButton: \"btn fw-bold btn-active-light-primary\"\n  //                     }\n  //                 }).then(function (result) {\n  //                     if (result.value) {\n  //                         Swal.fire({\n  //                             text: \"You have deleted \" + userName + \"!.\",\n  //                             icon: \"success\",\n  //                             buttonsStyling: false,\n  //                             confirmButtonText: \"Ok, got it!\",\n  //                             customClass: {\n  //                                 confirmButton: \"btn fw-bold btn-primary\",\n  //                             }\n  //                         }).then(function () {\n  //                             // Remove current row\n  //                             datatable.row($(parent)).remove().draw();\n  //                         }).then(function () {\n  //                             // Detect checked checkboxes\n  //                             toggleToolbars();\n  //                         });\n  //                     } else if (result.dismiss === 'cancel') {\n  //                         Swal.fire({\n  //                             text: customerName + \" was not deleted.\",\n  //                             icon: \"error\",\n  //                             buttonsStyling: false,\n  //                             confirmButtonText: \"Ok, got it!\",\n  //                             customClass: {\n  //                                 confirmButton: \"btn fw-bold btn-primary\",\n  //                             }\n  //                         });\n  //                     }\n  //                 });\n  //             })\n  //         });\n  //     }\n  //     // Init toggle toolbar\n  //     var initToggleToolbar = () => {\n  //         // Toggle selected action toolbar\n  //         // Select all checkboxes\n  //         const checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\n  //         // Select elements\n  //         toolbarBase = document.querySelector('[data-mv-user-table-toolbar=\"base\"]');\n  //         toolbarSelected = document.querySelector('[data-mv-user-table-toolbar=\"selected\"]');\n  //         selectedCount = document.querySelector('[data-mv-user-table-select=\"selected_count\"]');\n  //         const deleteSelected = document.querySelector('[data-mv-user-table-select=\"delete_selected\"]');\n  //         // Toggle delete selected toolbar\n  //         checkboxes.forEach(c => {\n  //             // Checkbox on click event\n  //             c.addEventListener('click', function () {\n  //                 setTimeout(function () {\n  //                     toggleToolbars();\n  //                 }, 50);\n  //             });\n  //         });\n  //         // Deleted selected rows\n  //         deleteSelected.addEventListener('click', function () {\n  //             // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n  //             Swal.fire({\n  //                 text: \"Are you sure you want to delete selected customers?\",\n  //                 icon: \"warning\",\n  //                 showCancelButton: true,\n  //                 buttonsStyling: false,\n  //                 confirmButtonText: \"Yes, delete!\",\n  //                 cancelButtonText: \"No, cancel\",\n  //                 customClass: {\n  //                     confirmButton: \"btn fw-bold btn-danger\",\n  //                     cancelButton: \"btn fw-bold btn-active-light-primary\"\n  //                 }\n  //             }).then(function (result) {\n  //                 if (result.value) {\n  //                     Swal.fire({\n  //                         text: \"You have deleted all selected customers!.\",\n  //                         icon: \"success\",\n  //                         buttonsStyling: false,\n  //                         confirmButtonText: \"Ok, got it!\",\n  //                         customClass: {\n  //                             confirmButton: \"btn fw-bold btn-primary\",\n  //                         }\n  //                     }).then(function () {\n  //                         // Remove all selected customers\n  //                         checkboxes.forEach(c => {\n  //                             if (c.checked) {\n  //                                 datatable.row($(c.closest('tbody tr'))).remove().draw();\n  //                             }\n  //                         });\n  //                         // Remove header checked box\n  //                         const headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\n  //                         headerCheckbox.checked = false;\n  //                     }).then(function () {\n  //                         toggleToolbars(); // Detect checked checkboxes\n  //                         initToggleToolbar(); // Re-init toolbar to recalculate checkboxes\n  //                     });\n  //                 } else if (result.dismiss === 'cancel') {\n  //                     Swal.fire({\n  //                         text: \"Selected customers was not deleted.\",\n  //                         icon: \"error\",\n  //                         buttonsStyling: false,\n  //                         confirmButtonText: \"Ok, got it!\",\n  //                         customClass: {\n  //                             confirmButton: \"btn fw-bold btn-primary\",\n  //                         }\n  //                     });\n  //                 }\n  //             });\n  //         });\n  //     }\n  //     // Toggle toolbars\n  //     const toggleToolbars = () => {\n  //         // Select refreshed checkbox DOM elements\n  //         const allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]');\n  //         // Detect checkboxes state & count\n  //         let checkedState = false;\n  //         let count = 0;\n  //         // Count checked boxes\n  //         allCheckboxes.forEach(c => {\n  //             if (c.checked) {\n  //                 checkedState = true;\n  //                 count++;\n  //             }\n  //         });\n  //         // Toggle toolbars\n  //         if (checkedState) {\n  //             selectedCount.innerHTML = count;\n  //             toolbarBase.classList.add('d-none');\n  //             toolbarSelected.classList.remove('d-none');\n  //         } else {\n  //             toolbarBase.classList.remove('d-none');\n  //             toolbarSelected.classList.add('d-none');\n  //         }\n  //     }\n  return {\n    // Public functions\n    init: function init() {\n      MVMenu.createInstances(); // if (!table) {\n      //     return;\n      // }\n      // initUserTable();\n      // initToggleToolbar();\n      // handleSearchDatatable();\n      // handleResetForm();\n      // handleDeleteRows();\n      // handleFilterDatatable();\n    }\n  };\n}(); // On document ready\n\n\nMVUtil.onDOMContentLoaded(function () {\n  MVUsersList.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2V4dGVuZGVkL2pzL2N1c3RvbS91c2VyLW1hbmFnZW1lbnQvdXNlcnMvbGlzdC9fdGFibGUuanMuanMiLCJtYXBwaW5ncyI6IkNBQ0E7QUFDQTs7QUFFQSxJQUFJQSxXQUFXLEdBQUcsWUFBWTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVJLFNBQU87QUFDSDtBQUNBQyxJQUFBQSxJQUFJLEVBQUUsZ0JBQVk7QUFDZEMsTUFBQUEsTUFBTSxDQUFDQyxlQUFQLEdBRGMsQ0FFZDtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSDtBQWZFLEdBQVA7QUFpQkgsQ0FwVGlCLEVBQWxCLEMsQ0FzVEE7OztBQUNBQyxNQUFNLENBQUNDLGtCQUFQLENBQTBCLFlBQVk7QUFDbENMLEVBQUFBLFdBQVcsQ0FBQ0MsSUFBWjtBQUNILENBRkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2V4dGVuZGVkL2pzL2N1c3RvbS91c2VyLW1hbmFnZW1lbnQvdXNlcnMvbGlzdC9fdGFibGUuanM/M2NjOSJdLCJzb3VyY2VzQ29udGVudCI6WyIgXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIHdpbmRvdy4kID0gd2luZG93LmpRdWVyeSA9IHJlcXVpcmUoICdqcXVlcnknICk7XHJcbi8vIHJlcXVpcmUoICdkYXRhdGFibGVzLm5ldCcgKTtcclxuXHJcbnZhciBNVlVzZXJzTGlzdCA9IGZ1bmN0aW9uICgpIHtcclxuLy8gICAgIC8vIERlZmluZSBzaGFyZWQgdmFyaWFibGVzXHJcbi8vICAgICB2YXIgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXZfdGFibGVfdXNlcnMnKTtcclxuLy8gICAgIHZhciBkYXRhdGFibGU7XHJcbi8vICAgICB2YXIgdG9vbGJhckJhc2U7XHJcbi8vICAgICB2YXIgdG9vbGJhclNlbGVjdGVkO1xyXG4vLyAgICAgdmFyIHNlbGVjdGVkQ291bnQ7XHJcblxyXG4vLyAgICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuLy8gICAgIHZhciBpbml0VXNlclRhYmxlID0gZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgICAgIC8vIFNldCBkYXRlIGRhdGEgb3JkZXJcclxuLy8gICAgICAgICBjb25zdCB0YWJsZVJvd3MgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCd0Ym9keSB0cicpO1xyXG5cclxuLy8gICAgICAgICB0YWJsZVJvd3MuZm9yRWFjaChyb3cgPT4ge1xyXG4vLyAgICAgICAgICAgICBjb25zdCBkYXRlUm93ID0gcm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkJyk7XHJcbi8vICAgICAgICAgICAgIGNvbnN0IGxhc3RMb2dpbiA9IGRhdGVSb3dbNF0uaW5uZXJUZXh0LnRvTG93ZXJDYXNlKCk7IC8vIEdldCBsYXN0IGxvZ2luIHRpbWVcclxuLy8gICAgICAgICAgICAgbGV0IHRpbWVDb3VudCA9IDA7XHJcbi8vICAgICAgICAgICAgIGxldCB0aW1lRm9ybWF0ID0gJ21pbnV0ZXMnO1xyXG5cclxuLy8gICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGRhdGUgJiB0aW1lIGZvcm1hdCAtLSBhZGQgbW9yZSBmb3JtYXRzIHdoZW4gbmVjZXNzYXJ5XHJcbi8vICAgICAgICAgICAgIGlmIChsYXN0TG9naW4uaW5jbHVkZXMoJ3llc3RlcmRheScpKSB7XHJcbi8vICAgICAgICAgICAgICAgICB0aW1lQ291bnQgPSAxO1xyXG4vLyAgICAgICAgICAgICAgICAgdGltZUZvcm1hdCA9ICdkYXlzJztcclxuLy8gICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0TG9naW4uaW5jbHVkZXMoJ21pbnMnKSkge1xyXG4vLyAgICAgICAgICAgICAgICAgdGltZUNvdW50ID0gcGFyc2VJbnQobGFzdExvZ2luLnJlcGxhY2UoL1xcRC9nLCAnJykpO1xyXG4vLyAgICAgICAgICAgICAgICAgdGltZUZvcm1hdCA9ICdtaW51dGVzJztcclxuLy8gICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0TG9naW4uaW5jbHVkZXMoJ2hvdXJzJykpIHtcclxuLy8gICAgICAgICAgICAgICAgIHRpbWVDb3VudCA9IHBhcnNlSW50KGxhc3RMb2dpbi5yZXBsYWNlKC9cXEQvZywgJycpKTtcclxuLy8gICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQgPSAnaG91cnMnO1xyXG4vLyAgICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3RMb2dpbi5pbmNsdWRlcygnZGF5cycpKSB7XHJcbi8vICAgICAgICAgICAgICAgICB0aW1lQ291bnQgPSBwYXJzZUludChsYXN0TG9naW4ucmVwbGFjZSgvXFxEL2csICcnKSk7XHJcbi8vICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gJ2RheXMnO1xyXG4vLyAgICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3RMb2dpbi5pbmNsdWRlcygnd2Vla3MnKSkge1xyXG4vLyAgICAgICAgICAgICAgICAgdGltZUNvdW50ID0gcGFyc2VJbnQobGFzdExvZ2luLnJlcGxhY2UoL1xcRC9nLCAnJykpO1xyXG4vLyAgICAgICAgICAgICAgICAgdGltZUZvcm1hdCA9ICd3ZWVrcyc7XHJcbi8vICAgICAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGRhdGUvdGltZSBmcm9tIHRvZGF5IC0tIG1vcmUgaW5mbyBvbiBtb21lbnQgZGF0ZXRpbWUgc3VidHJhY3Rpb246IGh0dHBzOi8vbW9tZW50anMuY29tL2RvY3MvIy9kdXJhdGlvbnMvc3VidHJhY3QvXHJcbi8vICAgICAgICAgICAgIGNvbnN0IHJlYWxEYXRlID0gbW9tZW50KCkuc3VidHJhY3QodGltZUNvdW50LCB0aW1lRm9ybWF0KS5mb3JtYXQoKTtcclxuXHJcbi8vICAgICAgICAgICAgIC8vIEluc2VydCByZWFsIGRhdGUgdG8gbGFzdCBsb2dpbiBhdHRyaWJ1dGVcclxuLy8gICAgICAgICAgICAgZGF0ZVJvd1s0XS5zZXRBdHRyaWJ1dGUoJ2RhdGEtb3JkZXInLCByZWFsRGF0ZSk7XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBTZXQgcmVhbCBkYXRlIGZvciBqb2luZWQgY29sdW1uXHJcbi8vICAgICAgICAgICAgIGNvbnN0IGpvaW5lZERhdGUgPSBtb21lbnQoZGF0ZVJvd1s1XS5pbm5lckhUTUwsIFwiREQgTU1NIFlZWVksIExUXCIpLmZvcm1hdCgpOyAvLyBzZWxlY3QgZGF0ZSBmcm9tIDV0aCBjb2x1bW4gaW4gdGFibGVcclxuLy8gICAgICAgICAgICAgZGF0ZVJvd1s1XS5zZXRBdHRyaWJ1dGUoJ2RhdGEtb3JkZXInLCBqb2luZWREYXRlKTtcclxuLy8gICAgICAgICB9KTtcclxuXHJcbi8vICAgICAgICAgLy8gSW5pdCBkYXRhdGFibGUgLS0tIG1vcmUgaW5mbyBvbiBkYXRhdGFibGVzOiBodHRwczovL2RhdGF0YWJsZXMubmV0L21hbnVhbC9cclxuLy8gICAgICAgICBkYXRhdGFibGUgPSAkKHRhYmxlKS5EYXRhVGFibGUoe1xyXG4vLyAgICAgICAgICAgICBcImluZm9cIjogZmFsc2UsXHJcbi8vICAgICAgICAgICAgICdvcmRlcic6IFtdLFxyXG4vLyAgICAgICAgICAgICBcInBhZ2VMZW5ndGhcIjogMTAsXHJcbi8vICAgICAgICAgICAgIFwibGVuZ3RoQ2hhbmdlXCI6IGZhbHNlLFxyXG4vLyAgICAgICAgICAgICAnY29sdW1uRGVmcyc6IFtcclxuLy8gICAgICAgICAgICAgICAgIHsgb3JkZXJhYmxlOiBmYWxzZSwgdGFyZ2V0czogMCB9LCAvLyBEaXNhYmxlIG9yZGVyaW5nIG9uIGNvbHVtbiAwIChjaGVja2JveClcclxuLy8gICAgICAgICAgICAgICAgIHsgb3JkZXJhYmxlOiBmYWxzZSwgdGFyZ2V0czogNiB9LCAvLyBEaXNhYmxlIG9yZGVyaW5nIG9uIGNvbHVtbiA2IChhY3Rpb25zKVxyXG4vLyAgICAgICAgICAgICBdXHJcbi8vICAgICAgICAgfSk7XHJcblxyXG4vLyAgICAgICAgIC8vIFJlLWluaXQgZnVuY3Rpb25zIG9uIGV2ZXJ5IHRhYmxlIHJlLWRyYXcgLS0gbW9yZSBpbmZvOiBodHRwczovL2RhdGF0YWJsZXMubmV0L3JlZmVyZW5jZS9ldmVudC9kcmF3XHJcbi8vICAgICAgICAgZGF0YXRhYmxlLm9uKCdkcmF3JywgZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgICAgICAgICBpbml0VG9nZ2xlVG9vbGJhcigpO1xyXG4vLyAgICAgICAgICAgICBoYW5kbGVEZWxldGVSb3dzKCk7XHJcbi8vICAgICAgICAgICAgIHRvZ2dsZVRvb2xiYXJzKCk7XHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgLy8gU2VhcmNoIERhdGF0YWJsZSAtLS0gb2ZmaWNpYWwgZG9jcyByZWZlcmVuY2U6IGh0dHBzOi8vZGF0YXRhYmxlcy5uZXQvcmVmZXJlbmNlL2FwaS9zZWFyY2goKVxyXG4vLyAgICAgdmFyIGhhbmRsZVNlYXJjaERhdGF0YWJsZSA9ICgpID0+IHtcclxuLy8gICAgICAgICBjb25zdCBmaWx0ZXJTZWFyY2ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1tdi11c2VyLXRhYmxlLWZpbHRlcj1cInNlYXJjaFwiXScpO1xyXG4vLyAgICAgICAgIGZpbHRlclNlYXJjaC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uIChlKSB7XHJcbi8vICAgICAgICAgICAgIGRhdGF0YWJsZS5zZWFyY2goZS50YXJnZXQudmFsdWUpLmRyYXcoKTtcclxuLy8gICAgICAgICB9KTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICAvLyBGaWx0ZXIgRGF0YXRhYmxlXHJcbi8vICAgICB2YXIgaGFuZGxlRmlsdGVyRGF0YXRhYmxlID0gKCkgPT4ge1xyXG4vLyAgICAgICAgIC8vIFNlbGVjdCBmaWx0ZXIgb3B0aW9uc1xyXG4vLyAgICAgICAgIGNvbnN0IGZpbHRlckZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1tdi11c2VyLXRhYmxlLWZpbHRlcj1cImZvcm1cIl0nKTtcclxuLy8gICAgICAgICBjb25zdCBmaWx0ZXJCdXR0b24gPSBmaWx0ZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW12LXVzZXItdGFibGUtZmlsdGVyPVwiZmlsdGVyXCJdJyk7XHJcbi8vICAgICAgICAgY29uc3Qgc2VsZWN0T3B0aW9ucyA9IGZpbHRlckZvcm0ucXVlcnlTZWxlY3RvckFsbCgnc2VsZWN0Jyk7XHJcblxyXG4vLyAgICAgICAgIC8vIEZpbHRlciBkYXRhdGFibGUgb24gc3VibWl0XHJcbi8vICAgICAgICAgZmlsdGVyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgICAgICAgICB2YXIgZmlsdGVyU3RyaW5nID0gJyc7XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBHZXQgZmlsdGVyIHZhbHVlc1xyXG4vLyAgICAgICAgICAgICBzZWxlY3RPcHRpb25zLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcbi8vICAgICAgICAgICAgICAgICBpZiAoaXRlbS52YWx1ZSAmJiBpdGVtLnZhbHVlICE9PSAnJykge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJTdHJpbmcgKz0gJyAnO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gQnVpbGQgZmlsdGVyIHZhbHVlIG9wdGlvbnNcclxuLy8gICAgICAgICAgICAgICAgICAgICBmaWx0ZXJTdHJpbmcgKz0gaXRlbS52YWx1ZTtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgfSk7XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBGaWx0ZXIgZGF0YXRhYmxlIC0tLSBvZmZpY2lhbCBkb2NzIHJlZmVyZW5jZTogaHR0cHM6Ly9kYXRhdGFibGVzLm5ldC9yZWZlcmVuY2UvYXBpL3NlYXJjaCgpXHJcbi8vICAgICAgICAgICAgIGRhdGF0YWJsZS5zZWFyY2goZmlsdGVyU3RyaW5nKS5kcmF3KCk7XHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgLy8gUmVzZXQgRmlsdGVyXHJcbi8vICAgICB2YXIgaGFuZGxlUmVzZXRGb3JtID0gKCkgPT4ge1xyXG4vLyAgICAgICAgIC8vIFNlbGVjdCByZXNldCBidXR0b25cclxuLy8gICAgICAgICBjb25zdCByZXNldEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW12LXVzZXItdGFibGUtZmlsdGVyPVwicmVzZXRcIl0nKTtcclxuXHJcbi8vICAgICAgICAgLy8gUmVzZXQgZGF0YXRhYmxlXHJcbi8vICAgICAgICAgcmVzZXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbi8vICAgICAgICAgICAgIC8vIFNlbGVjdCBmaWx0ZXIgb3B0aW9uc1xyXG4vLyAgICAgICAgICAgICBjb25zdCBmaWx0ZXJGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtbXYtdXNlci10YWJsZS1maWx0ZXI9XCJmb3JtXCJdJyk7XHJcbi8vICAgICAgICAgICAgIGNvbnN0IHNlbGVjdE9wdGlvbnMgPSBmaWx0ZXJGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdCcpO1xyXG5cclxuLy8gICAgICAgICAgICAgLy8gUmVzZXQgc2VsZWN0MiB2YWx1ZXMgLS0gbW9yZSBpbmZvOiBodHRwczovL3NlbGVjdDIub3JnL3Byb2dyYW1tYXRpYy1jb250cm9sL2FkZC1zZWxlY3QtY2xlYXItaXRlbXNcclxuLy8gICAgICAgICAgICAgc2VsZWN0T3B0aW9ucy5mb3JFYWNoKHNlbGVjdCA9PiB7XHJcbi8vICAgICAgICAgICAgICAgICAkKHNlbGVjdCkudmFsKCcnKS50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuLy8gICAgICAgICAgICAgfSk7XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBSZXNldCBkYXRhdGFibGUgLS0tIG9mZmljaWFsIGRvY3MgcmVmZXJlbmNlOiBodHRwczovL2RhdGF0YWJsZXMubmV0L3JlZmVyZW5jZS9hcGkvc2VhcmNoKClcclxuLy8gICAgICAgICAgICAgZGF0YXRhYmxlLnNlYXJjaCgnJykuZHJhdygpO1xyXG4vLyAgICAgICAgIH0pO1xyXG4vLyAgICAgfVxyXG5cclxuXHJcbi8vICAgICAvLyBEZWxldGUgc3Vic2NpcnB0aW9uXHJcbi8vICAgICB2YXIgaGFuZGxlRGVsZXRlUm93cyA9ICgpID0+IHtcclxuLy8gICAgICAgICAvLyBTZWxlY3QgYWxsIGRlbGV0ZSBidXR0b25zXHJcbi8vICAgICAgICAgY29uc3QgZGVsZXRlQnV0dG9ucyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLW12LXVzZXJzLXRhYmxlLWZpbHRlcj1cImRlbGV0ZV9yb3dcIl0nKTtcclxuXHJcbi8vICAgICAgICAgZGVsZXRlQnV0dG9ucy5mb3JFYWNoKGQgPT4ge1xyXG4vLyAgICAgICAgICAgICAvLyBEZWxldGUgYnV0dG9uIG9uIGNsaWNrXHJcbi8vICAgICAgICAgICAgIGQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4vLyAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuLy8gICAgICAgICAgICAgICAgIC8vIFNlbGVjdCBwYXJlbnQgcm93XHJcbi8vICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBlLnRhcmdldC5jbG9zZXN0KCd0cicpO1xyXG5cclxuLy8gICAgICAgICAgICAgICAgIC8vIEdldCB1c2VyIG5hbWVcclxuLy8gICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJOYW1lID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkJylbMV0ucXVlcnlTZWxlY3RvckFsbCgnYScpWzFdLmlubmVyVGV4dDtcclxuXHJcbi8vICAgICAgICAgICAgICAgICAvLyBTd2VldEFsZXJ0MiBwb3AgdXAgLS0tIG9mZmljaWFsIGRvY3MgcmVmZXJlbmNlOiBodHRwczovL3N3ZWV0YWxlcnQyLmdpdGh1Yi5pby9cclxuLy8gICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIFwiICsgdXNlck5hbWUgKyBcIj9cIixcclxuLy8gICAgICAgICAgICAgICAgICAgICBpY29uOiBcIndhcm5pbmdcIixcclxuLy8gICAgICAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxyXG4vLyAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuLy8gICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJZZXMsIGRlbGV0ZSFcIixcclxuLy8gICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCBjYW5jZWxcIixcclxuLy8gICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBmdy1ib2xkIGJ0bi1kYW5nZXJcIixcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uOiBcImJ0biBmdy1ib2xkIGJ0bi1hY3RpdmUtbGlnaHQtcHJpbWFyeVwiXHJcbi8vICAgICAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJZb3UgaGF2ZSBkZWxldGVkIFwiICsgdXNlck5hbWUgKyBcIiEuXCIsXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcInN1Y2Nlc3NcIixcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGZ3LWJvbGQgYnRuLXByaW1hcnlcIixcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgY3VycmVudCByb3dcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGF0YWJsZS5yb3coJChwYXJlbnQpKS5yZW1vdmUoKS5kcmF3KCk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGV0ZWN0IGNoZWNrZWQgY2hlY2tib3hlc1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlVG9vbGJhcnMoKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuZGlzbWlzcyA9PT0gJ2NhbmNlbCcpIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGN1c3RvbWVyTmFtZSArIFwiIHdhcyBub3QgZGVsZXRlZC5cIixcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGZ3LWJvbGQgYnRuLXByaW1hcnlcIixcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgICAgIH0pXHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgLy8gSW5pdCB0b2dnbGUgdG9vbGJhclxyXG4vLyAgICAgdmFyIGluaXRUb2dnbGVUb29sYmFyID0gKCkgPT4ge1xyXG4vLyAgICAgICAgIC8vIFRvZ2dsZSBzZWxlY3RlZCBhY3Rpb24gdG9vbGJhclxyXG4vLyAgICAgICAgIC8vIFNlbGVjdCBhbGwgY2hlY2tib3hlc1xyXG4vLyAgICAgICAgIGNvbnN0IGNoZWNrYm94ZXMgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCdbdHlwZT1cImNoZWNrYm94XCJdJyk7XHJcblxyXG4vLyAgICAgICAgIC8vIFNlbGVjdCBlbGVtZW50c1xyXG4vLyAgICAgICAgIHRvb2xiYXJCYXNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtbXYtdXNlci10YWJsZS10b29sYmFyPVwiYmFzZVwiXScpO1xyXG4vLyAgICAgICAgIHRvb2xiYXJTZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW12LXVzZXItdGFibGUtdG9vbGJhcj1cInNlbGVjdGVkXCJdJyk7XHJcbi8vICAgICAgICAgc2VsZWN0ZWRDb3VudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW12LXVzZXItdGFibGUtc2VsZWN0PVwic2VsZWN0ZWRfY291bnRcIl0nKTtcclxuLy8gICAgICAgICBjb25zdCBkZWxldGVTZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW12LXVzZXItdGFibGUtc2VsZWN0PVwiZGVsZXRlX3NlbGVjdGVkXCJdJyk7XHJcblxyXG4vLyAgICAgICAgIC8vIFRvZ2dsZSBkZWxldGUgc2VsZWN0ZWQgdG9vbGJhclxyXG4vLyAgICAgICAgIGNoZWNrYm94ZXMuZm9yRWFjaChjID0+IHtcclxuLy8gICAgICAgICAgICAgLy8gQ2hlY2tib3ggb24gY2xpY2sgZXZlbnRcclxuLy8gICAgICAgICAgICAgYy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuLy8gICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZVRvb2xiYXJzKCk7XHJcbi8vICAgICAgICAgICAgICAgICB9LCA1MCk7XHJcbi8vICAgICAgICAgICAgIH0pO1xyXG4vLyAgICAgICAgIH0pO1xyXG5cclxuLy8gICAgICAgICAvLyBEZWxldGVkIHNlbGVjdGVkIHJvd3NcclxuLy8gICAgICAgICBkZWxldGVTZWxlY3RlZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuLy8gICAgICAgICAgICAgLy8gU3dlZXRBbGVydDIgcG9wIHVwIC0tLSBvZmZpY2lhbCBkb2NzIHJlZmVyZW5jZTogaHR0cHM6Ly9zd2VldGFsZXJ0Mi5naXRodWIuaW8vXHJcbi8vICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbi8vICAgICAgICAgICAgICAgICB0ZXh0OiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgc2VsZWN0ZWQgY3VzdG9tZXJzP1wiLFxyXG4vLyAgICAgICAgICAgICAgICAgaWNvbjogXCJ3YXJuaW5nXCIsXHJcbi8vICAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxyXG4vLyAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4vLyAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzLCBkZWxldGUhXCIsXHJcbi8vICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCBjYW5jZWxcIixcclxuLy8gICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gZnctYm9sZCBidG4tZGFuZ2VyXCIsXHJcbi8vICAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uOiBcImJ0biBmdy1ib2xkIGJ0bi1hY3RpdmUtbGlnaHQtcHJpbWFyeVwiXHJcbi8vICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4vLyAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiWW91IGhhdmUgZGVsZXRlZCBhbGwgc2VsZWN0ZWQgY3VzdG9tZXJzIS5cIixcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJzdWNjZXNzXCIsXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGZ3LWJvbGQgYnRuLXByaW1hcnlcIixcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgYWxsIHNlbGVjdGVkIGN1c3RvbWVyc1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveGVzLmZvckVhY2goYyA9PiB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYy5jaGVja2VkKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXRhYmxlLnJvdygkKGMuY2xvc2VzdCgndGJvZHkgdHInKSkpLnJlbW92ZSgpLmRyYXcoKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgaGVhZGVyIGNoZWNrZWQgYm94XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlckNoZWNrYm94ID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgnW3R5cGU9XCJjaGVja2JveFwiXScpWzBdO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJDaGVja2JveC5jaGVja2VkID0gZmFsc2U7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZVRvb2xiYXJzKCk7IC8vIERldGVjdCBjaGVja2VkIGNoZWNrYm94ZXNcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFRvZ2dsZVRvb2xiYXIoKTsgLy8gUmUtaW5pdCB0b29sYmFyIHRvIHJlY2FsY3VsYXRlIGNoZWNrYm94ZXNcclxuLy8gICAgICAgICAgICAgICAgICAgICB9KTtcclxuLy8gICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmRpc21pc3MgPT09ICdjYW5jZWwnKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJTZWxlY3RlZCBjdXN0b21lcnMgd2FzIG5vdCBkZWxldGVkLlwiLFxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcImVycm9yXCIsXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGZ3LWJvbGQgYnRuLXByaW1hcnlcIixcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICB9KTtcclxuLy8gICAgICAgICB9KTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICAvLyBUb2dnbGUgdG9vbGJhcnNcclxuLy8gICAgIGNvbnN0IHRvZ2dsZVRvb2xiYXJzID0gKCkgPT4ge1xyXG4vLyAgICAgICAgIC8vIFNlbGVjdCByZWZyZXNoZWQgY2hlY2tib3ggRE9NIGVsZW1lbnRzXHJcbi8vICAgICAgICAgY29uc3QgYWxsQ2hlY2tib3hlcyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3Rib2R5IFt0eXBlPVwiY2hlY2tib3hcIl0nKTtcclxuXHJcbi8vICAgICAgICAgLy8gRGV0ZWN0IGNoZWNrYm94ZXMgc3RhdGUgJiBjb3VudFxyXG4vLyAgICAgICAgIGxldCBjaGVja2VkU3RhdGUgPSBmYWxzZTtcclxuLy8gICAgICAgICBsZXQgY291bnQgPSAwO1xyXG5cclxuLy8gICAgICAgICAvLyBDb3VudCBjaGVja2VkIGJveGVzXHJcbi8vICAgICAgICAgYWxsQ2hlY2tib3hlcy5mb3JFYWNoKGMgPT4ge1xyXG4vLyAgICAgICAgICAgICBpZiAoYy5jaGVja2VkKSB7XHJcbi8vICAgICAgICAgICAgICAgICBjaGVja2VkU3RhdGUgPSB0cnVlO1xyXG4vLyAgICAgICAgICAgICAgICAgY291bnQrKztcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH0pO1xyXG5cclxuLy8gICAgICAgICAvLyBUb2dnbGUgdG9vbGJhcnNcclxuLy8gICAgICAgICBpZiAoY2hlY2tlZFN0YXRlKSB7XHJcbi8vICAgICAgICAgICAgIHNlbGVjdGVkQ291bnQuaW5uZXJIVE1MID0gY291bnQ7XHJcbi8vICAgICAgICAgICAgIHRvb2xiYXJCYXNlLmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xyXG4vLyAgICAgICAgICAgICB0b29sYmFyU2VsZWN0ZWQuY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XHJcbi8vICAgICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAgICAgdG9vbGJhckJhc2UuY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XHJcbi8vICAgICAgICAgICAgIHRvb2xiYXJTZWxlY3RlZC5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyBQdWJsaWMgZnVuY3Rpb25zXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBNVk1lbnUuY3JlYXRlSW5zdGFuY2VzKCk7XHJcbiAgICAgICAgICAgIC8vIGlmICghdGFibGUpIHtcclxuICAgICAgICAgICAgLy8gICAgIHJldHVybjtcclxuICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgICAgLy8gaW5pdFVzZXJUYWJsZSgpO1xyXG4gICAgICAgICAgICAvLyBpbml0VG9nZ2xlVG9vbGJhcigpO1xyXG4gICAgICAgICAgICAvLyBoYW5kbGVTZWFyY2hEYXRhdGFibGUoKTtcclxuICAgICAgICAgICAgLy8gaGFuZGxlUmVzZXRGb3JtKCk7XHJcbiAgICAgICAgICAgIC8vIGhhbmRsZURlbGV0ZVJvd3MoKTtcclxuICAgICAgICAgICAgLy8gaGFuZGxlRmlsdGVyRGF0YXRhYmxlKCk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSgpO1xyXG5cclxuLy8gT24gZG9jdW1lbnQgcmVhZHlcclxuTVZVdGlsLm9uRE9NQ29udGVudExvYWRlZChmdW5jdGlvbiAoKSB7XHJcbiAgICBNVlVzZXJzTGlzdC5pbml0KCk7XHJcbn0pO1xyXG4iXSwibmFtZXMiOlsiTVZVc2Vyc0xpc3QiLCJpbml0IiwiTVZNZW51IiwiY3JlYXRlSW5zdGFuY2VzIiwiTVZVdGlsIiwib25ET01Db250ZW50TG9hZGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/extended/js/custom/user-management/users/list/_table.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/extended/js/custom/user-management/users/list/_table.js"]();
/******/ 	
/******/ })()
;