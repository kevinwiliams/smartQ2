/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/extended/js/custom/widgets.js":
/*!********************************************************!*\
  !*** ./resources/assets/extended/js/custom/widgets.js ***!
  \********************************************************/
/***/ ((module) => {

eval(" // Class definition\n\nvar MVWidgets = function () {\n  // Statistics widgets\n  var initStatisticsWidget3 = function initStatisticsWidget3() {\n    var charts = document.querySelectorAll('.statistics-widget-3-chart');\n    [].slice.call(charts).map(function (element) {\n      var height = parseInt(MVUtil.css(element, 'height'));\n\n      if (!element) {\n        return;\n      }\n\n      var color = element.getAttribute('data-mv-chart-color');\n      var labelColor = MVUtil.getCssVariableValue('--bs-' + 'gray-800');\n      var baseColor = MVUtil.getCssVariableValue('--bs-' + color);\n      var lightColor = MVUtil.getCssVariableValue('--bs-light-' + color);\n      var options = {\n        series: [{\n          name: 'Net Profit',\n          data: [30, 45, 32, 70, 40]\n        }],\n        chart: {\n          fontFamily: 'inherit',\n          type: 'area',\n          height: height,\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          },\n          sparkline: {\n            enabled: true\n          }\n        },\n        plotOptions: {},\n        legend: {\n          show: false\n        },\n        dataLabels: {\n          enabled: false\n        },\n        fill: {\n          type: 'solid',\n          opacity: 0.3\n        },\n        stroke: {\n          curve: 'smooth',\n          show: true,\n          width: 3,\n          colors: [baseColor]\n        },\n        xaxis: {\n          categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          },\n          crosshairs: {\n            show: false,\n            position: 'front',\n            stroke: {\n              color: '#E4E6EF',\n              width: 1,\n              dashArray: 3\n            }\n          },\n          tooltip: {\n            enabled: true,\n            formatter: undefined,\n            offsetY: 0,\n            style: {\n              fontSize: '12px'\n            }\n          }\n        },\n        yaxis: {\n          min: 0,\n          max: 80,\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          }\n        },\n        states: {\n          normal: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          hover: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          active: {\n            allowMultipleDataPointsSelection: false,\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          }\n        },\n        tooltip: {\n          style: {\n            fontSize: '12px'\n          },\n          y: {\n            formatter: function formatter(val) {\n              return \"$\" + val + \" thousands\";\n            }\n          }\n        },\n        colors: [baseColor],\n        markers: {\n          colors: [baseColor],\n          strokeColor: [lightColor],\n          strokeWidth: 3\n        }\n      };\n      var chart = new ApexCharts(element, options);\n      chart.render();\n    });\n  };\n\n  var initStatisticsWidget4 = function initStatisticsWidget4() {\n    var charts = document.querySelectorAll('.statistics-widget-4-chart');\n    [].slice.call(charts).map(function (element) {\n      var height = parseInt(MVUtil.css(element, 'height'));\n\n      if (!element) {\n        return;\n      }\n\n      var color = element.getAttribute('data-mv-chart-color');\n      var labelColor = MVUtil.getCssVariableValue('--bs-' + 'gray-800');\n      var baseColor = MVUtil.getCssVariableValue('--bs-' + color);\n      var lightColor = MVUtil.getCssVariableValue('--bs-light-' + color);\n      var options = {\n        series: [{\n          name: 'Net Profit',\n          data: [40, 40, 30, 30, 35, 35, 50]\n        }],\n        chart: {\n          fontFamily: 'inherit',\n          type: 'area',\n          height: height,\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          },\n          sparkline: {\n            enabled: true\n          }\n        },\n        plotOptions: {},\n        legend: {\n          show: false\n        },\n        dataLabels: {\n          enabled: false\n        },\n        fill: {\n          type: 'solid',\n          opacity: 0.3\n        },\n        stroke: {\n          curve: 'smooth',\n          show: true,\n          width: 3,\n          colors: [baseColor]\n        },\n        xaxis: {\n          categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          },\n          crosshairs: {\n            show: false,\n            position: 'front',\n            stroke: {\n              color: '#E4E6EF',\n              width: 1,\n              dashArray: 3\n            }\n          },\n          tooltip: {\n            enabled: true,\n            formatter: undefined,\n            offsetY: 0,\n            style: {\n              fontSize: '12px'\n            }\n          }\n        },\n        yaxis: {\n          min: 0,\n          max: 60,\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          }\n        },\n        states: {\n          normal: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          hover: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          active: {\n            allowMultipleDataPointsSelection: false,\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          }\n        },\n        tooltip: {\n          style: {\n            fontSize: '12px'\n          },\n          y: {\n            formatter: function formatter(val) {\n              return \"$\" + val + \" thousands\";\n            }\n          }\n        },\n        colors: [baseColor],\n        markers: {\n          colors: [baseColor],\n          strokeColor: [lightColor],\n          strokeWidth: 3\n        }\n      };\n      var chart = new ApexCharts(element, options);\n      chart.render();\n    });\n  }; // Charts widgets\n\n\n  var initChartsWidget1 = function initChartsWidget1() {\n    var element = document.getElementById(\"mv_charts_widget_1_chart\");\n    var height = parseInt(MVUtil.css(element, 'height'));\n    var labelColor = MVUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = MVUtil.getCssVariableValue('--bs-gray-200');\n    var baseColor = MVUtil.getCssVariableValue('--bs-primary');\n    var secondaryColor = MVUtil.getCssVariableValue('--bs-gray-300');\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [44, 55, 57, 56, 61, 58]\n      }, {\n        name: 'Revenue',\n        data: [76, 85, 101, 98, 87, 105]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          borderRadius: 4\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [baseColor, secondaryColor],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var initChartsWidget2 = function initChartsWidget2() {\n    var element = document.getElementById(\"mv_charts_widget_2_chart\");\n    var height = parseInt(MVUtil.css(element, 'height'));\n    var labelColor = MVUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = MVUtil.getCssVariableValue('--bs-gray-200');\n    var baseColor = MVUtil.getCssVariableValue('--bs-warning');\n    var secondaryColor = MVUtil.getCssVariableValue('--bs-gray-300');\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Profit',\n        data: [44, 55, 57, 56, 61, 58]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          borderRadius: 4\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [baseColor, secondaryColor],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var initChartsWidget3 = function initChartsWidget3() {\n    var element = document.getElementById(\"mv_charts_widget_3_chart\");\n    var height = parseInt(MVUtil.css(element, 'height'));\n    var labelColor = MVUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = MVUtil.getCssVariableValue('--bs-gray-200');\n    var baseColor = MVUtil.getCssVariableValue('--bs-info');\n    var lightColor = MVUtil.getCssVariableValue('--bs-light-info');\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 40, 40, 90, 90, 70, 70]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'area',\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [baseColor]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        },\n        crosshairs: {\n          position: 'front',\n          stroke: {\n            color: baseColor,\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [lightColor],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        strokeColor: baseColor,\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var initChartsWidget4 = function initChartsWidget4() {\n    var element = document.getElementById(\"mv_charts_widget_4_chart\");\n    var height = parseInt(MVUtil.css(element, 'height'));\n    var labelColor = MVUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = MVUtil.getCssVariableValue('--bs-gray-200');\n    var baseColor = MVUtil.getCssVariableValue('--bs-success');\n    var baseLightColor = MVUtil.getCssVariableValue('--bs-light-success');\n    var secondaryColor = MVUtil.getCssVariableValue('--bs-warning');\n    var secondaryLightColor = MVUtil.getCssVariableValue('--bs-light-warning');\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [60, 50, 80, 40, 100, 60]\n      }, {\n        name: 'Revenue',\n        data: [70, 60, 110, 40, 50, 70]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'area',\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth'\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        },\n        crosshairs: {\n          position: 'front',\n          stroke: {\n            color: labelColor,\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [baseColor, secondaryColor],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        colors: [baseLightColor, secondaryLightColor],\n        strokeColor: [baseLightColor, secondaryLightColor],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var initChartsWidget5 = function initChartsWidget5() {\n    var element = document.getElementById(\"mv_charts_widget_5_chart\");\n    var height = parseInt(MVUtil.css(element, 'height'));\n    var labelColor = MVUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = MVUtil.getCssVariableValue('--bs-gray-200');\n    var baseColor = MVUtil.getCssVariableValue('--bs-primary');\n    var secondaryColor = MVUtil.getCssVariableValue('--bs-info');\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [40, 50, 65, 70, 50, 30]\n      }, {\n        name: 'Revenue',\n        data: [-30, -40, -55, -60, -40, -20]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'bar',\n        stacked: true,\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['12%'],\n          borderRadius: 4\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        min: -80,\n        max: 80,\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [baseColor, secondaryColor],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var initChartsWidget6 = function initChartsWidget6() {\n    var element = document.getElementById(\"mv_charts_widget_6_chart\");\n    var height = parseInt(MVUtil.css(element, 'height'));\n    var labelColor = MVUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = MVUtil.getCssVariableValue('--bs-gray-200');\n    var baseColor = MVUtil.getCssVariableValue('--bs-primary');\n    var baseLightColor = MVUtil.getCssVariableValue('--bs-light-primary');\n    var secondaryColor = MVUtil.getCssVariableValue('--bs-info');\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        type: 'bar',\n        stacked: true,\n        data: [40, 50, 65, 70, 50, 30]\n      }, {\n        name: 'Revenue',\n        type: 'bar',\n        stacked: true,\n        data: [20, 20, 25, 30, 30, 20]\n      }, {\n        name: 'Expenses',\n        type: 'area',\n        data: [50, 80, 60, 90, 50, 70]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        stacked: true,\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          stacked: true,\n          horizontal: false,\n          borderRadius: 4,\n          columnWidth: ['12%']\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        max: 120,\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [baseColor, secondaryColor, baseLightColor],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var initChartsWidget7 = function initChartsWidget7() {\n    var element = document.getElementById(\"mv_charts_widget_7_chart\");\n    var height = parseInt(MVUtil.css(element, 'height'));\n    var labelColor = MVUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = MVUtil.getCssVariableValue('--bs-gray-200');\n    var strokeColor = MVUtil.getCssVariableValue('--bs-gray-300');\n    var color1 = MVUtil.getCssVariableValue('--bs-warning');\n    var color1Light = MVUtil.getCssVariableValue('--bs-light-warning');\n    var color2 = MVUtil.getCssVariableValue('--bs-success');\n    var color2Light = MVUtil.getCssVariableValue('--bs-light-success');\n    var color3 = MVUtil.getCssVariableValue('--bs-primary');\n    var color3Light = MVUtil.getCssVariableValue('--bs-light-primary');\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 30, 50, 50, 35, 35]\n      }, {\n        name: 'Revenue',\n        data: [55, 20, 20, 20, 70, 70]\n      }, {\n        name: 'Expenses',\n        data: [60, 60, 40, 40, 30, 30]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 2,\n        colors: [color1, 'transparent', 'transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: strokeColor,\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false,\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [color1, color2, color3],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        colors: [color1Light, color2Light, color3Light],\n        strokeColor: [color1, color2, color3],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var initChartsWidget8 = function initChartsWidget8() {\n    var element = document.getElementById(\"mv_charts_widget_8_chart\");\n    var height = parseInt(MVUtil.css(element, 'height'));\n    var labelColor = MVUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = MVUtil.getCssVariableValue('--bs-gray-200');\n    var strokeColor = MVUtil.getCssVariableValue('--bs-gray-300');\n    var color1 = MVUtil.getCssVariableValue('--bs-warning');\n    var color1Light = MVUtil.getCssVariableValue('--bs-light-warning');\n    var color2 = MVUtil.getCssVariableValue('--bs-success');\n    var color2Light = MVUtil.getCssVariableValue('--bs-light-success');\n    var color3 = MVUtil.getCssVariableValue('--bs-primary');\n    var color3Light = MVUtil.getCssVariableValue('--bs-light-primary');\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 30, 50, 50, 35, 35]\n      }, {\n        name: 'Revenue',\n        data: [55, 20, 20, 20, 70, 70]\n      }, {\n        name: 'Expenses',\n        data: [60, 60, 40, 40, 30, 30]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 2,\n        colors: [color1, color2, color3]\n      },\n      xaxis: {\n        x: 0,\n        offsetX: 0,\n        offsetY: 0,\n        padding: {\n          left: 0,\n          right: 0,\n          top: 0\n        },\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: strokeColor,\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        y: 0,\n        offsetX: 0,\n        offsetY: 0,\n        padding: {\n          left: 0,\n          right: 0\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [color1Light, color2Light, color3Light],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        padding: {\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0\n        }\n      },\n      markers: {\n        colors: [color1, color2, color3],\n        strokeColor: [color1, color2, color3],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  }; // Mixed widgets\n\n\n  var initMixedWidget2 = function initMixedWidget2() {\n    var charts = document.querySelectorAll('.mixed-widget-2-chart');\n    var color;\n    var strokeColor;\n    var height;\n    var labelColor = MVUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = MVUtil.getCssVariableValue('--bs-gray-200');\n    var options;\n    var chart;\n    [].slice.call(charts).map(function (element) {\n      height = parseInt(MVUtil.css(element, 'height'));\n      color = MVUtil.getCssVariableValue('--bs-' + element.getAttribute(\"data-mv-color\"));\n      strokeColor = MVUtil.colorDarken(color, 15);\n      options = {\n        series: [{\n          name: 'Visitors',\n          data: [30, 45, 32, 50, 40, 40, 40]\n        }],\n        chart: {\n          fontFamily: 'inherit',\n          type: 'area',\n          height: height,\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          },\n          sparkline: {\n            enabled: true\n          },\n          dropShadow: {\n            enabled: true,\n            enabledOnSeries: undefined,\n            top: 5,\n            left: 0,\n            blur: 3,\n            color: strokeColor,\n            opacity: 0.5\n          }\n        },\n        plotOptions: {},\n        legend: {\n          show: false\n        },\n        dataLabels: {\n          enabled: false\n        },\n        fill: {\n          type: 'solid',\n          opacity: 0\n        },\n        stroke: {\n          curve: 'smooth',\n          show: true,\n          width: 3,\n          colors: [strokeColor]\n        },\n        xaxis: {\n          categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          },\n          crosshairs: {\n            show: false,\n            position: 'front',\n            stroke: {\n              color: borderColor,\n              width: 1,\n              dashArray: 3\n            }\n          }\n        },\n        yaxis: {\n          min: 0,\n          max: 80,\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          }\n        },\n        states: {\n          normal: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          hover: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          active: {\n            allowMultipleDataPointsSelection: false,\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          }\n        },\n        tooltip: {\n          style: {\n            fontSize: '12px'\n          },\n          y: {\n            formatter: function formatter(val) {\n              return \"\" + val + \"\";\n            }\n          },\n          marker: {\n            show: false\n          }\n        },\n        colors: ['transparent'],\n        markers: {\n          colors: [color],\n          strokeColor: [strokeColor],\n          strokeWidth: 3\n        }\n      };\n      chart = new ApexCharts(element, options);\n      chart.render();\n    });\n  };\n\n  var initMixedWidget3 = function initMixedWidget3() {\n    var charts = document.querySelectorAll('.mixed-widget-3-chart');\n    [].slice.call(charts).map(function (element) {\n      var height = parseInt(MVUtil.css(element, 'height'));\n\n      if (!element) {\n        return;\n      }\n\n      var color = element.getAttribute('data-mv-chart-color');\n      var labelColor = MVUtil.getCssVariableValue('--bs-' + 'gray-800');\n      var strokeColor = MVUtil.getCssVariableValue('--bs-' + 'gray-300');\n      var baseColor = MVUtil.getCssVariableValue('--bs-' + color);\n      var lightColor = MVUtil.getCssVariableValue('--bs-light-' + color);\n      var options = {\n        series: [{\n          name: 'Net Profit',\n          data: [30, 25, 45, 30, 55, 55]\n        }],\n        chart: {\n          fontFamily: 'inherit',\n          type: 'area',\n          height: height,\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          },\n          sparkline: {\n            enabled: true\n          }\n        },\n        plotOptions: {},\n        legend: {\n          show: false\n        },\n        dataLabels: {\n          enabled: false\n        },\n        fill: {\n          type: 'solid',\n          opacity: 1\n        },\n        stroke: {\n          curve: 'smooth',\n          show: true,\n          width: 3,\n          colors: [baseColor]\n        },\n        xaxis: {\n          categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          },\n          crosshairs: {\n            show: false,\n            position: 'front',\n            stroke: {\n              color: strokeColor,\n              width: 1,\n              dashArray: 3\n            }\n          },\n          tooltip: {\n            enabled: true,\n            formatter: undefined,\n            offsetY: 0,\n            style: {\n              fontSize: '12px'\n            }\n          }\n        },\n        yaxis: {\n          min: 0,\n          max: 60,\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          }\n        },\n        states: {\n          normal: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          hover: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          active: {\n            allowMultipleDataPointsSelection: false,\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          }\n        },\n        tooltip: {\n          style: {\n            fontSize: '12px'\n          },\n          y: {\n            formatter: function formatter(val) {\n              return \"$\" + val + \" thousands\";\n            }\n          }\n        },\n        colors: [lightColor],\n        markers: {\n          colors: [lightColor],\n          strokeColor: [baseColor],\n          strokeWidth: 3\n        }\n      };\n      var chart = new ApexCharts(element, options);\n      chart.render();\n    });\n  };\n\n  var initMixedWidget4 = function initMixedWidget4() {\n    var charts = document.querySelectorAll('.mixed-widget-4-chart');\n    [].slice.call(charts).map(function (element) {\n      var height = parseInt(MVUtil.css(element, 'height'));\n\n      if (!element) {\n        return;\n      }\n\n      var color = element.getAttribute('data-mv-chart-color');\n      var baseColor = MVUtil.getCssVariableValue('--bs-' + color);\n      var lightColor = MVUtil.getCssVariableValue('--bs-light-' + color);\n      var labelColor = MVUtil.getCssVariableValue('--bs-' + 'gray-700');\n      var options = {\n        series: [74],\n        chart: {\n          fontFamily: 'inherit',\n          height: height,\n          type: 'radialBar'\n        },\n        plotOptions: {\n          radialBar: {\n            hollow: {\n              margin: 0,\n              size: \"65%\"\n            },\n            dataLabels: {\n              showOn: \"always\",\n              name: {\n                show: false,\n                fontWeight: '700'\n              },\n              value: {\n                color: labelColor,\n                fontSize: \"30px\",\n                fontWeight: '700',\n                offsetY: 12,\n                show: true,\n                formatter: function formatter(val) {\n                  return val + '%';\n                }\n              }\n            },\n            track: {\n              background: lightColor,\n              strokeWidth: '100%'\n            }\n          }\n        },\n        colors: [baseColor],\n        stroke: {\n          lineCap: \"round\"\n        },\n        labels: [\"Progress\"]\n      };\n      var chart = new ApexCharts(element, options);\n      chart.render();\n    });\n  };\n\n  var initMixedWidget5 = function initMixedWidget5() {\n    var charts = document.querySelectorAll('.mixed-widget-5-chart');\n    [].slice.call(charts).map(function (element) {\n      var height = parseInt(MVUtil.css(element, 'height'));\n\n      if (!element) {\n        return;\n      }\n\n      var color = element.getAttribute('data-mv-chart-color');\n      var labelColor = MVUtil.getCssVariableValue('--bs-' + 'gray-800');\n      var strokeColor = MVUtil.getCssVariableValue('--bs-' + 'gray-300');\n      var baseColor = MVUtil.getCssVariableValue('--bs-' + color);\n      var lightColor = MVUtil.getCssVariableValue('--bs-light-' + color);\n      var options = {\n        series: [{\n          name: 'Net Profit',\n          data: [30, 30, 60, 25, 25, 40]\n        }],\n        chart: {\n          fontFamily: 'inherit',\n          type: 'area',\n          height: height,\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          },\n          sparkline: {\n            enabled: true\n          }\n        },\n        plotOptions: {},\n        legend: {\n          show: false\n        },\n        dataLabels: {\n          enabled: false\n        },\n        fill: {\n          type: 'solid',\n          opacity: 1\n        },\n        fill1: {\n          type: 'gradient',\n          opacity: 1,\n          gradient: {\n            type: \"vertical\",\n            shadeIntensity: 0.5,\n            gradientToColors: undefined,\n            inverseColors: true,\n            opacityFrom: 1,\n            opacityTo: 0.375,\n            stops: [25, 50, 100],\n            colorStops: []\n          }\n        },\n        stroke: {\n          curve: 'smooth',\n          show: true,\n          width: 3,\n          colors: [baseColor]\n        },\n        xaxis: {\n          categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          },\n          crosshairs: {\n            show: false,\n            position: 'front',\n            stroke: {\n              color: strokeColor,\n              width: 1,\n              dashArray: 3\n            }\n          },\n          tooltip: {\n            enabled: true,\n            formatter: undefined,\n            offsetY: 0,\n            style: {\n              fontSize: '12px'\n            }\n          }\n        },\n        yaxis: {\n          min: 0,\n          max: 65,\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          }\n        },\n        states: {\n          normal: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          hover: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          active: {\n            allowMultipleDataPointsSelection: false,\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          }\n        },\n        tooltip: {\n          style: {\n            fontSize: '12px'\n          },\n          y: {\n            formatter: function formatter(val) {\n              return \"$\" + val + \" thousands\";\n            }\n          }\n        },\n        colors: [lightColor],\n        markers: {\n          colors: [lightColor],\n          strokeColor: [baseColor],\n          strokeWidth: 3\n        }\n      };\n      var chart = new ApexCharts(element, options);\n      chart.render();\n    });\n  };\n\n  var initMixedWidget6 = function initMixedWidget6() {\n    var charts = document.querySelectorAll('.mixed-widget-6-chart');\n    [].slice.call(charts).map(function (element) {\n      var height = parseInt(MVUtil.css(element, 'height'));\n\n      if (!element) {\n        return;\n      }\n\n      var color = element.getAttribute('data-mv-chart-color');\n      var labelColor = MVUtil.getCssVariableValue('--bs-' + 'gray-800');\n      var strokeColor = MVUtil.getCssVariableValue('--bs-' + 'gray-300');\n      var baseColor = MVUtil.getCssVariableValue('--bs-' + color);\n      var lightColor = MVUtil.getCssVariableValue('--bs-light-' + color);\n      var options = {\n        series: [{\n          name: 'Net Profit',\n          data: [30, 25, 45, 30, 55, 55]\n        }],\n        chart: {\n          fontFamily: 'inherit',\n          type: 'area',\n          height: height,\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          },\n          sparkline: {\n            enabled: true\n          }\n        },\n        plotOptions: {},\n        legend: {\n          show: false\n        },\n        dataLabels: {\n          enabled: false\n        },\n        fill: {\n          type: 'solid',\n          opacity: 1\n        },\n        stroke: {\n          curve: 'smooth',\n          show: true,\n          width: 3,\n          colors: [baseColor]\n        },\n        xaxis: {\n          categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          },\n          crosshairs: {\n            show: false,\n            position: 'front',\n            stroke: {\n              color: strokeColor,\n              width: 1,\n              dashArray: 3\n            }\n          },\n          tooltip: {\n            enabled: true,\n            formatter: undefined,\n            offsetY: 0,\n            style: {\n              fontSize: '12px'\n            }\n          }\n        },\n        yaxis: {\n          min: 0,\n          max: 60,\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          }\n        },\n        states: {\n          normal: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          hover: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          active: {\n            allowMultipleDataPointsSelection: false,\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          }\n        },\n        tooltip: {\n          style: {\n            fontSize: '12px'\n          },\n          y: {\n            formatter: function formatter(val) {\n              return \"$\" + val + \" thousands\";\n            }\n          }\n        },\n        colors: [lightColor],\n        markers: {\n          colors: [lightColor],\n          strokeColor: [baseColor],\n          strokeWidth: 3\n        }\n      };\n      var chart = new ApexCharts(element, options);\n      chart.render();\n    });\n  };\n\n  var initMixedWidget7 = function initMixedWidget7() {\n    var charts = document.querySelectorAll('.mixed-widget-7-chart');\n    [].slice.call(charts).map(function (element) {\n      var height = parseInt(MVUtil.css(element, 'height'));\n\n      if (!element) {\n        return;\n      }\n\n      var color = element.getAttribute('data-mv-chart-color');\n      var labelColor = MVUtil.getCssVariableValue('--bs-' + 'gray-800');\n      var strokeColor = MVUtil.getCssVariableValue('--bs-' + 'gray-300');\n      var baseColor = MVUtil.getCssVariableValue('--bs-' + color);\n      var lightColor = MVUtil.getCssVariableValue('--bs-light-' + color);\n      var options = {\n        series: [{\n          name: 'Visitors',\n          data: [15, 25, 15, 40, 20, 50]\n        }],\n        chart: {\n          fontFamily: 'inherit',\n          type: 'area',\n          height: height,\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          },\n          sparkline: {\n            enabled: true\n          }\n        },\n        plotOptions: {},\n        legend: {\n          show: false\n        },\n        dataLabels: {\n          enabled: false\n        },\n        fill: {\n          type: 'solid',\n          opacity: 1\n        },\n        stroke: {\n          curve: 'smooth',\n          show: true,\n          width: 3,\n          colors: [baseColor]\n        },\n        xaxis: {\n          categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          },\n          crosshairs: {\n            show: false,\n            position: 'front',\n            stroke: {\n              color: strokeColor,\n              width: 1,\n              dashArray: 3\n            }\n          },\n          tooltip: {\n            enabled: true,\n            formatter: undefined,\n            offsetY: 0,\n            style: {\n              fontSize: '12px'\n            }\n          }\n        },\n        yaxis: {\n          min: 0,\n          max: 60,\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          }\n        },\n        states: {\n          normal: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          hover: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          active: {\n            allowMultipleDataPointsSelection: false,\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          }\n        },\n        tooltip: {\n          style: {\n            fontSize: '12px'\n          },\n          y: {\n            formatter: function formatter(val) {\n              return val + \" served\";\n            }\n          }\n        },\n        colors: [lightColor],\n        markers: {\n          colors: [lightColor],\n          strokeColor: [baseColor],\n          strokeWidth: 3\n        }\n      };\n      var chart = new ApexCharts(element, options);\n      chart.render();\n    });\n  };\n\n  var initMixedWidget10 = function initMixedWidget10() {\n    var charts = document.querySelectorAll('.mixed-widget-10-chart');\n    var color;\n    var height;\n    var labelColor = MVUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = MVUtil.getCssVariableValue('--bs-gray-200');\n    var baseLightColor;\n    var secondaryColor = MVUtil.getCssVariableValue('--bs-gray-300');\n    var baseColor;\n    var options;\n    var chart;\n    [].slice.call(charts).map(function (element) {\n      color = element.getAttribute(\"data-mv-color\");\n      height = parseInt(MVUtil.css(element, 'height'));\n      baseColor = MVUtil.getCssVariableValue('--bs-' + color);\n      options = {\n        series: [{\n          name: 'Complete',\n          data: [50, 60, 70, 80, 60, 50, 70, 60]\n        }, {\n          name: 'Cancelled',\n          data: [5, 6, 27, 8, 26, 5, 7, 16]\n        }],\n        chart: {\n          fontFamily: 'inherit',\n          type: 'bar',\n          height: height,\n          toolbar: {\n            show: false\n          }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: false,\n            columnWidth: ['50%'],\n            borderRadius: 4\n          }\n        },\n        legend: {\n          show: false\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          show: true,\n          width: 2,\n          colors: ['transparent']\n        },\n        xaxis: {\n          categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep'],\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          }\n        },\n        yaxis: {\n          y: 0,\n          offsetX: 0,\n          offsetY: 0,\n          labels: {\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          }\n        },\n        fill: {\n          type: 'solid'\n        },\n        states: {\n          normal: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          hover: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          active: {\n            allowMultipleDataPointsSelection: false,\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          }\n        },\n        tooltip: {\n          style: {\n            fontSize: '12px'\n          },\n          y: {\n            formatter: function formatter(val) {\n              return val + \" persons\";\n            }\n          }\n        },\n        colors: [baseColor, secondaryColor],\n        grid: {\n          padding: {\n            top: 10\n          },\n          borderColor: borderColor,\n          strokeDashArray: 4,\n          yaxis: {\n            lines: {\n              show: true\n            }\n          }\n        }\n      };\n      chart = new ApexCharts(element, options);\n      chart.render();\n    });\n  };\n\n  var initMixedWidget12 = function initMixedWidget12() {\n    var charts = document.querySelectorAll('.mixed-widget-12-chart');\n    var color;\n    var strokeColor;\n    var height;\n    var labelColor = MVUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = MVUtil.getCssVariableValue('--bs-gray-200');\n    var options;\n    var chart;\n    [].slice.call(charts).map(function (element) {\n      height = parseInt(MVUtil.css(element, 'height'));\n      var options = {\n        series: [{\n          name: 'Net Profit',\n          data: [35, 65, 75, 55, 45, 60, 55]\n        }, {\n          name: 'Revenue',\n          data: [40, 70, 80, 60, 50, 65, 60]\n        }],\n        chart: {\n          fontFamily: 'inherit',\n          type: 'bar',\n          height: height,\n          toolbar: {\n            show: false\n          },\n          sparkline: {\n            enabled: true\n          }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: false,\n            columnWidth: ['30%'],\n            borderRadius: 2\n          }\n        },\n        legend: {\n          show: false\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          show: true,\n          width: 1,\n          colors: ['transparent']\n        },\n        xaxis: {\n          categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          }\n        },\n        yaxis: {\n          min: 0,\n          max: 100,\n          labels: {\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          }\n        },\n        fill: {\n          type: ['solid', 'solid'],\n          opacity: [0.25, 1]\n        },\n        states: {\n          normal: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          hover: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          active: {\n            allowMultipleDataPointsSelection: false,\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          }\n        },\n        tooltip: {\n          style: {\n            fontSize: '12px'\n          },\n          y: {\n            formatter: function formatter(val) {\n              return \"$\" + val + \" thousands\";\n            }\n          },\n          marker: {\n            show: false\n          }\n        },\n        colors: ['#ffffff', '#ffffff'],\n        grid: {\n          borderColor: borderColor,\n          strokeDashArray: 4,\n          yaxis: {\n            lines: {\n              show: true\n            }\n          },\n          padding: {\n            left: 20,\n            right: 20\n          }\n        }\n      };\n      var chart = new ApexCharts(element, options);\n      chart.render();\n    });\n  };\n\n  var initMixedWidget13 = function initMixedWidget13() {\n    var height;\n    var charts = document.querySelectorAll('.mixed-widget-13-chart');\n    [].slice.call(charts).map(function (element) {\n      height = parseInt(MVUtil.css(element, 'height'));\n\n      if (!element) {\n        return;\n      }\n\n      var labelColor = MVUtil.getCssVariableValue('--bs-' + 'gray-800');\n      var strokeColor = MVUtil.getCssVariableValue('--bs-' + 'gray-300');\n      var options = {\n        series: [{\n          name: 'Net Profit',\n          data: [15, 25, 15, 40, 20, 50]\n        }],\n        grid: {\n          show: false,\n          padding: {\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0\n          }\n        },\n        chart: {\n          fontFamily: 'inherit',\n          type: 'area',\n          height: height,\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          },\n          sparkline: {\n            enabled: true\n          }\n        },\n        plotOptions: {},\n        legend: {\n          show: false\n        },\n        dataLabels: {\n          enabled: false\n        },\n        fill: {\n          type: 'gradient',\n          gradient: {\n            opacityFrom: 0.4,\n            opacityTo: 0,\n            stops: [20, 120, 120, 120]\n          }\n        },\n        stroke: {\n          curve: 'smooth',\n          show: true,\n          width: 3,\n          colors: ['#FFFFFF']\n        },\n        xaxis: {\n          categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          },\n          crosshairs: {\n            show: false,\n            position: 'front',\n            stroke: {\n              color: strokeColor,\n              width: 1,\n              dashArray: 3\n            }\n          },\n          tooltip: {\n            enabled: true,\n            formatter: undefined,\n            offsetY: 0,\n            style: {\n              fontSize: '12px'\n            }\n          }\n        },\n        yaxis: {\n          min: 0,\n          max: 60,\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          }\n        },\n        states: {\n          normal: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          hover: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          active: {\n            allowMultipleDataPointsSelection: false,\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          }\n        },\n        tooltip: {\n          style: {\n            fontSize: '12px'\n          },\n          y: {\n            formatter: function formatter(val) {\n              return \"$\" + val + \" thousands\";\n            }\n          }\n        },\n        colors: ['#ffffff'],\n        markers: {\n          colors: [labelColor],\n          strokeColor: [strokeColor],\n          strokeWidth: 3\n        }\n      };\n      var chart = new ApexCharts(element, options);\n      chart.render();\n    });\n  };\n\n  var initMixedWidget14 = function initMixedWidget14() {\n    var charts = document.querySelectorAll('.mixed-widget-14-chart');\n    var options;\n    var chart;\n    var height;\n    [].slice.call(charts).map(function (element) {\n      height = parseInt(MVUtil.css(element, 'height'));\n      var labelColor = MVUtil.getCssVariableValue('--bs-' + 'gray-800');\n      options = {\n        series: [{\n          name: 'Inflation',\n          data: [1, 2.1, 1, 2.1, 4.1, 6.1, 4.1, 4.1, 2.1, 4.1, 2.1, 3.1, 1, 1, 2.1]\n        }],\n        chart: {\n          fontFamily: 'inherit',\n          height: height,\n          type: 'bar',\n          toolbar: {\n            show: false\n          }\n        },\n        grid: {\n          show: false,\n          padding: {\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0\n          }\n        },\n        colors: ['#ffffff'],\n        plotOptions: {\n          bar: {\n            borderRadius: 2.5,\n            dataLabels: {\n              position: 'top' // top, center, bottom\n\n            },\n            columnWidth: '20%'\n          }\n        },\n        dataLabels: {\n          enabled: false,\n          formatter: function formatter(val) {\n            return val + \"%\";\n          },\n          offsetY: -20,\n          style: {\n            fontSize: '12px',\n            colors: [\"#304758\"]\n          }\n        },\n        xaxis: {\n          labels: {\n            show: false\n          },\n          categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"Jan\", \"Feb\", \"Mar\"],\n          position: 'top',\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          crosshairs: {\n            show: false\n          },\n          tooltip: {\n            enabled: false\n          }\n        },\n        yaxis: {\n          show: false,\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false,\n            background: labelColor\n          },\n          labels: {\n            show: false,\n            formatter: function formatter(val) {\n              return val + \"%\";\n            }\n          }\n        }\n      };\n      chart = new ApexCharts(element, options);\n      chart.render();\n    });\n  };\n\n  var initMixedWidget16 = function initMixedWidget16() {\n    var element = document.getElementById(\"mv_charts_mixed_widget_16_chart\");\n    var height = parseInt(MVUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      labels: [\"Total Members\"],\n      series: [74],\n      chart: {\n        fontFamily: 'inherit',\n        height: height,\n        type: 'radialBar',\n        offsetY: 0\n      },\n      plotOptions: {\n        radialBar: {\n          startAngle: -90,\n          endAngle: 90,\n          hollow: {\n            margin: 0,\n            size: \"70%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: true,\n              fontSize: \"13px\",\n              fontWeight: \"700\",\n              offsetY: -5,\n              color: MVUtil.getCssVariableValue('--bs-gray-500')\n            },\n            value: {\n              color: MVUtil.getCssVariableValue('--bs-gray-700'),\n              fontSize: \"30px\",\n              fontWeight: \"700\",\n              offsetY: -40,\n              show: true\n            }\n          },\n          track: {\n            background: MVUtil.getCssVariableValue('--bs-light-primary'),\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: [MVUtil.getCssVariableValue('--bs-primary')],\n      stroke: {\n        lineCap: \"round\"\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  }; // Feeds Widgets\n\n\n  var initFeedWidget1 = function initFeedWidget1() {\n    var formEl = document.querySelector(\"#mv_forms_widget_1_form\");\n    var editorId = 'mv_forms_widget_1_editor';\n\n    if (!formEl) {\n      return;\n    } // init editor\n\n\n    var options = {\n      modules: {\n        toolbar: {\n          container: \"#mv_forms_widget_1_editor_toolbar\"\n        }\n      },\n      placeholder: 'What is on your mind ?',\n      theme: 'snow'\n    };\n\n    if (!formEl) {\n      return;\n    } // Init editor\n\n\n    var editorObj = new Quill('#' + editorId, options);\n  };\n\n  var initFeedsWidget4 = function initFeedsWidget4() {\n    var btn = document.querySelector('#mv_widget_5_load_more_btn');\n    var widget5 = document.querySelector('#mv_widget_5');\n\n    if (btn) {\n      btn.addEventListener('click', function (e) {\n        e.preventDefault();\n        btn.setAttribute('data-mv-indicator', 'on');\n        setTimeout(function () {\n          btn.removeAttribute('data-mv-indicator');\n          widget5.classList.remove('d-none');\n          btn.classList.add('d-none');\n          MVUtil.scrollTo(widget5, 200);\n        }, 2000);\n      });\n    }\n  }; // Follow button\n\n\n  var initUserFollowButton = function initUserFollowButton() {\n    var follow = document.querySelector('#mv_user_follow_button');\n\n    if (follow) {\n      follow.addEventListener('click', function (e) {\n        // Prevent default action\n        e.preventDefault(); // Show indicator\n\n        follow.setAttribute('data-mv-indicator', 'on'); // Disable button to avoid multiple click\n\n        follow.disabled = true; // Check button state\n\n        if (follow.classList.contains(\"btn-success\")) {\n          setTimeout(function () {\n            follow.removeAttribute('data-mv-indicator');\n            follow.classList.remove(\"btn-success\");\n            follow.classList.add(\"btn-light\");\n            follow.querySelector(\".svg-icon\").classList.add(\"d-none\");\n            follow.querySelector(\".indicator-label\").innerHTML = 'Follow';\n            follow.disabled = false;\n          }, 1500);\n        } else {\n          setTimeout(function () {\n            follow.removeAttribute('data-mv-indicator');\n            follow.classList.add(\"btn-success\");\n            follow.classList.remove(\"btn-light\");\n            follow.querySelector(\".svg-icon\").classList.remove(\"d-none\");\n            follow.querySelector(\".indicator-label\").innerHTML = 'Following';\n            follow.disabled = false;\n          }, 1000);\n        }\n      });\n    }\n  }; // Calendar\n\n\n  var initCalendarWidget1 = function initCalendarWidget1() {\n    if (typeof FullCalendar === 'undefined' || !document.querySelector('#mv_calendar_widget_1')) {\n      return;\n    }\n\n    var todayDate = moment().startOf('day');\n    var YM = todayDate.format('YYYY-MM');\n    var YESTERDAY = todayDate.clone().subtract(1, 'day').format('YYYY-MM-DD');\n    var TODAY = todayDate.format('YYYY-MM-DD');\n    var TOMORROW = todayDate.clone().add(1, 'day').format('YYYY-MM-DD');\n    var calendarEl = document.getElementById('mv_calendar_widget_1');\n    var calendar = new FullCalendar.Calendar(calendarEl, {\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n      },\n      height: 800,\n      contentHeight: 780,\n      aspectRatio: 3,\n      // see: https://fullcalendar.io/docs/aspectRatio\n      nowIndicator: true,\n      now: TODAY + 'T09:25:00',\n      // just for demo\n      views: {\n        dayGridMonth: {\n          buttonText: 'month'\n        },\n        timeGridWeek: {\n          buttonText: 'week'\n        },\n        timeGridDay: {\n          buttonText: 'day'\n        }\n      },\n      initialView: 'dayGridMonth',\n      initialDate: TODAY,\n      editable: true,\n      dayMaxEvents: true,\n      // allow \"more\" link when too many events\n      navLinks: true,\n      events: [{\n        title: 'All Day Event',\n        start: YM + '-01',\n        description: 'Toto lorem ipsum dolor sit incid idunt ut',\n        className: \"fc-event-danger fc-event-solid-warning\"\n      }, {\n        title: 'Reporting',\n        start: YM + '-14T13:30:00',\n        description: 'Lorem ipsum dolor incid idunt ut labore',\n        end: YM + '-14',\n        className: \"fc-event-success\"\n      }, {\n        title: 'Company Trip',\n        start: YM + '-02',\n        description: 'Lorem ipsum dolor sit tempor incid',\n        end: YM + '-03',\n        className: \"fc-event-primary\"\n      }, {\n        title: 'ICT Expo 2017 - Product Release',\n        start: YM + '-03',\n        description: 'Lorem ipsum dolor sit tempor inci',\n        end: YM + '-05',\n        className: \"fc-event-light fc-event-solid-primary\"\n      }, {\n        title: 'Dinner',\n        start: YM + '-12',\n        description: 'Lorem ipsum dolor sit amet, conse ctetur',\n        end: YM + '-10'\n      }, {\n        id: 999,\n        title: 'Repeating Event',\n        start: YM + '-09T16:00:00',\n        description: 'Lorem ipsum dolor sit ncididunt ut labore',\n        className: \"fc-event-danger\"\n      }, {\n        id: 1000,\n        title: 'Repeating Event',\n        description: 'Lorem ipsum dolor sit amet, labore',\n        start: YM + '-16T16:00:00'\n      }, {\n        title: 'Conference',\n        start: YESTERDAY,\n        end: TOMORROW,\n        description: 'Lorem ipsum dolor eius mod tempor labore',\n        className: \"fc-event-primary\"\n      }, {\n        title: 'Meeting',\n        start: TODAY + 'T10:30:00',\n        end: TODAY + 'T12:30:00',\n        description: 'Lorem ipsum dolor eiu idunt ut labore'\n      }, {\n        title: 'Lunch',\n        start: TODAY + 'T12:00:00',\n        className: \"fc-event-info\",\n        description: 'Lorem ipsum dolor sit amet, ut labore'\n      }, {\n        title: 'Meeting',\n        start: TODAY + 'T14:30:00',\n        className: \"fc-event-warning\",\n        description: 'Lorem ipsum conse ctetur adipi scing'\n      }, {\n        title: 'Happy Hour',\n        start: TODAY + 'T17:30:00',\n        className: \"fc-event-info\",\n        description: 'Lorem ipsum dolor sit amet, conse ctetur'\n      }, {\n        title: 'Dinner',\n        start: TOMORROW + 'T05:00:00',\n        className: \"fc-event-solid-danger fc-event-light\",\n        description: 'Lorem ipsum dolor sit ctetur adipi scing'\n      }, {\n        title: 'Birthday Party',\n        start: TOMORROW + 'T07:00:00',\n        className: \"fc-event-primary\",\n        description: 'Lorem ipsum dolor sit amet, scing'\n      }, {\n        title: 'Click for Google',\n        url: 'http://google.com/',\n        start: YM + '-28',\n        className: \"fc-event-solid-info fc-event-light\",\n        description: 'Lorem ipsum dolor sit amet, labore'\n      }]\n    });\n    calendar.render();\n  }; // Dark mode toggler\n\n\n  var initDarkModeToggle = function initDarkModeToggle() {\n    var toggle = document.querySelector('#mv_user_menu_dark_mode_toggle');\n\n    if (toggle) {\n      toggle.addEventListener('click', function () {\n        window.location.href = this.getAttribute('data-mv-url');\n      });\n    }\n  };\n\n  var initDisplaySettings = function initDisplaySettings() {}; // Public methods\n\n\n  return {\n    init: function init() {\n      // Dark Mode\n      initDarkModeToggle(); // Statistics widgets\n\n      initStatisticsWidget3();\n      initStatisticsWidget4(); // Charts widgets\n\n      initChartsWidget1();\n      initChartsWidget2();\n      initChartsWidget3();\n      initChartsWidget4();\n      initChartsWidget5();\n      initChartsWidget6();\n      initChartsWidget7();\n      initChartsWidget8(); // Mixed widgets\n\n      initMixedWidget2();\n      initMixedWidget3();\n      initMixedWidget4();\n      initMixedWidget5();\n      initMixedWidget6();\n      initMixedWidget7();\n      initMixedWidget10();\n      initMixedWidget12();\n      initMixedWidget13();\n      initMixedWidget14();\n      initMixedWidget16(); // Feeds\n      // initFeedWidget1();\n      // initFeedsWidget4();\n      // Follow button\n      // initUserFollowButton();\n      // Calendar\n\n      initCalendarWidget1();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = MVWidgets;\n} // On document ready\n\n\nMVUtil.onDOMContentLoaded(function () {\n  MVWidgets.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/extended/js/custom/widgets.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/extended/js/custom/widgets.js");
/******/ 	
/******/ })()
;